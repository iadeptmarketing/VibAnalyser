//DA_1	No over lap of y axis string, values and graph	    cosmetic	    minor	16-02-2010 4:27
//DA_2	Side Band Values and its graphical representation	code related	major	22-02-2010 4:17
//DA_3  (VibAnalyser)Click on secound time at open button open folder dialog box not open.(vista OS)    oprating system related minor   30-03-2010  Amit Jain
//DA_4	(VibAnalyser)If the instrument is not connected and click on read from instrument button, it display .Net error (Vista OS)	oprating system related	minor	30-03-2010

//DA_6  minor   Code Related    Amit Jain  31-03-2010
//DA_7   code related    minor    Amit Jain  30-03-2010

//DA_9  Code Related    Major   Amit Jain  30-03-2010

//DA_11    Code Related    minor   Amit Jain  30-03-2010
//DA_12 minor   Code Related    Amit Jain  31-03-2010


//DA_15 minor   Code Related    Amit Jain  31-03-2010   


//Amit Jain    DA_18	open analyser then click the bandalarm after that take any cursor ,cursor is not moving. 	code related	minor 	2-4-2010
//Amit Jain    DA_19	open analyser then take cursor, cursor is moving after that click the bandalarm then  take any cursor ,cursor is not moving. 	code related	minor 	2-4-2010
//Amit Jain    DA_20	Click the Demo2.csv graph convert to FFT after that click the octave then click zoom and create the zoom multiple graph display.	code related	minor 	2-4-2010
//Amit Jain    DA_21	open analyser then click the Demo1.wav after that click the Convert to FFT then application hang (for some time) - Add the progress form.	code related	minor 	2-4-2010
//Amit Jain    DA_22	if I take cepatrum then application also hang for some time, add progress form 	code related	minor 	2-4-2010
//Amit Jain    DA_23	click the demo2.csv file then convert to FFT after that take octave and click the zoom then multi graph display 	code related	minor 	2-4-2010



//Amit Jain    DA_27	if you click Demo2.csv then click the band alarm after that click the zoom and create zoom ,zoom will not create. 	code related	minor 	2-4-2010                                
//Amit Jain    DA_28	if select sidebandTrend then select the cursor ,cursor is not moving	code related	minor 	2-4-2010
//Amit Jain    DA_29	If click the demo and create octave then after click the band alarm ,cursor is display. 	code related	minor 	8-4-2010
//Amit Jain    DA_30	click the demo then click the next ,graph will bold. And it also happened for previous button	code related	minor 	8-4-2010
//Amit Jain    DA_31	create the octave then click the zoom ,create the zoom ,zoom graph displayed	code related	minor 	8-4-2010





//Amit Jain    DA_37	Click exist button on Dongle detection form splash screen not closed	code related	minor 	12-4-2010
//Amit jain    DA_38	click the sidebandtrend single line cursor moves ,but I have not selected any cursor	code related	minor 	12-4-2010
//Amit Jain    DA_39	if we choose trend graph and click the privious button then if display only graph that I have drag on it,not display the original graph	code related	minor 	12-4-2010
//Amit Jain    DA_40	select demo2.csv and click on trend then after drag the demo2.csv file drag	code related	minor 	12-4-2010
//Amit Jain    DA_41 	water fall also create for demo2.csv	code related	minor 	12-4-2010
//Amit Jain    DA_42	Click on demo1.csv then create the cepstrum after that click the band alarm , band alarm generate then again click the cepstrum ,cepstrum generate then click the band alarm ,band alarm  not create.	code related	minor 	12-4-2010
//Amit jain    DA_43	Line cursor is not moving in waterfall graph.	code related	minor	16/4/2010

//Amit Jain    DA_45	click the demo1.csv file after that click the waterfall button then after click the click the demo2.csv file demo2 not focus ,ok I click the waterfall again then after click the demo2 graph not display	code related	minor	16/4/2010


//Amit Jain    DA_48	click the fault frequency ,fault frequency display in graph if click band alarm then fault frequcncy also display in graph when we press key then it visble false	code related	minor	19/4/2010
//Amit Jain    DA_49	click the file(recorder) in list,display after some time ,add progress form	code related	minor	19/4/2010

               
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraTreeList.Nodes;
using System.IO;
using Analyser.Properties;
using System.Drawing.Drawing2D;
using System.Data.OleDb;
using System.Data.Odbc;
using System.Collections;
using System.Drawing.Imaging;
using System.Threading;
using DevExpress.XtraTreeList;
using DevExpress.Skins;
using System.Drawing.Printing;
using System.Runtime.InteropServices;
using System.Xml;
using System.Reflection;
using System.Diagnostics;
using DevExpress.XtraBars;
using DevComponents.DotNetBar;
using iAdeptMain.AllForms;
using OpenNETCF;
using DI_Analyser.Classes;
using DI_Analyser.interfaces;
using DI_Analyser.Forms;
using System.Management;
//using Microsoft.Office.Interop.Excel;
using Analyser.interfaces;
using Analyser.Classes;
using Analyser.Forms;
using Analyser.AllForms;
using Analyser.Reporting;
using Analyser.Graph_Controls;


//disabling Hasp Check  Should be removed **************
namespace DI_Analyser
{
    public partial class Form1 : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        #region RavinderGraphConstants

        bool PanelOneRedraw = false;
        double IntervalOnXGridsThreeDee = 0.0;
        private bool GraphZoomedAlready = false;
        ArrayList DatesSelected = new ArrayList();
        Rectangle PrvSS = new Rectangle(new Point((int) 912 / 2, (int) 808 / 2), new Size(5, 5));
        Rectangle PrvsSS = new Rectangle(new Point((int) 912, (int) 808), new Size((int) 1, (int) 1));
        double HighestValYAxis = 0.0;
        private PointF[] PtsForZoom = null;
        private PointF[] PtsZoomedVals = null;
        int GraphLoopCounts = 0;
        double[] ZommedX = new double[0];
        double[] ZoomedY = new double[0];
        double[] XZoom = null;
        double[] YZoom = null;
        private bool TimeDataAckForZoom = false;
        private int GrpCountForZoom = 0;
        int PrvsMsPstionX = 0;
        int PrvsMsPstionY = 0;
        int LastMsPstionX = 0;
        float PrvsValIndex = 0;
        float LstValIndex = 0;
        double MainYAxisIntervalZoom = 0;
        double MainXAxisIntervalZoom = 0.0;
        int ZommArrCtr = 0;
        private bool Zoom = false;
        int CalCulateGhpDisplayed = 0;
        PointF PrvCr1 = new PointF();
        PointF PrvCr2 = new PointF();
        bool Time = false;
        int SelectedGraph = 0;
        bool CheckSelection = false;
        bool CheckSelectionFwd = false;
        int CtrSelectedCraph = -1;

        int CtrSelectedCraphPrvs = 0;

        //Label alab = new Label();
        private bool AreaPlot = false;
        private string ChoosenType = null;
        int OneFifty = 0;
        int TwoHundred = 0;
        int FourFifty = 0;
        int FourHundred = 0;
        int SixtyTwo = 0;
        int OneSixtyTwo = 0;
        int Thrghty = 0;
        int Fifteen = 0;
        int TwoPointFive = 0;
        int Three = 0;
        int Fifty = 0;
        double MainYAxisInterval = 0;
        double MainXAxisInterval = 0.0;
        double[] XPermanent = new double[0];
        double[] YPermanent = new double[0];
        double[] x = new double[0];
        double[] y = new double[0];
        double[] x1 = new double[0];
        double[] y1 = new double[0];
        double[] x2 = new double[0];
        double[] y2 = new double[0];
        double[] x3 = new double[0];
        double[] y3 = new double[0];
        double[] x4 = new double[0];
        double[] y4 = new double[0];
        double[] x5 = new double[0];
        double[] y5 = new double[0];
        double[] x6 = new double[0];
        double[] y6 = new double[0];
        double[] x7 = new double[0];
        double[] y7 = new double[0];
        double[] XSelected = new double[0];
        double[] YSelected = new double[0];
        private PointF[] PtsExtraZoomed = null;
        private PointF[] Pts = null;
        private PointF[] Pts1 = null;
        private PointF[] Pts2 = null;
        private PointF[] Pts3 = null;
        private PointF[] Pts4 = null;
        private PointF[] Pts5 = null;
        private PointF[] Pts6 = null;
        private PointF[] Pts7 = null;
        private PointF[] PtsSelected = null;
        private PointF[] arrLocts = new PointF[10];

        public delegate void EvntKeyPress();

        public event EvntKeyPress KeyPressForPannel;
        int Ctrc = 0;
        int ThrDCurCtr = 0;
        int PeekCursorCtr = 0;
        double CursorStartInterval = 0.0;
        private int GphCtr = 0;
        PointF[] aatest = new PointF[0];
        int testctr = 0;
        PointF[] Thdpt2 = new PointF[10];
        private bool KillCrs = false;
        private bool SingleCrs = false;
        private bool HarmncCrs = false;
        private bool SideBndCsr = false;
        private bool SideBndCsrRatio = false;
        private bool SideBandTrndDrw = false;
        private bool PeekCursor = false;
        private bool SqureCrs = false;
        private bool LineCursor = false;
        private bool TwDSingleSqrCrs = false;
        private bool TwoDCrossHairCursor = false;
        private bool ThrdSqr = false;
        private bool ThrdLn = false; //
        int BtnOk = 1;

        PointF Prv1 = new PointF();
        PointF Prv2 = new PointF();

        PointF Prvs11 = new PointF();
        PointF Prvs12 = new PointF();
        PointF Prvs21 = new PointF();
        PointF Prvs22 = new PointF();

        PointF pts11 = new PointF();
        PointF pts12 = new PointF();
        PointF pts21 = new PointF();
        PointF pts22 = new PointF();
        int prvtest = 0;


        #endregion

        #region RavinderGraphProperties

        public ArrayList SlctedDates
        {
            get { return DatesSelected; }
            set { DatesSelected = value; }

        }


        public int GraphLoops
        {
            get { return GraphLoopCounts; }
            set { GraphLoopCounts = value; }
        }


        public string GraphType
        {
            get { return ChoosenType; }
            set { ChoosenType = value; }
        }

        public double[] FstLineX
        {
            get { return x; }
            set { x = value; }
        }

        public int CtrSetForThreeDD
        {
            set { GphCtr = value; }
        }

        public double[] FstLineY
        {
            get { return y; }
            set { y = value; }
        }

        public double[] SecondLineX
        {
            get { return x1; }
            set { x1 = value; }
        }

        public double[] SecondLineY
        {
            get { return y1; }
            set { y1 = value; }
        }

        public double[] ThrdLineX
        {
            get { return x2; }
            set { x2 = value; }
        }

        public double[] ThrdLineY
        {
            get { return y2; }
            set { y2 = value; }
        }


        public double[] ForthLineX
        {
            get { return x3; }
            set { x3 = value; }
        }

        public double[] ForthLineY
        {
            get { return y3; }
            set { y3 = value; }
        }

        public double[] FifthLineX
        {
            get { return x4; }
            set { x4 = value; }
        }

        public double[] FifthLineY
        {
            get { return y4; }
            set { y4 = value; }
        }

        public double[] SixthLineX
        {
            get { return x5; }
            set { x5 = value; }
        }

        public double[] SixthLineY
        {
            get { return y5; }
            set { y5 = value; }
        }

        public double[] SvnthLineX
        {
            get { return x6; }
            set { x6 = value; }
        }

        public double[] SvnthLineY
        {
            get { return y6; }
            set { y6 = value; }
        }

        public double[] EghthLineX
        {
            get { return x7; }
            set { x7 = value; }
        }

        public double[] EghthLineY
        {
            get { return y7; }
            set { y7 = value; }
        }

        #endregion

        #region RavinderGraphFunctions


        public void deletedataGridRows()
        {
            try
            {
                dataGridView1.Rows.Clear();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        int CursorRefresh = 0;

        bool CurSorSet1 = true;

        bool cursorset2 = true;
        //protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        //{
        //    const int WM_KEYDOWN = 0x100;
        //    try
        //    {

        //        if (CursorRefresh == 0)
        //        {
        //            panel1.Refresh();
        //            if (GraphType == "FFT")
        //                redraw();
        //            else if (GraphType == "Orbit")
        //                redrawOrbit();
        //            else
        //                ThreeDeeRedraw();
        //        }
        //        if (msg.Msg == WM_KEYDOWN)
        //        {
        //            if (CurSorSet == false)
        //            {
        //                //CurSorSet = true;
        //                CursorRefresh++;
        //                switch (keyData)
        //                {

        //                    case Keys.Left:
        //                        {
        //                            if (!ExtraZoom)
        //                            {
        //                                if (ThrDCurCtr != 0)
        //                                {
        //                                    if (SqureCrs == true)
        //                                    {
        //                                        ThreeDeeSquareCursor();
        //                                    }
        //                                    else if (LineCursor == true)
        //                                    {
        //                                        ThreeDeeCursor("Left");
        //                                    }
        //                                    else if (SingleCrs == true)
        //                                    {

        //                                        if (GraphZoomedAlready == false)
        //                                        {
        //                                            SingleLineCursorTwoDByKey("L");
        //                                        }
        //                                        else if (GraphZoomedAlready == true)
        //                                        {
        //                                            //SingleLineCursorTwoDForZoomed(e)
        //                                            SingleLineCursorTwoDForZoomedByKey("L");
        //                                        }


        //                                        //SingleLineCursorTwoDByKey("L");
        //                                    }

        //                                    else if (HarmncCrs == true)
        //                                    {
        //                                        if (ThrDCurCtr >= 10)
        //                                        {
        //                                            HarmonicCursorWthKey();
        //                                        }

        //                                    }
        //                                    else if (TwDSingleSqrCrs == true)
        //                                    {
        //                                        if (GraphType != "Orbit")
        //                                        {
        //                                            TwoDCursorLineSqureWithKeys("L");
        //                                        }
        //                                        else if (GraphType == "Orbit")
        //                                        {
        //                                            TwoDCursorLineSqureWithKeysForOrbit("L");
        //                                        }
        //                                    }
        //                                    else if (TwoDCrossHairCursor == true)
        //                                    {
        //                                        CrsorCrossHairByKey("L");
        //                                    }
        //                                    else if (SideBndCsr == true)
        //                                    {
        //                                        SideBandCursorTwoDByKey("L");
        //                                    }
        //                                    else if (SideBndCsrRatio == true)
        //                                    {
        //                                        SideBandRatioCursorTwoDByKey("L");
        //                                    }
        //                                    else if (SideBandTrndDrw == true)
        //                                    {
        //                                        SideBandTrendByKey("L");
        //                                    }
        //                                    else if (PeekCursor == true)
        //                                    {
        //                                        PeekCursorForAllByKey("L");
        //                                        PeekCursorCtr--;
        //                                        if (PeekCursorCtr < 0)
        //                                        {
        //                                            PeekCursorCtr = 0;
        //                                        }
        //                                    }
        //                                    else if (MultipleCrsr == true)
        //                                    {
        //                                        MultipleLineCursorTwoDByKey("L");
        //                                    }

        //                                    ThrDCurCtr--;
        //                                }
        //                            }
        //                            else if (ExtraZoom)
        //                            {

        //                                {
        //                                    DrawExtraZoom("L");
        //                                }
        //                            }

        //                        }
        //                        break;

        //                    case Keys.Right:
        //                        {
        //                            if (!ExtraZoom)
        //                            {
        //                                if (SqureCrs == true)
        //                                {
        //                                    ThreeDeeSquareCursor();
        //                                }
        //                                else if (LineCursor == true)
        //                                {
        //                                    ThreeDeeCursor("Left");
        //                                }
        //                                else if (SingleCrs == true)
        //                                {

        //                                    if (GraphZoomedAlready == false)
        //                                    {
        //                                        SingleLineCursorTwoDByKey("R");
        //                                    }
        //                                    else if (GraphZoomedAlready == true)
        //                                    {
        //                                        //SingleLineCursorTwoDForZoomed(e)
        //                                        SingleLineCursorTwoDForZoomedByKey("R");
        //                                    }


        //                                    //SingleLineCursorTwoDByKey("R");
        //                                }
        //                                else if (HarmncCrs == true)
        //                                {
        //                                    if (ThrDCurCtr <= 10)
        //                                        ThrDCurCtr = 10;
        //                                    HarmonicCursorWthKey();


        //                                }
        //                                else if (TwDSingleSqrCrs == true)
        //                                {
        //                                    if (GraphType != "Orbit")
        //                                    {
        //                                        TwoDCursorLineSqureWithKeys("R");
        //                                    }
        //                                    else if (GraphType == "Orbit")
        //                                    {
        //                                        TwoDCursorLineSqureWithKeysForOrbit("L");
        //                                    }
        //                                }
        //                                else if (TwoDCrossHairCursor == true)
        //                                {
        //                                    CrsorCrossHairByKey("R");
        //                                }
        //                                else if (SideBndCsr == true)
        //                                {
        //                                    SideBandCursorTwoDByKey("R");
        //                                }
        //                                else if (SideBndCsrRatio == true)
        //                                {
        //                                    SideBandRatioCursorTwoDByKey("R");
        //                                }
        //                                else if (SideBandTrndDrw == true)
        //                                {
        //                                    SideBandTrendByKey("R");
        //                                }
        //                                else if (PeekCursor == true)
        //                                {
        //                                    PeekCursorForAllByKey("R");
        //                                    PeekCursorCtr++;
        //                                }
        //                                else if (MultipleCrsr == true)
        //                                {
        //                                    MultipleLineCursorTwoDByKey("R");
        //                                }
        //                                ThrDCurCtr++;
        //                            }
        //                            else if (ExtraZoom)
        //                            {

        //                                {
        //                                    DrawExtraZoom("R");
        //                                }
        //                            }
        //                        }

        //                        break;
        //                    case Keys.Up:
        //                        {
        //                            if (ExtraZoom)
        //                            {
        //                                DrawExtraZoom("U");
        //                            }
        //                        }
        //                        break;
        //                    case Keys.Down:
        //                        {
        //                            if (ExtraZoom)
        //                            {
        //                                DrawExtraZoom("D");
        //                            }
        //                        }
        //                        break;
        //                    //case Keys.NumPad8:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("U");
        //                    //        }
        //                    //    }
        //                    //    break;
        //                    //case Keys.NumPad2:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("D");
        //                    //        }
        //                    //    }
        //                    //    break;

        //                    //case Keys.NumPad6:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("R");
        //                    //        }
        //                    //    }
        //                    //    break;
        //                    //case Keys.NumPad4:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("L");
        //                    //        }
        //                    //    }
        //                    //    break;

        //                }
        //            }
        //            else
        //            {
        //                CurSorSet = false;
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //    return base.ProcessCmdKey(ref msg, keyData);


        //    //return base.ProcessCmdKey(ref msg, keyData);
        //}
        //protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        //{
        //    const int WM_KEYDOWN = 0x100;
        //    try
        //    {

        //        if (CursorRefresh == 0)
        //        {
        //            panel1.Refresh();
        //            if (GraphType == "FFT")
        //                redraw();
        //            else if (GraphType == "Orbit")
        //                redrawOrbit();
        //            else
        //                ThreeDeeRedraw();
        //        }
        //        if (msg.Msg == WM_KEYDOWN)
        //        {

        //            {
        //                panel1.Focus();
        //                //CurSorSet = true;
        //                CursorRefresh++;
        //                switch (keyData)
        //                {

        //                    case Keys.Left:
        //                        {
        //                            if (cursorset2 == false)
        //                            {
        //                                cursorset2 = true;
        //                                ThrDCurCtr -= 2;
        //                                PeekCursorCtr -= 2;
        //                            }
        //                            else
        //                            {
        //                                CurSorSet1 = false;
        //                            }
        //                            if (!ExtraZoom)
        //                            {
        //                                if (ThrDCurCtr != 0)
        //                                {
        //                                    if (SqureCrs == true)
        //                                    {
        //                                        ThreeDeeSquareCursor();
        //                                    }
        //                                    else if (LineCursor == true)
        //                                    {
        //                                        ThreeDeeCursor("Left");
        //                                    }
        //                                    else if (SingleCrs == true)
        //                                    {

        //                                        if (GraphZoomedAlready == false)
        //                                        {
        //                                            SingleLineCursorTwoDByKey("L");
        //                                        }
        //                                        else if (GraphZoomedAlready == true)
        //                                        {
        //                                            //SingleLineCursorTwoDForZoomed(e)
        //                                            SingleLineCursorTwoDForZoomedByKey("L");
        //                                        }


        //                                        //SingleLineCursorTwoDByKey("L");
        //                                    }

        //                                    else if (HarmncCrs == true)
        //                                    {
        //                                        if (ThrDCurCtr >= 10)
        //                                        {
        //                                            HarmonicCursorWthKey();
        //                                        }

        //                                    }
        //                                    else if (TwDSingleSqrCrs == true)
        //                                    {
        //                                        if (GraphType != "Orbit")
        //                                        {
        //                                            TwoDCursorLineSqureWithKeys("L");
        //                                        }
        //                                        else if (GraphType == "Orbit")
        //                                        {
        //                                            TwoDCursorLineSqureWithKeysForOrbit("L");
        //                                        }
        //                                    }
        //                                    else if (TwoDCrossHairCursor == true)
        //                                    {
        //                                        CrsorCrossHairByKey("L");
        //                                    }
        //                                    else if (SideBndCsr == true)
        //                                    {
        //                                        SideBandCursorTwoDByKey("L");
        //                                    }
        //                                    else if (SideBndCsrRatio == true)
        //                                    {
        //                                        SideBandRatioCursorTwoDByKey("L");
        //                                    }
        //                                    else if (SideBandTrndDrw == true)
        //                                    {
        //                                        SideBandTrendByKey("L");
        //                                    }
        //                                    else if (PeekCursor == true)
        //                                    {
        //                                        PeekCursorForAllByKey("L");
        //                                        PeekCursorCtr--;
        //                                        if (PeekCursorCtr < 0)
        //                                        {
        //                                            PeekCursorCtr = 0;
        //                                        }
        //                                    }
        //                                    else if (MultipleCrsr == true)
        //                                    {
        //                                        MultipleLineCursorTwoDByKey("L");
        //                                    }

        //                                    ThrDCurCtr--;
        //                                }
        //                            }
        //                            else if (ExtraZoom)
        //                            {

        //                                {
        //                                    DrawExtraZoom("L");
        //                                }
        //                            }

        //                        }
        //                        break;

        //                    case Keys.Right:
        //                        {
        //                            if (CurSorSet1 == false)
        //                            {
        //                                CurSorSet1 = true;
        //                                ThrDCurCtr += 2;
        //                                PeekCursorCtr += 2;
        //                            }
        //                            else
        //                            {
        //                                cursorset2 = false;
        //                            }
        //                            if (!ExtraZoom)
        //                            {
        //                                if (SqureCrs == true)
        //                                {
        //                                    ThreeDeeSquareCursor();
        //                                }
        //                                else if (LineCursor == true)
        //                                {
        //                                    ThreeDeeCursor("Left");
        //                                }
        //                                else if (SingleCrs == true)
        //                                {

        //                                    if (GraphZoomedAlready == false)
        //                                    {
        //                                        SingleLineCursorTwoDByKey("R");
        //                                    }
        //                                    else if (GraphZoomedAlready == true)
        //                                    {
        //                                        //SingleLineCursorTwoDForZoomed(e)
        //                                        SingleLineCursorTwoDForZoomedByKey("R");
        //                                    }


        //                                    //SingleLineCursorTwoDByKey("R");
        //                                }
        //                                else if (HarmncCrs == true)
        //                                {
        //                                    if (ThrDCurCtr <= 10)
        //                                        ThrDCurCtr = 10;
        //                                    HarmonicCursorWthKey();


        //                                }
        //                                else if (TwDSingleSqrCrs == true)
        //                                {
        //                                    if (GraphType != "Orbit")
        //                                    {
        //                                        TwoDCursorLineSqureWithKeys("R");
        //                                    }
        //                                    else if (GraphType == "Orbit")
        //                                    {
        //                                        TwoDCursorLineSqureWithKeysForOrbit("L");
        //                                    }
        //                                }
        //                                else if (TwoDCrossHairCursor == true)
        //                                {
        //                                    CrsorCrossHairByKey("R");
        //                                }
        //                                else if (SideBndCsr == true)
        //                                {
        //                                    SideBandCursorTwoDByKey("R");
        //                                }
        //                                else if (SideBndCsrRatio == true)
        //                                {
        //                                    SideBandRatioCursorTwoDByKey("R");
        //                                }
        //                                else if (SideBandTrndDrw == true)
        //                                {
        //                                    SideBandTrendByKey("R");
        //                                }
        //                                else if (PeekCursor == true)
        //                                {
        //                                    PeekCursorForAllByKey("R");
        //                                    PeekCursorCtr++;
        //                                }
        //                                else if (MultipleCrsr == true)
        //                                {
        //                                    MultipleLineCursorTwoDByKey("R");
        //                                }
        //                                ThrDCurCtr++;
        //                            }
        //                            else if (ExtraZoom)
        //                            {

        //                                {
        //                                    DrawExtraZoom("R");
        //                                }
        //                            }
        //                        }

        //                        break;
        //                    case Keys.Up:
        //                        {
        //                            if (ExtraZoom)
        //                            {
        //                                DrawExtraZoom("U");
        //                            }
        //                        }
        //                        break;
        //                    case Keys.Down:
        //                        {
        //                            if (ExtraZoom)
        //                            {
        //                                DrawExtraZoom("D");
        //                            }
        //                        }
        //                        break;
        //                    //case Keys.NumPad8:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("U");
        //                    //        }
        //                    //    }
        //                    //    break;
        //                    //case Keys.NumPad2:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("D");
        //                    //        }
        //                    //    }
        //                    //    break;

        //                    //case Keys.NumPad6:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("R");
        //                    //        }
        //                    //    }
        //                    //    break;
        //                    //case Keys.NumPad4:
        //                    //    {
        //                    //        if (ExtraZoom)
        //                    //        {
        //                    //            DrawExtraZoom("L");
        //                    //        }
        //                    //    }
        //                    //    break;

        //                }
        //            }


        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //    return base.ProcessCmdKey(ref msg, keyData);


        //    //return base.ProcessCmdKey(ref msg, keyData);
        //}
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            //const int WM_KEYDOWN = 0x100;
            //try
            //{

            //    if (CursorRefresh == 0)
            //    {
            //        panel1.Refresh();
            //        if (GraphType == "FFT")
            //            redraw();
            //        else if (GraphType == "Orbit")
            //            redrawOrbit();
            //        else if (GraphType == "SCL")
            //        {
            //            redrawSCL();
            //        }
            //        // DA_7   code related    minor    Amit Jain  30-03-2010

            //        else if (GraphType == "Octave")
            //        {
            //            RedrawOctave();
            //        }
            //        else if (GraphType != null)
            //            ThreeDeeRedraw();
            //    }
            //    if (msg.Msg == WM_KEYDOWN)
            //    {
            //        //panel1.BackColor = Color.White;
            //        //panel1.Appearance.BackColor2 = Color.White;
            //        {
            //            //CurSorSet = true;
            //            CursorRefresh++;
            //            switch (keyData)
            //            {

            //                case Keys.Left:
            //                    {
            //                        if (cursorset2 == false)
            //                        {
            //                            cursorset2 = true;
            //                            ThrDCurCtr -= 2;
            //                            PeekCursorCtr -= 2;
            //                        }
            //                        else
            //                        {
            //                            CurSorSet1 = false;
            //                        }
            //                        if (!ExtraZoom)
            //                        {
            //                            if (ThrDCurCtr >= 0)
            //                            {
            //                                if (SqureCrs == true)
            //                                {
            //                                    ThreeDeeSquareCursor();
            //                                }
            //                                else if (LineCursor == true)
            //                                {
            //                                    ThreeDeeCursor("Left");
            //                                }
            //                                else if (SingleCrs == true)
            //                                {

            //                                    if (GraphZoomedAlready == false)
            //                                    {
            //                                        SingleLineCursorTwoDByKey("L");
            //                                    }
            //                                    else if (GraphZoomedAlready == true)
            //                                    {
            //                                        //SingleLineCursorTwoDForZoomed(e)
            //                                        SingleLineCursorTwoDForZoomedByKey("L");
            //                                    }
            //                                    //SingleLineCursorTwoDByKey("L");
            //                                }

            //                                else if (HarmncCrs == true)
            //                                {
            //                                    if (ThrDCurCtr < 10)
            //                                    {
            //                                        ThrDCurCtr = 10;
            //                                    }
            //                                    HarmonicCursorWthKey();


            //                                }
            //                                else if (TwDSingleSqrCrs == true)
            //                                {

            //                                    if (GraphType != "Orbit")
            //                                    {
            //                                        {
            //                                            if (GraphType == "Octave")
            //                                            {
            //                                                TwoDCursorLineSqureWithKeysOctave("L");
            //                                            }
            //                                            else
            //                                            {
            //                                                TwoDCursorLineSqureWithKeys("L");
            //                                            }
            //                                        }
            //                                    }
            //                                    else if (GraphType == "Orbit")
            //                                    {
            //                                        TwoDCursorLineSqureWithKeysForOrbit("L");
            //                                    }
            //                                }
            //                                else if (TwoDCrossHairCursor == true)
            //                                {
            //                                    CrsorCrossHairByKey("L");
            //                                }
            //                                else if (SideBndCsr == true)
            //                                {
            //                                    SideBandCursorTwoDByKey("L");
            //                                }
            //                                else if (SideBndCsrRatio == true)
            //                                {
            //                                    SideBandRatioCursorTwoDByKey("L");
            //                                }
            //                                else if (SideBandTrndDrw == true)
            //                                {
            //                                    SideBandTrendByKey("L");
            //                                }
            //                                else if (PeekCursor == true)
            //                                {
            //                                    PeekCursorForAllByKey("L");
            //                                    PeekCursorCtr--;
            //                                    if (PeekCursorCtr < 0)
            //                                    {
            //                                        PeekCursorCtr = 0;
            //                                    }
            //                                }
            //                                else if (MultipleCrsr == true)
            //                                {
            //                                    MultipleLineCursorTwoDByKey("L");
            //                                }

            //                                ThrDCurCtr--;
            //                            }
            //                        }
            //                        else if (ExtraZoom)
            //                        {

            //                            {
            //                                DrawExtraZoom("L");
            //                            }
            //                        }

            //                    }
            //                    break;

            //                case Keys.Right:
            //                    {
            //                        if (CurSorSet1 == false)
            //                        {
            //                            CurSorSet1 = true;
            //                            ThrDCurCtr += 2;
            //                            PeekCursorCtr += 2;
            //                        }
            //                        else
            //                        {
            //                            cursorset2 = false;
            //                        }
            //                        if (!ExtraZoom)
            //                        {
            //                            if (SqureCrs == true)
            //                            {
            //                                ThreeDeeSquareCursor();
            //                            }
            //                            else if (LineCursor == true)
            //                            {
            //                                ThreeDeeCursor("Left");
            //                            }
            //                            else if (SingleCrs == true)
            //                            {

            //                                if (GraphZoomedAlready == false)
            //                                {
            //                                    SingleLineCursorTwoDByKey("R");
            //                                }
            //                                else if (GraphZoomedAlready == true)
            //                                {
            //                                    //SingleLineCursorTwoDForZoomed(e)
            //                                    SingleLineCursorTwoDForZoomedByKey("R");
            //                                }


            //                                //SingleLineCursorTwoDByKey("R");
            //                            }
            //                            else if (HarmncCrs == true)
            //                            {
            //                                if (ThrDCurCtr <= 10)
            //                                    ThrDCurCtr = 10;

            //                                HarmonicCursorWthKey();



            //                            }
            //                            else if (TwDSingleSqrCrs == true)
            //                            {
            //                                if (GraphType != "Orbit")
            //                                {
            //                                    //TwoDCursorLineSqureWithKeys("R");
            //                                    {
            //                                        if (GraphType == "Octave")
            //                                        {
            //                                            TwoDCursorLineSqureWithKeysOctave("R");
            //                                        }
            //                                        else
            //                                        {
            //                                            TwoDCursorLineSqureWithKeys("R");
            //                                        }
            //                                    }
            //                                }
            //                                else if (GraphType == "Orbit")
            //                                {
            //                                    TwoDCursorLineSqureWithKeysForOrbit("L");
            //                                }
            //                            }
            //                            else if (TwoDCrossHairCursor == true)
            //                            {
            //                                CrsorCrossHairByKey("R");
            //                            }
            //                            else if (SideBndCsr == true)
            //                            {
            //                                SideBandCursorTwoDByKey("R");
            //                            }
            //                            else if (SideBndCsrRatio == true)
            //                            {
            //                                SideBandRatioCursorTwoDByKey("R");
            //                            }
            //                            else if (SideBandTrndDrw == true)
            //                            {
            //                                SideBandTrendByKey("R");
            //                            }
            //                            else if (PeekCursor == true)
            //                            {
            //                                PeekCursorForAllByKey("R");
            //                                PeekCursorCtr++;
            //                            }
            //                            else if (MultipleCrsr == true)
            //                            {
            //                                MultipleLineCursorTwoDByKey("R");
            //                            }
            //                            ThrDCurCtr++;
            //                        }
            //                        else if (ExtraZoom)
            //                        {

            //                            {
            //                                DrawExtraZoom("R");
            //                            }
            //                        }
            //                    }

            //                    break;
            //                case Keys.Up:
            //                    {
            //                        if (ExtraZoom)
            //                        {
            //                            DrawExtraZoom("U");
            //                        }
            //                    }
            //                    break;
            //                case Keys.Down:
            //                    {
            //                        if (ExtraZoom)
            //                        {
            //                            DrawExtraZoom("D");
            //                        }
            //                    }
            //                    break;
            //                //case Keys.NumPad8:
            //                //    {
            //                //        if (ExtraZoom)
            //                //        {
            //                //            DrawExtraZoom("U");
            //                //        }
            //                //    }
            //                //    break;
            //                //case Keys.NumPad2:
            //                //    {
            //                //        if (ExtraZoom)
            //                //        {
            //                //            DrawExtraZoom("D");
            //                //        }
            //                //    }
            //                //    break;

            //                //case Keys.NumPad6:
            //                //    {
            //                //        if (ExtraZoom)
            //                //        {
            //                //            DrawExtraZoom("R");
            //                //        }
            //                //    }
            //                //    break;
            //                //case Keys.NumPad4:
            //                //    {
            //                //        if (ExtraZoom)
            //                //        {
            //                //            DrawExtraZoom("L");
            //                //        }
            //                //    }
            //                //    break;

            //            }
            //        }

            //        //panel1.BackColor = Color_Panel1BackColor;
            //        //panel1.Appearance.BackColor2 = Color_Panel1BackColor2;

            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //    ErrorLogFile(ex);
            //}
            return base.ProcessCmdKey(ref msg, keyData);


            //return base.ProcessCmdKey(ref msg, keyData);
        }

        bool MainCursorColorSelected = false;
        Color MainCursorColor;

        private void MultipleLineCursorTwoDByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(Color.Black, (float) .5);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //float PrvsValX = 0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    //pt1[0] = Pts[ThrDCurCtr];
                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        Line.DrawLine(PenWht, PrvCr1, PrvCr2);
                        //if (IsTrend)
                        //{
                        //    if (PrvsValX != 0)
                        //    {
                        //        redrawNew(PrvsValX);
                        //    }
                        //}
                        //else
                        redraw();
                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    PrvCr1 = pt1;
                    PrvCr2 = pt2;
                    //XVala[0] = Convert.ToDouble(XSelected[(int)ThrDCurCtr]);
                    //YVala[0] = Convert.ToDouble(YSelected[(int)ThrDCurCtr]);

                    try
                    {
                        XVala[0] = Convert.ToDouble(x[(int) ThrDCurCtr]);
                        YVala[0] = Convert.ToDouble(y[(int) ThrDCurCtr]);
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x1[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y1[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x2[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y2[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);

                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x3[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y3[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);

                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x4[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y4[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);

                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x5[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y5[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);

                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x6[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y6[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);

                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }

                    try
                    {
                        double FstVal = Convert.ToDouble(x7[(int) ThrDCurCtr]);
                        double ScndVal = Convert.ToDouble(y7[(int) ThrDCurCtr]);
                        //Array.Resize(ref XVala, XVala.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                        _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                        //Array.Resize(ref YVala, YVala.Length + 1);

                        XVala[XVala.Length - 1] = FstVal;
                        YVala[YVala.Length - 1] = ScndVal;
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }






                    FillDatagrid(XVala, YVala);
                    PrvsValX = ThrDCurCtr;

                    if (AreaPlot == true)
                    {
                        FFTAreaPlot();
                    }



                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        string SelectedDiGraph = null;

        public string GenDiGraph
        {
            get { return SelectedDiGraph; }
            set { SelectedDiGraph = value; }
        }

        ArrayList sarrTime = null;

        //Created by Amit Jain
        public ArrayList Timedata
        {
            get { return sarrTime; }
            set { sarrTime = value; }
        }

        private void FillDatagrid(double[] XValues, double[] YValues)
        {
            deletedataGridRows();
            dataGridView1.Rows.Add(XValues.Length);
            try
            {
                for (int i = 0; i < XValues.Length; i++)
                {
                    //if (bXunitConvert)
                    //{
                    //    //if (IsAlreadyCPM)
                    //    //{
                    //    //    dataGridView1.Rows[i].Cells[0].Value = (XValues[i]);
                    //    //}
                    //    //else
                    //    {
                    //        dataGridView1.Rows[i].Cells[0].Value = XValues[i] * 60;
                    //    }
                    //}
                    //else
                    {
                        //if (IsAlreadyCPM)
                        //{
                        //    dataGridView1.Rows[i].Cells[0].Value = (XValues[i] / 60);
                        //}
                        //else
                        {
                            dataGridView1.Rows[i].Cells[0].Value = XValues[i];
                        }
                    }
                    dataGridView1.Rows[i].Cells[1].Value = YValues[i];

                    if (GenDiGraph == "Trend")
                    {
                        if (sarrTime != null)
                        {
                            try
                            {
                                dataGridView1.Rows[i].Cells[0].Value =
                                    sarrTime[Convert.ToInt32(XValues[i]) - 1].ToString();
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                            }
                        }
                    }


                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            dataGridView1.Refresh();
        }

        bool bzt = false;

        private void SingleLineCursorTwoDForZoomedByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                DrawZoomed();
                TrgtMinus = true;
            }

            if ((tgt == "L" || tgt == "R") && bzt == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                InitializeZoom();
                bzt = true;
                bzt1 = false;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //float PrvsValX = 0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        Line.DrawLine(PenWht, PrvCr1, PrvCr2);
                        //if (IsTrend)
                        //{
                        //    if (PrvsValX != 0)
                        //    {
                        //        redrawNew(PrvsValX);
                        //    }
                        //}
                        //else
                        //    redraw();
                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    float ValToFind = pt2.X;
                    float testval = ValToFind - (Rgn.Left + SixtyTwo);
                    float XvalNow = (float) (testval / MainXAxisIntervalZoom);

                    PrvCr1 = pt1;
                    PrvCr2 = pt2;
                    XVala[0] = Convert.ToDouble(XZoom[(int) XvalNow]);
                    YVala[0] = Convert.ToDouble(YZoom[(int) XvalNow]);
                    FillDatagrid(XVala, YVala);
                    PrvsValX = ThrDCurCtr;
                    DrawZoomed();
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void FFTButtonClicked()
        {
            try
            {
                SetAxis();
                x = new double[0];
                y = new double[0];
                x1 = new double[0];
                y1 = new double[0];
                x2 = new double[0];
                y2 = new double[0];
                x3 = new double[0];
                y3 = new double[0];
                x4 = new double[0];
                y4 = new double[0];
                x5 = new double[0];
                y5 = new double[0];
                x6 = new double[0];
                y6 = new double[0];
                x7 = new double[0];
                y7 = new double[0];
                Pts = null;
                Pts1 = null;
                Pts2 = null;
                Pts3 = null;
                Pts4 = null;
                Pts5 = null;
                Pts6 = null;
                Pts7 = null;
                ChoosenType = "FFT";
                panel1.Refresh();
                GphCtr = 0;
                CreatGPWithVariable();
                ////CreatGP();            //this.BackColor = Color.White;

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        bool Drw = false;

        public bool DrwOnPaint
        {
            get { return Drw; }
            set { Drw = value; }

        }



        public void FFTButtonClicked1()
        {
            try
            {
                SetAxis();
                x = new double[0];
                y = new double[0];
                x1 = new double[0];
                y1 = new double[0];
                x2 = new double[0];
                y2 = new double[0];
                x3 = new double[0];
                y3 = new double[0];
                x4 = new double[0];
                y4 = new double[0];
                x5 = new double[0];
                y5 = new double[0];
                x6 = new double[0];
                y6 = new double[0];
                x7 = new double[0];
                y7 = new double[0];
                Pts = null;
                Pts1 = null;
                Pts2 = null;
                Pts3 = null;
                Pts4 = null;
                Pts5 = null;
                Pts6 = null;
                Pts7 = null;
                ChoosenType = "FFT";
                panel1.Refresh();
                GphCtr = 0;
                // CreatGPWithVariable();
                ////CreatGP();            //this.BackColor = Color.White;

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }



        private float findHighestValue(double[] Target)
        {
            double MaxVal = 0.0;
            double MinVal = 0.0;
            double FinalVal = 0.0;
            try
            {
                for (int i = 0; i < Target.Length; i++)
                {
                    if (Target[i] > MaxVal)
                        MaxVal = Target[i];
                    if (Target[i] < MinVal)
                        MinVal = Target[i];
                }

                MinVal = Math.Abs(MinVal);
                if (MaxVal >= MinVal)
                    FinalVal = MaxVal;
                else if (MinVal > MaxVal)
                    FinalVal = MinVal;



            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            return (float) FinalVal;
        }

        private void ErrorLogFile(Exception ex)
        {

        }

        private bool CheckForTimeData(double[] Target)
        {
            Time = false;
            try
            {
                for (int i = 0; i < Target.Length; i++)
                {
                    if (Target[i] < 0)
                    {
                        Time = true;
                    }
                    else if (Target[i] >= 0)
                        Time = false;

                    if (Time == true)
                        break;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

            Thread.Sleep(10);
            return Time;
        }


        private void CheckGraphState()
        {
            try
            {
                Region rgn1 = new Region(panel1.Bounds);
                Region rgn = new Region(ClientRectangle);
                System.Drawing.Graphics der = panel1.CreateGraphics();
                der.Clip = rgn1;
                bool Ack = der.IsVisibleClipEmpty;
                if (Ack == true)
                {
                    int i = 0;
                }
                else
                {
                    int i = 1;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private bool CheckForTimeDataInAxisLines(double[] Target)
        {
            bool DtTime = false;
            try
            {
                for (int i = 0; i < Target.Length; i++)
                {
                    if (Target[i] < 0)
                    {
                        DtTime = true;
                    }
                    else if (Target[i] >= 0)
                        DtTime = false;

                    if (DtTime == true)
                        break;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

            return DtTime;
        }

        ArrayList strDts = null;

        public ArrayList GetDts
        {
            get { return strDts; }
            set { strDts = value; }
        }

        bool bAxisCombo = false;

        public bool IsAxisCombo
        {
            get { return bAxisCombo; }
            set { bAxisCombo = value; }
        }

        ArrayList arlstSColors = new ArrayList();

        public ArrayList SelectedColors
        {
            get { return arlstSColors; }
        }


        public bool TrendButtonEnabled
        {
            get { return btnTrend.Enabled; }
            set
            {
                btnTrend.Enabled = value;
                bbTrend.Enabled = value;
            }
        }

        public void CreatGPWithVariableForDi()
        {
            string[] ColorCode =
            {
                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
                "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                "6737204", "16728065", "744352"
            };


            TrendButtonEnabled = IsAxisCombo; // btnTrend.Enabled = IsAxisCombo;
            //ClearCmbCursor()
            //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair" });
            //cmbCurSors.SelectedIndex = 0;
            string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            CmbCursorSelectedItem(SelectedCursorItem);
            //tcMain.SelectedTabPage = tpGraph;
            SetAxis();
            //lblDate.Text = "Date :-- " + SlctedDates[0].ToString();

            //bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            Time = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = Time;

            try
            {

                arlstSColors = new ArrayList();

                //arlstSColors.Add(ColorCode[0].ToString());
                //if (TrendType == "Demodulate")
                {
                    // arlstSColors.Add(ColorCode[1].ToString());
                }
                if ((x != null && x.Length > 1) || (x1 != null && x1.Length > 1) || (x2 != null && x2.Length > 1) ||
                    (x3 != null && x3.Length > 1) || (x4 != null && x4.Length > 1) || (x5 != null && x5.Length > 1) ||
                    (x6 != null && x6.Length > 1) || (x7 != null && x7.Length > 1))
                {
                    if (Time == true)
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        der.DrawLine(BlkDash, pt1, pt2);
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                    }

                    else
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                    }
                }

                if (GphCtr == 0)
                {
                    for (int i = 0; i < 8; i++)
                    {
                        if (i == 0)
                        {
                            if (x != null)
                            {
                                if (x.Length > 1)
                                {
                                    Pts = new PointF[0];
                                    MaxVal = findHighestValue(y);
                                    MaxVal *= 1.25;
                                    HighestValYAxis = MaxVal;
                                    MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                                    CursorStartInterval = MainXAxisInterval;
                                    SetAxisMarks(x, y);
                                    setAxisCtr = 0;
                                }
                            }
                        }
                        else if (i == 1)
                        {
                            if (x1 != null)
                            {
                                if (x1.Length > 1)
                                {
                                    Pts1 = new PointF[0];
                                    MaxVal = findHighestValue(y1);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x1, y1);
                                        setAxisCtr = 1;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        else if (i == 2)
                        {
                            if (x2 != null)
                            {
                                if (x2.Length > 1)
                                {
                                    Pts2 = new PointF[0];
                                    MaxVal = findHighestValue(y2);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x2, y2);
                                        setAxisCtr = 2;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        else if (i == 3)
                        {
                            if (x3 != null)
                            {
                                if (x3.Length > 1)
                                {
                                    Pts3 = new PointF[0];
                                    MaxVal = findHighestValue(y3);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x3, y3);
                                        setAxisCtr = 3;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        else if (i == 4)
                        {
                            if (x4 != null)
                            {
                                if (x4.Length > 1)
                                {
                                    Pts4 = new PointF[0];
                                    MaxVal = findHighestValue(y4);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x4, y4);
                                        setAxisCtr = 4;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        else if (i == 5)
                        {
                            if (x5 != null)
                            {
                                if (x5.Length > 1)
                                {
                                    Pts5 = new PointF[0];
                                    MaxVal = findHighestValue(y5);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x5, y5);
                                        setAxisCtr = 5;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        else if (i == 6)
                        {
                            if (x6 != null)
                            {
                                if (x6.Length > 1)
                                {
                                    Pts6 = new PointF[0];
                                    MaxVal = findHighestValue(y6);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x6, y6);
                                        setAxisCtr = 6;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);

                                    MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        else if (i == 7)
                        {
                            if (x7 != null)
                            {
                                if (x7.Length > 1)
                                {
                                    Pts7 = new PointF[0];
                                    MaxVal = findHighestValue(y7);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x7, y7);
                                        setAxisCtr = 7;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                }

                //for (int i = 0; i < x.Length; i++)
                //{


                //    Array.Resize(ref Pts, Pts.Length + 1);
                //    Pts1 = new PointF((float)((pt.Left + SixtyTwo) + (MainXAxisInterval * i)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(y[i] / MainYAxisInterval)));//52
                //    Pts[i] = Pts1;


                //}
                //BreakYAxis();
                //if (IsAxisCombo)
                //{
                //SetAxisMarks(x, y);
                //}
                //else
                //{
                //    SetAxisMarks(x, y,strDts);
                //}
                if (MaxVal != 0.0 && GphCtr == 0 || GphCtr != 0)
                {
                    if (GphCtr == 0)
                    {
                        if (x != null)
                        {
                            Pts = new PointF[x.Length];
                            for (int i = 0; i < x.Length; i++)
                            {


                                //Array.Resize(ref Pts, Pts.Length + 1);
                                if (Time == true)
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y[i] / MainYAxisInterval)));
                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                                }

                                Pts[i] = Ptsn1;
                            }

                            PtsSelected = new PointF[Pts.Length];
                            PtsSelected = Pts;
                            XSelected = new double[x.Length];
                            YSelected = new double[y.Length];
                            XSelected = x;
                            YSelected = y;
                        }
                    }
                    else if (GphCtr == 1)
                    {
                        if (x1 != null)
                        {
                            Pts1 = new PointF[x1.Length];
                            for (int i = 0; i < x1.Length; i++)
                            {
                                //Array.Resize(ref Pts1, Pts1.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y1[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y1[i] / MainYAxisInterval)));
                                }

                                Pts1[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        if (x2 != null)
                        {
                            Pts2 = new PointF[x2.Length];
                            for (int i = 0; i < x2.Length; i++)
                            {
                                //Array.Resize(ref Pts2, Pts2.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y2[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y2[i] / MainYAxisInterval)));
                                }

                                Pts2[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 3)
                    {
                        if (x3 != null)
                        {
                            Pts3 = new PointF[x3.Length];
                            for (int i = 0; i < x3.Length; i++)
                            {
                                //Array.Resize(ref Pts3, Pts3.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y3[i] / MainYAxisInterval)));

                                }
                                else
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y3[i] / MainYAxisInterval)));
                                }

                                Pts3[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 4)
                    {
                        if (x4 != null)
                        {
                            Pts4 = new PointF[x4.Length];
                            for (int i = 0; i < x4.Length; i++)
                            {
                                //Array.Resize(ref Pts4, Pts4.Length + 1);
                                if (Time == true)
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y4[i] / MainYAxisInterval)));
                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y4[i] / MainYAxisInterval)));

                                }

                                Pts4[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 5)
                    {
                        if (x5 != null)
                        {
                            Pts5 = new PointF[x5.Length];
                            for (int i = 0; i < x5.Length; i++)
                            {
                                //Array.Resize(ref Pts5, Pts5.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y5[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y5[i] / MainYAxisInterval)));
                                }

                                Pts5[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 6)
                    {
                        if (x6 != null)
                        {
                            Pts6 = new PointF[x6.Length];
                            for (int i = 0; i < x6.Length; i++)
                            {
                                //Array.Resize(ref Pts6, Pts6.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y6[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y6[i] / MainYAxisInterval)));
                                }

                                Pts6[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 7)
                    {
                        if (x7 != null)
                        {
                            Pts7 = new PointF[x7.Length];
                            for (int i = 0; i < x7.Length; i++)
                            {
                                //Array.Resize(ref Pts7, Pts7.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y7[i] / MainYAxisInterval)));

                                }
                                else
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y7[i] / MainYAxisInterval)));
                                }

                                Pts7[i] = Ptsn1;
                            }
                        }
                    }




                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    //if (GphCtr == 0)
                    //{
                    //    der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    //}
                    //else if (GphCtr == 1)
                    //{
                    //    der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);

                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);

                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);

                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);

                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    der.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);

                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);

                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    der.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);

                    //}

                    if (GphCtr == 0)
                    {
                        if (Pts != null)
                        {
                            try
                            {
                                der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                                int i = 0;
                                int isplitcount = Pts.Length / 100000;
                                for (int kk = 0; kk <= isplitcount; kk++)
                                {
                                    if (kk != isplitcount)
                                    {
                                        PointF[] tempPts = new PointF[100000];
                                        int ii = 0;
                                        for (int jj = i; jj < (100000 * (kk + 1)); jj++)
                                        {

                                            tempPts[ii] = Pts[jj];
                                            i++;
                                            ii++;

                                        }

                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), tempPts, (float) 0);
                                    }
                                    else
                                    {
                                        int iremcount = Pts.Length % 100000;
                                        PointF[] tempPts = new PointF[iremcount];
                                        int ii = 0;
                                        for (int jj = i; jj < ((100000 * (kk)) + iremcount); jj++)
                                        {

                                            tempPts[ii] = Pts[jj];
                                            i++;
                                            ii++;

                                        }

                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), tempPts, (float) 0);
                                    }
                                }
                            }
                        }
                    }
                    else if (GphCtr == 1)
                    {
                        if (Pts1 != null)
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);

                    }
                    else if (GphCtr == 2)
                    {
                        if (Pts2 != null)
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);

                    }
                    else if (GphCtr == 3)
                    {
                        if (Pts3 != null)
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);

                    }
                    else if (GphCtr == 4)
                    {
                        if (Pts4 != null)
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);

                    }
                    else if (GphCtr == 5)
                    {
                        if (Pts5 != null)
                            der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);

                    }
                    else if (GphCtr == 6)
                    {
                        if (Pts6 != null)
                            der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);

                    }
                    else if (GphCtr == 7)
                    {
                        if (Pts7 != null)
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);

                    }
                }

                GphCtr++;
            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        public void CreatGPWithVariableForDi(string ColorTag)
        {

            TrendButtonEnabled = IsAxisCombo; // btnTrend.Enabled = IsAxisCombo;
            //ClearCmbCursor()
            //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair" });
            string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
            //tcMain.SelectedTabPage = tpGraph;
            SetAxis();
            //lblDate.Text = "Date :-- " + SlctedDates[0].ToString();

            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;

            try
            {


                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                if (GphCtr == 0)
                {
                    for (int i = 0; i < 8; i++)
                    {
                        if (i == 0)
                        {
                            if (x != null)
                            {
                                if (x.Length > 1)
                                {
                                    Pts = new PointF[0];
                                    MaxVal = findHighestValue(y);
                                    MaxVal *= 1.25;
                                    HighestValYAxis = MaxVal;
                                    MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                                    CursorStartInterval = MainXAxisInterval;
                                    SetAxisMarks(x, y);
                                    setAxisCtr = 0;
                                }
                            }
                        }
                        else if (i == 1)
                        {
                            if (x1 != null)
                            {
                                if (x1.Length > 1)
                                {
                                    Pts1 = new PointF[0];
                                    MaxVal = findHighestValue(y1);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x1, y1);
                                        setAxisCtr = 1;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                                }
                            }
                        }
                        else if (i == 2)
                        {
                            if (x2 != null)
                            {
                                if (x2.Length > 1)
                                {
                                    Pts2 = new PointF[0];
                                    MaxVal = findHighestValue(y2);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x2, y2);
                                        setAxisCtr = 2;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                                }
                            }
                        }
                        else if (i == 3)
                        {
                            if (x3 != null)
                            {
                                if (x3.Length > 1)
                                {
                                    Pts3 = new PointF[0];
                                    MaxVal = findHighestValue(y3);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x3, y3);
                                        setAxisCtr = 3;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            if (x4 != null)
                            {
                                if (x4.Length > 1)
                                {
                                    Pts4 = new PointF[0];
                                    MaxVal = findHighestValue(y4);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x4, y4);
                                        setAxisCtr = 4;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                                }
                            }
                        }
                        else if (i == 5)
                        {
                            if (x5 != null)
                            {
                                if (x5.Length > 1)
                                {
                                    Pts5 = new PointF[0];
                                    MaxVal = findHighestValue(y5);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x5, y5);
                                        setAxisCtr = 5;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                                }
                            }
                        }
                        else if (i == 6)
                        {
                            if (x6 != null)
                            {
                                if (x6.Length > 1)
                                {
                                    Pts6 = new PointF[0];
                                    MaxVal = findHighestValue(y6);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x6, y6);
                                        setAxisCtr = 6;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);

                                    MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                                }
                            }
                        }
                        else if (i == 7)
                        {
                            if (x7 != null)
                            {
                                if (x7.Length > 1)
                                {
                                    Pts7 = new PointF[0];
                                    MaxVal = findHighestValue(y7);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x7, y7);
                                        setAxisCtr = 7;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                                }
                            }
                        }
                    }
                }

                //for (int i = 0; i < x.Length; i++)
                //{


                //    Array.Resize(ref Pts, Pts.Length + 1);
                //    Pts1 = new PointF((float)((pt.Left + SixtyTwo) + (MainXAxisInterval * i)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(y[i] / MainYAxisInterval)));//52
                //    Pts[i] = Pts1;


                //}
                //BreakYAxis();
                //if (IsAxisCombo)
                //{
                //SetAxisMarks(x, y);
                //}
                //else
                //{
                //    SetAxisMarks(x, y,strDts);
                //}
                if (MaxVal != 0.0 && GphCtr == 0 || GphCtr != 0)
                {
                    if (GphCtr == 0)
                    {
                        Pts = new PointF[x.Length];
                        for (int i = 0; i < x.Length; i++)
                        {


                            //Array.Resize(ref Pts, Pts.Length + 1);
                            if (Time == true)
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) - (float) (y[i] / MainYAxisInterval)));
                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                            }

                            Pts[i] = Ptsn1;
                        }

                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                    }
                    else if (GphCtr == 1)
                    {
                        Pts1 = new PointF[x1.Length];
                        for (int i = 0; i < x1.Length; i++)
                        {
                            //Array.Resize(ref Pts1, Pts1.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y1[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y1[i] / MainYAxisInterval)));
                            }

                            Pts1[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        Pts2 = new PointF[x2.Length];
                        for (int i = 0; i < x2.Length; i++)
                        {
                            //Array.Resize(ref Pts2, Pts2.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y2[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y2[i] / MainYAxisInterval)));
                            }

                            Pts2[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 3)
                    {
                        Pts3 = new PointF[x3.Length];
                        for (int i = 0; i < x3.Length; i++)
                        {
                            //Array.Resize(ref Pts3, Pts3.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y3[i] / MainYAxisInterval)));

                            }
                            else
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y3[i] / MainYAxisInterval)));
                            }

                            Pts3[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 4)
                    {
                        Pts4 = new PointF[x4.Length];
                        for (int i = 0; i < x4.Length; i++)
                        {
                            //Array.Resize(ref Pts4, Pts4.Length + 1);
                            if (Time == true)
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y4[i] / MainYAxisInterval)));
                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y4[i] / MainYAxisInterval)));

                            }

                            Pts4[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 5)
                    {
                        Pts5 = new PointF[x5.Length];
                        for (int i = 0; i < x5.Length; i++)
                        {
                            //Array.Resize(ref Pts5, Pts5.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y5[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y5[i] / MainYAxisInterval)));
                            }

                            Pts5[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 6)
                    {
                        Pts6 = new PointF[x6.Length];
                        for (int i = 0; i < x6.Length; i++)
                        {
                            // Array.Resize(ref Pts6, Pts6.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y6[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y6[i] / MainYAxisInterval)));
                            }

                            Pts6[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 7)
                    {
                        Pts7 = new PointF[x7.Length];
                        for (int i = 0; i < x7.Length; i++)
                        {
                            //Array.Resize(ref Pts7, Pts7.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y7[i] / MainYAxisInterval)));

                            }
                            else
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y7[i] / MainYAxisInterval)));
                            }

                            Pts7[i] = Ptsn1;
                        }
                    }




                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    //if (GphCtr == 0)
                    //{
                    //    der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    //}
                    //else if (GphCtr == 1)
                    //{
                    //    der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);

                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);

                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);

                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);

                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    der.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);

                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);

                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    der.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);

                    //}

                    //if (GphCtr == 0)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkRed, (float).5), Pts, (float)0);

                    //}
                    //else if (GphCtr == 1)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkGreen, (float).5), Pts1, (float)0);

                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkGoldenrod, (float).5), Pts2, (float)0);

                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkViolet, (float).5), Pts3, (float)0);

                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts4, (float)0);

                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    der.DrawCurve(new Pen(Color.DimGray, (float).5), Pts5, (float)0);

                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts6, (float)0);

                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkKhaki, (float).5), Pts7, (float)0);

                    //}
                    if (arlstSColors.Count < 2)
                    {
                        arlstSColors.Add(ColorTag);
                    }

                    if (GphCtr == 0)
                    {
                        if (Pts != null)
                        {
                            //Pen objPen=new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])),(float).5);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts,
                                (float) 0);
                            //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                        }

                        //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    }
                    else if (GphCtr == 1)
                    {
                        if (Pts1 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts1,
                                (float) 0);
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        if (Pts2 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts2,
                                (float) 0);
                        }

                    }
                    else if (GphCtr == 3)
                    {
                        if (Pts3 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts3,
                                (float) 0);
                        }

                    }
                    else if (GphCtr == 4)
                    {
                        if (Pts4 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts4,
                                (float) 0);
                        }

                    }
                    else if (GphCtr == 5)
                    {
                        if (Pts5 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts5,
                                (float) 0);
                        }

                    }
                    else if (GphCtr == 6)
                    {
                        if (Pts6 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts6,
                                (float) 0);
                        }

                    }
                    else if (GphCtr == 7)
                    {
                        if (Pts7 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts7,
                                (float) 0);
                        }

                    }
                }

                GphCtr++;
            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        public void CreatGPWithVariable()
        {

            TrendButtonEnabled = IsAxisCombo; // btnTrend.Enabled = IsAxisCombo;
            //ClearCmbCursor()
            //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair" });
            //cmbCurSors.SelectedIndex = 0;
            string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            CmbCursorSelectedItem(SelectedCursorItem);
            //tcMain.SelectedTabPage = tpGraph;
            SetAxis();
            //lblDate.Text = "Date :-- " + SlctedDates[0].ToString();

            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;

            try
            {


                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                if (GphCtr == 0)
                {
                    for (int i = 0; i < 8; i++)
                    {
                        if (i == 0)
                        {
                            if (x != null)
                            {
                                if (x.Length > 1)
                                {
                                    Pts = new PointF[0];
                                    MaxVal = findHighestValue(y);
                                    MaxVal *= 1.25;
                                    HighestValYAxis = MaxVal;
                                    MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                                    CursorStartInterval = MainXAxisInterval;
                                    SetAxisMarks(x, y);
                                }
                            }
                        }
                        else if (i == 1)
                        {
                            if (x1 != null)
                            {
                                if (x1.Length > 1)
                                {
                                    Pts1 = new PointF[0];
                                    MaxVal = findHighestValue(y1);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x1, y1);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                                }
                            }
                        }
                        else if (i == 2)
                        {
                            if (x2 != null)
                            {
                                if (x2.Length > 1)
                                {
                                    Pts2 = new PointF[0];
                                    MaxVal = findHighestValue(y2);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x2, y2);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                                }
                            }
                        }
                        else if (i == 3)
                        {
                            if (x3 != null)
                            {
                                if (x3.Length > 1)
                                {
                                    Pts3 = new PointF[0];
                                    MaxVal = findHighestValue(y3);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x3, y3);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            if (x4 != null)
                            {
                                if (x4.Length > 1)
                                {
                                    Pts4 = new PointF[0];
                                    MaxVal = findHighestValue(y4);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x4, y4);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                                }
                            }
                        }
                        else if (i == 5)
                        {
                            if (x5 != null)
                            {
                                if (x5.Length > 1)
                                {
                                    Pts5 = new PointF[0];
                                    MaxVal = findHighestValue(y5);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x5, y5);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                                }
                            }
                        }
                        else if (i == 6)
                        {
                            if (x6 != null)
                            {
                                if (x6.Length > 1)
                                {
                                    Pts6 = new PointF[0];
                                    MaxVal = findHighestValue(y6);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x6, y6);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);

                                    MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                                }
                            }
                        }
                        else if (i == 7)
                        {
                            if (x7 != null)
                            {
                                if (x7.Length > 1)
                                {
                                    Pts7 = new PointF[0];
                                    MaxVal = findHighestValue(y7);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x7, y7);
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                                }
                            }
                        }
                    }
                }

                //for (int i = 0; i < x.Length; i++)
                //{


                //    Array.Resize(ref Pts, Pts.Length + 1);
                //    Pts1 = new PointF((float)((pt.Left + SixtyTwo) + (MainXAxisInterval * i)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(y[i] / MainYAxisInterval)));//52
                //    Pts[i] = Pts1;


                //}
                //BreakYAxis();
                //if (IsAxisCombo)
                //{
                //SetAxisMarks(x, y);
                //}
                //else
                //{
                //    SetAxisMarks(x, y,strDts);
                //}
                if (MaxVal != 0.0 && GphCtr == 0 || GphCtr != 0)
                {
                    if (GphCtr == 0)
                    {
                        Pts = new PointF[x.Length];
                        for (int i = 0; i < x.Length; i++)
                        {


                            //Array.Resize(ref Pts, Pts.Length + 1);
                            if (Time == true)
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) - (float) (y[i] / MainYAxisInterval)));
                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                            }

                            Pts[i] = Ptsn1;
                        }

                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                    }
                    else if (GphCtr == 1)
                    {
                        Pts1 = new PointF[x1.Length];
                        for (int i = 0; i < x1.Length; i++)
                        {
                            //Array.Resize(ref Pts1, Pts1.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y1[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y1[i] / MainYAxisInterval)));
                            }

                            Pts1[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        Pts2 = new PointF[x2.Length];
                        for (int i = 0; i < x2.Length; i++)
                        {
                            //Array.Resize(ref Pts2, Pts2.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y2[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y2[i] / MainYAxisInterval)));
                            }

                            Pts2[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 3)
                    {
                        Pts3 = new PointF[x3.Length];
                        for (int i = 0; i < x3.Length; i++)
                        {
                            //Array.Resize(ref Pts3, Pts3.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y3[i] / MainYAxisInterval)));

                            }
                            else
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y3[i] / MainYAxisInterval)));
                            }

                            Pts3[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 4)
                    {
                        Pts4 = new PointF[x4.Length];
                        for (int i = 0; i < x4.Length; i++)
                        {
                            // Array.Resize(ref Pts4, Pts4.Length + 1);
                            if (Time == true)
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y4[i] / MainYAxisInterval)));
                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y4[i] / MainYAxisInterval)));

                            }

                            Pts4[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 5)
                    {
                        Pts5 = new PointF[x5.Length];
                        for (int i = 0; i < x5.Length; i++)
                        {
                            //Array.Resize(ref Pts5, Pts5.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y5[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y5[i] / MainYAxisInterval)));
                            }

                            Pts5[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 6)
                    {
                        Pts6 = new PointF[x6.Length];
                        for (int i = 0; i < x6.Length; i++)
                        {
                            //Array.Resize(ref Pts6, Pts6.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y6[i] / MainYAxisInterval)));

                            }
                            else
                            {
                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y6[i] / MainYAxisInterval)));
                            }

                            Pts6[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 7)
                    {
                        Pts7 = new PointF[x7.Length];
                        for (int i = 0; i < x7.Length; i++)
                        {
                            //Array.Resize(ref Pts7, Pts7.Length + 1);
                            if (Time == true)
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                             (float) (y7[i] / MainYAxisInterval)));

                            }
                            else
                            {

                                Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                    (float) (pt.Bottom - Fifty - (float) (y7[i] / MainYAxisInterval)));
                            }

                            Pts7[i] = Ptsn1;
                        }
                    }




                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    //if (GphCtr == 0)
                    //{
                    //    der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    //}
                    //else if (GphCtr == 1)
                    //{
                    //    der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);

                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);

                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);

                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);

                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    der.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);

                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    der.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);

                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    der.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);

                    //}

                    if (GphCtr == 0)
                    {
                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);

                    }
                    else if (GphCtr == 1)
                    {
                        der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);

                    }
                    else if (GphCtr == 2)
                    {
                        der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);

                    }
                    else if (GphCtr == 3)
                    {
                        der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);

                    }
                    else if (GphCtr == 4)
                    {
                        der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);

                    }
                    else if (GphCtr == 5)
                    {
                        der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);

                    }
                    else if (GphCtr == 6)
                    {
                        der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);

                    }
                    else if (GphCtr == 7)
                    {
                        der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);

                    }
                }
                else
                {
                    XSelected = x;
                    YSelected = y;
                }

                GphCtr++;
            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        double[] OrbitXAxis = null;
        double[] OrbitYAxis = null;

        public void GenerateOrbit(double[] YAxis1, double[] YAxis2, bool IsNyquist)
        {
            OrbitXAxis = YAxis1;
            OrbitYAxis = YAxis2;
            panel1.Refresh();
            //splitContainerControl1.Panel1.Refresh();

            TrendButtonEnabled = IsAxisCombo; // btnTrend.Enabled = IsAxisCombo;
            //cmbCurSors.SelectedIndex = 0;
            //string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            //CmbCursorSelectedItem(SelectedCursorItem);
            //tcMain.SelectedTabPage = tpGraph;
            SetAxis();
            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            TotalYAxis =
                TotalYAxis =
                    (Convert.ToDouble(pt.Bottom - pt.Top)) -
                    (TwoHundred); // (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            double MaxVal2 = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;
            double HighestValYAxis1 = 0.0;
            //double HighestValYAxis2 = 0.0;
            double MainYAxisInterval1 = 0;
            // double MainYAxisInterval2 = 0;
            double MainXAxisInterval1 = 0.0;
            double MainXAxisInterval2 = 0.0;
            double CursorStartInterval1 = 0.0;
            double CursorStartInterval2 = 0.0;
            GraphType = "Orbit";
            try
            {


                pt1 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Bottom - (Fifty))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo),
                    (int) (pt.Bottom - Fifty -
                           (TotalYAxis /
                            2))); //new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                    (int) (pt.Bottom - Fifty - (TotalYAxis / 2))); // (TwoHundred + OneFifty)));//TwoHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //der.DrawLine(BlkDash, pt1, pt2);//BlkDash

                Pts = new PointF[0];
                MaxVal = findHighestValue(YAxis1);

                //MaxVal2 = findHighestValue(YAxis2);
                HighestValYAxis1 = MaxVal;
                //HighestValYAxis2 = MaxVal2;
                //HighestValYAxis = MaxVal2;
                MainYAxisInterval1 = (double) (MaxVal / (TotalXAxis / 2));
                //MainYAxisInterval2 = (double)(MaxVal2 / (TotalYAxis / 2));
                MainXAxisInterval1 = (TotalXAxis / (YAxis1.Length - 1));
                MainXAxisInterval2 = ((TotalYAxis) / (YAxis1.Length - 1));
                CursorStartInterval1 = MainXAxisInterval1;
                CursorStartInterval2 = MainXAxisInterval2;



                SetAxisMarks(YAxis1, YAxis1);
                Pts = new PointF[YAxis1.Length];
                for (int i = 0; i < YAxis1.Length; i++)
                {


                    //pt1 = new Point((int)((double)(YAxis1[i] * MainXAxisInterval1 * Math.Cos(0.0174532925 * (360 - YAxis2[i]))) + (int)(pt.Left + SixtyTwo + TotalXAxis / 2)), (int)((double)(YAxis1[i] * MainXAxisInterval1 * Math.Sin(0.0174532925 * (360 - YAxis2[i]))) + (int)(pt.Top + OneFifty + TotalYAxis / 2)));                      //pt1 = new Point((int)dXTopRightX - 1, (int)dXTopRightY - 2);


                    Ptsn1 = new PointF(
                        (float) ((double) (YAxis1[i] * (TotalXAxis / 4) * Math.Cos(0.0174532925 * (360 - YAxis2[i]))) +
                                 (int) (pt.Left + SixtyTwo + TotalXAxis / 2)),
                        (float) ((double) (YAxis1[i] * (TotalYAxis / 4) * Math.Sin(0.0174532925 * (360 - YAxis2[i]))) +
                                 (int) (pt.Top + OneFifty +
                                        TotalYAxis /
                                        2))); //new PointF((float)((pt.Left + SixtyTwo + TotalXAxis / 2) + (float)(YAxis1[i] / MainYAxisInterval1)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(YAxis2[i] / MainYAxisInterval2)));

                    Pts[i] = Ptsn1;
                }

                PtsSelected = new PointF[Pts.Length];
                PtsSelected = Pts;
                XSelected = new double[YAxis1.Length];
                YSelected = new double[YAxis2.Length];
                XSelected = YAxis1;
                YSelected = YAxis2;




                der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);

                ClearCmbCursor();
                ArrayList CursorItems = new ArrayList();
                CursorItems.Add("Select Cursor");

                CursorItems.Add("Single With Square");
                AddToCmbCursor(CursorItems);


            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        public void GenerateOrbit(double[] YAxis1, double[] YAxis2)
        {
            OrbitXAxis = YAxis1;
            OrbitYAxis = YAxis2;
            panel1.Refresh();
            //splitContainerControl1.Panel1.Refresh();

            TrendButtonEnabled = IsAxisCombo; // btnTrend.Enabled = IsAxisCombo;
            //cmbCurSors.SelectedIndex = 0;
            //string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            //CmbCursorSelectedItem(SelectedCursorItem);
            //tcMain.SelectedTabPage = tpGraph;
            SetAxis();
            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            double MaxVal2 = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;
            double HighestValYAxis1 = 0.0;
            double HighestValYAxis2 = 0.0;
            double MainYAxisInterval1 = 0;
            double MainYAxisInterval2 = 0;
            double MainXAxisInterval1 = 0.0;
            double MainXAxisInterval2 = 0.0;
            double CursorStartInterval1 = 0.0;
            double CursorStartInterval2 = 0.0;
            GraphType = "Orbit";
            try
            {


                pt1 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Bottom - (Fifty))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                    (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(BlkDash, pt1, pt2); //BlkDash

                Pts = new PointF[0];
                MaxVal = findHighestValue(YAxis1);
                MaxVal2 = findHighestValue(YAxis2);
                HighestValYAxis1 = MaxVal;
                HighestValYAxis2 = MaxVal2;
                HighestValYAxis = MaxVal2;
                MainYAxisInterval1 = (double) (MaxVal / (TotalXAxis / 2));
                MainYAxisInterval2 = (double) (MaxVal2 / (TotalYAxis / 2));
                MainXAxisInterval1 = (TotalXAxis / (YAxis1.Length - 1));
                MainXAxisInterval2 = (TotalYAxis / (YAxis1.Length - 1));
                CursorStartInterval1 = MainXAxisInterval1;
                CursorStartInterval2 = MainXAxisInterval2;



                SetAxisMarks(YAxis1, YAxis2);
                Pts = new PointF[YAxis1.Length];
                for (int i = 0; i < YAxis1.Length; i++)
                {


                    //Array.Resize(ref Pts, Pts.Length + 1);

                    Ptsn1 = new PointF(
                        (float) ((pt.Left + SixtyTwo + TotalXAxis / 2) + (float) (YAxis1[i] / MainYAxisInterval1)),
                        (float) (pt.Bottom - (TwoHundred + OneFifty) - (float) (YAxis2[i] / MainYAxisInterval2)));

                    Pts[i] = Ptsn1;
                }

                PtsSelected = new PointF[Pts.Length];
                PtsSelected = Pts;
                XSelected = new double[YAxis1.Length];
                YSelected = new double[YAxis2.Length];
                XSelected = YAxis1;
                YSelected = YAxis2;




                der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);




            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        public void GenerateOrbit(double[] YAxis1, double[] YAxis2, string ColorTag)
        {
            OrbitXAxis = YAxis1;
            OrbitYAxis = YAxis2;
            panel1.Refresh();
            //splitContainerControl1.Panel1.Refresh();

            TrendButtonEnabled = IsAxisCombo; // btnTrend.Enabled = IsAxisCombo;
            string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
            //tcMain.SelectedTabPage = tpGraph;
            SetAxis();
            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            double MaxVal2 = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;
            double HighestValYAxis1 = 0.0;
            double HighestValYAxis2 = 0.0;
            double MainYAxisInterval1 = 0;
            double MainYAxisInterval2 = 0;
            double MainXAxisInterval1 = 0.0;
            double MainXAxisInterval2 = 0.0;
            double CursorStartInterval1 = 0.0;
            double CursorStartInterval2 = 0.0;
            GraphType = "Orbit";
            try
            {


                pt1 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Bottom - (Fifty))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                    (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(BlkDash, pt1, pt2); //BlkDash

                Pts = new PointF[0];
                MaxVal = findHighestValue(YAxis1);
                MaxVal2 = findHighestValue(YAxis2);
                HighestValYAxis1 = MaxVal;
                HighestValYAxis2 = MaxVal2;
                HighestValYAxis = MaxVal2;
                MainYAxisInterval1 = (double) (MaxVal / (TotalXAxis / 2));
                MainYAxisInterval2 = (double) (MaxVal2 / (TotalYAxis / 2));
                MainXAxisInterval1 = (TotalXAxis / (YAxis1.Length - 1));
                MainXAxisInterval2 = (TotalYAxis / (YAxis1.Length - 1));
                CursorStartInterval1 = MainXAxisInterval1;
                CursorStartInterval2 = MainXAxisInterval2;



                SetAxisMarks(YAxis1, YAxis2);
                Pts = new PointF[YAxis1.Length];
                for (int i = 0; i < YAxis1.Length; i++)
                {


                    //Array.Resize(ref Pts, Pts.Length + 1);

                    Ptsn1 = new PointF(
                        (float) ((pt.Left + SixtyTwo + TotalXAxis / 2) + (float) (YAxis1[i] / MainYAxisInterval1)),
                        (float) (pt.Bottom - (TwoHundred + OneFifty) - (float) (YAxis2[i] / MainYAxisInterval2)));

                    Pts[i] = Ptsn1;
                }

                PtsSelected = new PointF[Pts.Length];
                PtsSelected = Pts;
                XSelected = new double[YAxis1.Length];
                YSelected = new double[YAxis2.Length];
                XSelected = YAxis1;
                YSelected = YAxis2;
                x = XSelected;
                y = YSelected;



                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(ColorTag)), (float) .5), Pts,
                    (float) 0); //(Color.DarkRed, (float).5), Pts, (float)0);




            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }



        private int setAxisCtr = 0;

        public void CreatGPWithVariable(string ColorTag)
        {

            //ClearCmbCursor()
            //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair" });
            //cmbCurSors.SelectedIndex = 0;
            //tcMain.SelectedTabPage = tpGraph;
            if (GphCtr <= 0)
            {
                SetAxis();
            }
            //lblDate.Text = "Date :-- " + SlctedDates[0].ToString();

            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;

            try
            {


                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    //setCursorCombo("Time");
                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    // setCursorCombo("FFT");
                }

                if (GphCtr == 0)
                {
                    for (int i = 0; i < 8; i++)
                    {
                        if (i == 0)
                        {
                            if (x != null)
                            {
                                if (x.Length > 1)
                                {
                                    Pts = new PointF[0];
                                    MaxVal = findHighestValue(y);
                                    MaxVal *= 1.25;
                                    HighestValYAxis = MaxVal;
                                    MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                                    CursorStartInterval = MainXAxisInterval;
                                    SetAxisMarks(x, y);
                                    setAxisCtr = 0;
                                }
                            }
                        }
                        else if (i == 1)
                        {
                            if (x1 != null)
                            {
                                if (x1.Length > 1)
                                {
                                    Pts1 = new PointF[0];
                                    MaxVal = findHighestValue(y1);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x1, y1);
                                        setAxisCtr = 1;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                                }
                            }
                        }
                        else if (i == 2)
                        {
                            if (x2 != null)
                            {
                                if (x2.Length > 1)
                                {
                                    Pts2 = new PointF[0];
                                    MaxVal = findHighestValue(y2);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x2, y2);
                                        setAxisCtr = 2;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                                }
                            }
                        }
                        else if (i == 3)
                        {
                            if (x3 != null)
                            {
                                if (x3.Length > 1)
                                {
                                    Pts3 = new PointF[0];
                                    MaxVal = findHighestValue(y3);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x3, y3);
                                        setAxisCtr = 3;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            if (x4 != null)
                            {
                                if (x4.Length > 1)
                                {
                                    Pts4 = new PointF[0];
                                    MaxVal = findHighestValue(y4);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x4, y4);
                                        setAxisCtr = 4;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                                }
                            }
                        }
                        else if (i == 5)
                        {
                            if (x5 != null)
                            {
                                if (x5.Length > 1)
                                {
                                    Pts5 = new PointF[0];
                                    MaxVal = findHighestValue(y5);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x5, y5);
                                        setAxisCtr = 5;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                                }
                            }
                        }
                        else if (i == 6)
                        {
                            if (x6 != null)
                            {
                                if (x6.Length > 1)
                                {
                                    Pts6 = new PointF[0];
                                    MaxVal = findHighestValue(y6);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x6, y6);
                                        setAxisCtr = 6;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);

                                    MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                                }
                            }
                        }
                        else if (i == 7)
                        {
                            if (x7 != null)
                            {
                                if (x7.Length > 1)
                                {
                                    Pts7 = new PointF[0];
                                    MaxVal = findHighestValue(y7);
                                    MaxVal *= 1.25;
                                    if (MaxVal > HighestValYAxis)
                                    {
                                        HighestValYAxis = MaxVal;
                                        SetAxisMarks(x7, y7);
                                        setAxisCtr = 7;
                                    }

                                    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                    if ((double) (MaxVal / TotalYAxis) > MainYAxisInterval)
                                        MainYAxisInterval = (double) (MaxVal / TotalYAxis);
                                    //MainYAxisInterval = (double)(MaxVal / 60);
                                    MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                                }
                            }
                        }
                    }
                }


                //for (int i = 0; i < x.Length; i++)
                //{


                //    Array.Resize(ref Pts, Pts.Length + 1);
                //    Pts1 = new PointF((float)((pt.Left + SixtyTwo) + (MainXAxisInterval * i)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(y[i] / MainYAxisInterval)));//52
                //    Pts[i] = Pts1;


                //}
                //BreakYAxis();



                //if (GphCtr <= 0)
                //{
                //    SetAxisMarks(x, y);
                //}
                if (HighestValYAxis != 0.0) // && GphCtr == 0 || GphCtr != 0)
                {

                    if (GphCtr == 0)
                    {
                        if (x.Length > 1)
                        {
                            Pts = new PointF[x.Length];
                            for (int i = 0; i < x.Length; i++)
                            {


                                //Array.Resize(ref Pts, Pts.Length + 1);
                                if (Time == true)
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y[i] / MainYAxisInterval)));
                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                                }

                                //Ptsn1.Y = (float)(Math.Round(Ptsn1.Y, 5));
                                Pts[i] = Ptsn1;
                            }

                            PtsSelected = new PointF[Pts.Length];
                            PtsSelected = Pts;
                            XSelected = new double[x.Length];
                            YSelected = new double[y.Length];
                            XSelected = x;
                            YSelected = y;
                        }
                    }
                    else if (GphCtr == 1)
                    {
                        if (x1.Length > 1)
                        {
                            Pts1 = new PointF[x1.Length];
                            for (int i = 0; i < x1.Length; i++)
                            {
                                //Array.Resize(ref Pts1, Pts1.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y1[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y1[i] / MainYAxisInterval)));
                                }

                                Pts1[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        if (x2.Length > 1)
                        {
                            Pts2 = new PointF[x2.Length];
                            for (int i = 0; i < x2.Length; i++)
                            {
                                //Array.Resize(ref Pts2, Pts2.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y2[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y2[i] / MainYAxisInterval)));
                                }

                                Pts2[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 3)
                    {
                        if (x3.Length > 1)
                        {
                            Pts3 = new PointF[x3.Length];
                            for (int i = 0; i < x3.Length; i++)
                            {
                                //Array.Resize(ref Pts3, Pts3.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y3[i] / MainYAxisInterval)));

                                }
                                else
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y3[i] / MainYAxisInterval)));
                                }

                                Pts3[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 4)
                    {

                        if (x4.Length > 1)
                        {
                            Pts4 = new PointF[x4.Length];
                            for (int i = 0; i < x4.Length; i++)
                            {
                                //Array.Resize(ref Pts4, Pts4.Length + 1);
                                if (Time == true)
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y4[i] / MainYAxisInterval)));
                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y4[i] / MainYAxisInterval)));

                                }

                                Pts4[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 5)
                    {
                        if (x5.Length > 1)
                        {
                            Pts5 = new PointF[x5.Length];
                            for (int i = 0; i < x5.Length; i++)
                            {
                                //Array.Resize(ref Pts5, Pts5.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y5[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y5[i] / MainYAxisInterval)));
                                }

                                Pts5[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 6)
                    {
                        if (x6.Length > 1)
                        {
                            Pts6 = new PointF[x6.Length];
                            for (int i = 0; i < x6.Length; i++)
                            {
                                //Array.Resize(ref Pts6, Pts6.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y6[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y6[i] / MainYAxisInterval)));
                                }

                                Pts6[i] = Ptsn1;
                            }
                        }
                    }
                    else if (GphCtr == 7)
                    {
                        if (x7.Length > 1)
                        {
                            Pts7 = new PointF[x7.Length];
                            for (int i = 0; i < x7.Length; i++)
                            {
                                //Array.Resize(ref Pts7, Pts7.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y7[i] / MainYAxisInterval)));

                                }
                                else
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y7[i] / MainYAxisInterval)));
                                }

                                Pts7[i] = Ptsn1;
                            }
                        }
                    }




                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                    if (GphCtr == 0)
                    {
                        if (Pts != null)
                        {
                            //Pen objPen=new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])),(float).5);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts, (float) 0);
                            //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                        }

                        //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    }
                    else if (GphCtr == 1)
                    {
                        if (Pts1 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts1, (float) 0);
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        if (Pts2 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts2, (float) 0);
                        }

                    }
                    else if (GphCtr == 3)
                    {
                        if (Pts3 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts3, (float) 0);
                        }

                    }
                    else if (GphCtr == 4)
                    {
                        if (Pts4 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts4, (float) 0);
                        }

                    }
                    else if (GphCtr == 5)
                    {
                        if (Pts5 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts5, (float) 0);
                        }

                    }
                    else if (GphCtr == 6)
                    {
                        if (Pts6 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts6, (float) 0);
                        }

                    }
                    else if (GphCtr == 7)
                    {
                        if (Pts7 != null)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[GphCtr])), (float) .5),
                                Pts7, (float) 0);
                        }

                    }

                    //GphCtr++;
                }

                //else
                //{
                //    MessageBoxEx.Show("No data to show");
                //}
                GphCtr++;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                if (ex.Message.ToString() == "Overflow error.")
                {
                    GphCtr++;
                }

                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        public void TwoDCursorLineSqureWithKeysOctave(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                RedrawOctave();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);

            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
                PenBlksqr = new Pen(MainCursorColor, (float) 1);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            SS = new Rectangle(new Point((int) Rgn.Right / 2, (int) Rgn.Bottom / 2), new Size(5, 5));
            //float PrvsValX=0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    //pt1[0] = Pts[ThrDCurCtr];
                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        Line.DrawLine(PenWht, PrvCr1, PrvCr2);
                        Line.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                        //if (PrvsValX != 0)
                        //{
                        //    redrawNew(PrvsValX);
                        //}
                        RedrawOctave();
                    }

                    Line.DrawLine(PenBlk, (float) Pts[(int) ThrDCurCtr].X, pt1.Y, (float) Pts[(int) ThrDCurCtr].X,
                        pt2.Y); //Line.DrawLine(PenBlk, pt1, pt2);
                    PrvCr1 = new PointF((float) Pts[(int) ThrDCurCtr].X, pt1.Y); //pt1;
                    PrvCr2 = new PointF((float) Pts[(int) ThrDCurCtr].X, pt2.Y); //pt2;
                    XVala[0] = Convert.ToDouble(XSelected[(int) ThrDCurCtr]);
                    YVala[0] = Convert.ToDouble(YSelected[(int) ThrDCurCtr]);
                    PrvsValX = ThrDCurCtr;
                    SS = new Rectangle(new Point((int) Pts[(int) ThrDCurCtr].X - 3, (int) Pts[(int) ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    Line.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;
                    FillDatagrid(XVala, YVala);

                    //if (AreaPlot == true)
                    //{
                    //    FFTAreaPlot();
                    //}


                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void TwoDCursorLineSqureWithKeys(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);

            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
                PenBlksqr = new Pen(MainCursorColor, (float) 1);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            SS = new Rectangle(new Point((int) Rgn.Right / 2, (int) Rgn.Bottom / 2), new Size(5, 5));
            //float PrvsValX=0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    //pt1[0] = Pts[ThrDCurCtr];
                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        Line.DrawLine(PenWht, PrvCr1, PrvCr2);
                        Line.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                        //if (PrvsValX != 0)
                        //{
                        //    redrawNew(PrvsValX);
                        //}
                        redraw();
                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    PrvCr1 = pt1;
                    PrvCr2 = pt2;
                    XVala[0] = Convert.ToDouble(XSelected[(int) ThrDCurCtr]);
                    YVala[0] = Convert.ToDouble(YSelected[(int) ThrDCurCtr]);
                    PrvsValX = ThrDCurCtr;
                    SS = new Rectangle(new Point((int) Pts[(int) ThrDCurCtr].X - 3, (int) Pts[(int) ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    Line.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;
                    FillDatagrid(XVala, YVala);

                    if (AreaPlot == true)
                    {
                        FFTAreaPlot();
                    }


                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        public void TwoDCursorLineSqureWithKeysForOrbit(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redrawOrbit();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);

            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(Color.Black, (float) .5);
                PenBlksqr = new Pen(Color.Black, (float) 1);
            }




            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            SS = new Rectangle(new Point((int) Rgn.Right / 2, (int) Rgn.Bottom / 2), new Size(5, 5));
            //float PrvsValX=0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (lblXunit.Text.ToString() == "CPM")
                    {
                        lblXAxis.Text = "RPM : " + Math.Ceiling((double) xarray[ThrDCurCtr] * 60).ToString();
                    }
                    else
                    {
                        lblXAxis.Text = "RPM : " + xarray[ThrDCurCtr].ToString();
                    }

                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    //pt1[0] = Pts[ThrDCurCtr];
                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        //Line.DrawLine(PenWht, PrvCr1, PrvCr2);
                        Line.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                        //if (PrvsValX != 0)
                        //{
                        //    redrawNew(PrvsValX);
                        //}
                        redrawOrbit();
                    }

                    //Line.DrawLine(PenBlk, pt1, pt2);
                    PrvCr1 = pt1;
                    PrvCr2 = pt2;
                    XVala[0] = Convert.ToDouble(OrbitXAxis[(int) ThrDCurCtr]);
                    YVala[0] = Convert.ToDouble(OrbitYAxis[(int) ThrDCurCtr]);
                    PrvsValX = ThrDCurCtr;
                    SS = new Rectangle(new Point((int) Pts[(int) ThrDCurCtr].X - 3, (int) Pts[(int) ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    Line.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;
                    FillDatagrid(XVala, YVala);

                    if (AreaPlot == true)
                    {
                        FFTAreaPlot();
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        float PrvsValX = 0;

        private void TwoDCursorLineWithSqure(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);

            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
                PenBlksqr = new Pen(MainCursorColor, (float) 1);
                //PenBlksqr = PenBlk;
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF Prv1 = new PointF();
            PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            SS = new Rectangle(new Point((int) Rgn.Right / 2, (int) Rgn.Bottom / 2), new Size(5, 5));

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {
                        Line.DrawLines(PenWht, arrLocts);

                        Line.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        //if (PrvsValX != 0)
                        //{
                        //    redrawNew(PrvsValX);
                        //}
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        FillDatagrid(XVala, YVala);
                        PrvsValX = XvalNow;
                        //panel1.Refresh();
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        SS = new Rectangle(
                            new Point((int) PtsSelected[(int) XvalNow].X - 3, (int) PtsSelected[(int) XvalNow].Y - 5),
                            new Size(7, 7));
                        Line.DrawRectangle(PenBlksqr, SS);
                        PrvSS = SS;
                        ThrDCurCtr = Convert.ToInt32(XvalNow);
                        redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    pt1forImage = pt1;
                    pt2forImage = pt2;
                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void TwoDCursorLineWithSqureForZoomed(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);

            // if (Color.BlackSelected == true)
            {
                PenBlk = new Pen(Color.Black, (float) .5);
                PenBlksqr = new Pen(Color.Black, (float) 1);
            }




            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF Prv1 = new PointF();
            PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            SS = new Rectangle(new Point((int) Rgn.Right / 2, (int) Rgn.Bottom / 2), new Size(5, 5));

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (TimeDataAckForZoom == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {
                        Line.DrawLines(PenWht, arrLocts);
                        Line.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisIntervalZoom);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        XVala[0] = Convert.ToDouble(XZoom[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YZoom[(int) XvalNow]);
                        FillDatagrid(XVala, YVala);
                        //panel1.Refresh();
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        SS = new Rectangle(
                            new Point((int) PtsZoomedVals[(int) XvalNow].X - 2,
                                (int) PtsZoomedVals[(int) XvalNow].Y - 5), new Size(7, 7));
                        Line.DrawRectangle(PenBlksqr, SS);
                        PrvSS = SS;
                        DrawZoomed();
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void DrawGrids()
        {
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;

            Pen BlkPen = new Pen(Color.Black, 1);
            BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            Pen BlkPenTwo = new Pen(Color.Black, 2);
            BlkPenTwo.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            RectangleF Rect = ThreDee.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - ((Rect.Left + SixtyTwo) + OneSixtyTwo);
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (TwoHundred + FourHundred);
            double MaxVal = 0;
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();
            //IntervalOnXGridsThreeDee
            Font objFont = new Font("Roman", 7, FontStyle.Italic);
            Brush objBrush = Brushes.Black;
            int TestIntvrl = (x.Length - 1) / 4;
            try
            {
                for (int i = 0; i <= 2; i++)
                {
                    pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + TwoHundred + (i * 51)));
                    pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + TwoHundred + (i * 51)));
                    //  ThreDee.DrawLine(BlkPen, pt1, pt2);

                    pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourFifty + (i * 51)));
                    pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + TwoHundred + (i * 51)));
                    // ThreDee.DrawLine(BlkPenTwo, pt1, pt2);
                }
















                //for (int i = 1; i <= 4; i++)
                //{
                //    pt1 = new PointF((float)(Rect.Left + OneSixtyTwo - (24 * i)), (float)(Rect.Bottom - FourFifty + (50 * i)));
                //    pt2 = new PointF((float)(Rect.Right - SixtyTwo - (24 * i)), (float)(Rect.Bottom - FourFifty + (50 * i)));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //}


















                for (int i = 1; i <= 3; i++)
                {
                    pt1 = new PointF((float) (Rect.Right - SixtyTwo - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Bottom - FourFifty));
                    pt2 = new PointF((float) (Rect.Right - SixtyTwo - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    pt1 = new PointF((float) (Rect.Right - SixtyTwo - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Bottom - FourFifty));
                    pt2 = new PointF((float) (Rect.Right - (OneSixtyTwo) - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Bottom - TwoHundred));
                    // ThreDee.DrawLine(BlkPenTwo, pt1, pt2);
                    ThreDee.DrawString(Convert.ToString(x[TestIntvrl * (4 - i)]), objFont, objBrush, pt2);

                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void DrawGrids(Graphics ThreDee)
        {
            Region Rgn = new Region(panel1.Bounds);
            //Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;

            Pen BlkPen = new Pen(Color.Black, 1);
            BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            Pen BlkPenTwo = new Pen(Color.Black, 2);
            BlkPenTwo.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
            RectangleF Rect = ThreDee.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - ((Rect.Left + SixtyTwo) + OneSixtyTwo);
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (TwoHundred + FourHundred);
            double MaxVal = 0;
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();
            //IntervalOnXGridsThreeDee
            Font objFont = new Font("Roman", 7, FontStyle.Italic);
            Brush objBrush = Brushes.Black;
            int TestIntvrl = (x.Length - 1) / 4;
            try
            {
                for (int i = 0; i <= 2; i++)
                {
                    pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + TwoHundred + (i * 51)));
                    pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + TwoHundred + (i * 51)));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);

                    pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourFifty + (i * 51)));
                    pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + TwoHundred + (i * 51)));
                    // ThreDee.DrawLine(BlkPenTwo, pt1, pt2);
                }

                //for (int i = 1; i <= 4; i++)
                //{
                //    pt1 = new PointF((float)(Rect.Left + OneSixtyTwo - (24 * i)), (float)(Rect.Bottom - FourFifty + (50 * i)));
                //    pt2 = new PointF((float)(Rect.Right - SixtyTwo - (24 * i)), (float)(Rect.Bottom - FourFifty + (50 * i)));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //}

                for (int i = 1; i <= 3; i++)
                {
                    pt1 = new PointF((float) (Rect.Right - SixtyTwo - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Bottom - FourFifty));
                    pt2 = new PointF((float) (Rect.Right - SixtyTwo - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    pt1 = new PointF((float) (Rect.Right - SixtyTwo - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Bottom - FourFifty));
                    pt2 = new PointF((float) (Rect.Right - (OneSixtyTwo) - ((TotalXAxis / 4) * i)),
                        (float) (Rect.Bottom - TwoHundred));
                    //ThreDee.DrawLine(BlkPenTwo, pt1, pt2);
                    ThreDee.DrawString(Convert.ToString(x[TestIntvrl * (4 - i)]), objFont, objBrush, pt2);

                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        //private void SetDatesOfThreeDee()
        //{
        //    SetAxis();
        //    Region Rgn = new Region(panel1.Bounds);
        //    Graphics ThreDee = panel1.CreateGraphics();
        //    //ThreDee = panel1.CreateGraphics();
        //    ThreDee.Clip = Rgn;

        //    Pen BlkPen = new Pen(Color.Black, 1);
        //    //BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
        //    RectangleF Rect = ThreDee.ClipBounds;
        //    //PointF pt1 = new PointF();
        //    //PointF pt2 = new PointF();
        //    //PointF LstPoint = Target[Target.Length - 1];
        //    Font objFont = new Font("Roman", 7, FontStyle.Italic);
        //    Brush objBrush = Brushes.Black;
        //    int StartPosition = 0;

        //    try
        //    {
        //        if (SlctedDates.Count > 16)
        //        {
        //            StartPosition = SlctedDates.Count - 16;
        //        }
        //        else
        //        {
        //            StartPosition = 0;

        //        }
        //        PointF LstPoint = Pts[Pts.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts1[Pts1.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts2[Pts2.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts3[Pts3.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts4[Pts4.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts5[Pts5.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts6[Pts6.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);

        //        LstPoint = Pts7[Pts7.Length - 1];
        //        ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0, LstPoint.Y);


        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //    }
        //}
        private void SetDatesOfThreeDee(Graphics ThreDee)
        {
            SetAxis();
            Region Rgn = new Region(panel1.Bounds);
            //Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;

            Pen BlkPen = new Pen(Color.Black, 1);
            //BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
            RectangleF Rect = ThreDee.ClipBounds;
            //PointF pt1 = new PointF();
            //PointF pt2 = new PointF();
            //PointF LstPoint = Target[Target.Length - 1];
            Font objFont = new Font("Roman", 7, FontStyle.Italic);
            Brush objBrush = Brushes.Black;
            int StartPosition = 0;

            try
            {
                if (SlctedDates.Count > 16)
                {
                    StartPosition = SlctedDates.Count - 16;
                }
                else
                {
                    StartPosition = 0;

                }

                PointF LstPoint = Pts[Pts.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts1[Pts1.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 1].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts2[Pts2.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 2].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts3[Pts3.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 3].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts4[Pts4.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 4].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts5[Pts5.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 5].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts6[Pts6.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 6].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts7[Pts7.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 7].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        public void ThreeDCreaterByAmit()
        {
            bool TimeData = false;
            //TimeData = CheckForTimeData(y);
            if (TimeData != true)
            {
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
                //ExtractExcellData();
                //tcMain.SelectedTabPage = tpGraph;
                SetAxis();
                Region Rgn = new Region(panel1.Bounds);
                Graphics ThreDee = panel1.CreateGraphics();
                //ThreDee = panel1.CreateGraphics();
                ThreDee.Clip = Rgn;

                Pen BlkPen = new Pen(Color.Black, 1);
                //BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                RectangleF Rect = ThreDee.ClipBounds;
                PointF pt1 = new PointF();
                PointF pt2 = new PointF();
                float ScreenLenth = Rect.Right;
                float ScreenHeight = Rect.Bottom;
                double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (Rect.Left + SixtyTwo + OneSixtyTwo);
                double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (TwoHundred + FourHundred);
                //double AxisInterval = (TotalXAxis / (x.Length - 1));
                //IntervalOnXGridsThreeDee = AxisInterval / 4;
                double MaxVal = 0;
                //TimeData = CheckForTimeData(y);
                //Pts = new PointF[0];
                PointF Ptsn1 = new PointF();
                try
                {
                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //pt2 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Top + FourHundred));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);

                    //pt1 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);

                    //pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                    //pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);


                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Top + FourHundred));
                    //pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //pt2 = new PointF((float)(Rect.Right - OneSixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Right - OneSixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //DrawGrids();
                    if (GphCtr == 0)
                    {
                        {
                            for (int i = 0; i < 8; i++)
                            {
                                if (i == 0)
                                {
                                    if (x != null)
                                    {
                                        if (x.Length > 1)
                                        {
                                            Pts = new PointF[0];
                                            MaxVal = findHighestValue(y);
                                            MaxVal *= 1.25;
                                            HighestValYAxis = MaxVal;
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                                            //CursorStartInterval = MainXAxisInterval;
                                            //SetAxisMarks(x, y);
                                            //setAxisCtr = 0;
                                        }
                                    }
                                }
                                else if (i == 1)
                                {
                                    if (x1 != null)
                                    {
                                        if (x1.Length > 1)
                                        {
                                            Pts1 = new PointF[0];
                                            MaxVal = findHighestValue(y1);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x1, y1);
                                                //setAxisCtr = 1;
                                            }

                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                                        }
                                    }
                                }
                                else if (i == 2)
                                {
                                    if (x2 != null)
                                    {
                                        if (x2.Length > 1)
                                        {
                                            Pts2 = new PointF[0];
                                            MaxVal = findHighestValue(y2);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x2, y2);
                                                //setAxisCtr = 2;
                                            }

                                            //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                                        }
                                    }
                                }
                                else if (i == 3)
                                {
                                    if (x3 != null)
                                    {
                                        if (x3.Length > 1)
                                        {
                                            Pts3 = new PointF[0];
                                            MaxVal = findHighestValue(y3);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x3, y3);
                                                //setAxisCtr = 3;
                                            }

                                            //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                                        }
                                    }
                                }
                                else if (i == 4)
                                {
                                    if (x4 != null)
                                    {
                                        if (x4.Length > 1)
                                        {
                                            Pts4 = new PointF[0];
                                            MaxVal = findHighestValue(y4);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x4, y4);
                                                //setAxisCtr = 4;
                                            }

                                            //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                                        }
                                    }
                                }
                                else if (i == 5)
                                {
                                    if (x5 != null)
                                    {
                                        if (x5.Length > 1)
                                        {
                                            Pts5 = new PointF[0];
                                            MaxVal = findHighestValue(y5);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x5, y5);
                                                //setAxisCtr = 5;
                                            }

                                            //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                                        }
                                    }
                                }
                                else if (i == 6)
                                {
                                    if (x6 != null)
                                    {
                                        if (x6.Length > 1)
                                        {
                                            Pts6 = new PointF[0];
                                            MaxVal = findHighestValue(y6);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x6, y6);
                                                //setAxisCtr = 6;
                                            }

                                            //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);

                                            MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                                        }
                                    }
                                }
                                else if (i == 7)
                                {
                                    if (x7 != null)
                                    {
                                        if (x7.Length > 1)
                                        {
                                            Pts7 = new PointF[0];
                                            MaxVal = findHighestValue(y7);
                                            MaxVal *= 1.25;
                                            if (MaxVal > HighestValYAxis)
                                            {
                                                HighestValYAxis = MaxVal;
                                                //SetAxisMarks(x7, y7);
                                                //setAxisCtr = 7;
                                            }

                                            //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            //if ((double)(MaxVal / TotalYAxis) > MainYAxisInterval)
                                            //    MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                                            MainYAxisInterval = (double) (HighestValYAxis / 60);
                                            MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                                        }
                                    }
                                }
                            }
                        }
                        //Pts = new PointF[0];
                        //MaxVal = findHighestValue(y);
                        ////MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        //MainYAxisInterval = (double)(MaxVal / 60);
                        //MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                        //CursorStartInterval = MainXAxisInterval;
                    }

                    //else if (GphCtr == 1)
                    //{
                    //    Pts1 = new PointF[0];
                    //    MaxVal = findHighestValue(y1);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    Pts2 = new PointF[0];
                    //    MaxVal = findHighestValue(y2);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    Pts3 = new PointF[0];
                    //    MaxVal = findHighestValue(y3);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    Pts4 = new PointF[0];
                    //    MaxVal = findHighestValue(y4);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    Pts5 = new PointF[0];
                    //    MaxVal = findHighestValue(y5);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    Pts6 = new PointF[0];
                    //    MaxVal = findHighestValue(y6);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    Pts7 = new PointF[0];
                    //    MaxVal = findHighestValue(y7);
                    //    //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                    //    MainYAxisInterval = (double)(MaxVal / 60);
                    //    MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                    //}
                    if (GphCtr == 0)
                    {
                        Pts = new PointF[x.Length];
                        for (int i = 0; i < x.Length; i++)
                        {


                            //Array.Resize(ref Pts, Pts.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y[i] / MainYAxisInterval)));

                            Pts[i] = Ptsn1;
                        }

                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                    }
                    else if (GphCtr == 1)
                    {
                        Pts1 = new PointF[x1.Length];
                        for (int i = 0; i < x1.Length; i++)
                        {
                            //Array.Resize(ref Pts1, Pts1.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y1[i] / MainYAxisInterval)));
                            Pts1[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        Pts2 = new PointF[x2.Length];
                        for (int i = 0; i < x2.Length; i++)
                        {
                            //Array.Resize(ref Pts2, Pts2.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y2[i] / MainYAxisInterval)));
                            Pts2[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 3)
                    {
                        Pts3 = new PointF[x3.Length];
                        for (int i = 0; i < x3.Length; i++)
                        {
                            //Array.Resize(ref Pts3, Pts3.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y3[i] / MainYAxisInterval)));
                            Pts3[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 4)
                    {
                        Pts4 = new PointF[x4.Length];
                        for (int i = 0; i < x4.Length; i++)
                        {
                            //Array.Resize(ref Pts4, Pts4.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y4[i] / MainYAxisInterval)));
                            Pts4[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 5)
                    {
                        Pts5 = new PointF[x5.Length];
                        for (int i = 0; i < x5.Length; i++)
                        {
                            //Array.Resize(ref Pts5, Pts5.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y5[i] / MainYAxisInterval)));
                            Pts5[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 6)
                    {
                        Pts6 = new PointF[x6.Length];
                        for (int i = 0; i < x6.Length; i++)
                        {
                            //Array.Resize(ref Pts6, Pts6.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y6[i] / MainYAxisInterval)));
                            Pts6[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 7)
                    {
                        Pts7 = new PointF[x7.Length];
                        for (int i = 0; i < x7.Length; i++)
                        {
                            //Array.Resize(ref Pts7, Pts7.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y7[i] / MainYAxisInterval)));
                            Pts7[i] = Ptsn1;
                        }
                    }


                    //if (GphCtr == 0)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    //}
                    //else if (GphCtr == 1)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);
                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);
                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);
                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);
                    //}
                    GphCtr++;
                    //SetDatesOfThreeDee();
                }

                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }

            }

        }

        public void ThreeDCreater()
        {

            bool TimeData = false;
            //TimeData = CheckForTimeData(y);
            if (TimeData != true)
            {
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
                //ExtractExcellData();
                //tcMain.SelectedTabPage = tpGraph;
                SetAxis();
                Region Rgn = new Region(panel1.Bounds);
                Graphics ThreDee = panel1.CreateGraphics();
                //ThreDee = panel1.CreateGraphics();
                ThreDee.Clip = Rgn;

                Pen BlkPen = new Pen(Color.Black, 1);
                //BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                RectangleF Rect = ThreDee.ClipBounds;
                PointF pt1 = new PointF();
                PointF pt2 = new PointF();
                float ScreenLenth = Rect.Right;
                float ScreenHeight = Rect.Bottom;
                double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (Rect.Left + SixtyTwo + OneSixtyTwo);
                double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (TwoHundred + FourHundred);
                //double AxisInterval = (TotalXAxis / (x.Length - 1));
                //IntervalOnXGridsThreeDee = AxisInterval / 4;
                double MaxVal = 0;
                //TimeData = CheckForTimeData(y);
                //Pts = new PointF[0];
                PointF Ptsn1 = new PointF();
                try
                {
                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //pt2 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Top + FourHundred));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);

                    //pt1 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);

                    //pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                    //pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);


                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Top + FourHundred));
                    //pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //pt2 = new PointF((float)(Rect.Right - OneSixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //pt1 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                    //pt2 = new PointF((float)(Rect.Right - OneSixtyTwo), (float)(Rect.Bottom - TwoHundred));
                    //ThreDee.DrawLine(BlkPen, pt1, pt2);
                    //DrawGrids();
                    if (GphCtr == 0)
                    {
                        Pts = new PointF[0];
                        MaxVal = findHighestValue(y);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }
                    else if (GphCtr == 1)
                    {
                        Pts1 = new PointF[0];
                        MaxVal = findHighestValue(y1);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                    }
                    else if (GphCtr == 2)
                    {
                        Pts2 = new PointF[0];
                        MaxVal = findHighestValue(y2);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                    }
                    else if (GphCtr == 3)
                    {
                        Pts3 = new PointF[0];
                        MaxVal = findHighestValue(y3);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                    }
                    else if (GphCtr == 4)
                    {
                        Pts4 = new PointF[0];
                        MaxVal = findHighestValue(y4);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                    }
                    else if (GphCtr == 5)
                    {
                        Pts5 = new PointF[0];
                        MaxVal = findHighestValue(y5);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                    }
                    else if (GphCtr == 6)
                    {
                        Pts6 = new PointF[0];
                        MaxVal = findHighestValue(y6);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                    }
                    else if (GphCtr == 7)
                    {
                        Pts7 = new PointF[0];
                        MaxVal = findHighestValue(y7);
                        MaxVal *= 1.25;
                        //MainYAxisInterval = (double)(MaxVal / TotalYAxis);
                        MainYAxisInterval = (double) (MaxVal / 60);
                        MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                    }

                    if (GphCtr == 0)
                    {
                        Pts = new PointF[x.Length];
                        for (int i = 0; i < x.Length; i++)
                        {


                            //Array.Resize(ref Pts, Pts.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y[i] / MainYAxisInterval)));

                            Pts[i] = Ptsn1;
                        }

                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                    }
                    else if (GphCtr == 1)
                    {
                        Pts1 = new PointF[x1.Length];
                        for (int i = 0; i < x1.Length; i++)
                        {
                            //Array.Resize(ref Pts1, Pts1.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y1[i] / MainYAxisInterval)));
                            Pts1[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 2)
                    {
                        Pts2 = new PointF[x2.Length];
                        for (int i = 0; i < x2.Length; i++)
                        {
                            //Array.Resize(ref Pts2, Pts2.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y2[i] / MainYAxisInterval)));
                            Pts2[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 3)
                    {
                        Pts3 = new PointF[x3.Length];
                        for (int i = 0; i < x3.Length; i++)
                        {
                            //Array.Resize(ref Pts3, Pts3.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y3[i] / MainYAxisInterval)));
                            Pts3[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 4)
                    {
                        Pts4 = new PointF[x4.Length];
                        for (int i = 0; i < x4.Length; i++)
                        {
                            //Array.Resize(ref Pts4, Pts4.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y4[i] / MainYAxisInterval)));
                            Pts4[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 5)
                    {
                        Pts5 = new PointF[x5.Length];
                        for (int i = 0; i < x5.Length; i++)
                        {
                            //Array.Resize(ref Pts5, Pts5.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y5[i] / MainYAxisInterval)));
                            Pts5[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 6)
                    {
                        Pts6 = new PointF[x6.Length];
                        for (int i = 0; i < x6.Length; i++)
                        {
                            //Array.Resize(ref Pts6, Pts6.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y6[i] / MainYAxisInterval)));
                            Pts6[i] = Ptsn1;
                        }
                    }
                    else if (GphCtr == 7)
                    {
                        Pts7 = new PointF[x7.Length];
                        for (int i = 0; i < x7.Length; i++)
                        {
                            //Array.Resize(ref Pts7, Pts7.Length + 1);
                            Ptsn1 = new PointF(
                                (float) ((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) +
                                         (MainXAxisInterval * i)),
                                (float) (Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) -
                                         (float) (y7[i] / MainYAxisInterval)));
                            Pts7[i] = Ptsn1;
                        }
                    }


                    //if (GphCtr == 0)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    //}
                    //else if (GphCtr == 1)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                    //}
                    //else if (GphCtr == 2)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                    //}
                    //else if (GphCtr == 3)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                    //}
                    //else if (GphCtr == 4)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);
                    //}
                    //else if (GphCtr == 5)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);
                    //}
                    //else if (GphCtr == 6)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);
                    //}
                    //else if (GphCtr == 7)
                    //{
                    //    ThreDee.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);
                    //}
                    GphCtr++;
                    //SetDatesOfThreeDee();
                }

                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }

            }

        }

        private void BreakYAxis()
        {
            try
            {
                string[] ChkBfrPoint = Convert.ToString(HighestValYAxis)
                    .Split(new string[] {"."}, StringSplitOptions.RemoveEmptyEntries);
                char[] ChkLenth = ChkBfrPoint[0].ToCharArray();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        ArrayList TmArr = null;

        public ArrayList TimeArr
        {
            get { return TmArr; }
            set { TmArr = value; }
        }

        private void SetAxisMarks(double[] TargetX, double[] TargetY)
        {
            try
            {
                if (GraphType != "Orbit" && GraphType != "SCL" && GraphType != "Octave")
                {
                    Points1 = new PointF[0];
                    Points2 = new PointF[0];
                    PointsY1 = new PointF[0];
                    PointsY2 = new PointF[0];
                    int DateCtrToDisplay = 0;
                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;
                    int ctrAxisLines = 0;
                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal1 = 0;
                    //IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    PointF pt1 = new PointF();
                    PointF pt2 = new PointF();
                    PointF pt3 = new PointF();
                    //double HighestValXAxis = 0.0;
                    //if (PtsExtraZoomed != null)
                    //{
                    //    if (Pts[Pts.Length-1].X>PtsExtraZoomed[PtsExtraZoomed.Length-1].X)
                    //    {

                    //        HighestValXAxis =Pts[Pts.Length-1].X+ (Pts[Pts.Length - 1].X - PtsExtraZoomed[PtsExtraZoomed.Length - 1].X);

                    //    }
                    //    else if (PtsExtraZoomed.Length < x.Length)
                    //    {
                    //        LesserVal = 0.0;
                    //        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
                    //    }
                    //}
                    //else
                    //{
                    //    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
                    //}
                    double HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
                    IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (TargetX.Length - 2) / 2;
                    }
                    else
                        LineInterval = (TargetX.Length - 1) / 4;

                    int MiniLineInterval = LineInterval / 10;
                    int ctrMiniInterval = 1;
                    MaxVal1 = findHighestValue(TargetY);
                    MaxVal1 = MaxVal1 * 1.25;
                    double HighestValYAxis1 = Convert.ToDouble(Math.Round(MaxVal1, 5));
                    double LineYInterval = HighestValYAxis1 / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    try
                    {
                        Font objFont = new Font("Roman", 10, FontStyle.Regular);
                        Font objFontDt = new Font("Roman", 7, FontStyle.Regular);
                        Brush objBrush = Brushes.Black;
                        if (IfTmData == true)
                        {
                            pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                        }

                        //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                        if (TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                        }

                        if (IfTmData == true && TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


                        }
                        else if (TrendType == "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 30), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
                            DateCtrToDisplay++;
                        }

                        ctrAxisLines++;
                        if (IfTmData == false)
                        {
                            for (int i = 1; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 10))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));

                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    if (TrendType != "Trend")
                                    {
                                        objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush,
                                            pt1);
                                    }
                                    else if (TrendType == "Trend")
                                    {
                                        //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);


                                    }

                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);


                                    //Array.Resize(ref Points1, Points1.Length + 1);
                                    _ResizeArray.IncreaseArrayPointF(ref Points1, 1);
                                    _ResizeArray.IncreaseArrayPointF(ref Points2, 1);
                                    //Array.Resize(ref Points2, Points2.Length + 1);
                                    Points1[Points1.Length - 1] = pt1;
                                    Points2[Points2.Length - 1] = pt2;



                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                    DateCtrToDisplay++;
                                }
                                else if ((ctrAxisLines == (ctrMiniInterval)) && TrendType == "Trend")
                                {
                                    if (TrendType == "Trend")
                                    {
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);
                                        DateCtrToDisplay++;

                                    }

                                    //LineInterval++;
                                    ctrMiniInterval++;
                                }

                                ctrAxisLines++;
                            }
                        }
                        else if (IfTmData == true)
                        {
                            for (int i = 1; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 10)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 20)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);


                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                }

                                ctrAxisLines++;
                            }
                        }

                        if (IfTmData == false)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - Fifteen),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left)),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 2)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                //Array.Resize(ref PointsY1, PointsY1.Length + 1);
                                //Array.Resize(ref PointsY2, PointsY2.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref PointsY1, 1);
                                _ResizeArray.IncreaseArrayPointF(ref PointsY2, 1);
                                PointsY1[PointsY1.Length - 1] = pt1;
                                PointsY2[PointsY2.Length - 1] = pt2;



                                i++;
                                if (objPoint.X == 0 && objPoint.Y == 0 && objPoint.Width == 0 && objPoint.Height == 0)
                                {
                                    break;
                                }
                            } while ((float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >
                                     (objPoint.Top + OneFifty));
                        }

                        if (IfTmData == true)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - Fifteen),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 2)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);





                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - Fifteen),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 2)),
                                    objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;
                                if (objPoint.X == 0 && objPoint.Y == 0 && objPoint.Width == 0 && objPoint.Height == 0)
                                {
                                    break;
                                }
                            } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }




                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        ErrorLogFile(ex);
                        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                    }
                }
                else if (GraphType == "Orbit")
                {
                    int DateCtrToDisplay = 0;
                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;
                    int ctrAxisLines = 0;
                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal = 0;
                    //IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    PointF pt1 = new PointF();
                    PointF pt2 = new PointF();
                    PointF pt3 = new PointF();
                    double HighestValXAxis =
                        Math.Ceiling(
                            findHighestValue(TargetX)); //Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
                    IntervalXAxis = (TotalXAxis / (TargetX.Length));

                    double lowestValXAxis = (-1) * (HighestValXAxis); //findlowestValue(TargetX, HighestValXAxis);
                    double[] orbitValXAxis = new double[5];
                    double diffX = HighestValXAxis - lowestValXAxis;
                    double diffXby4 = diffX / 4;
                    for (int i = 0; i < 5; i++)
                    {
                        orbitValXAxis[i] = Math.Round(((diffXby4 * (i)) + lowestValXAxis), 3);
                    }

                    //double HighestValXAxis = (HighestValYAxis + (HighestValYAxis / 4));//Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
                    //IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));

                    //double lowestValXAxis = (-1) * (HighestValXAxis);
                    //double[] orbitValXAxis = new double[4];
                    //double diffX = HighestValXAxis - lowestValXAxis;
                    //double diffXby4 = diffX / 4;
                    //for (int i = 0; i < 4; i++)
                    //{
                    //    orbitValXAxis[i] = Math.Round(((diffXby4 * (i + 1)) + lowestValXAxis), 3);
                    //}


                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (TargetX.Length - 2) / 2;
                    }
                    else
                        LineInterval = (TargetX.Length) / 4;

                    int MiniLineInterval = LineInterval / 10;
                    int ctrMiniInterval = 1;

                    double LineYInterval = HighestValXAxis / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    try
                    {
                        Font objFont = new Font("Roman", 10, FontStyle.Bold);
                        Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
                        Brush objBrush = Brushes.Black;
                        if (IfTmData == true)
                        {
                            pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                        }

                        //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                        if (TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                            // objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                        }

                        if (IfTmData == true && TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            //  objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


                        }
                        else if (TrendType == "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 30), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
                            DateCtrToDisplay++;
                        }

                        ctrAxisLines++;
                        if (IfTmData == false)
                        {
                            for (int i = 1; i < TargetX.Length; i++)
                            {
                                if (i == 1)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    HighestValXAxis = Convert.ToDouble(Math.Round(lowestValXAxis, 2));
                                    objGraphics.DrawString(Convert.ToString(HighestValXAxis + ".00"), objFont, objBrush,
                                        pt1);

                                }

                                if (i == TargetX.Length - 1)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    HighestValXAxis = Convert.ToDouble(Math.Round(HighestValXAxis, 2));
                                    objGraphics.DrawString(Convert.ToString(HighestValXAxis + ".00"), objFont, objBrush,
                                        pt1);

                                }

                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 10)));//TwoHundred
                                    //pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                    //pt3 = pt1;
                                    ////objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
                                    // HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    // objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                                    HighestValXAxis =
                                        Convert.ToDouble(
                                            Math.Round(lowestValXAxis + (diffXby4 * (DateCtrToDisplay + 1))));
                                    if (TrendType != "Trend")
                                    {
                                        // objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    }
                                    else if (TrendType == "Trend")
                                    {
                                        //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);


                                    }

                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    //objGraphics.DrawLine(BlkDash, pt1, pt2);
                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                    DateCtrToDisplay++;
                                }
                                else if (ctrAxisLines == (ctrMiniInterval))
                                {
                                    if (TrendType == "Trend")
                                    {
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);
                                        DateCtrToDisplay++;

                                    }

                                    //LineInterval++;
                                    ctrMiniInterval++;
                                }

                                ctrAxisLines++;
                            }
                        }
                        else if (IfTmData == true)
                        {
                            int k = 0;
                            for (int i = 0; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 10)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    // objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
                                    //HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 20)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    // objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                                    //if (TargetX[i] >= 0)

                                    //HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

                                    //else
                                    //{
                                    //    HighestValXAxis = Convert.ToDouble(0);
                                    //}
                                    objGraphics.DrawString(Convert.ToString(orbitValXAxis[k]), objFont, objBrush, pt1);
                                    k++;
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    //objGraphics.DrawLine(BlkDash, pt1, pt2);


                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                }

                                ctrAxisLines++;
                            }
                        }

                        //if (IfTmData == false)
                        //{
                        //    int i = 1;
                        //    do
                        //    {


                        //        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
                        //        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
                        //        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                        //       // objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                        //        objGraphics.DrawString(Convert.ToString(Math.Round(lowestValXAxis + (diffXby4 * (i)))), objFont, objBrush, pt3);

                        //        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
                        //        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
                        //        //objGraphics.DrawLine(BlkDash, pt1, pt2);


                        //        i++;

                        //    } while ((float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
                        //}
                        if (IfTmData == false)
                        {
                            int i = 4;

                            pt3 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                            // objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                            objGraphics.DrawString(Convert.ToString(Math.Round(HighestValXAxis) + ".00"), objFont,
                                objBrush, pt3);


                        }

                        if (IfTmData == true)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                                //  objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont,
                                    objBrush, pt3);
                                // objGraphics.DrawString(Convert.ToString("YYYYY"), objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                // objGraphics.DrawLine(BlkDash, pt1, pt2);





                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                                //   objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                                objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)),
                                    objFont, objBrush, pt3);
                                //objGraphics.DrawString("-" + Convert.ToString("VVVV"), objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                //objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;
                                if (objPoint.Height == objPoint.Width && objPoint.Width == 0)
                                {
                                    break;
                                }
                            } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }




                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        ErrorLogFile(ex);
                        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                    }
                }
                else if (GraphType == "Octave")
                {
                    Points1 = new PointF[0];
                    Points2 = new PointF[0];
                    PointsY1 = new PointF[0];
                    PointsY2 = new PointF[0];
                    int DateCtrToDisplay = 0;
                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;
                    int ctrAxisLines = 0;
                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal1 = 0;
                    PointF pt1 = new PointF();
                    PointF pt2 = new PointF();
                    PointF pt3 = new PointF();
                    double HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
                    IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (TargetX.Length - 2) / 2;
                    }
                    else
                        LineInterval = (TargetX.Length - 1) / 4;

                    int MiniLineInterval = LineInterval / 10;
                    int ctrMiniInterval = 1;
                    MaxVal1 = findHighestValue(TargetY);
                    double HighestValYAxis1 = Convert.ToDouble(Math.Round(MaxVal1, 5));
                    double LineYInterval = HighestValYAxis1 / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    try
                    {
                        Font objFont = new Font("Roman", 10, FontStyle.Regular);
                        Font objFontDt = new Font("Roman", 7, FontStyle.Regular);
                        Brush objBrush = Brushes.Black;
                        if (IfTmData == true)
                        {
                            pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                        }
                        //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                        //if (TrendType != "Trend")
                        //{
                        //    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
                        //    //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                        //    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                        //}
                        //if (IfTmData == true && TrendType != "Trend")
                        //{
                        //    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
                        //    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


                        //}
                        //else if (TrendType == "Trend")
                        //{
                        //    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 30), (int)(objPoint.Bottom - Fifty));
                        //    objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
                        //    DateCtrToDisplay++;
                        //}
                        ctrAxisLines++;
                        //if (IfTmData == false)
                        //{
                        //    for (int i = 1; i < TargetX.Length; i++)
                        //    {
                        //        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
                        //        {
                        //            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 10)));//TwoHundred
                        //            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //            pt3 = pt1;
                        //            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
                        //            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

                        //            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                        //            ctrMiniInterval++;
                        //        }
                        //        else if (ctrAxisLines == LineInterval)
                        //        {
                        //            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 20)));//TwoHundred
                        //            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //            pt3 = pt1;
                        //            objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                        //            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                        //            if (TrendType != "Trend")
                        //            {
                        //                objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                        //            }
                        //            else if (TrendType == "Trend")
                        //            {
                        //                //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //                if (DateCtrToDisplay % 2 == 0)
                        //                {
                        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //                }
                        //                else
                        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred

                        //                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);


                        //            }

                        //            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
                        //            objGraphics.DrawLine(BlkDash, pt1, pt2);


                        //            Array.Resize(ref Points1, Points1.Length + 1);
                        //            Array.Resize(ref Points2, Points2.Length + 1);
                        //            Points1[Points1.Length - 1] = pt1;
                        //            Points2[Points2.Length - 1] = pt2;



                        //            ctrAxisLines = 0;
                        //            ctrMiniInterval = 1;
                        //            DateCtrToDisplay++;
                        //        }
                        //        else if (ctrAxisLines == (ctrMiniInterval))
                        //        {
                        //            if (TrendType == "Trend")
                        //            {
                        //                if (DateCtrToDisplay % 2 == 0)
                        //                {
                        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //                }
                        //                else
                        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred
                        //                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                        //                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);
                        //                DateCtrToDisplay++;

                        //            }
                        //            //LineInterval++;
                        //            ctrMiniInterval++;
                        //        }
                        //        ctrAxisLines++;
                        //    }
                        //}
                        //else if (IfTmData == true)
                        //{
                        //    for (int i = 0; i < TargetX.Length; i++)
                        //    {
                        //        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
                        //        {
                        //            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 10));//TwoHundred
                        //            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
                        //            pt3 = pt1;
                        //            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
                        //            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                        //            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                        //            ctrMiniInterval++;
                        //        }
                        //        else if (ctrAxisLines == LineInterval)
                        //        {
                        //            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 20));//TwoHundred
                        //            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
                        //            pt3 = pt1;
                        //            objGraphics.DrawLine(new Pen(Color.Black, (float)1), pt1, pt2);
                        //            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                        //            objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


                        //            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
                        //            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
                        //            objGraphics.DrawLine(BlkDash, pt1, pt2);


                        //            ctrAxisLines = 0;
                        //            ctrMiniInterval = 1;
                        //        }
                        //        ctrAxisLines++;
                        //    }
                        //}

                        if (IfTmData == false)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 1)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                //Array.Resize(ref PointsY1, PointsY1.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref PointsY1, 1);
                                _ResizeArray.IncreaseArrayPointF(ref PointsY2, 1);
                                //Array.Resize(ref PointsY2, PointsY2.Length + 1);
                                PointsY1[PointsY1.Length - 1] = pt1;
                                PointsY2[PointsY2.Length - 1] = pt2;



                                i++;
                                if (objPoint.X == 0 && objPoint.Y == 0 && objPoint.Width == 0 && objPoint.Height == 0)
                                {
                                    break;
                                }
                            } while ((float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }

                        if (IfTmData == true)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);





                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 1), pt1, pt2);
                                objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)),
                                    objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;
                                if (objPoint.X == 0 && objPoint.Y == 0 && objPoint.Width == 0 && objPoint.Height == 0)
                                {
                                    break;
                                }
                            } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }




                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        ErrorLogFile(ex);
                        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                    }
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }
        //private void SetAxisMarks(double[] TargetX, double[] TargetY)
        //{
        //    try
        //    {
        //        if (GraphType != "Orbit")
        //        {
        //            Points1 = new PointF[0];
        //            Points2 = new PointF[0];
        //            PointsY1 = new PointF[0];
        //            PointsY2 = new PointF[0];
        //            int DateCtrToDisplay = 0;
        //            SetAxis();
        //            Pen BlkDash = new Pen(Color.Black, (float).5);
        //            BlkDash.DashCap = DashCap.Triangle;
        //            BlkDash.DashStyle = DashStyle.Dash;
        //            int ctrAxisLines = 0;
        //            double IntervalXAxis = 0.0;
        //            bool IfTmData = false;
        //            Region objRegion = new Region(panel1.Bounds);
        //            Graphics objGraphics = panel1.CreateGraphics();
        //            objGraphics.Clip = objRegion;
        //            RectangleF objPoint = objGraphics.ClipBounds;
        //            IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //            double TotalYAxis = 0.0;
        //            double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) - (objPoint.Left + SixtyTwo + OneSixtyTwo);
        //            if (IfTmData == true)
        //            {
        //                TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
        //            }
        //            else
        //            {
        //                TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

        //            }
        //            double MaxVal1 = 0;
        //            //IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //            PointF pt1 = new PointF();
        //            PointF pt2 = new PointF();
        //            PointF pt3 = new PointF();
        //            //double HighestValXAxis = 0.0;
        //            //if (PtsExtraZoomed != null)
        //            //{
        //            //    if (Pts[Pts.Length-1].X>PtsExtraZoomed[PtsExtraZoomed.Length-1].X)
        //            //    {

        //            //        HighestValXAxis =Pts[Pts.Length-1].X+ (Pts[Pts.Length - 1].X - PtsExtraZoomed[PtsExtraZoomed.Length - 1].X);

        //            //    }
        //            //    else if (PtsExtraZoomed.Length < x.Length)
        //            //    {
        //            //        LesserVal = 0.0;
        //            //        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
        //            //    }
        //            //}
        //            //else
        //            //{
        //            //    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
        //            //}
        //            double HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
        //            IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
        //            int LineInterval = 0;
        //            if (TrendType == "Trend")
        //            {
        //                LineInterval = (TargetX.Length - 2) / 2;
        //            }
        //            else
        //                LineInterval = (TargetX.Length - 1) / 4;
        //            int MiniLineInterval = LineInterval / 10;
        //            int ctrMiniInterval = 1;
        //            MaxVal1 = findHighestValue(TargetY);
        //            double HighestValYAxis1 = Convert.ToDouble(Math.Round(MaxVal1, 3));
        //            double LineYInterval = HighestValYAxis1 / 4;
        //            double LineYAxisDistance = TotalYAxis / 4;
        //            try
        //            {
        //                Font objFont = new Font("Roman", 10, FontStyle.Bold);
        //                Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
        //                Brush objBrush = Brushes.Black;
        //                if (IfTmData == true)
        //                {
        //                    pt1 = new Point((int)(objPoint.Right - OneSixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                }
        //                //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
        //                if (TrendType != "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                    //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);

        //                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);

        //                }
        //                if (IfTmData == true && TrendType != "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


        //                }
        //                else if (TrendType == "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 30), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
        //                    DateCtrToDisplay++;
        //                }
        //                ctrAxisLines++;
        //                if (IfTmData == false)
        //                {
        //                    for (int i = 1; i < TargetX.Length; i++)
        //                    {
        //                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 10)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

        //                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            ctrMiniInterval++;
        //                        }
        //                        else if (ctrAxisLines == LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 20)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            if (TrendType != "Trend")
        //                            {
        //                                if (bXunitConvert)
        //                                {
        //                                    //if (IsAlreadyCPM)
        //                                    //{
        //                                    //    objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                                    //}
        //                                    //else
        //                                    {
        //                                        objGraphics.DrawString(Convert.ToString(HighestValXAxis * 60), objFont, objBrush, pt1);
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    //if (IsAlreadyCPM)
        //                                    //{
        //                                    //    objGraphics.DrawString(Convert.ToString(HighestValXAxis / 60), objFont, objBrush, pt1);
        //                                    //}
        //                                    //else
        //                                    {
        //                                        objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                                    }
        //                                }
        //                            }
        //                            else if (TrendType == "Trend")
        //                            {
        //                                //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                if (DateCtrToDisplay % 2 == 0)
        //                                {
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                }
        //                                else
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred

        //                                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);


        //                            }

        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                            objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                            Array.Resize(ref Points1, Points1.Length + 1);
        //                            Array.Resize(ref Points2, Points2.Length + 1);
        //                            Points1[Points1.Length - 1] = pt1;
        //                            Points2[Points2.Length - 1] = pt2;



        //                            ctrAxisLines = 0;
        //                            ctrMiniInterval = 1;
        //                            DateCtrToDisplay++;
        //                        }
        //                        else if (ctrAxisLines == (ctrMiniInterval))
        //                        {
        //                            if (TrendType == "Trend")
        //                            {
        //                                if (DateCtrToDisplay % 2 == 0)
        //                                {
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                }
        //                                else
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred
        //                                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);
        //                                DateCtrToDisplay++;

        //                            }
        //                            //LineInterval++;
        //                            ctrMiniInterval++;
        //                        }
        //                        ctrAxisLines++;
        //                    }
        //                }
        //                else if (IfTmData == true)
        //                {
        //                    for (int i = 0; i < TargetX.Length; i++)
        //                    {
        //                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 10));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            ctrMiniInterval++;
        //                        }
        //                        else if (ctrAxisLines == LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 20));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                            objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                            ctrAxisLines = 0;
        //                            ctrMiniInterval = 1;
        //                        }
        //                        ctrAxisLines++;
        //                    }
        //                }

        //                if (IfTmData == false)
        //                {
        //                    int i = 1;
        //                    do
        //                    {


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 50), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        //if (bXunitConvert)
        //                        //{
        //                        //    objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 3)*60), objFont, objBrush, pt3);
        //                        //}
        //                        //else
        //                        {
        //                            objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 3)), objFont, objBrush, pt3);
        //                        }

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        Array.Resize(ref PointsY1, PointsY1.Length + 1);
        //                        Array.Resize(ref PointsY2, PointsY2.Length + 1);
        //                        PointsY1[PointsY1.Length - 1] = pt1;
        //                        PointsY2[PointsY2.Length - 1] = pt2;



        //                        i++;

        //                    } while ((float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //                }

        //                if (IfTmData == true)
        //                {
        //                    int i = 1;
        //                    do
        //                    {


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);





        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        i++;

        //                    } while ((float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //                }




        //            }
        //            catch (Exception ex)
        //            {
        //                ErrorLogFile(ex);
        //                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //            }
        //        }
        //        else if (GraphType == "Orbit")
        //        {
        //            int DateCtrToDisplay = 0;
        //            SetAxis();
        //            Pen BlkDash = new Pen(Color.Black, (float).5);
        //            BlkDash.DashCap = DashCap.Triangle;
        //            BlkDash.DashStyle = DashStyle.Dash;
        //            int ctrAxisLines = 0;
        //            double IntervalXAxis = 0.0;
        //            bool IfTmData = false;
        //            Region objRegion = new Region(panel1.Bounds);
        //            Graphics objGraphics = panel1.CreateGraphics();
        //            objGraphics.Clip = objRegion;
        //            RectangleF objPoint = objGraphics.ClipBounds;
        //            IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //            double TotalYAxis = 0.0;
        //            double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) - (objPoint.Left + SixtyTwo + OneSixtyTwo);
        //            if (IfTmData == true)
        //            {
        //                TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
        //            }
        //            else
        //            {
        //                TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

        //            }
        //            double MaxVal = 0;
        //            //IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //            PointF pt1 = new PointF();
        //            PointF pt2 = new PointF();
        //            PointF pt3 = new PointF();
        //            double HighestValXAxis = findHighestValue(TargetX);//Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
        //            IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
        //            int LineInterval = 0;
        //            if (TrendType == "Trend")
        //            {
        //                LineInterval = (TargetX.Length - 2) / 2;
        //            }
        //            else
        //                LineInterval = (TargetX.Length - 1) / 4;
        //            int MiniLineInterval = LineInterval / 10;
        //            int ctrMiniInterval = 1;
        //            double LineYInterval = HighestValYAxis / 4;
        //            double LineYAxisDistance = TotalYAxis / 4;
        //            try
        //            {
        //                Font objFont = new Font("Roman", 10, FontStyle.Bold);
        //                Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
        //                Brush objBrush = Brushes.Black;
        //                if (IfTmData == true)
        //                {
        //                    pt1 = new Point((int)(objPoint.Right - OneSixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                }
        //                //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
        //                if (TrendType != "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                    //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
        //                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
        //                }
        //                if (IfTmData == true && TrendType != "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


        //                }
        //                else if (TrendType == "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 30), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
        //                    DateCtrToDisplay++;
        //                }
        //                ctrAxisLines++;
        //                if (IfTmData == false)
        //                {
        //                    for (int i = 1; i < TargetX.Length; i++)
        //                    {
        //                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 10)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

        //                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            ctrMiniInterval++;
        //                        }
        //                        else if (ctrAxisLines == LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 20)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            if (TrendType != "Trend")
        //                            {
        //                                objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            }
        //                            else if (TrendType == "Trend")
        //                            {
        //                                //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                if (DateCtrToDisplay % 2 == 0)
        //                                {
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                }
        //                                else
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred

        //                                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);


        //                            }

        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                            objGraphics.DrawLine(BlkDash, pt1, pt2);
        //                            ctrAxisLines = 0;
        //                            ctrMiniInterval = 1;
        //                            DateCtrToDisplay++;
        //                        }
        //                        else if (ctrAxisLines == (ctrMiniInterval))
        //                        {
        //                            if (TrendType == "Trend")
        //                            {
        //                                if (DateCtrToDisplay % 2 == 0)
        //                                {
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                }
        //                                else
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred
        //                                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);
        //                                DateCtrToDisplay++;

        //                            }
        //                            //LineInterval++;
        //                            ctrMiniInterval++;
        //                        }
        //                        ctrAxisLines++;
        //                    }
        //                }
        //                else if (IfTmData == true)
        //                {
        //                    for (int i = 0; i < TargetX.Length; i++)
        //                    {
        //                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 10));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            ctrMiniInterval++;
        //                        }
        //                        else if (ctrAxisLines == LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 20));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                            if (TargetX[i] >= 0)
        //                            {
        //                                HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            }
        //                            else
        //                            {
        //                                HighestValXAxis = Convert.ToDouble(0);
        //                            }
        //                            objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                            objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                            ctrAxisLines = 0;
        //                            ctrMiniInterval = 1;
        //                        }
        //                        ctrAxisLines++;
        //                    }
        //                }

        //                if (IfTmData == false)
        //                {
        //                    int i = 1;
        //                    do
        //                    {


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        i++;

        //                    } while ((float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //                }

        //                if (IfTmData == true)
        //                {
        //                    int i = 1;
        //                    do
        //                    {


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);





        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        i++;

        //                    } while ((float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //                }




        //            }
        //            catch (Exception ex)
        //            {
        //                ErrorLogFile(ex);
        //                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //}
        double LesserVal = 0.0;
        int PointLenth = 0;
        int LastPointLenth = 0;
        int CtrPtS = 0;
        double DblPointVal = 0.0;

        bool SetValZero = false;
        //private bool SetAxisMarksForExtraZoom(double[] TargetX, double[] TargetY, string Direction)
        //{
        //    bool DrwGp = false;
        //    if (GraphType != "Orbit")
        //    {
        //        int DateCtrToDisplay = 0;
        //        SetAxis();
        //        Pen BlkDash = new Pen(Color.Black, (float).5);
        //        BlkDash.DashCap = DashCap.Triangle;
        //        BlkDash.DashStyle = DashStyle.Dash;
        //        int ctrAxisLines = 0;
        //        double IntervalXAxis = 0.0;
        //        bool IfTmData = false;
        //        Region objRegion = new Region(panel1.Bounds);
        //        Graphics objGraphics = panel1.CreateGraphics();
        //        objGraphics.Clip = objRegion;
        //        RectangleF objPoint = objGraphics.ClipBounds;
        //        IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //        double TotalYAxis = 0.0;
        //        double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) - (objPoint.Left + SixtyTwo + OneSixtyTwo);
        //        if (IfTmData == true)
        //        {
        //            TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
        //        }
        //        else
        //        {
        //            TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

        //        }
        //        double MaxVal1 = 0;
        //        //IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //        PointF pt1 = new PointF();
        //        PointF pt2 = new PointF();
        //        PointF pt3 = new PointF();
        //        double HighestValXAxis = 0.0;
        //        //lblXAxis.Text = Pts[Pts.Length - 1].X.ToString();
        //        //lblYAxis.Text = PtsExtraZoomed[PtsExtraZoomed.Length - 1].X.ToString();
        //        if (PtsExtraZoomed != null)
        //        {
        //            if (Direction == "L")//((Pts[Pts.Length - 1].X >= PtsExtraZoomed[PtsExtraZoomed.Length - 1].X) && Pts.Length<=PtsExtraZoomed.Length)
        //            {
        //                if (PointLenth == 0 && SetValZero==false)
        //                {
        //                    PointLenth = TargetX.Length - 1;
        //                    //DblPointVal = (double)PointLenth;
        //                }
        //                else
        //                {
        //                    PointLenth = (int)(PointLenth + 10); //(double)(PointLenth + (PointLenth * .05)); //(int)(PointLenth + 5);//
        //                    if (PointLenth == 0)
        //                    {
        //                        SetValZero = true;
        //                    }
        //                }

        //                HighestValXAxis = Pts[Pts.Length - 1].X + (Pts[Pts.Length - 1].X - PtsExtraZoomed[PtsExtraZoomed.Length - 1].X);
        //                //CtrPtS++;


        //                    //PointLenth = Convert.ToInt32(DblPointVal);


        //                //lblYAxis.Text = "Less";
        //            }
        //            else if (Direction == "R")//((Pts[Pts.Length - 1].X >= PtsExtraZoomed[PtsExtraZoomed.Length - 1].X) && Pts.Length > PtsExtraZoomed.Length)
        //            {
        //                if (PointLenth == 0 && SetValZero == false)
        //                {
        //                    PointLenth = TargetX.Length - 1;
        //                    //DblPointVal = (double)PointLenth;
        //                }
        //                else
        //                {
        //                    PointLenth = (int)(PointLenth - 10); //(double)(PointLenth - (PointLenth * .05)); //(int)(PointLenth - 5);//
        //                    if (PointLenth == 0)
        //                    {
        //                        SetValZero = true;
        //                    }
        //                }
        //                    //PointLenth = Convert.ToInt32(DblPointVal);

        //                LesserVal = 0.0;
        //                HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
        //                //lblYAxis.Text = "More";
        //            }
        //        }
        //        else
        //        {
        //            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
        //        }
        //        //double HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
        //        if (PointLenth > 0)
        //        {
        //            panel1.Refresh();
        //            DrwGp = true;
        //            IntervalXAxis = (TotalXAxis / (PointLenth));
        //            if (PointLenth > Pts.Length - 1)
        //            {
        //                if (Direction == "R")//(LastPointLenth < PointLenth)
        //                {
        //                    double ValToIncrease = x[x.Length - 1] - x[x.Length - 2];
        //                    for (int i = TargetX.Length - 1; i < PointLenth; i++)
        //                    {
        //                        Array.Resize(ref TargetX, TargetX.Length + 1);
        //                        TargetX[TargetX.Length - 1] = ValToIncrease * i;
        //                    }
        //                }
        //                else if (Direction == "L")//(LastPointLenth > PointLenth)
        //                {
        //                    double ValTodecrease = x[x.Length - 1] - x[x.Length - 2];
        //                    for (int i = TargetX.Length - 1; i < LastPointLenth; i++)
        //                    {
        //                        Array.Resize(ref TargetX, TargetX.Length + 1);
        //                        TargetX[TargetX.Length - 1] = ValTodecrease * i;
        //                    }
        //                }
        //            }
        //            LastPointLenth = PointLenth;
        //            int LineInterval = 0;
        //            if (TrendType == "Trend")
        //            {
        //                LineInterval = (PointLenth - 1) / 2;
        //            }
        //            else
        //                LineInterval = (PointLenth) / 4;
        //            int MiniLineInterval = LineInterval / 10;
        //            int ctrMiniInterval = 1;
        //            MaxVal1 = findHighestValue(TargetY);
        //            double HighestValYAxis1 = Convert.ToDouble(Math.Round(MaxVal1, 5));
        //            double LineYInterval = HighestValYAxis1 / 4;
        //            double LineYAxisDistance = TotalYAxis / 4;
        //            try
        //            {
        //                Font objFont = new Font("Roman", 10, FontStyle.Bold);
        //                Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
        //                Brush objBrush = Brushes.Black;
        //                if (IfTmData == true)
        //                {
        //                    pt1 = new Point((int)(objPoint.Right - OneSixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                }
        //                //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
        //                if (TrendType != "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                    //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
        //                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
        //                }
        //                if (IfTmData == true && TrendType != "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


        //                }
        //                else if (TrendType == "Trend")
        //                {
        //                    pt2 = new Point((int)(objPoint.Left + SixtyTwo - 30), (int)(objPoint.Bottom - Fifty));
        //                    objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
        //                    DateCtrToDisplay++;
        //                }
        //                ctrAxisLines++;
        //                if (IfTmData == false)
        //                {
        //                    for (int i = 1; i < TargetX.Length; i++)
        //                    {
        //                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 10)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

        //                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            ctrMiniInterval++;
        //                        }
        //                        else if (ctrAxisLines == LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 20)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            if (TrendType != "Trend")
        //                            {
        //                                objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            }
        //                            else if (TrendType == "Trend")
        //                            {
        //                                //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                if (DateCtrToDisplay % 2 == 0)
        //                                {
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                }
        //                                else
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred

        //                                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);


        //                            }

        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                            objGraphics.DrawLine(BlkDash, pt1, pt2);
        //                            ctrAxisLines = 0;
        //                            ctrMiniInterval = 1;
        //                            DateCtrToDisplay++;
        //                        }
        //                        else if (ctrAxisLines == (ctrMiniInterval))
        //                        {
        //                            if (TrendType == "Trend")
        //                            {
        //                                if (DateCtrToDisplay % 2 == 0)
        //                                {
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                }
        //                                else
        //                                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred
        //                                //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);
        //                                DateCtrToDisplay++;

        //                            }
        //                            //LineInterval++;
        //                            ctrMiniInterval++;
        //                        }
        //                        ctrAxisLines++;
        //                    }
        //                }
        //                else if (IfTmData == true)
        //                {
        //                    for (int i = 0; i < TargetX.Length; i++)
        //                    {
        //                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 10));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                            ctrMiniInterval++;
        //                        }
        //                        else if (ctrAxisLines == LineInterval)
        //                        {
        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 20));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt3 = pt1;
        //                            objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                            objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


        //                            pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                            pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                            objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                            ctrAxisLines = 0;
        //                            ctrMiniInterval = 1;
        //                        }
        //                        ctrAxisLines++;
        //                    }
        //                }

        //                if (IfTmData == false)
        //                {
        //                    int i = 1;
        //                    do
        //                    {


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        i++;

        //                    } while ((float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //                }

        //                if (IfTmData == true)
        //                {
        //                    int i = 1;
        //                    do
        //                    {


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);





        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                        pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        i++;

        //                    } while ((float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //                }




        //            }
        //            catch (Exception ex)
        //            {
        //                ErrorLogFile(ex);
        //                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //            }
        //        }

        //    }
        //    else if (GraphType == "Orbit")
        //    {
        //        int DateCtrToDisplay = 0;
        //        SetAxis();
        //        Pen BlkDash = new Pen(Color.Black, (float).5);
        //        BlkDash.DashCap = DashCap.Triangle;
        //        BlkDash.DashStyle = DashStyle.Dash;
        //        int ctrAxisLines = 0;
        //        double IntervalXAxis = 0.0;
        //        bool IfTmData = false;
        //        Region objRegion = new Region(panel1.Bounds);
        //        Graphics objGraphics = panel1.CreateGraphics();
        //        objGraphics.Clip = objRegion;
        //        RectangleF objPoint = objGraphics.ClipBounds;
        //        IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //        double TotalYAxis = 0.0;
        //        double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) - (objPoint.Left + SixtyTwo + OneSixtyTwo);
        //        if (IfTmData == true)
        //        {
        //            TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
        //        }
        //        else
        //        {
        //            TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

        //        }
        //        double MaxVal = 0;
        //        //IfTmData = CheckForTimeDataInAxisLines(TargetY);
        //        PointF pt1 = new PointF();
        //        PointF pt2 = new PointF();
        //        PointF pt3 = new PointF();
        //        double HighestValXAxis = findHighestValue(TargetX);//Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
        //        IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
        //        int LineInterval = 0;
        //        if (TrendType == "Trend")
        //        {
        //            LineInterval = (TargetX.Length - 2) / 2;
        //        }
        //        else
        //            LineInterval = (TargetX.Length - 1) / 4;
        //        int MiniLineInterval = LineInterval / 10;
        //        int ctrMiniInterval = 1;
        //        double LineYInterval = HighestValYAxis / 4;
        //        double LineYAxisDistance = TotalYAxis / 4;
        //        try
        //        {
        //            Font objFont = new Font("Roman", 10, FontStyle.Bold);
        //            Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
        //            Brush objBrush = Brushes.Black;
        //            if (IfTmData == true)
        //            {
        //                pt1 = new Point((int)(objPoint.Right - OneSixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                pt2 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - Fifty));
        //                objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //            }
        //            //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
        //            if (TrendType != "Trend")
        //            {
        //                pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
        //                objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
        //            }
        //            if (IfTmData == true && TrendType != "Trend")
        //            {
        //                pt2 = new Point((int)(objPoint.Left + SixtyTwo - 15), (int)(objPoint.Bottom - Fifty));
        //                objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


        //            }
        //            else if (TrendType == "Trend")
        //            {
        //                pt2 = new Point((int)(objPoint.Left + SixtyTwo - 30), (int)(objPoint.Bottom - Fifty));
        //                objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
        //                DateCtrToDisplay++;
        //            }
        //            ctrAxisLines++;
        //            if (IfTmData == false)
        //            {
        //                for (int i = 1; i < TargetX.Length; i++)
        //                {
        //                    if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                    {
        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 10)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                        pt3 = pt1;
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

        //                        //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                        ctrMiniInterval++;
        //                    }
        //                    else if (ctrAxisLines == LineInterval)
        //                    {
        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty - 20)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                        pt3 = pt1;
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                        if (TrendType != "Trend")
        //                        {
        //                            objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                        }
        //                        else if (TrendType == "Trend")
        //                        {
        //                            //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            if (DateCtrToDisplay % 2 == 0)
        //                            {
        //                                pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            }
        //                            else
        //                                pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred

        //                            //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);


        //                        }

        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);
        //                        ctrAxisLines = 0;
        //                        ctrMiniInterval = 1;
        //                        DateCtrToDisplay++;
        //                    }
        //                    else if (ctrAxisLines == (ctrMiniInterval))
        //                    {
        //                        if (TrendType == "Trend")
        //                        {
        //                            if (DateCtrToDisplay % 2 == 0)
        //                            {
        //                                pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            }
        //                            else
        //                                pt1 = new PointF((float)((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty + 20)));//TwoHundred
        //                            //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
        //                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt1);
        //                            DateCtrToDisplay++;

        //                        }
        //                        //LineInterval++;
        //                        ctrMiniInterval++;
        //                    }
        //                    ctrAxisLines++;
        //                }
        //            }
        //            else if (IfTmData == true)
        //            {
        //                for (int i = 0; i < TargetX.Length; i++)
        //                {
        //                    if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) && (MiniLineInterval * ctrMiniInterval) != LineInterval)
        //                    {
        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 10));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                        pt3 = pt1;
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float).5), pt1, pt2);
        //                        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                        //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
        //                        ctrMiniInterval++;
        //                    }
        //                    else if (ctrAxisLines == LineInterval)
        //                    {
        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty) + 20));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                        pt3 = pt1;
        //                        objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                        if (TargetX[i] >= 0)
        //                        {
        //                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
        //                        }
        //                        else
        //                        {
        //                            HighestValXAxis = Convert.ToDouble(0);
        //                        }
        //                        objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


        //                        pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)((objPoint.Bottom - Fifty)));//TwoHundred
        //                        pt2 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Top + OneFifty));//FourHundred
        //                        objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                        ctrAxisLines = 0;
        //                        ctrMiniInterval = 1;
        //                    }
        //                    ctrAxisLines++;
        //                }
        //            }

        //            if (IfTmData == false)
        //            {
        //                int i = 1;
        //                do
        //                {


        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
        //                    objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                    objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                    pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                    i++;

        //                } while ((float)(objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //            }

        //            if (IfTmData == true)
        //            {
        //                int i = 1;
        //                do
        //                {


        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
        //                    objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                    objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                    pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));//TwoHundred
        //                    objGraphics.DrawLine(BlkDash, pt1, pt2);





        //                    pt1 = new PointF((float)((objPoint.Left + SixtyTwo) - 20), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                    pt2 = new PointF((float)((objPoint.Left + SixtyTwo)), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                    pt3 = new PointF((float)((objPoint.Left + SixtyTwo) - 60), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
        //                    objGraphics.DrawLine(new Pen(Color.Black, (float)2), pt1, pt2);
        //                    objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont, objBrush, pt3);

        //                    pt1 = new PointF((float)(objPoint.Left + SixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                    pt2 = new PointF((float)(objPoint.Right - OneSixtyTwo), (float)(objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));//TwoHundred
        //                    objGraphics.DrawLine(BlkDash, pt1, pt2);


        //                    i++;

        //                } while ((float)(objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >= (objPoint.Top + OneFifty));
        //            }




        //        }
        //        catch (Exception ex)
        //        {
        //            ErrorLogFile(ex);
        //            //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //        }
        //    }
        //    return DrwGp;
        //}

        PointF[] Points1 = new PointF[0];
        PointF[] Points2 = new PointF[0];

        PointF[] PointsY1 = new PointF[0];
        PointF[] PointsY2 = new PointF[0];


        bool bEZ = true;

        private bool SetAxisMarksForExtraZoom(double[] TargetX, double[] TargetY, string Direction)
        {
            bEZ = false;
            bool DrwGp = false;
            try
            {
                if (GraphType != "Orbit")
                {

                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;

                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal1 = 0;


                    double HighestValXAxis = 0.0;
                    int LastPointLenth = 0;



                    if (PtsExtraZoomed != null)
                    {
                        if (Direction == "L"
                        ) //((Pts[Pts.Length - 1].X >= PtsExtraZoomed[PtsExtraZoomed.Length - 1].X) && Pts.Length<=PtsExtraZoomed.Length)
                        {
                            if (PointLenth == 0 && SetValZero == false)
                            {
                                PointLenth = TargetX.Length - 1;
                                LastPointLenth = PointLenth;
                            }
                            else
                            {
                                if (PointLenth < LastPointLenth)
                                {
                                    PointLenth = Convert.ToInt32(PointLenth / .95);
                                }
                                else
                                {
                                    PointLenth =
                                        (int) (PointLenth +
                                               (PointLenth * .05)
                                        ); //(double)(PointLenth + (PointLenth * .05)); //(int)(PointLenth + 5);//
                                }

                                if (PointLenth == 0)
                                {
                                    SetValZero = true;
                                }

                                LastPointLenth = PointLenth;


                            }

                            HighestValXAxis = Pts[Pts.Length - 1].X +
                                              (Pts[Pts.Length - 1].X - PtsExtraZoomed[PtsExtraZoomed.Length - 1].X);

                        }
                        else if (Direction == "R"
                        ) //((Pts[Pts.Length - 1].X >= PtsExtraZoomed[PtsExtraZoomed.Length - 1].X) && Pts.Length > PtsExtraZoomed.Length)
                        {
                            if (PointLenth == 0 && SetValZero == false)
                            {
                                PointLenth = TargetX.Length - 1;
                                LastPointLenth = PointLenth;
                            }
                            else
                            {
                                if (LastPointLenth < PointLenth)
                                {
                                    PointLenth = Convert.ToInt32(PointLenth / 1.05);
                                }
                                else
                                {
                                    PointLenth =
                                        (int) (PointLenth -
                                               (PointLenth * .05)
                                        ); //(double)(PointLenth - (PointLenth * .05)); //(int)(PointLenth - 5);//
                                }

                                if (PointLenth == 0)
                                {
                                    SetValZero = true;
                                }


                                LastPointLenth = PointLenth;

                            }


                            LesserVal = 0.0;
                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;

                        }
                        else
                        {
                            if (PointLenth == 0)
                            {
                                PointLenth = TargetX.Length - 1;
                                LastPointLenth = PointLenth;
                            }
                        }

                    }
                    else
                    {
                        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5)) + LesserVal;
                    }


                    IntervalXAxis = (TotalXAxis / (PointLenth));
                    if (PointLenth > Pts.Length - 1)
                    {
                        if (Direction == "R") //(LastPointLenth < PointLenth)
                        {
                            double ValToIncrease = x[x.Length - 1] - x[x.Length - 2];
                            for (int i = TargetX.Length - 1; i < PointLenth; i++)
                            {
                                //Array.Resize(ref TargetX, TargetX.Length + 1);
                                _ResizeArray.IncreaseArrayDouble(ref TargetX, 1);
                                TargetX[TargetX.Length - 1] = ValToIncrease * i;
                            }
                        }
                        else if (Direction == "L") //(LastPointLenth > PointLenth)
                        {
                            double ValTodecrease = x[x.Length - 1] - x[x.Length - 2];
                            for (int i = TargetX.Length - 1; i < LastPointLenth; i++)
                            {
                                //Array.Resize(ref TargetX, TargetX.Length + 1);
                                _ResizeArray.IncreaseArrayDouble(ref TargetX, 1);
                                TargetX[TargetX.Length - 1] = ValTodecrease * i;
                            }
                        }
                    }

                    LastPointLenth = PointLenth;
                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (PointLenth - 1) / 2;
                    }
                    else
                        LineInterval = (PointLenth) / 4;

                    int MiniLineInterval = LineInterval / 10;

                    if (Direction != "L" && Direction != "R")
                    {


                        MaxVal1 = findHighestValue(TargetY);
                    }
                    else
                    {
                        MaxVal1 = findHighestValue(y);
                    }

                    double HighestValYAxis1 = Convert.ToDouble(Math.Round(MaxVal1, 3));
                    double LineYInterval = HighestValYAxis1 / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    if (LineInterval > 0)
                    {
                        DrwGp = true;
                        panel1.Refresh();

                        try
                        {


                            Font objFont = new Font("Roman", 10, FontStyle.Bold);
                            Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
                            Brush objBrush = Brushes.Black;



                            for (int i = 0; i < Points1.Length; i++)
                            {
                                float Msx = Points1[i].X;
                                float testval = Msx - (objPoint.Left + SixtyTwo);
                                float XvalNow = (float) (testval / MainXAxisInterval);
                                double XVala = 0.0;
                                try
                                {
                                    XVala = Convert.ToDouble(TargetX[(int) XvalNow]);
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog_Class.ErrorLogEntry(ex);
                                    double ValTodecrease = x[x.Length - 1] - x[x.Length - 2];
                                    XVala = XvalNow * ValTodecrease;
                                    XVala = Math.Round(XVala, 2);
                                }

                                objGraphics.DrawLine(BlkDash, Points1[i], Points2[i]);
                                //if (bXunitConvert)
                                //{
                                //    //if (IsAlreadyCPM)
                                //    //{
                                //    //    objGraphics.DrawString(Convert.ToString(XVala), objFont, objBrush, Points1[i]);
                                //    //}
                                //    //else
                                //    {
                                //        objGraphics.DrawString(Convert.ToString(XVala * 60), objFont, objBrush, Points1[i]);
                                //    }
                                //}
                                //else
                                {
                                    //if (IsAlreadyCPM)
                                    //{
                                    //    objGraphics.DrawString(Convert.ToString(XVala / 60), objFont, objBrush, Points1[i]);
                                    //}
                                    //else
                                    {
                                        objGraphics.DrawString(Convert.ToString(XVala), objFont, objBrush, Points1[i]);
                                    }
                                }
                            }


                            if (IfTmData == false)
                            {


                                for (int i = 0; i < PointsY1.Length; i++)
                                {
                                    float Msx = PointsY1[i].Y;
                                    PointF LeftPoint = PointsY1[i];
                                    float testval = (objPoint.Bottom - Fifty) - Msx;
                                    float XvalNow = (float) (testval * MainYAxisInterval);

                                    LeftPoint.X = LeftPoint.X - 50;
                                    try
                                    {
                                        objGraphics.DrawLine(BlkDash, PointsY1[i], PointsY2[i]);
                                        objGraphics.DrawString(Convert.ToString(Math.Round(XvalNow, 3)), objFont,
                                            objBrush, LeftPoint);

                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorLog_Class.ErrorLogEntry(ex);
                                    }

                                }



                            }



                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                            ErrorLogFile(ex);
                            //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                        }
                    }


                }
                else if (GraphType == "Orbit")
                {
                    int DateCtrToDisplay = 0;
                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;
                    int ctrAxisLines = 0;
                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal = 0;
                    //IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    PointF pt1 = new PointF();
                    PointF pt2 = new PointF();
                    PointF pt3 = new PointF();
                    double HighestValXAxis =
                        findHighestValue(TargetX); //Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
                    IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (TargetX.Length - 2) / 2;
                    }
                    else
                        LineInterval = (TargetX.Length - 1) / 4;

                    int MiniLineInterval = LineInterval / 10;
                    int ctrMiniInterval = 1;
                    double LineYInterval = HighestValYAxis / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    try
                    {
                        Font objFont = new Font("Roman", 10, FontStyle.Bold);
                        Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
                        Brush objBrush = Brushes.Black;
                        if (IfTmData == true)
                        {
                            pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                        }

                        //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                        if (TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                        }

                        if (IfTmData == true && TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


                        }
                        else if (TrendType == "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 30), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
                            DateCtrToDisplay++;
                        }

                        ctrAxisLines++;
                        if (IfTmData == false)
                        {
                            for (int i = 1; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 10))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));

                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                                    if (TrendType != "Trend")
                                    {
                                        objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush,
                                            pt1);
                                    }
                                    else if (TrendType == "Trend")
                                    {
                                        //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);


                                    }

                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);
                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                    DateCtrToDisplay++;
                                }
                                else if (ctrAxisLines == (ctrMiniInterval))
                                {
                                    if (TrendType == "Trend")
                                    {
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);
                                        DateCtrToDisplay++;

                                    }

                                    //LineInterval++;
                                    ctrMiniInterval++;
                                }

                                ctrAxisLines++;
                            }
                        }
                        else if (IfTmData == true)
                        {
                            for (int i = 0; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 10)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 20)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                    if (TargetX[i] >= 0)
                                    {
                                        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 5));
                                    }
                                    else
                                    {
                                        HighestValXAxis = Convert.ToDouble(0);
                                    }

                                    objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);


                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                }

                                ctrAxisLines++;
                            }
                        }

                        if (IfTmData == false)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;

                            } while ((float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }

                        if (IfTmData == true)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 5)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);





                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 5)),
                                    objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;

                            } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }




                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        ErrorLogFile(ex);
                        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            return DrwGp;
        }

        //private void DrawBandRegion(double[] TargetX, double[] TargetY, string Direction)
        //{

        //    try
        //    {
        //        if (GraphType != "Orbit")
        //        {

        //            if (Direction != "J")
        //            {
        //                //panel1.Refresh();
        //            }


        //            SetAxis();
        //            Pen BlkDash = new Pen(Color.Black, (float).5);
        //            BlkDash.DashCap = DashCap.Triangle;
        //            BlkDash.DashStyle = DashStyle.Dash;


        //            bool IfTmData = false;
        //            Region objRegion = new Region(panel1.Bounds);
        //            Graphics objGraphics = panel1.CreateGraphics();
        //            objGraphics.Clip = objRegion;
        //            RectangleF objPoint = objGraphics.ClipBounds;
        //            IfTmData = CheckForTimeDataInAxisLines(TargetY);

        //            string[] BndAlrms = null;



        //            PointF SpecificPointHeigh = new PointF();
        //            PointF SpecificPointLow = new PointF();

        //            PointF SpecificPointHeigh1 = new PointF();
        //            PointF SpecificPointLow1 = new PointF();

        //            PointF[] FinalPoints = new PointF[0];
        //            PointF[] FinalPointsForOutLine = new PointF[0];
        //            int MainIndexPrvs = 0;


        //            if (Direction == "J")
        //            {
        //                double TotalYAxis1 = 0.0;
        //                double TotalXAxis1 = (Convert.ToDouble(objPoint.Right - objPoint.Left)) - (objPoint.Left + SixtyTwo + OneSixtyTwo);
        //                if (Time == true)
        //                {
        //                    TotalYAxis1 = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
        //                }
        //                else
        //                {
        //                    TotalYAxis1 = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);
        //                }
        //                double MaxVal = findHighestValue(y);
        //                HighestValYAxis = MaxVal;
        //                MainYAxisInterval = (double)(MaxVal / TotalYAxis1);
        //                MainXAxisInterval = (TotalXAxis1 / (x.Length - 1));
        //            }
        //            Pen objPen = new Pen(Color.Black);

        //            for (int i = 0; i < BndAlrms.Length; i++)
        //            {
        //                string[] Band = BndAlrms[i].Split(new string[] { "!", "@" }, StringSplitOptions.RemoveEmptyEntries);

        //                FinalPoints = new PointF[0];
        //                double Comparator = Convert.ToDouble(Band[0]);
        //                int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
        //                if (MainIndex == -1)
        //                {
        //                    Comparator = FindNearest(x, Comparator);
        //                    MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
        //                }


        //                if (MainIndex >= 0)
        //                {
        //                    if (i == 0)
        //                    {
        //                        SpecificPointHeigh = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * 0)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[1]) / MainYAxisInterval)));
        //                        SpecificPointLow = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * 0)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[2]) / MainYAxisInterval)));
        //                        SpecificPointLow1 = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[2]) / MainYAxisInterval)));
        //                        SpecificPointHeigh1 = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[1]) / MainYAxisInterval)));

        //                        if (SpecificPointLow1.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointLow1.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                        if (SpecificPointHeigh1.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointHeigh1.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                        if (SpecificPointHeigh.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointHeigh.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                        if (SpecificPointLow.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointLow.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        SpecificPointHeigh = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndexPrvs)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[1]) / MainYAxisInterval)));
        //                        SpecificPointLow = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndexPrvs)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[2]) / MainYAxisInterval)));
        //                        SpecificPointLow1 = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[2]) / MainYAxisInterval)));
        //                        SpecificPointHeigh1 = new PointF((float)((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)), (float)(objPoint.Bottom - Fifty - (float)(Convert.ToDouble(Band[1]) / MainYAxisInterval)));
        //                        if (SpecificPointLow1.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointLow1.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                        if (SpecificPointHeigh1.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointHeigh1.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                        if (SpecificPointHeigh.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointHeigh.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                        if (SpecificPointLow.X > objPoint.Right - OneSixtyTwo)
        //                        {
        //                            SpecificPointLow.X = objPoint.Right - OneSixtyTwo;
        //                        }
        //                    }

        //                    Brush objbr = null;

        //                    if (panel1.BackColor == Color.Yellow)
        //                    {
        //                        objbr = Brushes.LightBlue;
        //                    }
        //                    else
        //                        objbr = Brushes.Yellow;




        //                    Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
        //                    FinalPoints[FinalPoints.Length - 1] = SpecificPointHeigh;

        //                    Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
        //                    FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointLow;

        //                    Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
        //                    FinalPoints[FinalPoints.Length - 1] = SpecificPointHeigh1;

        //                    Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
        //                    FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointHeigh;

        //                    Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
        //                    FinalPoints[FinalPoints.Length - 1] = SpecificPointLow1;

        //                    Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
        //                    FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointHeigh1;

        //                    Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
        //                    FinalPoints[FinalPoints.Length - 1] = SpecificPointLow;

        //                    Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
        //                    FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointLow1;

        //                    GraphicsPath objPath = new GraphicsPath();

        //                    objPath.AddCurve(FinalPoints, 0);
        //                    objGraphics.FillPath(objbr, objPath);


        //                    MainIndexPrvs = MainIndex;
        //                }

        //            }

        //            //objGraphics.DrawLines(objPen, FinalPointsForOutLine);
        //            int iFCtr = 0;
        //            for (int i = 0; i < FinalPointsForOutLine.Length; i++)
        //            {
        //                objGraphics.DrawLine(objPen, FinalPointsForOutLine[i], FinalPointsForOutLine[i + 1]);
        //                //if (i%3 == 0)
        //                //    i++;
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);

        //    }
        //}

        public double FindNearest(double[] TargetArray, double ValueToBeFound)
        {
            double Value = 0.0;
            try
            {
                for (int i = 0; i < TargetArray.Length; i++)
                {
                    Value = TargetArray[i];
                    if (Value > ValueToBeFound)
                    {
                        if ((double) (Value - ValueToBeFound) >
                            Math.Abs((double) (ValueToBeFound - (double) TargetArray[i - 1])))
                        {
                            Value = TargetArray[i - 1];
                        }
                        else
                        {
                            Value = TargetArray[i];
                        }

                        break;
                    }
                }

                return Value;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                return Value;
            }
        }

        private void SetAxisMarks(double[] TargetX, double[] TargetY, Graphics objGraphics)
        {
            try
            {
                if (GraphType != "Orbit")
                {
                    int DateCtrToDisplay = 0;
                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;
                    int ctrAxisLines = 0;
                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    //Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal = 0;
                    //IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    PointF pt1 = new PointF();
                    PointF pt2 = new PointF();
                    PointF pt3 = new PointF();
                    double HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 5));
                    IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (TargetX.Length - 2) / 2;
                    }
                    else
                        LineInterval = (TargetX.Length - 1) / 4;

                    int MiniLineInterval = LineInterval / 10;
                    int ctrMiniInterval = 1;
                    double HighestY = findHighestValue(TargetY);
                    HighestY = HighestY * 1.25;
                    double LineYInterval = HighestY / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    try
                    {
                        Font objFont = new Font("Roman", 10, FontStyle.Bold);
                        Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
                        Brush objBrush = Brushes.Black;
                        if (IfTmData == true)
                        {
                            pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                        }

                        //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                        if (TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                        }

                        if (IfTmData == true && TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


                        }
                        else if (TrendType == "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 30), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
                            DateCtrToDisplay++;
                        }

                        ctrAxisLines++;
                        if (IfTmData == false)
                        {
                            for (int i = 1; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 10))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));

                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    if (TrendType != "Trend")
                                    {
                                        //if (bXunitConvert)
                                        //{
                                        //    //if (IsAlreadyCPM)
                                        //    //{
                                        //    //    objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                        //    //}
                                        //    //else
                                        //    {
                                        //        objGraphics.DrawString(Convert.ToString(HighestValXAxis * 60), objFont, objBrush, pt1);
                                        //    }
                                        //}
                                        //else
                                        {
                                            //if (IsAlreadyCPM)
                                            //{
                                            //    objGraphics.DrawString(Convert.ToString(HighestValXAxis / 60), objFont, objBrush, pt1);
                                            //}
                                            //else
                                            {
                                                objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont,
                                                    objBrush, pt1);
                                            }
                                        }
                                    }
                                    else if (TrendType == "Trend")
                                    {
                                        //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);


                                    }

                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);
                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                    DateCtrToDisplay++;
                                }
                                else if (ctrAxisLines == (ctrMiniInterval))
                                {
                                    if (TrendType == "Trend")
                                    {
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);
                                        DateCtrToDisplay++;

                                    }

                                    //LineInterval++;
                                    ctrMiniInterval++;
                                }

                                ctrAxisLines++;
                            }
                        }
                        else if (IfTmData == true)
                        {
                            for (int i = 0; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 10)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 20)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);


                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                }

                                ctrAxisLines++;
                            }
                        }

                        if (IfTmData == false)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 45),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 2)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;

                            } while ((float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }

                        if (IfTmData == true)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 2)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);





                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 2)),
                                    objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;

                            } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }




                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        ErrorLogFile(ex);
                        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                    }
                }
                else if (GraphType == "Orbit")
                {
                    int DateCtrToDisplay = 0;
                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;
                    int ctrAxisLines = 0;
                    double IntervalXAxis = 0.0;
                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    //Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    double TotalYAxis = 0.0;
                    double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                        (objPoint.Left + SixtyTwo + OneSixtyTwo);
                    if (IfTmData == true)
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
                    }
                    else
                    {
                        TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

                    }

                    double MaxVal = 0;
                    //IfTmData = CheckForTimeDataInAxisLines(TargetY);
                    PointF pt1 = new PointF();
                    PointF pt2 = new PointF();
                    PointF pt3 = new PointF();
                    double HighestValXAxis =
                        findHighestValue(TargetX); //Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
                    IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
                    int LineInterval = 0;
                    if (TrendType == "Trend")
                    {
                        LineInterval = (TargetX.Length - 2) / 2;
                    }
                    else
                        LineInterval = (TargetX.Length - 1) / 4;

                    int MiniLineInterval = LineInterval / 10;
                    int ctrMiniInterval = 1;
                    double LineYInterval = HighestValYAxis / 4;
                    double LineYAxisDistance = TotalYAxis / 4;
                    try
                    {
                        Font objFont = new Font("Roman", 10, FontStyle.Bold);
                        Font objFontDt = new Font("Roman", 7, FontStyle.Bold);
                        Brush objBrush = Brushes.Black;
                        if (IfTmData == true)
                        {
                            pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                        }

                        //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                        if (TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                        }

                        if (IfTmData == true && TrendType != "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);


                        }
                        else if (TrendType == "Trend")
                        {
                            pt2 = new Point((int) (objPoint.Left + SixtyTwo - 30), (int) (objPoint.Bottom - Fifty));
                            objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt, objBrush, pt2);
                            DateCtrToDisplay++;
                        }

                        ctrAxisLines++;
                        if (IfTmData == false)
                        {
                            for (int i = 1; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 10))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));

                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    if (TrendType != "Trend")
                                    {
                                        objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush,
                                            pt1);
                                    }
                                    else if (TrendType == "Trend")
                                    {
                                        //pt1 = new PointF((float)((objPoint.Left + SixtyTwo) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);


                                    }

                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);
                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                    DateCtrToDisplay++;
                                }
                                else if (ctrAxisLines == (ctrMiniInterval))
                                {
                                    if (TrendType == "Trend")
                                    {
                                        if (DateCtrToDisplay % 2 == 0)
                                        {
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                                        }
                                        else
                                            pt1 = new PointF(
                                                (float) ((objPoint.Left + SixtyTwo - 30) + IntervalXAxis * i),
                                                (float) (objPoint.Bottom - (Fifty + 20))); //TwoHundred

                                        //pt2 = new PointF((float)((objPoint.Left + SixtyTwo+20) + IntervalXAxis * i), (float)(objPoint.Bottom - (Fifty)));//TwoHundred
                                        objGraphics.DrawString(Convert.ToString(TmArr[DateCtrToDisplay]), objFontDt,
                                            objBrush, pt1);
                                        DateCtrToDisplay++;

                                    }

                                    //LineInterval++;
                                    ctrMiniInterval++;
                                }

                                ctrAxisLines++;
                            }
                        }
                        else if (IfTmData == true)
                        {
                            for (int i = 0; i < TargetX.Length; i++)
                            {
                                if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                                    (MiniLineInterval * ctrMiniInterval) != LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 10)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                                    HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                                    ctrMiniInterval++;
                                }
                                else if (ctrAxisLines == LineInterval)
                                {
                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty) + 20)); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt3 = pt1;
                                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                    if (TargetX[i] >= 0)
                                    {
                                        HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                                    }
                                    else
                                    {
                                        HighestValXAxis = Convert.ToDouble(0);
                                    }

                                    objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


                                    pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                                    pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                        (float) (objPoint.Top + OneFifty)); //FourHundred
                                    objGraphics.DrawLine(BlkDash, pt1, pt2);


                                    ctrAxisLines = 0;
                                    ctrMiniInterval = 1;
                                }

                                ctrAxisLines++;
                            }
                        }

                        if (IfTmData == false)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 2)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;

                            } while ((float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }

                        if (IfTmData == true)
                        {
                            int i = 1;
                            do
                            {


                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 2)), objFont,
                                    objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) -
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);





                                pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                                objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                                objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 2)),
                                    objFont, objBrush, pt3);

                                pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                                    (float) (objPoint.Bottom - (TwoHundred + OneFifty) +
                                             (LineYAxisDistance * i))); //TwoHundred
                                objGraphics.DrawLine(BlkDash, pt1, pt2);


                                i++;

                            } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                                     (objPoint.Top + OneFifty));
                        }




                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        ErrorLogFile(ex);
                        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void SetAxisMarks(double[] TargetX, double[] TargetY, ArrayList Dts)
        {
            SetAxis();
            Pen BlkDash = new Pen(Color.Black, (float) .5);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            int ctrAxisLines = 0;
            double IntervalXAxis = 0.0;
            bool IfTmData = false;
            Region objRegion = new Region(panel1.Bounds);
            Graphics objGraphics = panel1.CreateGraphics();
            objGraphics.Clip = objRegion;
            RectangleF objPoint = objGraphics.ClipBounds;
            IfTmData = CheckForTimeDataInAxisLines(TargetY);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                (objPoint.Left + SixtyTwo + OneSixtyTwo);
            if (IfTmData == true)
            {
                TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);

            }

            double MaxVal = 0;
            //IfTmData = CheckForTimeDataInAxisLines(TargetY);
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF pt3 = new PointF();
            double HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[TargetX.Length - 1], 2));
            IntervalXAxis = (TotalXAxis / (TargetX.Length - 1));
            int LineInterval = (TargetX.Length - 1) / 4;
            int MiniLineInterval = LineInterval / 10;
            int ctrMiniInterval = 1;
            double LineYInterval = HighestValYAxis / 4;
            double LineYAxisDistance = TotalYAxis / 4;
            try
            {
                Font objFont = new Font("Roman", 10, FontStyle.Bold);
                Brush objBrush = Brushes.Black;
                if (IfTmData == true)
                {
                    pt1 = new Point((int) (objPoint.Right - OneSixtyTwo), (int) (objPoint.Bottom - Fifty));
                    pt2 = new Point((int) (objPoint.Left + SixtyTwo), (int) (objPoint.Bottom - Fifty));
                    objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                }

                //pt1 = new Point((int)(objPoint.Left + SixtyTwo), (int)(objPoint.Bottom - (TwoHundred + OneFifty)));
                pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                //objGraphics.DrawLine(new Pen(Color.Black, 2), pt1, pt2);
                objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                if (IfTmData == true)
                {
                    pt2 = new Point((int) (objPoint.Left + SixtyTwo - 15), (int) (objPoint.Bottom - Fifty));
                    objGraphics.DrawString(Convert.ToString(0), objFont, objBrush, pt2);
                }

                ctrAxisLines++;
                if (IfTmData == false)
                {
                    for (int i = 1; i < TargetX.Length; i++)
                    {
                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                            (MiniLineInterval * ctrMiniInterval) != LineInterval)
                        {
                            pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Bottom - (Fifty - 10))); //TwoHundred
                            pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                            pt3 = pt1;
                            objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                            ctrMiniInterval++;
                        }
                        else if (ctrAxisLines == LineInterval)
                        {
                            pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Bottom - (Fifty - 20))); //TwoHundred
                            pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                            pt3 = pt1;
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                            objGraphics.DrawString(Dts[ctrAxisLines].ToString(), objFont, objBrush, pt1);
                            pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Bottom - (Fifty))); //TwoHundred
                            pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Top + OneFifty)); //FourHundred
                            objGraphics.DrawLine(BlkDash, pt1, pt2);
                            ctrAxisLines = 0;
                            ctrMiniInterval = 1;
                        }

                        ctrAxisLines++;
                    }
                }
                else if (IfTmData == true)
                {
                    for (int i = 0; i < TargetX.Length; i++)
                    {
                        if (ctrAxisLines == (MiniLineInterval * ctrMiniInterval) &&
                            (MiniLineInterval * ctrMiniInterval) != LineInterval)
                        {
                            pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) ((objPoint.Bottom - Fifty) + 10)); //TwoHundred
                            pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                            pt3 = pt1;
                            objGraphics.DrawLine(new Pen(Color.Black, (float) .5), pt1, pt2);
                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);
                            ctrMiniInterval++;
                        }
                        else if (ctrAxisLines == LineInterval)
                        {
                            pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) ((objPoint.Bottom - Fifty) + 20)); //TwoHundred
                            pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                            pt3 = pt1;
                            objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                            HighestValXAxis = Convert.ToDouble(Math.Round(TargetX[i], 2));
                            //objGraphics.DrawString(Convert.ToString(HighestValXAxis), objFont, objBrush, pt1);


                            pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) ((objPoint.Bottom - Fifty))); //TwoHundred
                            pt2 = new PointF((float) ((objPoint.Left + SixtyTwo) + IntervalXAxis * i),
                                (float) (objPoint.Top + OneFifty)); //FourHundred
                            objGraphics.DrawLine(BlkDash, pt1, pt2);


                            ctrAxisLines = 0;
                            ctrMiniInterval = 1;
                        }

                        ctrAxisLines++;
                    }
                }

                if (IfTmData == false)
                {
                    int i = 1;
                    do
                    {


                        pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                            (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                        pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                            (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                        pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                            (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)));
                        objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 3)), objFont, objBrush,
                            pt3);

                        pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                            (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                        pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                            (float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i))); //TwoHundred
                        objGraphics.DrawLine(BlkDash, pt1, pt2);


                        i++;

                    } while ((float) (objPoint.Bottom - (Fifty) - (LineYAxisDistance * i)) >=
                             (objPoint.Top + OneFifty));
                }

                if (IfTmData == true)
                {
                    int i = 1;
                    do
                    {


                        pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i))); //TwoHundred
                        pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i))); //TwoHundred
                        pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)));
                        objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                        objGraphics.DrawString(Convert.ToString(Math.Round((LineYInterval * i), 3)), objFont, objBrush,
                            pt3);

                        pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i))); //TwoHundred
                        pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i))); //TwoHundred
                        objGraphics.DrawLine(BlkDash, pt1, pt2);





                        pt1 = new PointF((float) ((objPoint.Left + SixtyTwo) - 20),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i))); //TwoHundred
                        pt2 = new PointF((float) ((objPoint.Left + SixtyTwo)),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i))); //TwoHundred
                        pt3 = new PointF((float) ((objPoint.Left + SixtyTwo) - 60),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i)));
                        objGraphics.DrawLine(new Pen(Color.Black, (float) 2), pt1, pt2);
                        objGraphics.DrawString("-" + Convert.ToString(Math.Round((LineYInterval * i), 3)), objFont,
                            objBrush, pt3);

                        pt1 = new PointF((float) (objPoint.Left + SixtyTwo),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i))); //TwoHundred
                        pt2 = new PointF((float) (objPoint.Right - OneSixtyTwo),
                            (float) (objPoint.Bottom - (TwoHundred + OneFifty) + (LineYAxisDistance * i))); //TwoHundred
                        objGraphics.DrawLine(BlkDash, pt1, pt2);


                        i++;

                    } while ((float) (objPoint.Bottom - (TwoHundred + OneFifty) - (LineYAxisDistance * i)) >=
                             (objPoint.Top + OneFifty));
                }




            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        public int SetCtr
        {
            set { setAxisCtr = value; }
        }

        bool Panel1Resized = false;
        int panel1height = 0;

        void Panel1_SizeChanged(object sender, EventArgs e)
        {
            //try
            //{
            //    //panel1.Width
            //    //panel1.height
            //    if (!ExtraZoom)
            //    {
            //        // panel1.Refresh();
            //        Panel1Resized = true;
            //        PanelOneRedraw = true;
            //        panel1.Refresh();
            //    }
            //    else
            //    {
            //        //if(panel1height!=panel1.Height)
            //        //{
            //        //    if (panel1height != 0)
            //        //    {

            //        //    }
            //        //}
            //        //panel1height = panel1.Height;
            //        panel1.Refresh();
            //        redrawZoom();
            //        DrawZoomed();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //    ErrorLogFile(ex);
            //}
        }

        private void redraw()
        {
            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);

            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 3);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            //panel1.Refresh();
            PointF Ptsn1 = new PointF();
            try
            {
                if ((x != null && x.Length > 1) || (x1 != null && x1.Length > 1) || (x2 != null && x2.Length > 1) ||
                    (x3 != null && x3.Length > 1) || (x4 != null && x4.Length > 1) || (x5 != null && x5.Length > 1) ||
                    (x6 != null && x6.Length > 1) || (x7 != null && x7.Length > 1))
                {
                    //12-02-2010    Amit Jain
                    //Work for the labels of axis
                    if (Time == true)
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        der.DrawLine(BlkDash, pt1, pt2);
                        der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                            pt2.Y - 7);

                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);

                    }

                    else
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                            pt2.Y - 7);


                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);

                    }
                }

                CalCulateGhpDisplayed = GphCtr - 1;
                if (CalCulateGhpDisplayed < 0)
                {
                    CalCulateGhpDisplayed = 0;
                }
                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                double TotalYAxis = 0.0;
                double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                if (Time == true)
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
                }
                else
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
                }


                if (setAxisCtr == 0 && x != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x, y);
                }
                else if (setAxisCtr == 1 && x1 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x1, y1);
                }
                else if (setAxisCtr == 2 && x2 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x2, y2);
                }
                else if (setAxisCtr == 3 && x3 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x3, y3);
                }
                else if (setAxisCtr == 4 && x4 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x4, y4);
                }
                else if (setAxisCtr == 5 && x5 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x5, y5);
                }
                else if (setAxisCtr == 6 && x6 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x6, y6);
                }
                else if (setAxisCtr == 7 && x7 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x7, y7);
                }

                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);


                if (arlstSColors != null && arlstSColors.Count > 0)
                {

                    if (Panel1Resized)
                    {

                        if (x != null)
                        {
                            Pts = new PointF[x.Length];

                            for (int i = 0; i < x.Length; i++)
                            {


                                //Array.Resize(ref Pts, Pts.Length + 1);
                                if (Time == true)
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y[i] / MainYAxisInterval)));
                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                                }

                                Pts[i] = Ptsn1;
                            }

                            PtsSelected = new PointF[Pts.Length];
                            PtsSelected = Pts;
                            XSelected = new double[x.Length];
                            YSelected = new double[y.Length];
                            XSelected = x;
                            YSelected = y;
                        }


                        if (x1 != null)
                        {
                            Pts1 = new PointF[x1.Length];
                            for (int i = 0; i < x1.Length; i++)
                            {
                                //Array.Resize(ref Pts1, Pts1.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y1[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y1[i] / MainYAxisInterval)));
                                }

                                Pts1[i] = Ptsn1;
                            }
                        }



                        if (x2 != null)
                        {
                            Pts2 = new PointF[x2.Length];
                            for (int i = 0; i < x2.Length; i++)
                            {
                                //Array.Resize(ref Pts2, Pts2.Length + 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y2[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y2[i] / MainYAxisInterval)));
                                }

                                Pts2[i] = Ptsn1;
                            }
                        }


                        if (x3 != null)
                        {
                            Pts3 = new PointF[0];
                            for (int i = 0; i < x3.Length; i++)
                            {
                                //Array.Resize(ref Pts3, Pts3.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref Pts3, 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y3[i] / MainYAxisInterval)));

                                }
                                else
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y3[i] / MainYAxisInterval)));
                                }

                                Pts3[i] = Ptsn1;
                            }
                        }


                        if (x4 != null)
                        {
                            Pts4 = new PointF[0];
                            for (int i = 0; i < x4.Length; i++)
                            {
                                //Array.Resize(ref Pts4, Pts4.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref Pts4, 1);
                                if (Time == true)
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y4[i] / MainYAxisInterval)));
                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y4[i] / MainYAxisInterval)));

                                }

                                Pts4[i] = Ptsn1;
                            }
                        }


                        if (x5 != null)
                        {
                            Pts5 = new PointF[0];
                            for (int i = 0; i < x5.Length; i++)
                            {
                                //Array.Resize(ref Pts5, Pts5.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref Pts5, 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y5[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y5[i] / MainYAxisInterval)));
                                }

                                Pts5[i] = Ptsn1;
                            }
                        }


                        if (x6 != null)
                        {
                            Pts6 = new PointF[0];
                            for (int i = 0; i < x6.Length; i++)
                            {
                                //Array.Resize(ref Pts6, Pts6.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref Pts6, 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y6[i] / MainYAxisInterval)));

                                }
                                else
                                {
                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y6[i] / MainYAxisInterval)));
                                }

                                Pts6[i] = Ptsn1;
                            }
                        }


                        if (x7 != null)
                        {
                            Pts7 = new PointF[0];
                            for (int i = 0; i < x7.Length; i++)
                            {
                                //Array.Resize(ref Pts7, Pts7.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref Pts7, 1);
                                if (Time == true)
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - (TwoHundred + OneFifty) -
                                                 (float) (y7[i] / MainYAxisInterval)));

                                }
                                else
                                {

                                    Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                        (float) (pt.Bottom - Fifty - (float) (y7[i] / MainYAxisInterval)));
                                }

                                Pts7[i] = Ptsn1;
                            }
                        }


                        Panel1Resized = false;

                    }








                    if (CalCulateGhpDisplayed >= 0)
                    {
                        if (Pts != null && Pts.Length != 0)
                        {
                            try
                            {

                                if (CtrSelectedCraph != 0)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) .5), Pts,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 0)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) 2),
                                        Pts, (float) 0);
                                }

                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                                int i = 0;
                                int isplitcount = Pts.Length / 100000;
                                for (int kk = 0; kk <= isplitcount; kk++)
                                {
                                    if (kk != isplitcount)
                                    {
                                        PointF[] tempPts = new PointF[100000];
                                        int ii = 0;
                                        for (int jj = i; jj < (100000 * (kk + 1)); jj++)
                                        {

                                            tempPts[ii] = Pts[jj];
                                            i++;
                                            ii++;

                                        }

                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), tempPts, (float) 0);
                                    }
                                    else
                                    {
                                        int iremcount = Pts.Length % 100000;
                                        PointF[] tempPts = new PointF[iremcount];
                                        int ii = 0;
                                        for (int jj = i; jj < ((100000 * (kk)) + iremcount); jj++)
                                        {

                                            tempPts[ii] = Pts[jj];
                                            i++;
                                            ii++;

                                        }

                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), tempPts, (float) 0);
                                    }
                                }
                            }

                        }
                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        if (Pts1 != null && Pts1.Length != 0)
                        {
                            if (CtrSelectedCraph != 1)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) .5),
                                    Pts1, (float) 0);
                            }
                            else if (CtrSelectedCraph == 1)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) 2),
                                    Pts1, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        if (Pts2 != null && Pts2.Length != 0)
                        {
                            if (CtrSelectedCraph != 2)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) .5),
                                    Pts2, (float) 0);
                            }
                            else if (CtrSelectedCraph == 2)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) 2),
                                    Pts2, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        if (Pts3 != null && Pts3.Length != 0)
                        {
                            if (CtrSelectedCraph != 3)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) .5),
                                    Pts3, (float) 0);
                            }
                            else if (CtrSelectedCraph == 3)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) 2),
                                    Pts3, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        if (Pts4 != null && Pts4.Length != 0)
                        {
                            if (CtrSelectedCraph != 4)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) .5),
                                    Pts4, (float) 0);
                            }
                            else if (CtrSelectedCraph == 4)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) 2),
                                    Pts4, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        if (Pts5 != null && Pts5.Length != 0)
                        {
                            if (CtrSelectedCraph != 5)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) .5),
                                    Pts5, (float) 0);
                            }
                            else if (CtrSelectedCraph == 5)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) 2),
                                    Pts5, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        if (Pts6 != null && Pts6.Length != 0)
                        {
                            if (CtrSelectedCraph != 6)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) .5),
                                    Pts6, (float) 0);
                            }
                            else if (CtrSelectedCraph == 6)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) 2),
                                    Pts6, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 7)
                    {
                        if (Pts7 != null && Pts7.Length != 0)
                        {
                            if (CtrSelectedCraph != 7)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) .5),
                                    Pts7, (float) 0);
                            }
                            else if (CtrSelectedCraph == 7)
                            {
                                der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) 2),
                                    Pts7, (float) 0);
                            }
                        }

                    }

                }
                else
                {
                    if (CalCulateGhpDisplayed >= 0)
                    {
                        if (Pts != null && Pts.Length != 0)
                        {
                            try
                            {
                                if (CtrSelectedCraph != 0)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);
                                }
                                else if (CtrSelectedCraph == 0)
                                {
                                    der.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                                int i = 0;
                                int isplitcount = Pts.Length / 100000;
                                for (int kk = 0; kk <= isplitcount; kk++)
                                {
                                    if (kk != isplitcount)
                                    {
                                        PointF[] tempPts = new PointF[100000];
                                        int ii = 0;
                                        for (int jj = i; jj < (100000 * (kk + 1)); jj++)
                                        {

                                            tempPts[ii] = Pts[jj];
                                            i++;
                                            ii++;

                                        }

                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), tempPts, (float) 0);
                                    }
                                    else
                                    {
                                        int iremcount = Pts.Length % 100000;
                                        PointF[] tempPts = new PointF[iremcount];
                                        int ii = 0;
                                        for (int jj = i; jj < ((100000 * (kk)) + iremcount); jj++)
                                        {

                                            tempPts[ii] = Pts[jj];
                                            i++;
                                            ii++;

                                        }

                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), tempPts, (float) 0);
                                    }
                                }
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        if (Pts1 != null && Pts1.Length != 0)
                        {
                            if (CtrSelectedCraph != 1)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                                der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);
                            }
                            else if (CtrSelectedCraph == 1)
                            {
                                der.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        if (Pts2 != null && Pts2.Length != 0)
                        {
                            if (CtrSelectedCraph != 2)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                                der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);
                            }
                            else if (CtrSelectedCraph == 2)
                            {
                                der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        if (Pts3 != null && Pts3.Length != 0)
                        {
                            if (CtrSelectedCraph != 3)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                                der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);
                            }
                            else if (CtrSelectedCraph == 3)
                            {
                                der.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        if (Pts4 != null && Pts4.Length != 0)
                        {
                            if (CtrSelectedCraph != 4)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                                der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);
                            }
                            else if (CtrSelectedCraph == 4)
                            {
                                der.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        if (Pts5 != null && Pts5.Length != 0)
                        {
                            if (CtrSelectedCraph != 5)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                                der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);
                            }
                            else if (CtrSelectedCraph == 5)
                            {
                                der.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                            }
                        }

                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        if (Pts6 != null && Pts6.Length != 0)
                        {
                            if (CtrSelectedCraph != 6)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                                der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);
                            }
                            else if (CtrSelectedCraph == 6)
                            {
                                der.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                            }
                        }
                    }

                    if (CalCulateGhpDisplayed >= 7)
                    {
                        if (Pts7 != null && Pts7.Length != 0)
                        {
                            if (CtrSelectedCraph != 7)
                            {
                                //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                                der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);
                            }
                            else if (CtrSelectedCraph == 7)
                            {
                                der.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                            }
                        }
                    }
                }

                if (FaultFreq)
                {
                    DrawFaultFreq();
                }

                if (ShowRpmRatio)
                {
                    DrawRpm();
                }

                if (BearingFaultFrequency)
                {
                    DrawBearingFaultFrequency();
                }

                if (bRepaint)
                {
                    if (cmbCurSors.SelectedIndex != 0)
                    {
                        if (HarmncCrs)
                        {
                            for (int i = 0; i < aatest.Length; i++)
                            {
                                der.DrawLine(new Pen(Color.Black, (float) .5), aatest[i], aatest[i + 1]);
                                i++;
                            }

                        }
                        else if (TwoDCrossHairCursor || SingleCrs || TwDSingleSqrCrs || PeekCursor || SideBndCsr ||
                                 SideBndCsrRatio || SideBandTrndDrw)
                        {

                            der.DrawLine(new Pen(Color.Black, (float) .5), pt1forImage, pt2forImage);

                            if (TwoDCrossHairCursor)
                            {
                                der.DrawLine(new Pen(Color.Black, (float) .5), pt1forCImage, pt2forCImage);
                            }

                            if (TwDSingleSqrCrs)
                            {
                                der.DrawRectangle(new Pen(Color.Black, (float) .5), SS);
                            }

                            if (SideBndCsr || SideBndCsrRatio || SideBandTrndDrw)
                            {
                                der.DrawLine(new Pen(Color.Black, (float) .5), pts11, pts12);
                                der.DrawLine(new Pen(Color.Black, (float) .5), pts21, pts22);
                            }


                        }
                    }
                }


                if (BtnOk == 0)
                {
                    AreaPlotSelected();
                }
            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
            finally
            {
                rgn1 = null; // new Region(panel1.Bounds);

                der = null; // panel1.CreateGraphics();

                PenBlkB = null; // new Pen(Color.Black, 2);
                PenRed = null; // new Pen(Color.Red, 3);

                BlkDash = null; // new Pen(Color.Black, 2);


            }

        }


        private void redrawAsImage()
        {
            try
            {
                SetAxis();


                Region rgn1 = new Region(panel1.Bounds);
                Bitmap bmp = new Bitmap(panel1.Width, panel1.Height, PixelFormat.Format24bppRgb);

                System.Drawing.Graphics der = Graphics.FromImage(bmp);
                der.Clear(panel1.BackColor);
                der.Clip = rgn1;
                Pen PenBlkB = new Pen(Color.Black, 2);
                Pen PenRed = new Pen(Color.Red, 3);
                RectangleF pt = der.ClipBounds;
                Pen BlkDash = new Pen(Color.Black, 2);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.Dash;
                Point pt1 = new Point();
                Point pt2 = new Point();
                //Pts = new PointF[0];

                //PointF PointToDrwString = new PointF();
                //PointF PointToDrawVerticle = new PointF();



                try
                {
                    //12-02-2010    Amit Jain
                    //Work for the labels of axis
                    if (Time == true)
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        der.DrawLine(BlkDash, pt1, pt2);
                        der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                            pt2.Y - 7);

                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);

                    }

                    else
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                            pt2.Y - 7);


                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);


                    }
                    //{
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    der.DrawLine(BlkDash, pt1, pt2);
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);

                    //    //PointToDrawVerticle = new PointF((float)(pt.Left + SixtyTwo - 5), (float)(pt.Bottom - (TwoHundred + OneFifty))); //(float)(((float)(pt.Bottom - (Fifty) - (float)(pt.Top + OneFifty))) / 2));
                    //    //PointToDrwString = new PointF((float)(pt.Left + SixtyTwo+62), (float)(pt.Bottom - Fifty+5));



                    //}

                    //else
                    //{
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                    //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                    //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);


                    //    // PointToDrawVerticle = new PointF((float)(pt.Left + SixtyTwo - 5), (float)(pt.Bottom - Fifty - 50)); //(float)(((float)(pt.Bottom - (Fifty) - (float)(pt.Top + OneFifty))) / 2));
                    //    //PointToDrwString = new PointF((float)(pt.Left + SixtyTwo + 62), (float)(pt.Bottom - Fifty + 5));

                    //}
                    CalCulateGhpDisplayed = GphCtr - 1;
                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    if (setAxisCtr == 0)
                    {
                        SetAxisMarks(x, y, der);
                    }
                    else if (setAxisCtr == 1)
                    {
                        SetAxisMarks(x1, y1, der);
                    }
                    else if (setAxisCtr == 2)
                    {
                        SetAxisMarks(x2, y2, der);
                    }
                    else if (setAxisCtr == 3)
                    {
                        SetAxisMarks(x3, y3, der);
                    }
                    else if (setAxisCtr == 4)
                    {
                        SetAxisMarks(x4, y4, der);
                    }
                    else if (setAxisCtr == 5)
                    {
                        SetAxisMarks(x5, y5, der);
                    }
                    else if (setAxisCtr == 6)
                    {
                        SetAxisMarks(x6, y6, der);
                    }
                    else if (setAxisCtr == 7)
                    {
                        SetAxisMarks(x7, y7, der);
                    }

                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                    //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                    //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                    if (arlstSColors != null && arlstSColors.Count > 0)
                    {
                        if (CalCulateGhpDisplayed >= 0)
                        {
                            if (Pts != null && Pts.Length != 0)
                            {
                                if (arlstSColors.Count > 1)
                                {
                                    if (CtrSelectedCraph != 0)
                                    {
                                        //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                                        der.DrawCurve(
                                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) .5), Pts,
                                            (float) 0);
                                    }
                                    else if (CtrSelectedCraph == 0)
                                    {
                                        der.DrawCurve(
                                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) 2), Pts,
                                            (float) 0);
                                    }
                                }
                                else
                                {
                                    der.DrawCurve(new Pen(Color.Black, (float) .5), Pts, (float) 0);
                                }
                            }


                        }

                        if (CalCulateGhpDisplayed >= 1)
                        {
                            if (Pts1 != null && Pts1.Length != 0)
                            {
                                if (CtrSelectedCraph != 1)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) .5), Pts1,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 1)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) 2),
                                        Pts1, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 2)
                        {
                            if (Pts2 != null && Pts2.Length != 0)
                            {
                                if (CtrSelectedCraph != 2)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) .5), Pts2,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 2)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) 2),
                                        Pts2, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 3)
                        {
                            if (Pts3 != null && Pts3.Length != 0)
                            {
                                if (CtrSelectedCraph != 3)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) .5), Pts3,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 3)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) 2),
                                        Pts3, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 4)
                        {
                            if (Pts4 != null && Pts4.Length != 0)
                            {
                                if (CtrSelectedCraph != 4)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) .5), Pts4,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 4)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) 2),
                                        Pts4, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 5)
                        {
                            if (Pts5 != null && Pts5.Length != 0)
                            {
                                if (CtrSelectedCraph != 5)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) .5), Pts5,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 5)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) 2),
                                        Pts5, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 6)
                        {
                            if (Pts6 != null && Pts6.Length != 0)
                            {
                                if (CtrSelectedCraph != 6)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) .5), Pts6,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 6)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) 2),
                                        Pts6, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 7)
                        {
                            if (Pts7 != null && Pts7.Length != 0)
                            {
                                if (CtrSelectedCraph != 7)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) .5), Pts7,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 7)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) 2),
                                        Pts7, (float) 0);
                                }
                            }

                        }

                    }
                    else
                    {
                        if (CalCulateGhpDisplayed >= 0)
                        {
                            if (Pts1 != null && Pts1.Length != 0)
                            {
                                if (Pts != null && Pts.Length != 0)
                                {
                                    if (CtrSelectedCraph != 0)
                                    {
                                        //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);
                                    }
                                    else if (CtrSelectedCraph == 0)
                                    {
                                        der.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                                    }
                                }
                            }
                            else
                            {
                                der.DrawCurve(new Pen(Color.Black, (float) .5), Pts, (float) 0);
                            }

                        }

                        if (CalCulateGhpDisplayed >= 1)
                        {
                            if (Pts1 != null && Pts1.Length != 0)
                            {
                                if (CtrSelectedCraph != 1)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);
                                }
                                else if (CtrSelectedCraph == 1)
                                {
                                    der.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 2)
                        {
                            if (Pts2 != null && Pts2.Length != 0)
                            {
                                if (CtrSelectedCraph != 2)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);
                                }
                                else if (CtrSelectedCraph == 2)
                                {
                                    der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 3)
                        {
                            if (Pts3 != null && Pts3.Length != 0)
                            {
                                if (CtrSelectedCraph != 3)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);
                                }
                                else if (CtrSelectedCraph == 3)
                                {
                                    der.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 4)
                        {
                            if (Pts4 != null && Pts4.Length != 0)
                            {
                                if (CtrSelectedCraph != 4)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);
                                }
                                else if (CtrSelectedCraph == 4)
                                {
                                    der.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 5)
                        {
                            if (Pts5 != null && Pts5.Length != 0)
                            {
                                if (CtrSelectedCraph != 5)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                                    der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);
                                }
                                else if (CtrSelectedCraph == 5)
                                {
                                    der.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 6)
                        {
                            if (Pts6 != null && Pts6.Length != 0)
                            {
                                if (CtrSelectedCraph != 6)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                                    der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);
                                }
                                else if (CtrSelectedCraph == 6)
                                {
                                    der.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                                }
                            }
                        }

                        if (CalCulateGhpDisplayed >= 7)
                        {
                            if (Pts7 != null && Pts7.Length != 0)
                            {
                                if (CtrSelectedCraph != 7)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);
                                }
                                else if (CtrSelectedCraph == 7)
                                {
                                    der.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                                }
                            }
                        }
                    }



                }

                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                    //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                }

                if (FaultFreq)
                {
                    DrawFaultFreq(der);
                }

                if (ShowRpmRatio)
                {
                    DrawRpm(der);
                }

                if (BearingFaultFrequency)
                {
                    DrawBearingFaultFrequency(der);
                }

                //der.TranslateTransform(150, 0);
                //der.RotateTransform(180);
                Brush objBrsh = Brushes.Black;
                Font objFnt = new Font("Roman", 8, FontStyle.Bold);
                if (Time == true)
                {
                    string Text = lblGraphUnitY.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                    Text = lblGrphUnitX.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);
                    if (IsTrend)
                    {
                        Text = lblYAxis.Text.ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }
                    else
                    {
                        Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }
                }
                else
                {
                    string Text = lblGraphUnitY.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);
                    Text = lblGrphUnitX.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                    //der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, Pts[0].Y - 20);


                    // der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);


                    //Text = lblGrphUnitX.Text.ToString();
                    //string[] labelx = Text.Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);                    
                    //der.DrawString(labelx[1].ToString(), objFnt, objBrsh, Pts[0].X + 65, Pts[0].Y);
                    //der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);
                    if (IsTrend)
                    {
                        Text = lblYAxis.Text.ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }
                    else
                    {
                        Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }

                }

                Pen dashpen = new Pen(Color.Blue, 1);
                //dashpen.DashStyle=DashStyle.Dash;
                //dashpen.DashCap=DashCap.Triangle;
                //Graphics Line = panel1.CreateGraphics();

                string sText = "Overall: " + lblOverall.Text.ToString() + " " + lblDisplayunit.Text.ToString();
                der.DrawString(sText, objFnt, objBrsh, Pts[0].X - 45, 60);

                sText = "No. of Lines: " + lbllines.Text.ToString();
                der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 60);

                sText = "Date&Time: " + lblDate.Text.ToString();
                der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 60);
                CopyGraphString = null;
                if (cmbCurSors.SelectedIndex != 0)
                {
                    if (HarmncCrs)
                    {
                        int iCounter = 0;
                        for (int i = 0; i < aatest.Length; i++)
                        {
                            StringFormat _sf = new StringFormat();
                            _sf.FormatFlags = StringFormatFlags.DirectionVertical;
                            der.DrawLine(new Pen(Color.Black, (float) .5), aatest[i], aatest[i + 1]);
                            der.DrawString(
                                "X: " + dataGridView1[0, iCounter].Value.ToString() + " " +
                                lblGrphUnitX.Text.ToString().Remove(0, 9) + " , Y: " +
                                dataGridView1[1, iCounter].Value.ToString() + " " +
                                lblGraphUnitY.Text.ToString().Remove(0, 9), new Font("Roman", 7, FontStyle.Italic),
                                Brushes.Blue, aatest[i + 1], _sf);
                            i++;
                            iCounter++;
                        }

                        //Clipboard.SetText(ydata.ToString());
                    }
                    else if (TwoDCrossHairCursor || SingleCrs || TwDSingleSqrCrs || PeekCursor || SideBndCsr ||
                             SideBndCsrRatio || SideBandTrndDrw)
                    {

                        der.DrawLine(new Pen(Color.Black, (float) .5), pt1forImage, pt2forImage);

                        sText = "Cursor X: " + dataGridView1[0, 0].Value.ToString() + " " +
                                lblGrphUnitX.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 20);

                        sText = "Cursor Y: " + dataGridView1[1, 0].Value.ToString() + " " +
                                lblGraphUnitY.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 40);

                        if (TwoDCrossHairCursor)
                        {
                            der.DrawLine(new Pen(Color.Black, (float) .5), pt1forCImage, pt2forCImage);
                        }

                        if (TwDSingleSqrCrs)
                        {
                            der.DrawRectangle(new Pen(Color.Black, (float) .5), SS);
                        }

                        if (SideBndCsr || SideBndCsrRatio || SideBandTrndDrw)
                        {
                            der.DrawLine(new Pen(Color.Black, (float) .5), pts11, pts12);

                            sText = "Previous Cursor X: " + dataGridView1[0, 1].Value.ToString() + " " +
                                    lblGrphUnitX.Text.ToString().Remove(0, 9);
                            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 20);

                            sText = "Previous Cursor Y: " + dataGridView1[1, 1].Value.ToString() + " " +
                                    lblGraphUnitY.Text.ToString().Remove(0, 9);
                            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 40);


                            der.DrawLine(new Pen(Color.Black, (float) .5), pts21, pts22);
                            try
                            {
                                if (!string.IsNullOrEmpty(dataGridView1[0, 2].Value.ToString()))
                                {
                                    sText = "Next Cursor X: " + dataGridView1[0, 2].Value.ToString() + " " +
                                            lblGrphUnitX.Text.ToString().Remove(0, 9);
                                    der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 500, 20);

                                    sText = "Next Cursor Y: " + dataGridView1[1, 2].Value.ToString() + " " +
                                            lblGraphUnitY.Text.ToString().Remove(0, 9);
                                    der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 500, 40);
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                            }
                        }


                    }
                }

                GC.Collect();

                bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg");
                bmpheight = bmp.Height;
                bmp.Dispose();
                GC.Collect();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void DrawBearingFaultFrequency(Graphics der)
        {
            if (!Zoom)
            {
                try
                {
                    //double NumberOfBalls = Convert.ToDouble(txtxBNRE.Text.ToString());
                    //double BearingPitchDiameter = Convert.ToDouble(((Convert.ToDouble(txtxBDIR.Text.ToString()) + Convert.ToDouble(txtxBDOR.Text.ToString())) / 2));
                    //double RollingElementDiameter = Convert.ToDouble(txtxBDRE.Text.ToString());
                    //double ContactAngle = Convert.ToDouble(txtxBCA.Text.ToString());
                    //double ShaftSpeed = Convert.ToDouble(txtxBRF.Text.ToString());
                    //ArrayList BearingFaultFrequencies = _BFFInterface.CalculateBearingFaultFrequencies(ShaftSpeed, NumberOfBalls, BearingPitchDiameter, RollingElementDiameter, ContactAngle);

                    double NumberOfBalls = Convert.ToDouble(txtxBNRE.Text.ToString());
                    double BearingPitchDiameter =
                        Convert.ToDouble(((Convert.ToDouble(txtxBDIR.Text.ToString()) +
                                           Convert.ToDouble(txtxBDOR.Text.ToString())) / 2));
                    double RollingElementDiameter = Convert.ToDouble(txtxBDRE.Text.ToString());
                    double ContactAngle = Convert.ToDouble(txtxBCA.Text.ToString());
                    double ShaftSpeed = 0;

                    if (chkBFFOverride.Checked)
                    {
                        ShaftSpeed = OverriddenRPM;
                    }
                    else
                    {
                        ShaftSpeed = Convert.ToDouble(txtxRPM.Text.ToString()) /
                                     Convert.ToDouble(txtxPulse.Text.ToString());
                    }

                    ArrayList BearingFaultFrequencies = new ArrayList();

                    if (rbPhysicalDimensions.Checked)
                    {
                        BearingFaultFrequencies = _BFFInterface.CalculateBearingFaultFrequencies(ShaftSpeed,
                            NumberOfBalls, BearingPitchDiameter, RollingElementDiameter, ContactAngle);
                    }
                    else
                    {
                        BearingFaultFrequencies.Add(
                            "BPFO = " + Convert.ToString(Convert.ToDouble(tbBPFO.Text.ToString()) * ShaftSpeed));
                        BearingFaultFrequencies.Add(
                            "BPFI = " + Convert.ToString(Convert.ToDouble(tbBPFI.Text.ToString()) * ShaftSpeed));
                        BearingFaultFrequencies.Add(
                            "BSF = " + Convert.ToString(Convert.ToDouble(tbBSF.Text.ToString()) * ShaftSpeed));
                        BearingFaultFrequencies.Add(
                            "FTF = " + Convert.ToString(Convert.ToDouble(tbFTF.Text.ToString()) * ShaftSpeed));
                        // BearingFaultFrequencies.Add(
                    }



                    {
                        Region rgn1 = new Region(panel1.Bounds);

                        //System.Drawing.Graphics der = panel1.CreateGraphics();
                        der.Clip = rgn1;
                        RectangleF pt = der.ClipBounds;
                        Pen BlkDash = new Pen(Color.BlueViolet, 2);
                        BlkDash.DashCap = DashCap.Triangle;
                        BlkDash.DashStyle = DashStyle.DashDotDot;

                        PointF[] pt1 = new PointF[0];
                        PointF[] pt2 = new PointF[0];
                        PointF[] ptString = new PointF[0];
                        string[] Names = new string[0];
                        Font objFont = new Font("Roman", 7, FontStyle.Regular);
                        Brush objBrush = Brushes.Red;
                        try
                        {
                            if (Pts != null)
                            {

                                //dataGridView3.Rows.Clear();
                                //for (int i = 0; i < dataGridView3.Rows.Count - 1; i++)
                                //{
                                //    dataGridView3.Rows.RemoveAt(0);
                                //}

                                double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) -
                                                    (pt.Left + SixtyTwo + OneSixtyTwo);
                                double MainInterval = (TotalXAxis / (x.Length - 1));

                                StringFormat sf = new StringFormat(StringFormatFlags.DirectionVertical);

                                //Predicate<
                                //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());

                                string[] Frequencies = new string[0];

                                for (int i = 0; i < BearingFaultFrequencies.Count; i++)
                                {
                                    //Array.Resize(ref Frequencies, Frequencies.Length + 1);
                                    _ResizeArray.IncreaseArrayString(ref Frequencies, 1);

                                    Frequencies[Frequencies.Length - 1] = BearingFaultFrequencies[i].ToString();
                                }





                                ExactBearingFF = new double[4];

                                for (int i = 0; i < Frequencies.Length; i++)
                                {
                                    string[] ExtractFreqSingle = Frequencies[i].Split(new string[] {"="},
                                        StringSplitOptions.RemoveEmptyEntries);
                                    double Comparator = Convert.ToDouble(ExtractFreqSingle[1]);
                                    if (!lblGrphUnitX.Text.Contains("CPM"))
                                    {
                                        Comparator = Comparator / 60;
                                    }

                                    double dcomp = Comparator;
                                    for (int j = 0; j < iBearingHarmonics; j++)
                                    {
                                        Comparator = dcomp * (j + 1);
                                        int MainIndex = Array.FindIndex(x,
                                            delegate(double item) { return item == Comparator; });
                                        if (MainIndex == -1)
                                        {
                                            if (Comparator <= x[x.Length - 1])
                                            {
                                                Comparator = FindNearest(x, Comparator);
                                                MainIndex = Array.FindIndex(x,
                                                    delegate(double item) { return item == Comparator; });
                                            }
                                        }

                                        if (MainIndex != -1)
                                        {

                                            //Array.Resize(ref pt1, pt1.Length + 1);
                                            _ResizeArray.IncreaseArrayPointF(ref pt1, 1);
                                            //Array.Resize(ref pt2, pt2.Length + 1);
                                            _ResizeArray.IncreaseArrayPointF(ref pt2, 1);
                                            //Array.Resize(ref ptString, ptString.Length + 1);
                                            _ResizeArray.IncreaseArrayPointF(ref ptString, 1);
                                            //Array.Resize(ref Names, Names.Length + 1);
                                            _ResizeArray.IncreaseArrayString(ref Names, 1);
                                            pt1[pt1.Length - 1] =
                                                new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                                    (float) (pt.Bottom - Fifty));
                                            pt2[pt2.Length - 1] =
                                                new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                                    (float) (pt.Top + OneFifty));
                                            ptString[ptString.Length - 1] = new PointF(
                                                (float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                                (float) (pt.Top + OneFifty));
                                            Names[Names.Length - 1] =
                                                ExtractFreqSingle[0].ToString() + (j + 1).ToString() + "x   X: " +
                                                Comparator + " " + lblGrphUnitX.Text.ToString().Remove(0, 9) +
                                                "   Y: " + Convert.ToString(Math.Round(y[MainIndex], 5)) + " " +
                                                lblGraphUnitY.Text.ToString().Remove(0, 9);
                                            //dataGridView3.Rows.Add(1);
                                            //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[0].Value = ExtractFreqSingle[0].ToString();
                                            //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value = Convert.ToString(Math.Round(x[MainIndex], 5));
                                            //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[2].Value = Convert.ToString(Math.Round(y[MainIndex], 5));
                                            //ExactBearingFF[i] = Convert.ToDouble(dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value.ToString());
                                        }
                                    }
                                }

                                for (int i = 0; i < pt1.Length; i++)
                                {
                                    der.DrawLine(BlkDash, pt1[i], pt2[i]);
                                    //der.TranslateTransform(150, 0);
                                    //der.RotateTransform(180);
                                    der.DrawString(Names[i], objFont, objBrush, ptString[i], sf);

                                }


                            }
                            else
                            {

                            }

                            //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                            ErrorLogFile(ex);
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }
            }
        }

        private void DrawRpm(Graphics der)
        {
            if (!Zoom)
            {
                Region rgn1 = new Region(panel1.Bounds);

                //System.Drawing.Graphics der = panel1.CreateGraphics();
                der.Clip = rgn1;

                RectangleF pt = der.ClipBounds;
                PointF[] pt1 = new PointF[0];
                PointF[] pt2 = new PointF[0];
                PointF[] ptString = new PointF[0];
                string[] Names = new string[0];
                int PrvsMainIndex = 0;

                Font objFont = new Font("Roman", 7, FontStyle.Regular);
                Brush objBrush = Brushes.Red;
                Pen BlkDash = new Pen(Color.Olive, 2);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.DashDotDot;
                try
                {
                    if (!CheckForTimeData(YSelected))
                    {
                        int iRPM = Convert.ToInt32(txtxRPM.Text.ToString());
                        int iPulse = Convert.ToInt32(txtxPulse.Text.ToString());
                        double FinalFreq = (double) ((double) iRPM / (double) (iPulse * 60));
                        int CountForRpm = _RPMCount;
                        double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                        double MainInterval = (TotalXAxis / (x.Length - 1));

                        StringFormat sf = new StringFormat(StringFormatFlags.DirectionVertical);
                        //dataGridView3.Rows.Clear();
                        //for (int i = 0; i < dataGridView3.Rows.Count - 1; i++)
                        //{
                        //    dataGridView3.Rows.RemoveAt(0);
                        //}

                        for (int i = 0; i < CountForRpm; i++)
                        {
                            double FreqToCalc = FinalFreq * (1 + i);
                            if (lblGrphUnitX.Text.Contains("CPM"))
                            {
                                FreqToCalc = FreqToCalc * 60;
                            }

                            if (FreqToCalc > (double) XSelected[XSelected.Length - 1])
                            {
                                break;
                            }

                            int MainIndex = Array.FindIndex(XSelected,
                                delegate(double item) { return item == FreqToCalc; });
                            if (MainIndex == -1)
                            {
                                FreqToCalc = FindNearest(XSelected, FreqToCalc);
                                MainIndex = Array.FindIndex(XSelected,
                                    delegate(double item) { return item == FreqToCalc; });
                            }

                            if (PrvsMainIndex != MainIndex)
                            {

                                //Array.Resize(ref pt1, pt1.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt1, 1);
                                //Array.Resize(ref pt2, pt2.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt2, 1);
                                //Array.Resize(ref ptString, ptString.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref ptString, 1);
                                //Array.Resize(ref Names, Names.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref Names, 1);
                                pt1[pt1.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Bottom - Fifty));
                                pt2[pt2.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                ptString[ptString.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                Names[Names.Length - 1] = Convert.ToString(i + 1) + "x RPM   X: " +
                                                          FreqToCalc.ToString() + " " +
                                                          lblGrphUnitX.Text.ToString().Remove(0, 9) + "   Y: " +
                                                          Convert.ToString(Math.Round(YSelected[MainIndex], 5)) + " " +
                                                          lblGraphUnitY.Text.ToString().Remove(0, 9);
                                //dataGridView3.Rows.Add(1);
                                //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[0].Value = Convert.ToString(i + 1) + "x RPM";
                                //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value = Convert.ToString(Math.Round(XSelected[MainIndex], 5));
                                //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[2].Value = Convert.ToString(Math.Round(YSelected[MainIndex], 5));
                                PrvsMainIndex = MainIndex;
                            }
                            else
                                break;

                        }

                        for (int i = 0; i < pt1.Length; i++)
                        {
                            der.DrawLine(BlkDash, pt1[i], pt2[i]);
                            //der.TranslateTransform(150, 0);
                            //der.RotateTransform(180);
                            der.DrawString(Names[i], objFont, objBrush, ptString[i], sf);

                        }
                    }

                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }
            }
        }

        private void DrawFaultFreq(Graphics der)
        {
            if (!Zoom)
            {
                Region rgn1 = new Region(panel1.Bounds);


                der.Clip = rgn1;
                //Pen PenBlkB = new Pen(Color.Black, 2);
                //Pen PenRed = new Pen(Color.Red, 3);
                RectangleF pt = der.ClipBounds;
                Pen BlkDash = new Pen(Color.BlueViolet, 2);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.DashDotDot;

                PointF[] pt1 = new PointF[0];
                PointF[] pt2 = new PointF[0];
                PointF[] ptString = new PointF[0];
                string[] Names = new string[0];
                Font objFont = new Font("Roman", 7, FontStyle.Regular);
                Brush objBrush = Brushes.Red;
                try
                {
                    if (Pts != null)
                    {

                        //dataGridView3.Rows.Clear();
                        //for (int i = 0; i < dataGridView3.Rows.Count - 1; i++)
                        //{
                        //    dataGridView3.Rows.RemoveAt(0);
                        //}

                        double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                        double MainInterval = (TotalXAxis / (x.Length - 1));

                        StringFormat sf = new StringFormat(StringFormatFlags.DirectionVertical);

                        //Predicate<
                        //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());

                        string[] Frequencies = new string[0];

                        for (int i = 0; i < dgvDiFF.RowCount - 1; i++)
                        {
                            //Array.Resize(ref Frequencies, Frequencies.Length + 1);
                            _ResizeArray.IncreaseArrayString(ref Frequencies, 1);

                            Frequencies[Frequencies.Length - 1] =
                                dgvDiFF.Rows[i].Cells[0].Value.ToString() + "=" +
                                dgvDiFF.Rows[i].Cells[1].Value.ToString();
                        }







                        for (int i = 0; i < Frequencies.Length; i++)
                        {
                            string[] ExtractFreqSingle = Frequencies[i]
                                .Split(new string[] {"="}, StringSplitOptions.RemoveEmptyEntries);
                            double Comparator = Convert.ToDouble(ExtractFreqSingle[1]);
                            if (lblGrphUnitX.Text.Contains("CPM"))
                            {
                                Comparator = Comparator * 60;
                            }

                            int MainIndex = Array.FindIndex(XSelected,
                                delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                if (Comparator <= XSelected[XSelected.Length - 1])
                                {
                                    Comparator = FindNearest(XSelected, Comparator);
                                    MainIndex = Array.FindIndex(XSelected,
                                        delegate(double item) { return item == Comparator; });
                                }
                            }

                            if (MainIndex != -1)
                            {

                                //Array.Resize(ref pt1, pt1.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt1, 1);
                                //Array.Resize(ref pt2, pt2.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt2, 1);
                                //Array.Resize(ref ptString, ptString.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref ptString, 1);
                                //Array.Resize(ref Names, Names.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref Names, 1);
                                pt1[pt1.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Bottom - Fifty));
                                pt2[pt2.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                ptString[ptString.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                Names[Names.Length - 1] = ExtractFreqSingle[0].ToString() + "  X: " +
                                                          Comparator.ToString() + " " +
                                                          lblGrphUnitX.Text.ToString().Remove(0, 9) + "   Y: " +
                                                          Convert.ToString(Math.Round(YSelected[MainIndex], 5)) + " " +
                                                          lblGraphUnitY.Text.ToString().Remove(0, 9);
                                //dataGridView3.Rows.Add(1);
                                //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[0].Value = ExtractFreqSingle[0].ToString();
                                //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value = Convert.ToString(Math.Round(XSelected[MainIndex], 5));
                                //dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[2].Value = Convert.ToString(Math.Round(YSelected[MainIndex], 5));
                            }
                        }

                        for (int i = 0; i < pt1.Length; i++)
                        {
                            der.DrawLine(BlkDash, pt1[i], pt2[i]);
                            //der.TranslateTransform(150, 0);
                            //der.RotateTransform(180);
                            der.DrawString(Names[i], objFont, objBrush, ptString[i], sf);

                        }


                    }
                    else
                    {

                    }

                    //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
            }
        }

        string CopyGraphString = null;

        private void redrawAsImageForReport()
        {
            try
            {


                Rectangle _rect = new Rectangle(0, 0, 800, 500);
                Region rgn1 = new Region(_rect);
                Bitmap bmp = new Bitmap(_rect.Width, _rect.Height, PixelFormat.Format24bppRgb);

                System.Drawing.Graphics der = Graphics.FromImage(bmp);
                der.Clear(Color.White);
                der.Clip = rgn1;
                Pen PenBlkB = new Pen(Color.Black, 2);
                Pen PenRed = new Pen(Color.Red, 3);
                RectangleF pt = der.ClipBounds;
                Pen BlkDash = new Pen(Color.Black, 2);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.Dash;
                Point pt1 = new Point();
                Point pt2 = new Point();
                //Pts = new PointF[0];
                SetAxis(der);
                //PointF PointToDrwString = new PointF();
                //PointF PointToDrawVerticle = new PointF();



                try
                {
                    //12-02-2010    Amit Jain
                    //Work for the labels of axis
                    if (Time == true)
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        der.DrawLine(BlkDash, pt1, pt2);
                        der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                            pt2.Y - 7);

                        pt1 = new Point((int) (pt.Left + SixtyTwo),
                            (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);

                    }

                    else
                    {
                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                            pt2.Y - 7);


                        pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                        der.DrawLine(PenBlkB, pt1, pt2);
                        der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);


                    }
                    //{
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    der.DrawLine(BlkDash, pt1, pt2);
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                    //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);

                    //    //PointToDrawVerticle = new PointF((float)(pt.Left + SixtyTwo - 5), (float)(pt.Bottom - (TwoHundred + OneFifty))); //(float)(((float)(pt.Bottom - (Fifty) - (float)(pt.Top + OneFifty))) / 2));
                    //    //PointToDrwString = new PointF((float)(pt.Left + SixtyTwo+62), (float)(pt.Bottom - Fifty+5));



                    //}

                    //else
                    //{
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                    //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);
                    //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                    //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                    //    der.DrawLine(PenBlkB, pt1, pt2);


                    //    // PointToDrawVerticle = new PointF((float)(pt.Left + SixtyTwo - 5), (float)(pt.Bottom - Fifty - 50)); //(float)(((float)(pt.Bottom - (Fifty) - (float)(pt.Top + OneFifty))) / 2));
                    //    //PointToDrwString = new PointF((float)(pt.Left + SixtyTwo + 62), (float)(pt.Bottom - Fifty + 5));

                    //}
                    CalCulateGhpDisplayed = GphCtr - 1;
                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    if (setAxisCtr == 0)
                    {
                        SetAxisMarks(x, y, der);
                    }
                    else if (setAxisCtr == 1)
                    {
                        SetAxisMarks(x1, y1, der);
                    }
                    else if (setAxisCtr == 2)
                    {
                        SetAxisMarks(x2, y2, der);
                    }
                    else if (setAxisCtr == 3)
                    {
                        SetAxisMarks(x3, y3, der);
                    }
                    else if (setAxisCtr == 4)
                    {
                        SetAxisMarks(x4, y4, der);
                    }
                    else if (setAxisCtr == 5)
                    {
                        SetAxisMarks(x5, y5, der);
                    }
                    else if (setAxisCtr == 6)
                    {
                        SetAxisMarks(x6, y6, der);
                    }
                    else if (setAxisCtr == 7)
                    {
                        SetAxisMarks(x7, y7, der);
                    }

                    //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                    //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                    //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                    //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                    if (arlstSColors != null && arlstSColors.Count > 0)
                    {
                        if (CalCulateGhpDisplayed >= 0)
                        {
                            if (Pts != null && Pts.Length != 0)
                            {
                                if (CtrSelectedCraph != 0)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) .5), Pts,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 0)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) 2),
                                        Pts, (float) 0);
                                }
                            }


                        }

                        if (CalCulateGhpDisplayed >= 1)
                        {
                            if (Pts1 != null && Pts1.Length != 0)
                            {
                                if (CtrSelectedCraph != 1)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) .5), Pts1,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 1)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) 2),
                                        Pts1, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 2)
                        {
                            if (Pts2 != null && Pts2.Length != 0)
                            {
                                if (CtrSelectedCraph != 2)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) .5), Pts2,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 2)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) 2),
                                        Pts2, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 3)
                        {
                            if (Pts3 != null && Pts3.Length != 0)
                            {
                                if (CtrSelectedCraph != 3)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) .5), Pts3,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 3)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) 2),
                                        Pts3, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 4)
                        {
                            if (Pts4 != null && Pts4.Length != 0)
                            {
                                if (CtrSelectedCraph != 4)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) .5), Pts4,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 4)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) 2),
                                        Pts4, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 5)
                        {
                            if (Pts5 != null && Pts5.Length != 0)
                            {
                                if (CtrSelectedCraph != 5)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) .5), Pts5,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 5)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) 2),
                                        Pts5, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 6)
                        {
                            if (Pts6 != null && Pts6.Length != 0)
                            {
                                if (CtrSelectedCraph != 6)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) .5), Pts6,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 6)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) 2),
                                        Pts6, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 7)
                        {
                            if (Pts7 != null && Pts7.Length != 0)
                            {
                                if (CtrSelectedCraph != 7)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                                    der.DrawCurve(
                                        new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) .5), Pts7,
                                        (float) 0);
                                }
                                else if (CtrSelectedCraph == 7)
                                {
                                    der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) 2),
                                        Pts7, (float) 0);
                                }
                            }

                        }

                    }
                    else
                    {
                        if (CalCulateGhpDisplayed >= 0)
                        {
                            if (Pts != null && Pts.Length != 0)
                            {
                                if (CtrSelectedCraph != 0)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);
                                }
                                else if (CtrSelectedCraph == 0)
                                {
                                    der.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 1)
                        {
                            if (Pts1 != null && Pts1.Length != 0)
                            {
                                if (CtrSelectedCraph != 1)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);
                                }
                                else if (CtrSelectedCraph == 1)
                                {
                                    der.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 2)
                        {
                            if (Pts2 != null && Pts2.Length != 0)
                            {
                                if (CtrSelectedCraph != 2)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);
                                }
                                else if (CtrSelectedCraph == 2)
                                {
                                    der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 3)
                        {
                            if (Pts3 != null && Pts3.Length != 0)
                            {
                                if (CtrSelectedCraph != 3)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);
                                }
                                else if (CtrSelectedCraph == 3)
                                {
                                    der.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 4)
                        {
                            if (Pts4 != null && Pts4.Length != 0)
                            {
                                if (CtrSelectedCraph != 4)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);
                                }
                                else if (CtrSelectedCraph == 4)
                                {
                                    der.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 5)
                        {
                            if (Pts5 != null && Pts5.Length != 0)
                            {
                                if (CtrSelectedCraph != 5)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                                    der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);
                                }
                                else if (CtrSelectedCraph == 5)
                                {
                                    der.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                                }
                            }

                        }

                        if (CalCulateGhpDisplayed >= 6)
                        {
                            if (Pts6 != null && Pts6.Length != 0)
                            {
                                if (CtrSelectedCraph != 6)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                                    der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);
                                }
                                else if (CtrSelectedCraph == 6)
                                {
                                    der.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                                }
                            }
                        }

                        if (CalCulateGhpDisplayed >= 7)
                        {
                            if (Pts7 != null && Pts7.Length != 0)
                            {
                                if (CtrSelectedCraph != 7)
                                {
                                    //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                                    der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);
                                }
                                else if (CtrSelectedCraph == 7)
                                {
                                    der.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                                }
                            }
                        }
                    }



                }

                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                    //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
                }


                //der.TranslateTransform(150, 0);
                //der.RotateTransform(180);

                //if (Time == true)
                //{
                //    Brush objBrsh = Brushes.Black;

                //    string Text = lblGraphUnitY.Text.ToString();

                //    Font objFnt = new Font("Roman", 12, FontStyle.Bold);
                //    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                //    Text = lblGrphUnitX.Text.ToString();
                //    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);

                //}
                //else
                //{

                //    Brush objBrsh = Brushes.Black;

                //    string Text = lblGraphUnitY.Text.ToString();
                //    Font objFnt = new Font("Roman", 12, FontStyle.Bold);
                //    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                //    //der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, Pts[0].Y - 20);


                //    // der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);


                //    //Text = lblGrphUnitX.Text.ToString();
                //    //string[] labelx = Text.Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);                    
                //    //der.DrawString(labelx[1].ToString(), objFnt, objBrsh, Pts[0].X + 65, Pts[0].Y);
                //    //der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);
                //    if (IsTrend)
                //    {
                //        Text = lblYAxis.Text.ToString();
                //        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 60);
                //    }
                //    else
                //    {
                //        Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                //        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 60);
                //    }

                //}
                //Pen dashpen = new Pen(Color.Blue, 1);
                ////dashpen.DashStyle=DashStyle.Dash;
                ////dashpen.DashCap=DashCap.Triangle;
                ////Graphics Line = panel1.CreateGraphics();
                //if (cmbCurSors.SelectedIndex != 0)
                //{
                //    if (HarmncCrs)
                //    {
                //        for (int i = 0; i < aatest.Length; i++)
                //        {
                //            der.DrawLine(dashpen, aatest[i], aatest[i + 1]);
                //            i++;
                //        }

                //    }
                //    else
                //    {

                //        der.DrawLine(new Pen(Color.Blue, 2), pt1forImage, pt2forImage);
                //        if (TwoDCrossHairCursor)
                //        {
                //            der.DrawLine(new Pen(Color.Blue, 2), pt1forCImage, pt2forCImage);
                //        }

                //    }
                //}
                Brush objBrsh = Brushes.Black;
                Font objFnt = new Font("Roman", 8, FontStyle.Bold);
                if (Time == true)
                {
                    string Text = lblGraphUnitY.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                    Text = lblGrphUnitX.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);
                    if (IsTrend)
                    {
                        Text = lblYAxis.Text.ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }
                    else
                    {
                        Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }
                }
                else
                {
                    string Text = lblGraphUnitY.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);
                    Text = lblGrphUnitX.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                    //der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, Pts[0].Y - 20);


                    // der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);


                    //Text = lblGrphUnitX.Text.ToString();
                    //string[] labelx = Text.Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);                    
                    //der.DrawString(labelx[1].ToString(), objFnt, objBrsh, Pts[0].X + 65, Pts[0].Y);
                    //der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);
                    if (IsTrend)
                    {
                        Text = lblYAxis.Text.ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }
                    else
                    {
                        Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                    }

                }

                Pen dashpen = new Pen(Color.Blue, 1);
                //dashpen.DashStyle=DashStyle.Dash;
                //dashpen.DashCap=DashCap.Triangle;
                //Graphics Line = panel1.CreateGraphics();

                string sText = "Overall: " + lblOverall.Text.ToString() + " " + lblDisplayunit.Text.ToString();
                der.DrawString(sText, objFnt, objBrsh, Pts[0].X - 45, 60);

                sText = "No. of Lines: " + lbllines.Text.ToString();
                der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 60);

                sText = "Date&Time: " + lblDate.Text.ToString();
                der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 60);
                if (cmbCurSors.SelectedIndex != 0)
                {
                    if (HarmncCrs)
                    {
                        for (int i = 0; i < aatest.Length; i++)
                        {
                            der.DrawLine(dashpen, aatest[i], aatest[i + 1]);
                            //der.DrawLine(new Pen(Color.Black, (float).5), aatest[i], aatest[i + 1]);
                            i++;
                        }

                    }
                    else if (TwoDCrossHairCursor || SingleCrs || TwDSingleSqrCrs || PeekCursor || SideBndCsr ||
                             SideBndCsrRatio || SideBandTrndDrw)
                    {

                        der.DrawLine(new Pen(Color.Black, (float) .5), pt1forImage, pt2forImage);

                        sText = "Cursor X: " + dataGridView1[0, 0].Value.ToString() + " " +
                                lblGrphUnitX.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 20);

                        sText = "Cursor Y: " + dataGridView1[1, 0].Value.ToString() + " " +
                                lblGraphUnitY.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 40);

                        if (TwoDCrossHairCursor)
                        {
                            der.DrawLine(new Pen(Color.Black, (float) .5), pt1forCImage, pt2forCImage);
                        }

                        if (TwDSingleSqrCrs)
                        {
                            der.DrawRectangle(new Pen(Color.Black, (float) .5), SS);
                        }

                        if (SideBndCsr || SideBndCsrRatio || SideBandTrndDrw)
                        {
                            der.DrawLine(new Pen(Color.Black, (float) .5), pts11, pts12);

                            sText = "Previous Cursor X: " + dataGridView1[0, 1].Value.ToString() + " " +
                                    lblGrphUnitX.Text.ToString().Remove(0, 9);
                            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 20);

                            sText = "Previous Cursor Y: " + dataGridView1[1, 1].Value.ToString() + " " +
                                    lblGraphUnitY.Text.ToString().Remove(0, 9);
                            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 40);


                            der.DrawLine(new Pen(Color.Black, (float) .5), pts21, pts22);

                            sText = "Next Cursor X: " + dataGridView1[0, 2].Value.ToString() + " " +
                                    lblGrphUnitX.Text.ToString().Remove(0, 9);
                            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 500, 20);

                            sText = "Next Cursor Y: " + dataGridView1[1, 2].Value.ToString() + " " +
                                    lblGraphUnitY.Text.ToString().Remove(0, 9);
                            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 500, 40);
                        }


                    }
                }

                GC.Collect();

                bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "ReportClip.jpg");
                bmpheight = bmp.Height;
                bmp.Dispose();
                GC.Collect();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        int bmpheight = 0;

        private void redrawOrbit()
        {
            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);

            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 1);
            Pen PenRed = new Pen(Color.Red, 3);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 1);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            BlkDash.StartCap = LineCap.ArrowAnchor;
            BlkDash.EndCap = LineCap.ArrowAnchor;

            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            double TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (OneFifty + Fifty);
            try
            {

                //pt1 = new Point((int)(pt.Left + SixtyTwo + TotalXAxis / 2), (int)(pt.Bottom - (Fifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Left + SixtyTwo + TotalXAxis / 2), (int)(pt.Top + OneFifty));//FourHundred
                //der.DrawLine(PenBlkB, pt1, pt2);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //der.DrawLine(PenBlkB, pt1, pt2);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //der.DrawLine(BlkDash, pt1, pt2);//BlkDash

                pt1 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Bottom - (Fifty))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(BlkDash, pt1, pt2);
                // break on top Y
                pt1 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) - 5),
                    (int) (pt.Top + OneFifty)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) + 5),
                    (int) (pt.Top + OneFifty)); //FourHundred

                der.DrawLine(PenBlkB, pt1, pt2);
                // breaks in +y axis
                pt1 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) - 5),
                    (int) (pt.Top + OneFifty + (TotalYAxis / 4))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) + 5),
                    (int) (pt.Top + OneFifty + (TotalYAxis / 4))); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);


                // breaks in -y axis
                pt1 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) - 5),
                    (int) (pt.Bottom - Fifty - (TotalYAxis / 4))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) + 5),
                    (int) (pt.Bottom - Fifty - (TotalYAxis / 4))); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);

                // break on bottom Y axis
                pt1 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) - 5),
                    (int) (pt.Bottom - Fifty)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 2) + 5),
                    (int) (pt.Bottom - Fifty)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);



                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                    (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                der.DrawLine(BlkDash, pt1, pt2);



                // breaks in left x axis
                pt1 = new Point((int) (pt.Left + SixtyTwo),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) + 5)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) - 5)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);

                // breaks in -x axis
                pt1 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 4)),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) + 5)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + (TotalXAxis / 4)),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) - 5)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);


                // breaks in +x axis
                pt1 = new Point((int) (pt.Left + SixtyTwo + 3 * (TotalXAxis / 4)),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) + 5)); //TwoHundred
                pt2 = new Point((int) (pt.Right - OneSixtyTwo - (TotalXAxis / 4)),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) - 5)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);

                // breaks in Right x axis
                pt1 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) + 5)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis),
                    (int) (pt.Bottom - (TwoHundred + OneFifty) - 5)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);

                if (GphCtr > 0)
                {
                    CalCulateGhpDisplayed = GphCtr - 1;
                }

                if (CalCulateGhpDisplayed < 0)
                {
                    CalCulateGhpDisplayed = 0;
                }

                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                SetAxisMarks(OrbitXAxis, OrbitXAxis);

                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                if (arlstSColors != null && arlstSColors.Count > 0)
                {
                    if (CalCulateGhpDisplayed >= 0)
                    {

                        if (CtrSelectedCraph != 0)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                            der.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[arlstSColors.Count - 1])),
                                    (float) .5), Pts, (float) 0);
                        }
                        else if (CtrSelectedCraph == 0)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) 2), Pts,
                                (float) 0);
                        }


                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        if (CtrSelectedCraph != 1)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) .5), Pts1,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 1)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) 2), Pts1,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        if (CtrSelectedCraph != 2)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) .5), Pts2,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 2)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) 2), Pts2,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        if (CtrSelectedCraph != 3)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) .5), Pts3,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 3)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) 2), Pts3,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        if (CtrSelectedCraph != 4)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) .5), Pts4,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 4)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) 2), Pts4,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        if (CtrSelectedCraph != 5)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) .5), Pts5,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 5)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) 2), Pts5,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        if (CtrSelectedCraph != 6)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) .5), Pts6,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 6)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) 2), Pts6,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 7)
                    {
                        if (CtrSelectedCraph != 7)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) .5), Pts7,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 7)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) 2), Pts7,
                                (float) 0);
                        }

                    }

                }
                else
                {
                    if (CalCulateGhpDisplayed >= 0)
                    {
                        if (CtrSelectedCraph != 0)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                            der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);
                        }
                        else if (CtrSelectedCraph == 0)
                        {
                            der.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                        }


                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        if (CtrSelectedCraph != 1)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);
                        }
                        else if (CtrSelectedCraph == 1)
                        {
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        if (CtrSelectedCraph != 2)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);
                        }
                        else if (CtrSelectedCraph == 2)
                        {
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        if (CtrSelectedCraph != 3)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);
                        }
                        else if (CtrSelectedCraph == 3)
                        {
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        if (CtrSelectedCraph != 4)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);
                        }
                        else if (CtrSelectedCraph == 4)
                        {
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        if (CtrSelectedCraph != 5)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                            der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);
                        }
                        else if (CtrSelectedCraph == 5)
                        {
                            der.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        if (CtrSelectedCraph != 6)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                            der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);
                        }
                        else if (CtrSelectedCraph == 6)
                        {
                            der.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 7)
                    {
                        if (CtrSelectedCraph != 7)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);
                        }
                        else if (CtrSelectedCraph == 7)
                        {
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                        }

                    }
                }



            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void redrawOrbitAsImage()
        {
            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);
            Bitmap bmp = new Bitmap(panel1.Width, panel1.Height, PixelFormat.Format24bppRgb);

            System.Drawing.Graphics der = Graphics.FromImage(bmp);
            der.Clear(panel1.BackColor);
            //System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 3);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            PointF PointToDrwString = new PointF();
            PointF PointToDrawVerticle = new PointF();
            try
            {

                pt1 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Bottom - (Fifty))); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo + TotalXAxis / 2), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                    (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                der.DrawLine(PenBlkB, pt1, pt2);
                pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                der.DrawLine(BlkDash, pt1, pt2); //BlkDash

                PointToDrwString = new PointF((float) (pt.Left + SixtyTwo + TotalXAxis / 2),
                    (float) (pt.Bottom - (Fifty) +
                             5)); //(float)(((float)(pt.Bottom - (Fifty) - (float)(pt.Top + OneFifty))) / 2));
                PointToDrawVerticle = new PointF((float) ((pt.Left + SixtyTwo) - 5),
                    (float) (((float) ((pt.Bottom - (Fifty))) - (float) (pt.Top + OneFifty)) / 2));
                CalCulateGhpDisplayed = GphCtr - 1;
                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                SetAxisMarks(OrbitXAxis, OrbitYAxis, der);

                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                if (arlstSColors != null && arlstSColors.Count > 0)
                {
                    if (CalCulateGhpDisplayed >= 0)
                    {

                        if (CtrSelectedCraph != 0)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) .5), Pts,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 0)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) 2), Pts,
                                (float) 0);
                        }


                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        if (CtrSelectedCraph != 1)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) .5), Pts1,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 1)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) 2), Pts1,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        if (CtrSelectedCraph != 2)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) .5), Pts2,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 2)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) 2), Pts2,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        if (CtrSelectedCraph != 3)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) .5), Pts3,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 3)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) 2), Pts3,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        if (CtrSelectedCraph != 4)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) .5), Pts4,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 4)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) 2), Pts4,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        if (CtrSelectedCraph != 5)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) .5), Pts5,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 5)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) 2), Pts5,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        if (CtrSelectedCraph != 6)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) .5), Pts6,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 6)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) 2), Pts6,
                                (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 7)
                    {
                        if (CtrSelectedCraph != 7)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) .5), Pts7,
                                (float) 0);
                        }
                        else if (CtrSelectedCraph == 7)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) 2), Pts7,
                                (float) 0);
                        }

                    }

                }
                else
                {
                    if (CalCulateGhpDisplayed >= 0)
                    {
                        if (CtrSelectedCraph != 0)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts, (float)0);
                            der.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);
                        }
                        else if (CtrSelectedCraph == 0)
                        {
                            der.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                        }


                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        if (CtrSelectedCraph != 1)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts1, (float)0);
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);
                        }
                        else if (CtrSelectedCraph == 1)
                        {
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        if (CtrSelectedCraph != 2)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts2, (float)0);
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);
                        }
                        else if (CtrSelectedCraph == 2)
                        {
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        if (CtrSelectedCraph != 3)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts3, (float)0);
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);
                        }
                        else if (CtrSelectedCraph == 3)
                        {
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        if (CtrSelectedCraph != 4)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts4, (float)0);
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);
                        }
                        else if (CtrSelectedCraph == 4)
                        {
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        if (CtrSelectedCraph != 5)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts5, (float)0);
                            der.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);
                        }
                        else if (CtrSelectedCraph == 5)
                        {
                            der.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        if (CtrSelectedCraph != 6)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts6, (float)0);
                            der.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);
                        }
                        else if (CtrSelectedCraph == 6)
                        {
                            der.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                        }

                    }

                    if (CalCulateGhpDisplayed >= 7)
                    {
                        if (CtrSelectedCraph != 7)
                        {
                            //der.DrawCurve(new Pen(panel1.BackColor, (float)2), Pts7, (float)0);
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);
                        }
                        else if (CtrSelectedCraph == 7)
                        {
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                        }

                    }
                }



            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }


            Brush objBrsh = Brushes.Black;
            StringFormat objVerticle = new StringFormat(StringFormatFlags.DirectionVertical);
            string[] Text = lblYAxis.Text.ToString().Split(new string[] {":"}, StringSplitOptions.RemoveEmptyEntries);

            Font objFnt = new Font("Roman", 12, FontStyle.Bold);
            //der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X - 575, Pts[0].Y , objVerticle);
            der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);
            Text = lblXAxis.Text.ToString().Split(new string[] {":"}, StringSplitOptions.RemoveEmptyEntries);
            //der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X , Pts[0].Y + 320);
            der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);



            GC.Collect();
            bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg");
            bmp.Dispose();
            GC.Collect();
        }


        private void redrawNew(float ValIndex)
        {
            //SetAxis();
            Region rgn1 = new Region(panel1.Bounds);

            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 3);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            PointF[] PtLineClr = new PointF[5];
            //Pts = new PointF[0];
            int LenthOfLoop = 0;
            int CtrInd = 0;
            int CtrIndRestore = 0;
            PointF[] PntsOfSlctedGrph = new PointF[5];
            Color SlctedGphColor = Color.Red;
            bool OneSelected = false;
            try
            {
                //if (ValIndex - 11 > 0)
                //{
                //    if (ValIndex + 11 > Pts.Length)
                //    {
                //        LenthOfLoop = 11;

                //    }
                //    else
                //    {
                //        LenthOfLoop = ValIndex - (Pts.Length - ValIndex);
                //    }
                //}
                //else
                //{
                //    LenthOfLoop = ValIndex * 2;
                //}
                //PtLineClr = new PointF[LenthOfLoop];
                //CtrInd = LenthOfLoop / 2;
                //CtrIndRestore = CtrInd;
                //if (Time == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                CalCulateGhpDisplayed = GphCtr - 1;
                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                //SetAxisMarks(x, y);

                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);

                if (arlstSColors != null && arlstSColors.Count > 0)
                {


                    if (CalCulateGhpDisplayed >= 7)
                    {

                        PtLineClr[0] = Pts7[(int) ValIndex - 2];
                        PtLineClr[1] = Pts7[(int) ValIndex - 1];
                        PtLineClr[2] = Pts7[(int) ValIndex];
                        PtLineClr[3] = Pts7[(int) ValIndex + 1];
                        PtLineClr[4] = Pts7[(int) ValIndex + 2];
                        //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr, (float)0);
                        if (CtrSelectedCraph != 7)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);
                        }
                        else if (CtrSelectedCraph == 7)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[7])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[7]));
                            OneSelected = true;
                            // der.DrawCurve(new Pen(Color.Maroon, (float)2), Pts7, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts6[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts6[(int) ValIndex - 2];
                        PtLineClr[1] = Pts6[(int) ValIndex - 1];
                        PtLineClr[2] = Pts6[(int) ValIndex];
                        PtLineClr[3] = Pts6[(int) ValIndex + 1];
                        PtLineClr[4] = Pts6[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 6)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);
                        }
                        else if (CtrSelectedCraph == 6)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[6])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[6]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DarkOrange, (float)2), Pts6, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts5[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts5[(int) ValIndex - 2];
                        PtLineClr[1] = Pts5[(int) ValIndex - 1];
                        PtLineClr[2] = Pts5[(int) ValIndex];
                        PtLineClr[3] = Pts5[(int) ValIndex + 1];
                        PtLineClr[4] = Pts5[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 5)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);
                        }
                        else if (CtrSelectedCraph == 5)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[5])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[5]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DeepPink, (float)2), Pts5, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts4[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts4[(int) ValIndex - 2];
                        PtLineClr[1] = Pts4[(int) ValIndex - 1];
                        PtLineClr[2] = Pts4[(int) ValIndex];
                        PtLineClr[3] = Pts4[(int) ValIndex + 1];
                        PtLineClr[4] = Pts4[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 4)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);
                        }
                        else if (CtrSelectedCraph == 4)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[4])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[4]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DarkSeaGreen, (float)2), Pts4, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts3[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts3[(int) ValIndex - 2];
                        PtLineClr[1] = Pts3[(int) ValIndex - 1];
                        PtLineClr[2] = Pts3[(int) ValIndex];
                        PtLineClr[3] = Pts3[(int) ValIndex + 1];
                        PtLineClr[4] = Pts3[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 3)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                        }
                        else if (CtrSelectedCraph == 3)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[3])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[3]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts3, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts2[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts2[(int) ValIndex - 2];
                        PtLineClr[1] = Pts2[(int) ValIndex - 1];
                        PtLineClr[2] = Pts2[(int) ValIndex];
                        PtLineClr[3] = Pts2[(int) ValIndex + 1];
                        PtLineClr[4] = Pts2[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 2)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                        }
                        else if (CtrSelectedCraph == 2)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[2])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[2]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts2, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts1[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts1[(int) ValIndex - 2];
                        PtLineClr[1] = Pts1[(int) ValIndex - 1];
                        PtLineClr[2] = Pts1[(int) ValIndex];
                        PtLineClr[3] = Pts1[(int) ValIndex + 1];
                        PtLineClr[4] = Pts1[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 1)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                        }
                        else if (CtrSelectedCraph == 1)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[1])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[1]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.Blue, (float)2), Pts1, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 0)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts[(int) ValIndex - 2];
                        PtLineClr[1] = Pts[(int) ValIndex - 1];
                        PtLineClr[2] = Pts[(int) ValIndex];
                        PtLineClr[3] = Pts[(int) ValIndex + 1];
                        PtLineClr[4] = Pts[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 0)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) .5),
                                PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                        }
                        else if (CtrSelectedCraph == 0)
                        {
                            der.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[0])), (float) 2),
                                PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.FromArgb(-Convert.ToInt32(arlstSColors[0]));
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.Red, (float)2), Pts, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }
                }
                else
                {
                    if (CalCulateGhpDisplayed >= 7)
                    {

                        PtLineClr[0] = Pts7[(int) ValIndex - 2];
                        PtLineClr[1] = Pts7[(int) ValIndex - 1];
                        PtLineClr[2] = Pts7[(int) ValIndex];
                        PtLineClr[3] = Pts7[(int) ValIndex + 1];
                        PtLineClr[4] = Pts7[(int) ValIndex + 2];
                        //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr, (float)0);
                        if (CtrSelectedCraph != 7)
                        {
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);
                        }
                        else if (CtrSelectedCraph == 7)
                        {
                            der.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DarkKhaki;
                            OneSelected = true;
                            // der.DrawCurve(new Pen(Color.Maroon, (float)2), Pts7, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 6)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts6[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts6[(int) ValIndex - 2];
                        PtLineClr[1] = Pts6[(int) ValIndex - 1];
                        PtLineClr[2] = Pts6[(int) ValIndex];
                        PtLineClr[3] = Pts6[(int) ValIndex + 1];
                        PtLineClr[4] = Pts6[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 6)
                        {
                            der.DrawCurve(new Pen(Color.Chocolate, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);
                        }
                        else if (CtrSelectedCraph == 6)
                        {
                            der.DrawCurve(new Pen(Color.Chocolate, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.Chocolate;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DarkOrange, (float)2), Pts6, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 5)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts5[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts5[(int) ValIndex - 2];
                        PtLineClr[1] = Pts5[(int) ValIndex - 1];
                        PtLineClr[2] = Pts5[(int) ValIndex];
                        PtLineClr[3] = Pts5[(int) ValIndex + 1];
                        PtLineClr[4] = Pts5[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 5)
                        {
                            der.DrawCurve(new Pen(Color.DimGray, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);
                        }
                        else if (CtrSelectedCraph == 5)
                        {
                            der.DrawCurve(new Pen(Color.DimGray, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DimGray;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DeepPink, (float)2), Pts5, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 4)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts4[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts4[(int) ValIndex - 2];
                        PtLineClr[1] = Pts4[(int) ValIndex - 1];
                        PtLineClr[2] = Pts4[(int) ValIndex];
                        PtLineClr[3] = Pts4[(int) ValIndex + 1];
                        PtLineClr[4] = Pts4[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 4)
                        {
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);
                        }
                        else if (CtrSelectedCraph == 4)
                        {
                            der.DrawCurve(new Pen(Color.DarkBlue, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DarkBlue;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DarkSeaGreen, (float)2), Pts4, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 3)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts3[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts3[(int) ValIndex - 2];
                        PtLineClr[1] = Pts3[(int) ValIndex - 1];
                        PtLineClr[2] = Pts3[(int) ValIndex];
                        PtLineClr[3] = Pts3[(int) ValIndex + 1];
                        PtLineClr[4] = Pts3[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 3)
                        {
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);
                        }
                        else if (CtrSelectedCraph == 3)
                        {
                            der.DrawCurve(new Pen(Color.DarkViolet, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DarkViolet;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts3, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 2)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts2[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts2[(int) ValIndex - 2];
                        PtLineClr[1] = Pts2[(int) ValIndex - 1];
                        PtLineClr[2] = Pts2[(int) ValIndex];
                        PtLineClr[3] = Pts2[(int) ValIndex + 1];
                        PtLineClr[4] = Pts2[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 2)
                        {
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);
                        }
                        else if (CtrSelectedCraph == 2)
                        {
                            der.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DarkGoldenrod;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts2, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 1)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts1[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts1[(int) ValIndex - 2];
                        PtLineClr[1] = Pts1[(int) ValIndex - 1];
                        PtLineClr[2] = Pts1[(int) ValIndex];
                        PtLineClr[3] = Pts1[(int) ValIndex + 1];
                        PtLineClr[4] = Pts1[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 1)
                        {
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);
                        }
                        else if (CtrSelectedCraph == 1)
                        {
                            der.DrawCurve(new Pen(Color.DarkGreen, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DarkGreen;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.Blue, (float)2), Pts1, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }

                    if (CalCulateGhpDisplayed >= 0)
                    {
                        //for (int i = 0; i < LenthOfLoop; i++)
                        //{
                        //    PtLineClr[i] = Pts[(int)PrvsValNow - CtrInd];
                        //    CtrInd++;
                        //}
                        PtLineClr[0] = Pts[(int) ValIndex - 2];
                        PtLineClr[1] = Pts[(int) ValIndex - 1];
                        PtLineClr[2] = Pts[(int) ValIndex];
                        PtLineClr[3] = Pts[(int) ValIndex + 1];
                        PtLineClr[4] = Pts[(int) ValIndex + 2];
                        if (CtrSelectedCraph != 0)
                        {
                            der.DrawCurve(new Pen(Color.DarkRed, (float) .5), PtLineClr, (float) 0);
                            //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                        }
                        else if (CtrSelectedCraph == 0)
                        {
                            der.DrawCurve(new Pen(Color.DarkRed, (float) 2), PtLineClr, (float) 0);
                            PntsOfSlctedGrph = PtLineClr;
                            SlctedGphColor = Color.DarkRed;
                            OneSelected = true;
                            //der.DrawCurve(new Pen(Color.Red, (float)2), Pts, (float)0);
                        }

                        PtLineClr = new PointF[5];
                        //CtrInd = CtrIndRestore;
                    }
                }

                if (OneSelected == true)
                {
                    der.DrawCurve(new Pen(SlctedGphColor, (float) 2), PntsOfSlctedGrph, (float) 0);
                }

                //12-02-2010    Amit Jain
                //Work for the labels of axis
                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);

                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);

                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);


                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);


                }
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                //SetAxisMarks(x, y);

                if (setAxisCtr == 0)
                {
                    SetAxisMarks(x, y);
                }
                else if (setAxisCtr == 1)
                {
                    SetAxisMarks(x1, y1);
                }
                else if (setAxisCtr == 2)
                {
                    SetAxisMarks(x2, y2);
                }
                else if (setAxisCtr == 3)
                {
                    SetAxisMarks(x3, y3);
                }
                else if (setAxisCtr == 4)
                {
                    SetAxisMarks(x4, y4);
                }
                else if (setAxisCtr == 5)
                {
                    SetAxisMarks(x5, y5);
                }
                else if (setAxisCtr == 6)
                {
                    SetAxisMarks(x6, y6);
                }
                else if (setAxisCtr == 7)
                {
                    SetAxisMarks(x7, y7);
                }

                if (ShowRpmRatio)
                {
                    DrawRpm();
                }

                if (FaultFreq)
                {
                    DrawFaultFreq();
                }

                if (BearingFaultFrequency)
                {
                    DrawBearingFaultFrequency();
                }

            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        //Old
        //private void HarmonicCursorWthKey()
        //{
        //    double[] XVala = new double[0];
        //    double[] YVala = new double[0];

        //    Region rgn1 = new Region(panel1.Bounds);
        //    Region rgn = new Region(ClientRectangle);
        //    Graphics Line = panel1.CreateGraphics();
        //    Line.Clip = rgn1;
        //    RectangleF Rgn = Line.ClipBounds;
        //    Pen PenBlk = new Pen(Color.Black, (float).5);
        //    //Pen PenWht = new Pen(Color.White, 3);
        //    Pen PenWht = new Pen(panel1.BackColor, (float).5);
        //    //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
        //    //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
        //    PointF pt1 = new PointF();
        //    PointF pt2 = new PointF();
        //    PointF Prv1 = new PointF();
        //    PointF Prv2 = new PointF();
        //    int Msx = 0;
        //    int PrvMX = 0;
        //    bool brk = false;

        //    try
        //    {
        //        if (aatest.Length > 1)
        //            Line.DrawLines(PenWht, aatest);
        //        Msx = (int)((SixtyTwo) + (CursorStartInterval * ThrDCurCtr));
        //        if (Msx >= (Rgn.Left + SixtyTwo) && Msx <= (Rgn.Left + SixtyTwo + (MainXAxisInterval * (x.Length - 1))))
        //        {
        //            aatest = new PointF[0];
        //            testctr = 0;
        //            int test = (int)(Msx - (Rgn.Left + SixtyTwo));
        //            int XValaCtr = 0;
        //            do
        //            {
        //                if (Time == true)
        //                {
        //                    pt1 = new PointF((float)(Rgn.Left + Msx), (float)Rgn.Bottom - Fifty);
        //                }
        //                else
        //                {
        //                    pt1 = new PointF((float)(Rgn.Left + Msx), (float)Rgn.Bottom - Fifty);
        //                    //pt1 = new PointF((float)(Rgn.Left + Msx), (float)Rgn.Bottom - (TwoHundred + OneFifty));//50
        //                }
        //                pt2 = new PointF((float)(Rgn.Left + Msx), (float)Rgn.Top + OneFifty);//52

        //                if (Msx >= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (x.Length - 1))))
        //                    brk = true;
        //                else if (Msx < ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (x.Length - 1))))
        //                {
        //                    Line.DrawLine(PenBlk, pt1, pt2);
        //                    //Msx = Msx + (Msx-62);

        //                    float testval = Msx - ((Rgn.Left + SixtyTwo));
        //                    float XvalNow = (float)(testval / MainXAxisInterval);
        //                    if (XvalNow <= 400)
        //                    {
        //                        Array.Resize(ref XVala, XVala.Length + 1);
        //                        Array.Resize(ref YVala, YVala.Length + 1);
        //                        XVala[XValaCtr] = Convert.ToDouble(x[(int)XvalNow]);
        //                        YVala[XValaCtr] = Convert.ToDouble(y[(int)XvalNow]);
        //                        XValaCtr++;
        //                    }
        //                    Array.Resize(ref aatest, aatest.Length + 1);
        //                    aatest[testctr] = pt1;
        //                    testctr++;
        //                    Array.Resize(ref aatest, aatest.Length + 1);
        //                    aatest[testctr] = pt2;
        //                    testctr++;
        //                    Msx = Msx + test;
        //                    redraw();
        //                }




        //            } while (brk == false);

        //            if (PrvMX != Msx)
        //            {
        //                Line.DrawLines(PenWht, aatest);
        //                //Line.DrawLine(PenWht, Prv1, Prv2);

        //                PrvMX = Msx;
        //                Prv1 = pt1;
        //                Prv2 = pt2;

        //                FillDatagrid(XVala, YVala);
        //                redraw();


        //            }
        //        }

        //        for (int i = 0; i < aatest.Length; i++)
        //        {
        //            Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
        //            i++;
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //    }

        //}



        private void HarmonicCursorWthKey()
        {
            double[] XVala = new double[0];
            double[] YVala = new double[0];

            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }



            //Pen PenWht = new Pen(Color.White, 3);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF Prv1 = new PointF();
            PointF Prv2 = new PointF();
            double Msx = 0;
            int PrvMX = 0;
            bool brk = false;
            int PreviousXValNow = 0;
            try
            {
                if (aatest.Length > 1)
                    Line.DrawLines(PenWht, aatest);
                if (GraphZoomedAlready == true)
                {
                    Msx = ((SixtyTwo) + (MainXAxisIntervalZoom * ThrDCurCtr));
                }
                else
                {
                    Msx = ((SixtyTwo) + (CursorStartInterval * ThrDCurCtr));
                }

                if (Msx >= (Rgn.Left + SixtyTwo) && Msx <= (Rgn.Left + SixtyTwo + (MainXAxisInterval * (x.Length - 1))))
                {
                    aatest = new PointF[0];
                    testctr = 0;
                    double test = (Msx - (Rgn.Left + SixtyTwo));
                    int XValaCtr = 0;



                    if (GraphZoomedAlready == true)
                    {
                        panel1.Refresh();
                        InitializeZoom();
                        do
                        {
                            if (Time == true)
                            {
                                pt1 = new PointF((float) (Rgn.Left + Msx), (float) Rgn.Bottom - Fifty);
                            }
                            else
                            {
                                pt1 = new PointF((float) (Rgn.Left + Msx), (float) Rgn.Bottom - Fifty);
                                //pt1 = new PointF((float)(Rgn.Left + Msx), (float)Rgn.Bottom - (TwoHundred + OneFifty));//50
                            }

                            pt2 = new PointF((float) (Rgn.Left + Msx), (float) Rgn.Top + OneFifty); //52

                            if (Msx >= ((Rgn.Left + SixtyTwo) + (MainXAxisIntervalZoom * (XZoom.Length - 1))))
                                brk = true;
                            else if (Msx < ((Rgn.Left + SixtyTwo) + (MainXAxisIntervalZoom * (XZoom.Length - 1))))
                            {
                                Line.DrawLine(PenBlk, pt1, pt2);
                                //Msx = Msx + (Msx-62);

                                double testval = ((Msx - ((Rgn.Left + SixtyTwo))));
                                int XvalNow = (int) Math.Round((testval / MainXAxisIntervalZoom), 0);
                                //if (XvalNow <= 400)
                                //if (PreviousXValNow == 0)
                                {
                                    //Array.Resize(ref XVala, XVala.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                                    //Array.Resize(ref YVala, YVala.Length + 1);
                                    XVala[XValaCtr] = Convert.ToDouble(XZoom[(int) XvalNow]);
                                    YVala[XValaCtr] = Convert.ToDouble(YZoom[(int) XvalNow]);
                                    PreviousXValNow = (int) XvalNow;
                                    XValaCtr++;
                                }
                                //else
                                //{
                                //    try
                                //    {
                                //        int CtrForValNow = PreviousXValNow + PreviousXValNow * XValaCtr;
                                //        if (CtrForValNow < XZoom.Length)
                                //        {
                                //            Array.Resize(ref XVala, XVala.Length + 1);
                                //            Array.Resize(ref YVala, YVala.Length + 1);
                                //            XVala[XValaCtr] = Convert.ToDouble(XZoom[CtrForValNow]);
                                //            YVala[XValaCtr] = Convert.ToDouble(YZoom[CtrForValNow]);
                                //            //PreviousXValNow = (int)XvalNow;
                                //            XValaCtr++;
                                //        }
                                //    }
                                //    catch
                                //    {
                                //    }
                                //}
                                //Array.Resize(ref aatest, aatest.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                aatest[testctr] = pt1;
                                testctr++;
                                //Array.Resize(ref aatest, aatest.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                aatest[testctr] = pt2;
                                testctr++;
                                double CurrentVal = (double) XVala[0] * (XValaCtr + 1);
                                int CurrentIndex = Array.IndexOf(XZoom, CurrentVal);
                                if (CurrentIndex != -1)
                                {
                                    double temptestval = MainXAxisIntervalZoom * CurrentIndex;
                                    Msx = ((temptestval + (Rgn.Left + SixtyTwo)));
                                }
                                else
                                {
                                    brk = true;
                                }

                                redrawZoom();
                            }




                        } while (brk == false);

                        if (PrvMX1 != Msx)
                        {
                            Line.DrawLines(PenWht, aatest);
                            Line.DrawLine(PenWht, Prv1, Prv2);
                            //for (int i = 0; i < aatest.Length; i++)
                            //{
                            //    Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
                            //    i++;
                            //}
                            //Line.DrawLine(PenBlk, pt1, pt2);
                            //Line.DrawLine(PenBlk, Prv1, Prv2);
                            PrvMX1 = (int) Msx;
                            Prv1 = pt1;
                            Prv2 = pt2;
                            //float testval = Msx - 62;
                            //float XvalNow = (float)(testval / MainXAxisInterval);
                            //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                            //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                            FillDatagrid(XVala, YVala);

                            redrawZoom();


                        }
                    }
                    else
                    {
                        //int testval = (int)Math.Round((Msx - ((Rgn.Left + SixtyTwo))), 0);
                        //int XvalNow = (int)Math.Round((testval / MainXAxisInterval), 0);
                        do
                        {
                            if (Time == true)
                            {
                                pt1 = new PointF((float) (Rgn.Left + Msx), (float) Rgn.Bottom - Fifty);
                            }
                            else
                            {
                                pt1 = new PointF((float) (Rgn.Left + Msx), (float) Rgn.Bottom - Fifty);
                                //pt1 = new PointF((float)(Rgn.Left + Msx), (float)Rgn.Bottom - (TwoHundred + OneFifty));//50
                            }

                            pt2 = new PointF((float) (Rgn.Left + Msx), (float) Rgn.Top + OneFifty); //52

                            if (Msx >= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (x.Length - 1))))
                                brk = true;
                            else if (Msx < ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (x.Length - 1))))
                            {
                                Line.DrawLine(PenBlk, pt1, pt2);
                                //Msx = Msx + (Msx-62);

                                double testval = ((Msx - ((Rgn.Left + SixtyTwo))));
                                int XvalNow = (int) Math.Round((testval / MainXAxisInterval), 0);
                                // XvalNow = (int)Math.Round((Msx - ((Rgn.Left + SixtyTwo))), 0);
                                //if (XvalNow <= 400)
                                if (PreviousXValNow == 0)
                                {
                                    //Array.Resize(ref XVala, XVala.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                                    //Array.Resize(ref YVala, YVala.Length + 1);
                                    XVala[XValaCtr] = Convert.ToDouble(x[(int) XvalNow]);
                                    YVala[XValaCtr] = Convert.ToDouble(y[(int) XvalNow]);
                                    PreviousXValNow = (int) XvalNow;
                                    XValaCtr++;
                                }
                                else
                                {
                                    try
                                    {
                                        int CtrForValNow = PreviousXValNow + PreviousXValNow * XValaCtr;
                                        if (CtrForValNow <= XSelected.Length)
                                        {
                                            //Array.Resize(ref XVala, XVala.Length + 1);
                                            //Array.Resize(ref YVala, YVala.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                                            XVala[XValaCtr] = Convert.ToDouble(XSelected[CtrForValNow]);
                                            YVala[XValaCtr] = Convert.ToDouble(YSelected[CtrForValNow]);
                                            //PreviousXValNow = (int)XvalNow;
                                            XValaCtr++;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }

                                //Array.Resize(ref aatest, aatest.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                aatest[testctr] = pt1;
                                testctr++;
                                //Array.Resize(ref aatest, aatest.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                aatest[testctr] = pt2;
                                testctr++;
                                Msx = Msx + test;
                                redraw();
                            }




                        } while (brk == false);

                        if (PrvMX != Msx)
                        {
                            Line.DrawLines(PenWht, aatest);
                            //Line.DrawLine(PenWht, Prv1, Prv2);

                            PrvMX = (int) Msx;
                            Prv1 = pt1;
                            Prv2 = pt2;

                            FillDatagrid(XVala, YVala);
                            redraw();


                        }
                    }
                }

                for (int i = 0; i < aatest.Length; i++)
                {
                    Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
                    i++;
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

        }



        //Old

        //private void HarmonicCursor()
        //{
        //    double[] XVala = new double[0];
        //    double[] YVala = new double[0];

        //    Region rgn1 = new Region(panel1.Bounds);
        //    Region rgn = new Region(ClientRectangle);
        //    Graphics Line = panel1.CreateGraphics();
        //    Line.Clip = rgn1;
        //    RectangleF Rgn = Line.ClipBounds;
        //    Pen PenBlk = new Pen(Color.Black, (float).5);
        //    //Pen PenWht = new Pen(Color.White, 3);
        //    Pen PenWht = new Pen(panel1.BackColor, (float).5);
        //    //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
        //    //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
        //    PointF pt1 = new PointF();
        //    PointF pt2 = new PointF();
        //    PointF Prv1 = new PointF();
        //    PointF Prv2 = new PointF();
        //    int Msx = 0;
        //    int PrvMX = 0;
        //    bool brk = false;
        //    int totalCrs = 0;
        //    try
        //    {
        //        if (aatest.Length > 1)
        //            Line.DrawLines(PenWht, aatest);
        //        Msx = MousePosition.X;
        //        if (Msx >= (Rgn.Left + SixtyTwo) && Msx <= (Rgn.Left + SixtyTwo + (MainXAxisInterval * (XSelected.Length - 1))))
        //        {
        //            aatest = new PointF[0];
        //            testctr = 0;
        //            int test = (int)(Msx - (Rgn.Left + SixtyTwo));
        //            int XValaCtr = 0;
        //            do
        //            {
        //                if (Time == true)
        //                {
        //                    pt1 = new PointF((int)Rgn.Left + Msx, (int)Rgn.Bottom - Fifty);
        //                }
        //                else
        //                {
        //                    pt1 = new PointF((int)Rgn.Left + Msx, (int)Rgn.Bottom - Fifty);
        //                    //pt1 = new PointF((int)Rgn.Left + Msx, (int)Rgn.Bottom - (TwoHundred + OneFifty));//50
        //                }
        //                pt2 = new PointF((int)Rgn.Left + Msx, (int)Rgn.Top + OneFifty);//52

        //                if (Msx >= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
        //                    brk = true;
        //                else if (Msx < ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
        //                {
        //                    Line.DrawLine(PenBlk, pt1, pt2);
        //                    //Msx = Msx + (Msx-62);

        //                    float testval = Msx - ((Rgn.Left + SixtyTwo));
        //                    float XvalNow = (float)(testval / MainXAxisInterval);
        //                    if (totalCrs == 0)
        //                    {
        //                        totalCrs = (int)XvalNow;
        //                    }
        //                    if (XvalNow <= 400)
        //                    {
        //                        Array.Resize(ref XVala, XVala.Length + 1);
        //                        Array.Resize(ref YVala, YVala.Length + 1);
        //                        XVala[XValaCtr] = Convert.ToDouble(XSelected[(int)XvalNow]);
        //                        YVala[XValaCtr] = Convert.ToDouble(YSelected[(int)XvalNow]);
        //                        XValaCtr++;
        //                    }
        //                    Array.Resize(ref aatest, aatest.Length + 1);
        //                    aatest[testctr] = pt1;
        //                    testctr++;
        //                    Array.Resize(ref aatest, aatest.Length + 1);
        //                    aatest[testctr] = pt2;
        //                    testctr++;
        //                    Msx = Msx + test;
        //                    //totalCrs = totalCrs + test;
        //                    redraw();
        //                }




        //            } while (brk == false);

        //            if (PrvMX != Msx)
        //            {
        //                Line.DrawLines(PenWht, aatest);
        //                Line.DrawLine(PenWht, Prv1, Prv2);
        //                //for (int i = 0; i < aatest.Length; i++)
        //                //{
        //                //    Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
        //                //    i++;
        //                //}
        //                //Line.DrawLine(PenBlk, pt1, pt2);
        //                //Line.DrawLine(PenBlk, Prv1, Prv2);
        //                PrvMX = Msx;
        //                Prv1 = pt1;
        //                Prv2 = pt2;
        //                //float testval = Msx - 62;
        //                //float XvalNow = (float)(testval / MainXAxisInterval);
        //                //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
        //                //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
        //                FillDatagrid(XVala, YVala);
        //                redraw();


        //            }
        //            //Line.DrawLine(PenBlk, pt1, pt2);
        //            //if (Ctrc == 10)
        //            //    Ctrc = 0;
        //            //arrLocts[Ctrc] = pt1;
        //            //Ctrc++;
        //            //arrLocts[Ctrc] = pt2;
        //            //Ctrc++;
        //        }
        //        for (int i = 0; i < aatest.Length; i++)
        //        {
        //            Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
        //            i++;
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //    }

        //}



        int PrvMX1 = 0;

        private void HarmonicCursor(MouseEventArgs e)
        {
            double[] XVala = new double[0];
            double[] YVala = new double[0];

            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            //Pen PenWht = new Pen(Color.White, 3);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF Prv1 = new PointF();
            PointF Prv2 = new PointF();
            int Msx = 0;

            //PrvMX = 0;
            bool brk = false;
            int totalCrs = 0;
            int PreviousXValNow = 0;
            bool once = true;
            try
            {
                if (aatest.Length > 1)
                    Line.DrawLines(PenWht, aatest);
                Msx = e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo + 10) &&
                    Msx <= (Rgn.Left + SixtyTwo + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    aatest = new PointF[0];
                    testctr = 0;
                    int test = (int) (Msx - (Rgn.Left + SixtyTwo));
                    int XValaCtr = 0;

                    if (GraphZoomedAlready == true)
                    {
                        panel1.Refresh();
                        InitializeZoom();
                        do
                        {
                            if (Time == true)
                            {
                                pt1 = new PointF((int) Rgn.Left + Msx, (int) Rgn.Bottom - Fifty);
                            }
                            else
                            {
                                pt1 = new PointF((int) Rgn.Left + Msx, (int) Rgn.Bottom - Fifty);
                                //pt1 = new PointF((int)Rgn.Left + Msx, (int)Rgn.Bottom - (TwoHundred + OneFifty));//50
                            }

                            pt2 = new PointF((int) Rgn.Left + Msx, (int) Rgn.Top + OneFifty); //52

                            if (Msx >= ((Rgn.Left + SixtyTwo) + (MainXAxisIntervalZoom * (XZoom.Length))))
                                brk = true;
                            else if (Msx < ((Rgn.Left + SixtyTwo) + (MainXAxisIntervalZoom * (XZoom.Length))))
                            {
                                Line.DrawLine(PenBlk, pt1, pt2);
                                //Msx = Msx + (Msx-62);

                                int testval = (int) Math.Round((Msx - ((Rgn.Left + SixtyTwo))), 0);
                                int XvalNow = (int) Math.Round((testval / MainXAxisIntervalZoom), 0);
                                //if (totalCrs == 0)
                                //{
                                //    totalCrs = (int)XvalNow;
                                //}
                                //if (XvalNow <= 400)
                                if (once)
                                {
                                    ThrDCurCtr = Convert.ToInt32(XvalNow);
                                    once = false;
                                }

                                //if (PreviousXValNow == 0)
                                {
                                    //Array.Resize(ref XVala, XVala.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                                    //Array.Resize(ref YVala, YVala.Length + 1);
                                    XVala[XValaCtr] = Convert.ToDouble(XZoom[(int) XvalNow]);
                                    YVala[XValaCtr] = Convert.ToDouble(YZoom[(int) XvalNow]);
                                    PreviousXValNow = (int) XvalNow;
                                    XValaCtr++;
                                }
                                //else
                                //{
                                //    int CtrForValNow = PreviousXValNow + PreviousXValNow * XValaCtr;
                                //    if (CtrForValNow < XZoom.Length)
                                //    {
                                //        Array.Resize(ref XVala, XVala.Length + 1);
                                //        Array.Resize(ref YVala, YVala.Length + 1);
                                //        XVala[XValaCtr] = Convert.ToDouble(XZoom[CtrForValNow]);
                                //        YVala[XValaCtr] = Convert.ToDouble(YZoom[CtrForValNow]);
                                //        //PreviousXValNow = (int)XvalNow;
                                //        XValaCtr++;
                                //    }
                                //}
                                //if ((aatest.Length / 2) < XValaCtr)
                                {
                                    //Array.Resize(ref aatest, aatest.Length + 1);
                                    _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                    aatest[testctr] = pt1;
                                    testctr++;
                                    //Array.Resize(ref aatest, aatest.Length + 1);
                                    _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                    aatest[testctr] = pt2;
                                    testctr++;
                                }
                                //int testval = (int)Math.Round((Msx - ((Rgn.Left + SixtyTwo))), 0);
                                //int XvalNow = (int)Math.Round((testval / MainXAxisIntervalZoom), 0);
                                // Msx = Msx + test;
                                double CurrentVal = (double) XVala[0] * (XValaCtr + 1);
                                int CurrentIndex = Array.IndexOf(XZoom, CurrentVal);
                                if (CurrentIndex != -1)
                                {
                                    double temptestval = MainXAxisIntervalZoom * CurrentIndex;
                                    Msx = (int) Math.Round((temptestval + (Rgn.Left + SixtyTwo)), 0);
                                }
                                else
                                {
                                    brk = true;
                                }

                                //totalCrs = totalCrs + test;
                                redrawZoom();
                            }
                        } while (brk == false);

                        if (PrvMX1 != Msx)
                        {
                            Line.DrawLines(PenWht, aatest);
                            Line.DrawLine(PenWht, Prv1, Prv2);
                            //for (int i = 0; i < aatest.Length; i++)
                            //{
                            //    Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
                            //    i++;
                            //}
                            //Line.DrawLine(PenBlk, pt1, pt2);
                            //Line.DrawLine(PenBlk, Prv1, Prv2);
                            PrvMX1 = Msx;
                            Prv1 = pt1;
                            Prv2 = pt2;
                            //float testval = Msx - 62;
                            //float XvalNow = (float)(testval / MainXAxisInterval);
                            //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                            //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                            FillDatagrid(XVala, YVala);
                            redrawZoom();
                        }
                    }
                    else
                    {
                        do
                        {
                            if (Time == true)
                            {
                                pt1 = new PointF((int) Rgn.Left + Msx, (int) Rgn.Bottom - Fifty);
                            }
                            else
                            {
                                pt1 = new PointF((int) Rgn.Left + Msx, (int) Rgn.Bottom - Fifty);
                                //pt1 = new PointF((int)Rgn.Left + Msx, (int)Rgn.Bottom - (TwoHundred + OneFifty));//50
                            }

                            pt2 = new PointF((int) Rgn.Left + Msx, (int) Rgn.Top + OneFifty); //52

                            if (Msx >= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                                brk = true;
                            else if (Msx < ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                            {
                                Line.DrawLine(PenBlk, pt1, pt2);
                                //Msx = Msx + (Msx-62);

                                int testval = (int) (Msx - ((Rgn.Left + SixtyTwo)));
                                int XvalNow = (int) ((testval / MainXAxisInterval));
                                //if (totalCrs == 0)
                                //{
                                //    totalCrs = (int)XvalNow;
                                //}
                                //if (XvalNow <= 400)
                                if (once)
                                {
                                    ThrDCurCtr = Convert.ToInt32(XvalNow);
                                    once = false;
                                }

                                if (PreviousXValNow == 0)
                                {
                                    //Array.Resize(ref XVala, XVala.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                                    //Array.Resize(ref YVala, YVala.Length + 1);
                                    XVala[XValaCtr] = Convert.ToDouble(XSelected[(int) XvalNow]);
                                    YVala[XValaCtr] = Convert.ToDouble(YSelected[(int) XvalNow]);
                                    PreviousXValNow = (int) XvalNow;
                                    XValaCtr++;
                                }
                                else
                                {
                                    int CtrForValNow = PreviousXValNow + PreviousXValNow * XValaCtr;
                                    //Array.Resize(ref XVala, XVala.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                                    //Array.Resize(ref YVala, YVala.Length + 1);
                                    XVala[XValaCtr] = Convert.ToDouble(XSelected[CtrForValNow]);
                                    YVala[XValaCtr] = Convert.ToDouble(YSelected[CtrForValNow]);
                                    //PreviousXValNow = (int)XvalNow;
                                    XValaCtr++;
                                }

                                //Array.Resize(ref aatest, aatest.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                aatest[testctr] = pt1;
                                testctr++;
                                //Array.Resize(ref aatest, aatest.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref aatest, 1);
                                aatest[testctr] = pt2;
                                testctr++;
                                Msx = Msx + test;
                                //totalCrs = totalCrs + test;
                                redraw();
                            }
                        } while (brk == false);

                        if (PrvMX1 != Msx)
                        {
                            Line.DrawLines(PenWht, aatest);
                            Line.DrawLine(PenWht, Prv1, Prv2);
                            //for (int i = 0; i < aatest.Length; i++)
                            //{
                            //    Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
                            //    i++;
                            //}
                            //Line.DrawLine(PenBlk, pt1, pt2);
                            //Line.DrawLine(PenBlk, Prv1, Prv2);
                            PrvMX1 = Msx;
                            Prv1 = pt1;
                            Prv2 = pt2;
                            //float testval = Msx - 62;
                            //float XvalNow = (float)(testval / MainXAxisInterval);
                            //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                            //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                            FillDatagrid(XVala, YVala);
                            redraw();
                        }
                    }

                    //Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                }

                for (int i = 0; i < aatest.Length; i++)
                {
                    Line.DrawLine(PenBlk, aatest[i], aatest[i + 1]);
                    i++;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }
        //private void FillDatagrid(double[] XValues, double[] YValues)
        //{
        //    deletedataGridRows();
        //    dataGridView1.Rows.Add(XValues.Length);
        //    try
        //    {
        //        for (int i = 0; i < XValues.Length; i++)
        //        {

        //            dataGridView1.Rows[i].Cells[0].Value = XValues[i];
        //            dataGridView1.Rows[i].Cells[1].Value = YValues[i];

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //    dataGridView1.Refresh();
        //}
        private void redrawZoom()
        {
            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            try
            {
                ////pt1 = new Point((int)pt.Left + 62, (int)pt.Bottom - 52);
                ////pt2 = new Point((int)pt.Right - 62, (int)pt.Bottom - 52);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //der.DrawLine(PenBlkB, pt1, pt2);
                ////pt1 = new Point((int)pt.Left + 62, (int)pt.Bottom - 52);
                ////pt2 = new Point((int)pt.Top + 52, (int)pt.Left + 62);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //der.DrawLine(PenBlkB, pt1, pt2);

                //if (Time == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //12-02-2010    Amit Jain
                //Work for the labels of axis
                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);

                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);

                }
                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);


                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);


                }
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                SetAxisMarks(XZoom, YZoom);
                der.DrawCurve(new Pen(Color.DarkRed, (float) .5), PtsZoomedVals, (float) 0);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        bool TrgtMinus = false;

        bool IsTrend = false;
        //public bool SetIsTrend
        //{
        //    get
        //    {
        //        return IsTrend;
        //    }
        //    set
        //    {
        //        IsTrend = value;
        //        if (IsTrend)
        //        {
        //            btnTrend.Text = "Untrend";
        //            bbTrend.Caption = "Untrend";
        //            //comboBoxEdit1.SelectedIndex = 0;

        //        }
        //        else
        //        {
        //            btnTrend.Text = "Trend";
        //            bbTrend.Caption = "Trend";
        //            //comboBoxEdit111.SelectedIndex = 0;
        //        }
        //        //bbConvertToFFT.Enabled = !value;
        //        bbOctave.Enabled = !value;
        //        bbWaterfall.Enabled = !value;
        //        bbCepstrum.Enabled = !value;
        //        bbArea.Enabled = !value;
        //    }
        //}


        private void SingleLineCursorTwoDByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //float PrvsValX = 0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    //pt1[0] = Pts[ThrDCurCtr];
                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        Line.DrawLine(PenWht, PrvCr1, PrvCr2);
                        if (IsTrend)
                        {
                            if (PrvsValX != 0)
                            {
                                redrawNew(PrvsValX);
                            }
                        }
                        else
                            redraw();
                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    PrvCr1 = pt1;
                    PrvCr2 = pt2;
                    XVala[0] = Convert.ToDouble(XSelected[(int) ThrDCurCtr]);
                    YVala[0] = Convert.ToDouble(YSelected[(int) ThrDCurCtr]);
                    FillDatagrid(XVala, YVala);
                    PrvsValX = ThrDCurCtr;

                    if (AreaPlot == true)
                    {
                        FFTAreaPlot();
                    }

                    pt1forImage = pt1;
                    pt2forImage = pt2;


                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }
        //private void SingleLineCursorTwoD()//Old
        //{
        //    double[] XVala = new double[1];
        //    double[] YVala = new double[1];
        //    Region rgn1 = new Region(panel1.Bounds);
        //    Graphics Line = panel1.CreateGraphics();
        //    Line.Clip = rgn1;
        //    RectangleF Rgn = Line.ClipBounds;
        //    Pen PenBlk = new Pen(Color.Black, (float).5);
        //    //Pen PenWht = new Pen(Color.White, 2);
        //    Pen PenWht = new Pen(panel1.BackColor, (float).5);
        //    //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
        //    //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
        //    PointF pt1 = new PointF();
        //    PointF pt2 = new PointF();
        //    PointF Prv1 = new PointF();
        //    PointF Prv2 = new PointF();
        //    float Msx = 0;
        //    float PrvMX = 0;
        //    try
        //    {

        //        Msx = (float)MousePosition.X;
        //        if (Msx >= (Rgn.Left + SixtyTwo) && Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
        //        {
        //            if (Time == true)
        //            {
        //                pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - Fifty);
        //            }
        //            else
        //            {
        //                pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - Fifty);
        //                //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
        //            }
        //            pt2 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Top + OneFifty);//52//FourHundred

        //            if (PrvMX != Msx)
        //            {
        //                Line.DrawLines(PenWht, arrLocts);
        //                Line.DrawLine(PenBlk, pt1, pt2);
        //                float testval = Msx - (Rgn.Left + SixtyTwo);
        //                float XvalNow = (float)(testval / MainXAxisInterval);
        //                //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
        //                //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
        //                XVala[0] = Convert.ToDouble(XSelected[(int)XvalNow]);
        //                YVala[0] = Convert.ToDouble(YSelected[(int)XvalNow]);
        //                FillDatagrid(XVala, YVala);
        //                //panel1.Refresh();
        //                PrvMX = Msx;
        //                //Prv1 = pt1;
        //                //Prv2 = pt2;

        //                redraw();
        //                if (AreaPlot == true)
        //                {
        //                    FFTAreaPlot();
        //                }

        //            }
        //            Line.DrawLine(PenBlk, pt1, pt2);
        //            if (Ctrc == 10)
        //                Ctrc = 0;
        //            arrLocts[Ctrc] = pt1;
        //            Ctrc++;
        //            arrLocts[Ctrc] = pt2;
        //            Ctrc++;
        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //    }
        //}
        //private float PrvsValNow = 0;


        private void SideBandRatioCursorTwoDByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;

            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            Pen PenBkw = new Pen(Color.Black, (float) .5);

            Pen PenFwd = new Pen(Color.Black, (float) .5);


            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            pts11 = new PointF();
            pts12 = new PointF();
            pts21 = new PointF();
            pts22 = new PointF();

            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            try
            {

                Msx = (float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr));
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    string[] RatioExtractor = tbSideBandRatio.Text.ToString()
                        .Split(new string[] {"/"}, StringSplitOptions.RemoveEmptyEntries);
                    int Pctg = Convert.ToInt32(RatioExtractor[1]);
                    //double LowerLimit = Msx - (Msx * 1 / Pctg);
                    //double UpperLimit = Msx + (Msx * 1 / Pctg);

                    double LowerLimit = (Msx - SixtyTwo) - ((Msx - SixtyTwo) * 1 / Pctg);
                    double UpperLimit = (Msx - SixtyTwo) + ((Msx - SixtyTwo) * 1 / Pctg);

                    LowerLimit += SixtyTwo;
                    UpperLimit += SixtyTwo;

                    if (Time == true)
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts12 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (Time == true)
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts22 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred



                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenWht, Prvs11, Prvs12);
                        Line.DrawLine(PenWht, Prvs21, Prvs22);


                        pt1forImage = pt1;
                        pt2forImage = pt2;
                        Line.DrawLine(PenBlk, pt1, pt2);

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);

                        // Amit Jain    DA_2    Side Band Values and its graphical representation   22-02-2010 4:17
                        double LowerLimitNow = XVala[0] - (XVala[0] / Pctg);
                        double UpperLimitNow = XVala[0] + (XVala[0] / Pctg);
                        //double LowerLimitNow = XVala[0] - (XVala[0] * Pctg / 100);
                        //double UpperLimitNow = XVala[0] + (XVala[0] * Pctg / 100);

                        if (LowerLimit >= (Rgn.Left + SixtyTwo) && LowerLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenBkw, pts11, pts12);

                            double Comparator = Convert.ToDouble(LowerLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);



                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(LowerLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);


                        }

                        if (UpperLimit >= (Rgn.Left + SixtyTwo) && UpperLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenFwd, pts21, pts22);


                            double Comparator = Convert.ToDouble(UpperLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(UpperLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);

                        }



                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;
                        Prvs11 = pts11;
                        Prvs12 = pts12;
                        Prvs21 = pts21;
                        Prvs22 = pts22;


                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void SideBandTrendByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;

            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            Pen PenBkw = new Pen(Color.Black, (float) .5);

            Pen PenFwd = new Pen(Color.Black, (float) .5);




            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            pts11 = new PointF();
            pts12 = new PointF();
            pts21 = new PointF();
            pts22 = new PointF();

            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            try
            {

                Msx = (float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr));
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred
                    if (objTrend != null)
                    {
                        TrendValue = objTrend._Value.ToString();
                        iConstSBTrendFreq = objTrend._Freq;
                    }

                    double
                        Pctg = Convert
                            .ToDouble(
                                TrendValue); //double Pctg = Convert.ToDouble(tsSideBandTrendValue.Text.ToString());
                    double Prcnt = iConstSBTrendFreq;
                    //double 

                    int mainX = Array.FindIndex(x, delegate(double item) { return item == Pctg; });
                    if (mainX == -1)
                    {
                        Pctg = FindNearest(x, Pctg);
                        mainX = Array.FindIndex(x, delegate(double item) { return item == Pctg; });
                    }


                    double LowerLimit = Msx - ((CursorStartInterval * mainX * Prcnt) / 100);
                    double UpperLimit = Msx + ((CursorStartInterval * mainX * Prcnt) / 100);


                    Pctg = Convert.ToDouble(TrendValue);
                    Prcnt = iConstSBTrendFreq;
                    double pVal = (Prcnt * Pctg) / 100;
                    mainX = Array.FindIndex(x, delegate(double item) { return item == pVal; });
                    if (mainX == -1)
                    {
                        pVal = FindNearest(x, pVal);
                        mainX = Array.FindIndex(x, delegate(double item) { return item == pVal; });
                    }

                    double NewPctg = ((double) mainX / x.Length) * 100;
                    LowerLimit = (Msx) - ((CursorStartInterval * mainX)); // / 100);
                    UpperLimit = (Msx) + ((CursorStartInterval * mainX)); // / 100);


                    //double LowerLimit = (Msx - SixtyTwo) - (Pctg * Prcnt / 100);
                    //double UpperLimit = (Msx - SixtyTwo) + (Pctg * Prcnt / 100);

                    //LowerLimit += SixtyTwo;
                    //UpperLimit += SixtyTwo;

                    if (Time == true)
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts12 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (Time == true)
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts22 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred



                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenWht, Prvs11, Prvs12);
                        Line.DrawLine(PenWht, Prvs21, Prvs22);

                        pt1forImage = pt1;
                        pt2forImage = pt2;

                        Line.DrawLine(PenBlk, pt1, pt2);

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);

                        //double LowerLimitNow = XVala[0] - (Pctg * Prcnt / 100);
                        //double UpperLimitNow = XVala[0] + (Pctg * Prcnt / 100);
                        double LowerLimitNow = XVala[0] - (pVal);
                        double UpperLimitNow = XVala[0] + (pVal);

                        if (LowerLimit >= (Rgn.Left + SixtyTwo) && LowerLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenBkw, pts11, pts12);

                            double Comparator = Convert.ToDouble(LowerLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);




                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(LowerLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);


                        }

                        if (UpperLimit >= (Rgn.Left + SixtyTwo) && UpperLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenFwd, pts21, pts22);

                            double Comparator = Convert.ToDouble(UpperLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(UpperLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);

                        }



                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;
                        Prvs11 = pts11;
                        Prvs12 = pts12;
                        Prvs21 = pts21;
                        Prvs22 = pts22;


                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public string TrendRatio
        {
            get { return tbSideBandRatio.Text.ToString(); }
            set
            {
                tbSideBandRatio.Text = value;
                bbSBRatio.SuperTip.Items.Clear();
                bbSBRatio.SuperTip.Items.AddTitle((string) tbSideBandRatio.Text);
            }

        }

        public string SBValue
        {
            get { return tbSideBandPercentage.Text.ToString(); }
            set
            {
                tbSideBandPercentage.Text = value;
                bbSBValue.SuperTip.Items.Clear();
                bbSBValue.SuperTip.Items.AddTitle((string) tbSideBandPercentage.Text);
            }

        }

        public string TrendValue
        {
            get { return tsSideBandTrendValue.Text.ToString(); }
            set
            {
                tsSideBandTrendValue.Text = value;
                bbSBTrend.SuperTip.Items.Clear();
                bbSBTrend.SuperTip.Items.AddTitle((string) tsSideBandTrendValue.Text);
            }

        }
        //public bool SetCurSorVal
        //{
        //    set
        //    {
        //        SelectBandTrend = value;

        //        TrendValue = Convert.ToString(iConstSBTrendValue);
        //    }
        //}
        private void SideBandCursorTwoDByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;

            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            Pen PenBkw = new Pen(Color.Black, (float) .5);

            Pen PenFwd = new Pen(Color.Black, (float) .5);




            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            pts11 = new PointF();
            pts12 = new PointF();
            pts21 = new PointF();
            pts22 = new PointF();

            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            try
            {

                Msx = (float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr));
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    string[] RatioExtractor = TrendRatio.ToString()
                        .Split(new string[] {"/"}, StringSplitOptions.RemoveEmptyEntries);
                    int Pctg = Convert.ToInt32(SBValue
                        .ToString()); //Convert.ToInt32(tbSideBandPercentage.Text.ToString());
                    double LowerLimit = (Msx - SixtyTwo) - ((Msx - SixtyTwo) * Pctg / 100);
                    double UpperLimit = (Msx - SixtyTwo) + ((Msx - SixtyTwo) * Pctg / 100);

                    LowerLimit += SixtyTwo;
                    UpperLimit += SixtyTwo;

                    if (Time == true)
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts12 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (Time == true)
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts22 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred



                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenWht, Prvs11, Prvs12);
                        Line.DrawLine(PenWht, Prvs21, Prvs22);


                        pt1forImage = pt1;
                        pt2forImage = pt2;
                        Line.DrawLine(PenBlk, pt1, pt2);

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        double LowerLimitNow = XVala[0] - (XVala[0] * Pctg / 100);
                        double UpperLimitNow = XVala[0] + (XVala[0] * Pctg / 100);



                        if (LowerLimit >= (Rgn.Left + SixtyTwo) && LowerLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenBkw, pts11, pts12);

                            double Comparator = Convert.ToDouble(LowerLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);




                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(LowerLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);


                        }

                        if (UpperLimit >= (Rgn.Left + SixtyTwo) && UpperLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenFwd, pts21, pts22);

                            double Comparator = Convert.ToDouble(UpperLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(UpperLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);

                        }



                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;
                        Prvs11 = pts11;
                        Prvs12 = pts12;
                        Prvs21 = pts21;
                        Prvs22 = pts22;


                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void SideBandRatioCursorTwoD(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);

            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            Pen PenBkw = new Pen(Color.Black, (float) .5);

            Pen PenFwd = new Pen(Color.Black, (float) .5);



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            pts11 = new PointF();
            pts12 = new PointF();
            pts21 = new PointF();
            pts22 = new PointF();

            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    string[] RatioExtractor = tbSideBandRatio.Text.ToString()
                        .Split(new string[] {"/"}, StringSplitOptions.RemoveEmptyEntries);
                    int Pctg = Convert.ToInt32(RatioExtractor[1]);
                    //double LowerLimit = Msx - (Msx * 1 / Pctg);
                    //double UpperLimit = Msx + (Msx * 1 / Pctg);

                    double LowerLimit = (Msx - SixtyTwo) - ((Msx - SixtyTwo) * 1 / Pctg);
                    double UpperLimit = (Msx - SixtyTwo) + ((Msx - SixtyTwo) * 1 / Pctg);

                    LowerLimit += SixtyTwo;
                    UpperLimit += SixtyTwo;

                    if (Time == true)
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts12 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (Time == true)
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts22 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred



                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenWht, Prvs11, Prvs12);
                        Line.DrawLine(PenWht, Prvs21, Prvs22);


                        pt1forImage = pt1;
                        pt2forImage = pt2;
                        Line.DrawLine(PenBlk, pt1, pt2);

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        //double LowerLimitNow = XVala[0] - (XVala[0] * Pctg / 100);
                        //double UpperLimitNow = XVala[0] + (XVala[0] * Pctg / 100);

                        // Amit Jain    DA_2    Side Band Values and its graphical representation   22-02-2010 4:17
                        double LowerLimitNow = XVala[0] - (XVala[0] / Pctg);
                        double UpperLimitNow = XVala[0] + (XVala[0] / Pctg);


                        if (LowerLimit >= (Rgn.Left + SixtyTwo) && LowerLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenBkw, pts11, pts12);


                            double Comparator = Convert.ToDouble(LowerLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);



                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(LowerLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);


                        }

                        if (UpperLimit >= (Rgn.Left + SixtyTwo) && UpperLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenFwd, pts21, pts22);

                            double Comparator = Convert.ToDouble(UpperLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);



                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(UpperLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);

                        }



                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;
                        Prvs11 = pts11;
                        Prvs12 = pts12;
                        Prvs21 = pts21;
                        Prvs22 = pts22;


                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void SideBandTrendDraw(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            Pen PenBkw = new Pen(Color.Black, (float) .5);

            Pen PenFwd = new Pen(Color.Black, (float) .5);




            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            pts11 = new PointF();
            pts12 = new PointF();
            pts21 = new PointF();
            pts22 = new PointF();

            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred


                    //15 feb 2010   Amit Jain
                    //To Correct the positioning of the Cursor lines
                    if (objTrend != null)
                    {
                        TrendValue = objTrend._Value.ToString();
                        iConstSBTrendFreq = objTrend._Freq;
                    }

                    double
                        Pctg = Convert
                            .ToDouble(
                                TrendValue); //double Pctg = Convert.ToDouble(tsSideBandTrendValue.Text.ToString());
                    double Prcnt = iConstSBTrendFreq;
                    //double 
                    int mainX = Array.FindIndex(x, delegate(double item) { return item == Pctg; });
                    if (mainX == -1)
                    {
                        Pctg = FindNearest(x, Pctg);
                        mainX = Array.FindIndex(x, delegate(double item) { return item == Pctg; });
                    }


                    double LowerLimit = Msx - ((CursorStartInterval * mainX * Prcnt) / 100);
                    double UpperLimit = Msx + ((CursorStartInterval * mainX * Prcnt) / 100);

                    //End   Amit Jain


                    Pctg = Convert.ToDouble(TrendValue);
                    Prcnt = iConstSBTrendFreq;
                    double pVal = (Prcnt * Pctg) / 100;
                    mainX = Array.FindIndex(x, delegate(double item) { return item == pVal; });
                    if (mainX == -1)
                    {
                        pVal = FindNearest(x, pVal);
                        mainX = Array.FindIndex(x, delegate(double item) { return item == pVal; });
                    }

                    double NewPctg = ((double) mainX / x.Length) * 100;
                    LowerLimit = (Msx) - ((CursorStartInterval * mainX)); // / 100);
                    UpperLimit = (Msx) + ((CursorStartInterval * mainX)); // / 100);
                    //LowerLimit = (Msx - SixtyTwo) - ((Msx - SixtyTwo) * NewPctg / 100);
                    //UpperLimit = (Msx - SixtyTwo) + ((Msx - SixtyTwo) * NewPctg / 100);

                    //LowerLimit += SixtyTwo;
                    //UpperLimit += SixtyTwo;



                    if (Time == true)
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts12 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (Time == true)
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts22 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred



                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenWht, Prvs11, Prvs12);
                        Line.DrawLine(PenWht, Prvs21, Prvs22);

                        pt1forImage = pt1;
                        pt2forImage = pt2;

                        Line.DrawLine(PenBlk, pt1, pt2);

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        double LowerLimitNow = XVala[0] - (pVal);
                        double UpperLimitNow = XVala[0] + (pVal);

                        if (LowerLimit >= (Rgn.Left + SixtyTwo) && LowerLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenBkw, pts11, pts12);

                            double Comparator = Convert.ToDouble(LowerLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);




                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(LowerLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);


                        }
                        else
                        {
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(0);
                            YVala[YVala.Length - 1] = Convert.ToDouble(0);
                        }

                        if (UpperLimit >= (Rgn.Left + SixtyTwo) && UpperLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenFwd, pts21, pts22);


                            double Comparator = Convert.ToDouble(UpperLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);




                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(UpperLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);

                        }
                        else
                        {
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(0);
                            YVala[YVala.Length - 1] = Convert.ToDouble(0);
                        }


                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;
                        Prvs11 = pts11;
                        Prvs12 = pts12;
                        Prvs21 = pts21;
                        Prvs22 = pts22;


                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void SideBandCursorTwoD(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            Pen PenBkw = new Pen(Color.Black, (float) .5);

            Pen PenFwd = new Pen(Color.Black, (float) .5);

            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            pts11 = new PointF();
            pts12 = new PointF();
            pts21 = new PointF();
            pts22 = new PointF();

            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    string[] RatioExtractor = TrendRatio.ToString()
                        .Split(new string[] {"/"}, StringSplitOptions.RemoveEmptyEntries);
                    int Pctg = Convert.ToInt32(SBValue
                        .ToString()); //Convert.ToInt32(tbSideBandPercentage.Text.ToString());
                    double LowerLimit = (Msx - SixtyTwo) - ((Msx - SixtyTwo) * Pctg / 100);
                    double UpperLimit = (Msx - SixtyTwo) + ((Msx - SixtyTwo) * Pctg / 100);

                    LowerLimit += SixtyTwo;
                    UpperLimit += SixtyTwo;

                    if (Time == true)
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts11 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts12 = new PointF((float) LowerLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (Time == true)
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pts21 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pts22 = new PointF((float) UpperLimit - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred



                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenWht, Prvs11, Prvs12);
                        Line.DrawLine(PenWht, Prvs21, Prvs22);


                        pt1forImage = pt1;
                        pt2forImage = pt2;
                        Line.DrawLine(PenBlk, pt1, pt2);

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        double LowerLimitNow = XVala[0] - (XVala[0] * Pctg / 100);
                        double UpperLimitNow = XVala[0] + (XVala[0] * Pctg / 100);

                        if (LowerLimit >= (Rgn.Left + SixtyTwo) && LowerLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenBkw, pts11, pts12);

                            double Comparator = Convert.ToDouble(LowerLimitNow);



                            //double Comparator = Convert.ToDouble(LowerLimit - (Rgn.Left + SixtyTwo));
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);


                        }

                        if (UpperLimit >= (Rgn.Left + SixtyTwo) && UpperLimit <=
                            ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                        {
                            Line.DrawLine(PenFwd, pts21, pts22);
                            //double Comparator = Convert.ToDouble(UpperLimit - (Rgn.Left + SixtyTwo));
                            double Comparator = Convert.ToDouble(UpperLimitNow);
                            int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                Comparator = FindNearest(x, Comparator);
                                MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                            }


                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            XVala[XVala.Length - 1] = Convert.ToDouble(x[MainIndex]);
                            YVala[YVala.Length - 1] = Convert.ToDouble(y[MainIndex]);



                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            //testval = (float)(UpperLimit - (Rgn.Left + SixtyTwo));
                            //XvalNow = (float)(testval / MainXAxisInterval);
                            //XVala[XVala.Length - 1] = Convert.ToDouble(XSelected[(int)XvalNow]);
                            //YVala[YVala.Length - 1] = Convert.ToDouble(YSelected[(int)XvalNow]);

                        }



                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;
                        Prvs11 = pts11;
                        Prvs12 = pts12;
                        Prvs21 = pts21;
                        Prvs22 = pts22;


                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        //double[] Peeks1 = new double[0];
        //int[] Peeks = new int[0];
        //private int[] FindAllPeaks()
        //{
        //    Peeks = new int[0];
        //    Peeks1 = new double[0];
        //    double Fst = 0;
        //    double Scnd = 0;
        //    double Thrd = 0;
        //    try
        //    {
        //        for (int i = 2; i < y.Length; i++)
        //        {
        //            Fst = y[i - 2];
        //            Scnd = y[i - 1];
        //            Thrd = y[i];

        //            if (Fst < Scnd && Scnd > Thrd)
        //            {


        //                Array.Resize(ref Peeks, Peeks.Length + 1);
        //                Peeks[Peeks.Length - 1] = i - 1;
        //                Array.Resize(ref Peeks1, Peeks1.Length + 1);
        //                Peeks1[Peeks1.Length - 1] = Pts[i - 1].X;
        //                i++;


        //                //if (Scnd >= 1)
        //                //{
        //                //    Array.Resize(ref Peeks, Peeks.Length + 1);
        //                //    Peeks[Peeks.Length - 1] = i - 1;
        //                //    Array.Resize(ref Peeks1, Peeks1.Length + 1);
        //                //    Peeks1[Peeks1.Length - 1] = Pts[i - 1].X;
        //                //    i++;
        //                //}
        //                //else if(Scnd>=Fst+(Fst*.8))
        //                //{
        //                //    Array.Resize(ref Peeks, Peeks.Length + 1);
        //                //    Peeks[Peeks.Length - 1] = i - 1;
        //                //    Array.Resize(ref Peeks1, Peeks1.Length + 1);
        //                //    Peeks1[Peeks1.Length - 1] = Pts[i - 1].X;
        //                //    i++;
        //                //}
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //        ErrorLogFile(ex);
        //    }
        //    return Peeks;
        //}
        private int FindMoreClosurePeek(double ValueToCompare)
        {
            int ResultIndex = 0;
            try
            {
                ResultIndex = Array.BinarySearch(Peeks1, ValueToCompare);
                if (ResultIndex < 0)
                {
                    ResultIndex = (ResultIndex + 1) * -1;
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            return ResultIndex;
        }


        private void PeekCursorForAll(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }
            //PenBlk

            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    int Index = FindMoreClosurePeek(Msx - Rgn.Left);
                    PeekCursorCtr = Index;
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Peeks1[Index], (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Peeks1[Index], (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Peeks1[Index], (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        //float testval = Msx - (Rgn.Left + SixtyTwo);
                        //float XvalNow = (float)(testval / MainXAxisInterval);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        XVala[0] = Convert.ToDouble(XSelected[Peeks[Index]]);
                        YVala[0] = Convert.ToDouble(YSelected[Peeks[Index]]);
                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(Peeks[Index]);
                        }

                        //panel1.Refresh();
                        PrvsValX = Peeks[Index];
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;

                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    pt1forImage = pt1;
                    pt2forImage = pt2;
                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void PeekCursorForAllByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //float PrvsValX = 0;
            float Msx = 0;
            float PrvMX = 0;
            try
            {
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                    //if (Msx >= (Rgn.Left + SixtyTwo) && Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    //PeekCursorCtr
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Peeks1[PeekCursorCtr], (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) Peeks1[PeekCursorCtr], (float) (Rgn.Bottom - Fifty));
                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) Peeks1[PeekCursorCtr], (float) Rgn.Top + OneFifty); //52//FourHundred

                    //pt1[0] = Pts[ThrDCurCtr];
                    if (PrvCr1.X != 0.0 && PrvCr2.Y != 0.0)
                    {
                        Line.DrawLine(PenWht, PrvCr1, PrvCr2);

                        redraw();
                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    PrvCr1 = pt1;
                    PrvCr2 = pt2;
                    pt1forImage = pt1;
                    pt2forImage = pt2;
                    XVala[0] = Convert.ToDouble(XSelected[Peeks[PeekCursorCtr]]);
                    YVala[0] = Convert.ToDouble(YSelected[Peeks[PeekCursorCtr]]);
                    FillDatagrid(XVala, YVala);
                    PrvsValX = ThrDCurCtr;

                    if (AreaPlot == true)
                    {
                        FFTAreaPlot();
                    }



                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void SingleLineCursorTwoD(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }
            //PenBlk

            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - (Rgn.Left), (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - (Rgn.Left), (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - (Rgn.Left), (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                                //redraw();
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;

                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    pt1forImage = pt1;
                    pt2forImage = pt2;
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        PointF pt1forImage = new PointF();
        PointF pt2forImage = new PointF();

        PointF pt1forCImage = new PointF();
        PointF pt2forCImage = new PointF();
        bool bzt1 = false;

        private void SingleLineCursorTwoDForZoomed(MouseEventArgs e)
        {
            if (bzt1 == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                InitializeZoom();
                bzt1 = true;
                bzt = false;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }

            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF Prv1 = new PointF();
            PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (TimeDataAckForZoom == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {
                        Line.DrawLines(PenWht, arrLocts);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisIntervalZoom);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        XVala[0] = Convert.ToDouble(XZoom[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YZoom[(int) XvalNow]);
                        FillDatagrid(XVala, YVala);
                        //panel1.Refresh();
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //InitializeZoom();
                        DrawZoomed();
                        //redrawZoom();
                        //if (AreaPlot == true)
                        //{
                        //    FFTAreaPlot();
                        //}
                        ThrDCurCtr = Convert.ToInt32(XvalNow);
                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    pt1forImage = pt1;
                    pt2forImage = pt2;
                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void NullAllGphElements()
        {

            try
            {
                ThrDCurCtr = 0;
                Pts = null;
                Pts1 = null;
                Pts2 = null;
                Pts3 = null;
                Pts4 = null;
                Pts5 = null;
                Pts6 = null;
                Pts7 = null;
                x = null;
                x1 = null;
                x2 = null;
                x3 = null;
                x4 = null;
                x5 = null;
                x6 = null;
                x7 = null;
                y = null;
                y1 = null;
                y2 = null;
                y3 = null;
                y4 = null;
                y5 = null;
                y6 = null;
                y7 = null;
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
                CtrSelectedCraph = 0;
                //arlstSColors = null;

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void ThreeDeeRedraw()
        {
            SetAxis();
            //ExtractExcellData();
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();

            PointF pt11 = new PointF();
            PointF pt21 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (OneSixtyTwo + (Rect.Left + SixtyTwo));
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (FourHundred + TwoHundred);
            double MaxVal = 0;
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();

            GraphicsPath objgpath = new GraphicsPath();
            PointF[] objPoints = new PointF[4];
            try
            {
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourHundred));

                pt11 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt21 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));

                objPoints[0] = pt1;
                objPoints[1] = pt2;
                objPoints[2] = pt21;
                objPoints[3] = pt11;
                objgpath.AddCurve(objPoints, 0);
                if (toolStripComboBox1.SelectedItem.ToString() == "Black")
                {
                    ThreDee.FillPath(Brushes.DarkGray, objgpath);
                }
                else if (toolStripComboBox1.SelectedItem.ToString() == "Caramel")
                {
                    ThreDee.FillPath(Brushes.DarkGoldenrod, objgpath);
                }
                else
                {
                    ThreDee.FillPath(Brushes.DarkCyan, objgpath);
                }

                objgpath = new GraphicsPath();


                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));

                pt11 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt21 = new PointF((float) (Rect.Right - OneSixtyTwo), (float) (Rect.Bottom - TwoHundred));

                objPoints[0] = pt1;
                objPoints[1] = pt2;
                objPoints[2] = pt21;
                objPoints[3] = pt11;
                objgpath.AddCurve(objPoints, 0);
                //ThreDee.FillPath(Brushes.LightBlue, objgpath);


                objgpath = new GraphicsPath();










                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + OneFifty));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);


                pt11 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt21 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                objPoints[0] = pt1;
                objPoints[1] = pt2;
                objPoints[2] = pt11;
                objPoints[3] = pt21;
                objgpath.AddCurve(objPoints, 0);
                if (toolStripComboBox1.SelectedItem.ToString() == "Black")
                {
                    ThreDee.FillPath(Brushes.LightGray, objgpath);
                }
                else if (toolStripComboBox1.SelectedItem.ToString() == "Caramel")
                {
                    ThreDee.FillPath(Brushes.LightGoldenrodYellow, objgpath);
                }
                else
                {
                    ThreDee.FillPath(Brushes.AliceBlue, objgpath);
                }



                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourHundred));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourHundred));
                pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Right - OneSixtyTwo), (float) (Rect.Bottom - TwoHundred));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - OneSixtyTwo), (float) (Rect.Bottom - TwoHundred));
                ThreDee.DrawLine(BlkPen, pt1, pt2);


                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);


                pt1 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);









                DrawGrids();




                //if (CtrSelectedCraph == 0)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Red, (float)2), Pts, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                //if (CtrSelectedCraph == 1)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Blue, (float)2), Pts1, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);

                //if (CtrSelectedCraph == 2)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts2, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);

                //if (CtrSelectedCraph == 3)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts3, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);

                //if (CtrSelectedCraph == 4)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkSeaGreen, (float)2), Pts4, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);

                //if (CtrSelectedCraph == 5)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DeepPink, (float)2), Pts5, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);

                //if (CtrSelectedCraph == 6)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkOrange, (float)2), Pts6, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);
                //if (CtrSelectedCraph == 7)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Maroon, (float)2), Pts7, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);







                int i3DGrphCtr = 0;
                try
                {
                    if (Pts != null)
                        if (CtrSelectedCraph == 0)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts1 != null)
                        if (CtrSelectedCraph == 1)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts1, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts1,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts2 != null)
                        if (CtrSelectedCraph == 2)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts2, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts2,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts3 != null)
                        if (CtrSelectedCraph == 3)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts3, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts3,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts4 != null)
                        if (CtrSelectedCraph == 4)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts4, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts4,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts5 != null)
                        if (CtrSelectedCraph == 5)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts5, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts5,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts6 != null)
                        if (CtrSelectedCraph == 6)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts6, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts6,
                                (float) 0);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                i3DGrphCtr++;
                try
                {
                    if (Pts7 != null)
                        if (CtrSelectedCraph == 7)
                        {
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2),
                                Pts7, (float) 0);
                        }
                        else
                            ThreDee.DrawCurve(
                                new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts7,
                                (float) 0);


                    SetDatesOfThreeDee();
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void SetDatesOfThreeDee()
        {
            SetAxis();
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;

            Pen BlkPen = new Pen(Color.Black, 1);
            //BlkPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
            RectangleF Rect = ThreDee.ClipBounds;
            //PointF pt1 = new PointF();
            //PointF pt2 = new PointF();
            //PointF LstPoint = Target[Target.Length - 1];
            Font objFont = new Font("Roman", 7, FontStyle.Italic);
            Brush objBrush = Brushes.Black;
            int StartPosition = 0;

            try
            {
                if (SlctedDates.Count > 16)
                {
                    StartPosition = SlctedDates.Count - 16;
                }
                else
                {
                    StartPosition = 0;

                }

                PointF LstPoint = Pts[Pts.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts1[Pts1.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 1].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts2[Pts2.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 2].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts3[Pts3.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 3].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts4[Pts4.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 4].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts5[Pts5.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 5].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts6[Pts6.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 6].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);

                LstPoint = Pts7[Pts7.Length - 1];
                ThreDee.DrawString(SlctedDates[StartPosition + 7].ToString(), objFont, objBrush, LstPoint.X + 0,
                    LstPoint.Y);


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void ThreeDeeRedrawAsImage()
        {
            SetAxis();
            //ExtractExcellData();
            Region Rgn = new Region(panel1.Bounds);


            Bitmap bmp = new Bitmap(panel1.Width, panel1.Height, PixelFormat.Format24bppRgb);

            System.Drawing.Graphics ThreDee = Graphics.FromImage(bmp);
            ThreDee.Clear(panel1.BackColor);

            //Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;

            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF pt11 = new PointF();
            PointF pt21 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (OneSixtyTwo + (Rect.Left + SixtyTwo));
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (FourHundred + TwoHundred);
            double MaxVal = 0;
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();

            GraphicsPath objgpath = new GraphicsPath();
            PointF[] objPoints = new PointF[4];
            try
            {
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourHundred));

                pt11 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt21 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));

                objPoints[0] = pt1;
                objPoints[1] = pt2;
                objPoints[2] = pt21;
                objPoints[3] = pt11;
                objgpath.AddCurve(objPoints, 0);
                if (toolStripComboBox1.SelectedItem.ToString() == "Black")
                {
                    ThreDee.FillPath(Brushes.DarkGray, objgpath);
                }
                else if (toolStripComboBox1.SelectedItem.ToString() == "Caramel")
                {
                    ThreDee.FillPath(Brushes.DarkGoldenrod, objgpath);
                }
                else
                {
                    ThreDee.FillPath(Brushes.DarkCyan, objgpath);
                }

                objgpath = new GraphicsPath();


                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));

                pt11 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt21 = new PointF((float) (Rect.Right - OneSixtyTwo), (float) (Rect.Bottom - TwoHundred));

                objPoints[0] = pt1;
                objPoints[1] = pt2;
                objPoints[2] = pt21;
                objPoints[3] = pt11;
                objgpath.AddCurve(objPoints, 0);
                //ThreDee.FillPath(Brushes.LightBlue, objgpath);


                objgpath = new GraphicsPath();










                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + OneFifty));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);


                pt11 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt21 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                objPoints[0] = pt1;
                objPoints[1] = pt2;
                objPoints[2] = pt11;
                objPoints[3] = pt21;
                objgpath.AddCurve(objPoints, 0);
                if (toolStripComboBox1.SelectedItem.ToString() == "Black")
                {
                    ThreDee.FillPath(Brushes.LightGray, objgpath);
                }
                else if (toolStripComboBox1.SelectedItem.ToString() == "Caramel")
                {
                    ThreDee.FillPath(Brushes.LightGoldenrodYellow, objgpath);
                }
                else
                {
                    ThreDee.FillPath(Brushes.AliceBlue, objgpath);
                }



                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourHundred));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Top + FourHundred));
                pt2 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Left + SixtyTwo), (float) (Rect.Bottom - TwoHundred));
                pt2 = new PointF((float) (Rect.Right - OneSixtyTwo), (float) (Rect.Bottom - TwoHundred));
                ThreDee.DrawLine(BlkPen, pt1, pt2);
                pt1 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - OneSixtyTwo), (float) (Rect.Bottom - TwoHundred));
                ThreDee.DrawLine(BlkPen, pt1, pt2);


                pt1 = new PointF((float) (Rect.Left + OneSixtyTwo), (float) (Rect.Top + OneFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);


                pt1 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Bottom - FourFifty));
                pt2 = new PointF((float) (Rect.Right - SixtyTwo), (float) (Rect.Top + OneFifty));
                ThreDee.DrawLine(BlkPen, pt1, pt2);


                //float ScreenLenth = Rect.Right;
                //float ScreenHeight = Rect.Bottom;
                //double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (OneSixtyTwo + (Rect.Left + SixtyTwo));
                //double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (FourHundred + TwoHundred);
                //double MaxVal = 0;
                ////Pts = new PointF[0];
                //PointF Ptsn1 = new PointF();
                //try
                //{
                //    pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                //    pt2 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Top + FourHundred));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //    pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                //    pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //    pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                //    pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //    pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Top + FourHundred));
                //    pt2 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //    pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Bottom - FourFifty));
                //    pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //    pt1 = new PointF((float)(Rect.Left + SixtyTwo), (float)(Rect.Bottom - TwoHundred));
                //    pt2 = new PointF((float)(Rect.Right - OneSixtyTwo), (float)(Rect.Bottom - TwoHundred));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);
                //    pt1 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                //    pt2 = new PointF((float)(Rect.Right - OneSixtyTwo), (float)(Rect.Bottom - TwoHundred));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);


                //    pt1 = new PointF((float)(Rect.Left + OneSixtyTwo), (float)(Rect.Top + OneFifty));
                //    pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Top + OneFifty));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);


                //    pt1 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Bottom - FourFifty));
                //    pt2 = new PointF((float)(Rect.Right - SixtyTwo), (float)(Rect.Top + OneFifty));
                //    ThreDee.DrawLine(BlkPen, pt1, pt2);

                DrawGrids(ThreDee);




                //if (CtrSelectedCraph == 0)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Red, (float)2), Pts, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);
                //if (CtrSelectedCraph == 1)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Blue, (float)2), Pts1, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Blue, (float).5), Pts1, (float)0);

                //if (CtrSelectedCraph == 2)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts2, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts2, (float)0);

                //if (CtrSelectedCraph == 3)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts3, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts3, (float)0);

                //if (CtrSelectedCraph == 4)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkSeaGreen, (float)2), Pts4, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkSeaGreen, (float).5), Pts4, (float)0);

                //if (CtrSelectedCraph == 5)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DeepPink, (float)2), Pts5, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DeepPink, (float).5), Pts5, (float)0);

                //if (CtrSelectedCraph == 6)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkOrange, (float)2), Pts6, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkOrange, (float).5), Pts6, (float)0);
                //if (CtrSelectedCraph == 7)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Maroon, (float)2), Pts7, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Maroon, (float).5), Pts7, (float)0);



                int i3DGrphCtr = 0;

                if (Pts != null)
                    if (CtrSelectedCraph == 0)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts,
                            (float) 0);

                i3DGrphCtr++;
                if (Pts1 != null)
                    if (CtrSelectedCraph == 1)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts1,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts1,
                            (float) 0);

                i3DGrphCtr++;

                if (Pts2 != null)
                    if (CtrSelectedCraph == 2)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts2,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts2,
                            (float) 0);

                i3DGrphCtr++;

                if (Pts3 != null)
                    if (CtrSelectedCraph == 3)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts3,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts3,
                            (float) 0);

                i3DGrphCtr++;

                if (Pts4 != null)
                    if (CtrSelectedCraph == 4)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts4,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts4,
                            (float) 0);

                i3DGrphCtr++;

                if (Pts5 != null)
                    if (CtrSelectedCraph == 5)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts5,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts5,
                            (float) 0);

                i3DGrphCtr++;

                if (Pts6 != null)
                    if (CtrSelectedCraph == 6)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts6,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts6,
                            (float) 0);

                i3DGrphCtr++;
                if (Pts7 != null)
                    if (CtrSelectedCraph == 7)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts7,
                            (float) 0);
                    }
                    else
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[i3DGrphCtr])), (float) .5), Pts7,
                            (float) 0);







                //if (CtrSelectedCraph == 0)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkRed, (float)2), Pts, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkRed, (float).5), Pts, (float)0);
                //if (CtrSelectedCraph == 1)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float)2), Pts1, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float).5), Pts1, (float)0);

                //if (CtrSelectedCraph == 2)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float)2), Pts2, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float).5), Pts2, (float)0);

                //if (CtrSelectedCraph == 3)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float)2), Pts3, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float).5), Pts3, (float)0);

                //if (CtrSelectedCraph == 4)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts4, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float).5), Pts4, (float)0);

                //if (CtrSelectedCraph == 5)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DimGray, (float)2), Pts5, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DimGray, (float).5), Pts5, (float)0);

                //if (CtrSelectedCraph == 6)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts6, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.Chocolate, (float).5), Pts6, (float)0);
                //if (CtrSelectedCraph == 7)
                //{
                //    ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float)2), Pts7, (float)0);
                //}
                //else
                //    ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float).5), Pts7, (float)0);


                SetDatesOfThreeDee(ThreDee);


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            Brush objBrsh = Brushes.Black;
            StringFormat objVerticle = new StringFormat(StringFormatFlags.DirectionVertical);
            string[] Text = lblGraphUnitY.Text.ToString()
                .Split(new string[] {":"}, StringSplitOptions.RemoveEmptyEntries);

            Font objFnt = new Font("Roman", 12, FontStyle.Bold);
            ThreDee.DrawString(Text[1], objFnt, objBrsh, Pts[0].X - 65, Pts[0].Y - 230, objVerticle);
            Text = lblGrphUnitX.Text.ToString().Split(new string[] {":"}, StringSplitOptions.RemoveEmptyEntries);
            ThreDee.DrawString(Text[1], objFnt, objBrsh, Pts[0].X + 230, Pts[0].Y + 20);




            GC.Collect();
            bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg");
            bmp.Dispose();
            GC.Collect();
        }

        Rectangle SS = new Rectangle();

        private void ThreeDeeSquareCursor()
        {

            Pen PenBlk = new Pen(Color.Black, 1);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);
            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) 1);
                PenBlksqr = new Pen(MainCursorColor, (float) 1);
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, 1);
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;
            //PointF[] Thdpt1 = new PointF[10];
            PointF PtStrt = new PointF();
            PointF PtEnd = new PointF();
            double MaxVal = 0;
            //Pts = new PointF[0];
            //PointF Pts1 = new PointF();
            int Msx = 0;
            int PrvMX = 0;
            SS = new Rectangle(new Point((int) Rect.Right / 2, (int) Rect.Bottom / 2), new Size(5, 5));

            try
            {

                //PtStrt = new PointF((float)(Rect.Left + (62) + (CursorStartInterval * ThrDCurCtr)), (float)(Rect.Bottom - 200));
                //Thdpt1[0] = PtStrt;
                if (SelectedGraph == 0)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts[ThrDCurCtr].X, (int)Pts[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts[ThrDCurCtr].X - 3, (int) Pts[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;
                    //tbCursor.Location = new Point((int)Pts[ThrDCurCtr].X,(int)Pts[ThrDCurCtr].Y);

                }
                else if (SelectedGraph == 1)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts1[ThrDCurCtr].X, (int)Pts1[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts1[ThrDCurCtr].X - 3, (int) Pts1[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;
                }
                else if (SelectedGraph == 2)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts2[ThrDCurCtr].X, (int)Pts2[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts2[ThrDCurCtr].X - 3, (int) Pts2[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;
                }
                else if (SelectedGraph == 3)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts3[ThrDCurCtr].X, (int)Pts3[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts3[ThrDCurCtr].X - 3, (int) Pts3[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;

                }
                else if (SelectedGraph == 4)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts4[ThrDCurCtr].X, (int)Pts4[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts4[ThrDCurCtr].X - 3, (int) Pts4[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;

                }
                else if (SelectedGraph == 5)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts5[ThrDCurCtr].X, (int)Pts5[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts5[ThrDCurCtr].X - 3, (int) Pts5[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;

                }
                else if (SelectedGraph == 6)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts6[ThrDCurCtr].X, (int)Pts6[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts6[ThrDCurCtr].X - 3, (int) Pts6[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;

                }
                else if (SelectedGraph == 7)
                {
                    ThreDee.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                    //PBCursor.Location = new Point((int)Pts7[ThrDCurCtr].X, (int)Pts7[ThrDCurCtr].Y);
                    SS = new Rectangle(new Point((int) Pts7[ThrDCurCtr].X - 3, (int) Pts7[ThrDCurCtr].Y - 5),
                        new Size(7, 7));
                    ThreDee.DrawRectangle(PenBlksqr, SS);
                    PrvSS = SS;

                }
                //PtEnd = new PointF((float)(Rect.Left + (62 + 100) + (CursorStartInterval * ThrDCurCtr)), (float)(Rect.Bottom - 450));
                //Thdpt1[9] = PtEnd;

                if (ThrDCurCtr != 0)
                {
                    //ThreDee.DrawLines(PenWht, Thdpt2);

                    ThreeDeeRedraw();

                }
                //ThreDee.DrawLines(PenBlk, Thdpt1);

                //Thdpt2 = Thdpt1;
                FillThreeDDataGrid(ThrDCurCtr, SelectedGraph);
                DrawGrids();
                //FwdBtnClked();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            //try
            //{
            //    Rectangle Clnt = ClientRectangle;
            //    int ClntTop = Clnt.Bottom;
            //    Rectangle PnlBnd = panel1.Bounds;
            //    int PnlTop = ClntTop - 10 - PnlBnd.Bottom;
            //    PrvsMsPstionX = MousePosition.X - expandableSplitter1.Location.X - 5;
            //    PrvsMsPstionY = MousePosition.Y - PnlTop;

            //    if (IsTrend)
            //    {
            //        //testing for rene
            //        //if (iclick < 2 && jclick < 2)
            //        //{
            //        //    Zoom = true;
            //        //}
            //        if (iclick < 2 && jclick < 2)
            //        {
            //            float testval = e.X - SixtyTwo;
            //            float XvalNow = (float)(testval / MainXAxisInterval);
            //            //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
            //            //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
            //            double vvv = Convert.ToDouble(XSelected[(int)XvalNow]);
            //            bool bdone = false;

            //            if (Channel1GraphToDraw)
            //            {

            //                for (int i = 0; i < dataGridView2.RowCount - 1; i++)
            //                {
            //                    string[] splitedval = dataGridView2[0, i].Value.ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);

            //                    double xxx = Convert.ToDouble(splitedval[0].ToString());
            //                    if (vvv <= xxx)
            //                    {
            //                        bdone = true;
            //                        int aa = 0;
            //                        aa = i - 1;
            //                        if (aa < 0)
            //                        {
            //                            aa = 0;
            //                        }
            //                        DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, aa);
            //                        dataGridView2_CellContentClick(null, fE);
            //                        break;
            //                    }

            //                }
            //                if (!bdone)
            //                {
            //                    DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, dataGridView2.RowCount - 2);
            //                    dataGridView2_CellContentClick(null, fE);

            //                }

            //            }
            //            else
            //            {
            //                for (int i = 0; i < dataGridViewX1.RowCount - 1; i++)
            //                {
            //                    string[] splitedval = dataGridViewX1[0, i].Value.ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);

            //                    double xxx = Convert.ToDouble(splitedval[0].ToString());
            //                    if (vvv <= xxx)
            //                    {
            //                        bdone = true;
            //                        int aa = 0;
            //                        aa = i - 1;
            //                        if (aa < 0)
            //                        {
            //                            aa = 0;
            //                        }
            //                        DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, aa);
            //                        dataGridViewX1_CellClick(null, fE);
            //                        break;
            //                    }

            //                }
            //                if (!bdone)
            //                {
            //                    DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, dataGridViewX1.RowCount - 2);
            //                    dataGridViewX1_CellClick(null, fE);
            //                }
            //            }
            //            bbGraphNext_ItemClick(null, null);
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //    ErrorLogFile(ex);
            //    //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            //}
        }

        private void panel1_MouseUp(object sender, MouseEventArgs e)
        {
            //try
            //{
            //    if (PrvsMsPstionX != MousePosition.X)
            //    {
            //        if (Zoom == true)
            //        {
            //            Rectangle PnlBnd = panel1.Bounds;
            //            int NewPtCtr = 0;
            //            float PrvsVal = 0;
            //            float LstVal = 0;
            //            PtsForZoom = new PointF[0];

            //            double[] PrvsValue = new double[1];
            //            double[] LstValue = new double[1];
            //            LastMsPstionX = MousePosition.X;
            //            if (LastMsPstionX - expandableSplitter1.Location.X - 10 > PnlBnd.Right - OneSixtyTwo)
            //            {
            //                LastMsPstionX = (int)(PnlBnd.Right - OneSixtyTwo - 1);
            //            }
            //            if (ZommArrCtr == 0)
            //            {
            //                PrvsVal = PrvsMsPstionX - SixtyTwo;
            //                PrvsValIndex = (float)(PrvsVal / MainXAxisInterval);

            //                LstVal = LastMsPstionX - SixtyTwo - expandableSplitter1.Location.X - 10;
            //                LstValIndex = (float)(LstVal / MainXAxisInterval);
            //                ZommedX = new double[XSelected.Length];
            //                ZommedX = XSelected;
            //                ZoomedY = new double[XSelected.Length];
            //                ZoomedY = YSelected;
            //            }
            //            else if (YZoom.Length != 0)
            //            {
            //                PrvsVal = PrvsMsPstionX - SixtyTwo;
            //                PrvsValIndex = (float)(PrvsVal / MainXAxisIntervalZoom);

            //                LstVal = LastMsPstionX - OneSixtyTwo - expandableSplitter1.Location.X - 10;//sixtytwo
            //                LstValIndex = (float)(LstVal / MainXAxisIntervalZoom);
            //                ZommedX = new double[XZoom.Length];
            //                ZommedX = XZoom;
            //                ZoomedY = new double[XZoom.Length];
            //                ZoomedY = YZoom;
            //            }
            //            //XZoom = new double[0];
            //            //YZoom = new double[0];

            //            //if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
            //            //{
            //            //    if (iclick < 2 && jclick < 2)
            //            //    {
            //            //        int repXVal = 0;
            //            //        int arrlength = (int)LstValIndex - (int)PrvsValIndex + 1;
            //            //        for (int i1 = (int)PrvsValIndex; i1 <= (int)LstValIndex; i1++)
            //            //        {
            //            //           // float testval = i1;
            //            //            float XvalNow = i1;// (float)(testval / MainXAxisInterval);
            //            //            //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
            //            //            //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
            //            //            if (repXVal != (int)XvalNow)
            //            //            {
            //            //                repXVal = (int)XvalNow;
            //            //                double vvv = Convert.ToDouble(XSelected[(int)XvalNow]);
            //            //                bool bdone = false;

            //            //                if (Channel1GraphToDraw)
            //            //                {

            //            //                    for (int i = 0; i < dataGridView2.RowCount - 1; i++)
            //            //                    {
            //            //                        string[] splitedval = dataGridView2[0, i].Value.ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);

            //            //                        double xxx = Convert.ToDouble(splitedval[0].ToString());
            //            //                        if (vvv <= xxx)
            //            //                        {
            //            //                            bdone = true;
            //            //                            int aa = 0;
            //            //                            aa = i - 1;
            //            //                            if (aa < 0)
            //            //                            {
            //            //                                aa = 0;
            //            //                            }
            //            //                            DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, aa);
            //            //                            dataGridView2_CellContentClick(null, fE);
            //            //                            break;
            //            //                        }

            //            //                    }
            //            //                    if (!bdone)
            //            //                    {
            //            //                        DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, dataGridView2.RowCount - 2);
            //            //                        dataGridView2_CellContentClick(null, fE);

            //            //                    }

            //            //                }
            //            //                else
            //            //                {
            //            //                    for (int i = 0; i < dataGridViewX1.RowCount - 1; i++)
            //            //                    {
            //            //                        string[] splitedval = dataGridViewX1[0, i].Value.ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);

            //            //                        double xxx = Convert.ToDouble(splitedval[0].ToString());
            //            //                        if (vvv <= xxx)
            //            //                        {
            //            //                            bdone = true;
            //            //                            int aa = 0;
            //            //                            aa = i - 1;
            //            //                            if (aa < 0)
            //            //                            {
            //            //                                aa = 0;
            //            //                            }
            //            //                            DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, aa);
            //            //                            dataGridViewX1_CellClick(null, fE);
            //            //                            break;
            //            //                        }

            //            //                    }
            //            //                    if (!bdone)
            //            //                    {
            //            //                        DataGridViewCellEventArgs fE = new DataGridViewCellEventArgs(3, dataGridViewX1.RowCount - 2);
            //            //                        dataGridViewX1_CellClick(null, fE);
            //            //                    }
            //            //                }
            //            //                bbGraphNext_ItemClick(null, null);
            //            //            }
            //            //        }
            //            //    }
            //            //}
            //            //else
            //            {
            //                for (int i = (int)PrvsValIndex; i <= (int)LstValIndex; i++)
            //                {
            //                    if (i == (int)PrvsValIndex)
            //                    {
            //                        int arrlength = (int)LstValIndex - (int)PrvsValIndex + 1;
            //                        XZoom = new double[arrlength];
            //                        YZoom = new double[arrlength];
            //                    }
            //                    //Array.Resize(ref PtsForZoom, PtsForZoom.Length + 1);
            //                    //PtsForZoom[ZommArrCtr] = PtsZoomedVals[i];

            //                    //Array.Resize(ref XZoom, XZoom.Length + 1);
            //                    XZoom[NewPtCtr] = Convert.ToDouble(ZommedX[(int)i]);
            //                    //Array.Resize(ref YZoom, YZoom.Length + 1);
            //                    YZoom[NewPtCtr] = Convert.ToDouble(ZoomedY[(int)i]);
            //                    NewPtCtr++;

            //                }
            //                if (YZoom.Length != 0)
            //                {
            //                    //if (XZoom.Length > 1 && YZoom.Length > 1)
            //                    //{
            //                    InitializeZoom();
            //                    ZommArrCtr++;
            //                }

            //                //GraphZoomedAlready = true;
            //                //ZommArrCtr++;
            //                //ZoomTimes++;
            //                //}
            //                //else
            //                //{

            //                //    if (ZoomTimes == 0)
            //                //    {
            //                //        if (GraphType == "FFT")
            //                //        {
            //                //            redraw();
            //                //        }
            //                //        else
            //                //        {
            //                //            ThreeDeeRedraw();
            //                //        }
            //                //        GraphZoomedAlready = false;
            //                //        //ZommArrCtr = 0;
            //                //    }
            //                //    else if (PtsZoomedVals != null)
            //                //    {

            //                //        redrawZoom();
            //                //        GraphZoomedAlready = true;
            //                //    }
            //                //    else
            //                //    {
            //                //        if (GraphType == "FFT")
            //                //        {
            //                //            redraw();
            //                //        }
            //                //        else
            //                //        {
            //                //            ThreeDeeRedraw();
            //                //        }
            //                //        GraphZoomedAlready = false;
            //                //        //ZommArrCtr = 0;

            //                //    }
            //                //}

            //                GraphZoomedAlready = true;
            //                //ZommArrCtr++;
            //                ZoomTimes++;
            //            }
            //        }
            //        else
            //        {

            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //    ErrorLogFile(ex);
            //    //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            //}
        }

        private int ZoomTimes = 0;


        //private void panel1_MouseMove(object sender, MouseEventArgs e)
        //{
        //    try
        //    {
        //        MouseButtons aa = MouseButtons;
        //        if (Zoom == false)
        //        {
        //            if (aa == MouseButtons.Left)
        //            {
        //                panel1.Cursor = Cursors.Hand;
        //                if (CursorRefresh > 0)
        //                {
        //                    if (!ExtraZoom)
        //                    {
        //                        panel1.Refresh();
        //                        if (GraphType == "FFT")
        //                            redraw();
        //                        else if (GraphType == "Orbit")
        //                            redrawOrbit();
        //                        else
        //                            ThreeDeeRedraw();

        //                    }
        //                }
        //                if (SingleCrs == true)
        //                {
        //                    if (GraphZoomedAlready == false)
        //                    {
        //                        SingleLineCursorTwoD(e);
        //                    }
        //                    else if (GraphZoomedAlready == true)
        //                    {

        //                        SingleLineCursorTwoDForZoomed(e);
        //                    }
        //                }
        //                else if (HarmncCrs == true)
        //                {
        //                    HarmonicCursor(e);

        //                }

        //                else if (SideBndCsr == true)
        //                {
        //                    SideBandCursorTwoD(e);
        //                }
        //                else if (SideBndCsrRatio == true)
        //                {
        //                    SideBandRatioCursorTwoD(e);
        //                }
        //                else if (SideBandTrndDrw == true)
        //                {
        //                    SideBandTrendDraw(e);
        //                }
        //                else if (PeekCursor)
        //                {
        //                    PeekCursorForAll(e);
        //                }

        //                else if (TwDSingleSqrCrs == true)
        //                {
        //                    if (GraphType != "Orbit")
        //                    {
        //                        if (GraphZoomedAlready == false)
        //                        {
        //                            TwoDCursorLineWithSqure(e);
        //                        }
        //                        else if (GraphZoomedAlready == true)
        //                        {
        //                            TwoDCursorLineWithSqureForZoomed(e);
        //                        }
        //                    }
        //                }
        //                else if (TwoDCrossHairCursor == true)
        //                {
        //                    if (GraphZoomedAlready == false)
        //                    {
        //                        CrsorCrossHair(e);
        //                    }
        //                    else if (GraphZoomedAlready == true)
        //                    {
        //                        CrsorCrossHairForZoomed(e);
        //                    }
        //                }
        //                else if (MultipleCrsr == true)
        //                {
        //                    MultipleLineCursorTwoD(e);
        //                }
        //                CursorRefresh = 0;
        //                TrgtMinus = false;
        //            }
        //            else
        //            {
        //                panel1.Cursor = Cursors.Default;
        //            }

        //        }
        //        else if (Zoom == true)
        //        {
        //            if (aa == MouseButtons.Left)
        //            {
        //                Rectangle Clnt = ClientRectangle;
        //                int ClntTop = Clnt.Bottom;
        //                Rectangle PnlBnd = panel1.Bounds;
        //                int PnlTop = ClntTop - 10 - PnlBnd.Bottom;
        //                Region rgn1 = new Region(panel1.Bounds);
        //                System.Drawing.Graphics der = panel1.CreateGraphics();
        //                der.Clip = rgn1;

        //                Pen PenBlkB = new Pen(Color.Black, 1);
        //                PenBlkB.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
        //                //Pen PenRed = new Pen(Color.Red, 1);
        //                //RectangleF pt = der.ClipBounds;
        //                //PointF pt1 = new PointF();
        //                //PointF pt2 = new PointF();

        //                //if (MousePosition.X <= PnlBnd.Right - OneSixtyTwo - 1)//&& MousePosition.Y <= PnlBnd.Bottom - Fifty-1
        //                //{
        //                if (PrvsMsPstionX == expandableSplitter1.Location.X - 10 && PrvsMsPstionY == 0)
        //                {

        //                    PrvsMsPstionX = MousePosition.X;
        //                    PrvsMsPstionY = MousePosition.Y;
        //                }
        //                if (Zoom == true)
        //                {
        //                    if (MousePosition.X - expandableSplitter1.Location.X - 10 > PnlBnd.Right - OneSixtyTwo)
        //                    {
        //                        der.DrawRectangle(new Pen(panel1.BackColor, 1), PrvsSS);
        //                        Rectangle SS = new Rectangle(new Point((int)PrvsMsPstionX, (int)PrvsMsPstionY), new Size((int)(PnlBnd.Right - OneSixtyTwo - PrvsMsPstionX), (int)((MousePosition.Y - PnlTop) - PrvsMsPstionY)));
        //                        der.DrawRectangle(PenBlkB, SS);
        //                        PrvsSS = SS;
        //                    }
        //                    else
        //                    {

        //                        der.DrawRectangle(new Pen(panel1.BackColor, 1), PrvsSS);
        //                        Rectangle SS = new Rectangle(new Point((int)PrvsMsPstionX, (int)PrvsMsPstionY), new Size((int)(MousePosition.X - PrvsMsPstionX - expandableSplitter1.Location.X - 10), (int)((MousePosition.Y - PnlTop) - PrvsMsPstionY)));
        //                        der.DrawRectangle(PenBlkB, SS);
        //                        PrvsSS = SS;
        //                    }
        //                }
        //                if (ZoomTimes == 0)
        //                {
        //                    if (GraphType == "FFT")
        //                    {
        //                        redraw();
        //                    }
        //                    else
        //                    {
        //                        ThreeDeeRedraw();
        //                    }
        //                }
        //                redrawZoom();
        //                //}
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //}
        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                MouseButtons aa = MouseButtons;
                if (Zoom == false)
                {
                    if (aa == MouseButtons.Left)
                    {
                        //panel1.Cursor = Cursors.Hand;
                        if (CursorRefresh > 0)
                        {
                            if (!ExtraZoom)
                            {
                                panel1.Refresh();
                                if (GraphType == "FFT")
                                    redraw();
                                else if (GraphType == "Orbit")
                                    redrawOrbit();
                                else if (GraphType == "SCL")
                                {
                                    redrawSCL();
                                }
                                // DA_7   code related    minor    Amit Jain  30-03-2010

                                else if (GraphType == "Octave")
                                {
                                    RedrawOctave();
                                }
                                else
                                    ThreeDeeRedraw();

                            }
                        }

                        if (SingleCrs == true)
                        {
                            if (GraphZoomedAlready == false)
                            {
                                SingleLineCursorTwoD(e);
                            }
                            else if (GraphZoomedAlready == true)
                            {

                                SingleLineCursorTwoDForZoomed(e);
                            }
                        }
                        else if (HarmncCrs == true)
                        {
                            HarmonicCursor(e);

                        }
                        else if (SideBndCsr == true)
                        {
                            SideBandCursorTwoD(e);
                        }
                        else if (SideBndCsrRatio == true)
                        {
                            SideBandRatioCursorTwoD(e);
                        }
                        else if (SideBandTrndDrw == true)
                        {
                            SideBandTrendDraw(e);
                        }
                        else if (PeekCursor)
                        {
                            PeekCursorForAll(e);
                        }

                        else if (TwDSingleSqrCrs == true)
                        {
                            if (GraphType != "Orbit")
                            {
                                if (GraphZoomedAlready == false)
                                {
                                    if (GraphType == "Octave")
                                    {
                                        TwoDCursorLineWithSqureoctave(e);
                                    }
                                    else
                                    {
                                        TwoDCursorLineWithSqure(e);
                                    }
                                }
                                else if (GraphZoomedAlready == true)
                                {
                                    if (GraphType == "Octave")
                                    {
                                    }
                                    else
                                    {
                                        TwoDCursorLineWithSqureForZoomed(e);
                                    }
                                }
                            }
                        }
                        else if (TwoDCrossHairCursor == true)
                        {
                            if (GraphZoomedAlready == false)
                            {
                                CrsorCrossHair(e);
                            }
                            else if (GraphZoomedAlready == true)
                            {
                                CrsorCrossHairForZoomed(e);
                            }
                        }
                        else if (MultipleCrsr == true)
                        {
                            MultipleLineCursorTwoD(e);
                        }
                        //Amit Jain    DA_28	if select sidebandTrend then select the cursor ,cursor is not moving	code related	minor 	2-4-2010
                        else if (SelectBandTrend == true)
                        {

                            SelectBand(e);
                        }

                        if (chkBFFOverride.Checked)
                        {
                            SelectValueForOverride(e);
                        }

                        CursorRefresh = 0;
                        TrgtMinus = false;
                    }
                    else
                    {
                        panel1.Cursor = Cursors.Default;
                    }

                }
                else if (Zoom == true)
                {
                    if (aa == MouseButtons.Left)
                    {
                        Rectangle Clnt = ClientRectangle;
                        int ClntTop = Clnt.Bottom;
                        Rectangle PnlBnd = panel1.Bounds;
                        int PnlTop = ClntTop - 10 - PnlBnd.Bottom;
                        Region rgn1 = new Region(panel1.Bounds);
                        System.Drawing.Graphics der = panel1.CreateGraphics();
                        der.Clip = rgn1;

                        Pen PenBlkB = new Pen(Color.Black, 1);
                        PenBlkB.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        //Pen PenRed = new Pen(Color.Red, 1);
                        //RectangleF pt = der.ClipBounds;
                        //PointF pt1 = new PointF();
                        //PointF pt2 = new PointF();

                        //if (MousePosition.X <= PnlBnd.Right - OneSixtyTwo - 1)//&& MousePosition.Y <= PnlBnd.Bottom - Fifty-1
                        //{
                        if (PrvsMsPstionX == 0 && PrvsMsPstionY == 0)
                        {

                            PrvsMsPstionX = MousePosition.X;
                            PrvsMsPstionY = MousePosition.Y;
                        }

                        if (Zoom == true)
                        {
                            if (MousePosition.X - expandableSplitter1.Location.X - 5 > PnlBnd.Right - OneSixtyTwo)
                            {
                                der.DrawRectangle(new Pen(panel1.BackColor, 1), PrvsSS);
                                SS = new Rectangle(new Point((int) PrvsMsPstionX, (int) PrvsMsPstionY),
                                    new Size((int) (PnlBnd.Right - OneSixtyTwo - 5 - PrvsMsPstionX),
                                        (int) ((MousePosition.Y - PnlTop) - PrvsMsPstionY)));
                                der.DrawRectangle(PenBlkB, SS);
                                PrvsSS = SS;
                            }
                            else
                            {

                                der.DrawRectangle(new Pen(panel1.BackColor, 1), PrvsSS);
                                SS = new Rectangle(new Point((int) PrvsMsPstionX, (int) PrvsMsPstionY),
                                    new Size(
                                        (int) (MousePosition.X - expandableSplitter1.Location.X - 5 - PrvsMsPstionX),
                                        (int) ((MousePosition.Y - PnlTop) - PrvsMsPstionY)));
                                der.DrawRectangle(PenBlkB, SS);
                                PrvsSS = SS;
                            }
                        }

                        if (ZoomTimes == 0)
                        {
                            if (GraphType == "FFT")
                            {
                                redraw();
                            }
                            else
                            {
                                ThreeDeeRedraw();
                            }
                        }

                        redrawZoom();
                        //}
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void TwoDCursorLineWithSqureoctave(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenBlksqr = new Pen(Color.Black, (float) 1);

            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
                PenBlksqr = new Pen(MainCursorColor, (float) 1);
                //PenBlksqr = PenBlk;
            }



            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            PointF Prv1 = new PointF();
            PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            SS = new Rectangle(new Point((int) Rgn.Right / 2, (int) Rgn.Bottom / 2), new Size(5, 5));

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {
                        Line.DrawLines(PenWht, arrLocts);

                        Line.DrawRectangle(new Pen(panel1.BackColor, 2), PrvSS);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        //if (PrvsValX != 0)
                        //{
                        //    redrawNew(PrvsValX);
                        //}
                        XVala[0] = Convert.ToDouble(XSelected[(int) Math.Round(XvalNow)]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) Math.Round(XvalNow)]);
                        FillDatagrid(XVala, YVala);
                        PrvsValX = XvalNow;
                        //panel1.Refresh();
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        SS = new Rectangle(
                            new Point((int) Pts[(int) Math.Round(XvalNow)].X - 3,
                                (int) Pts[(int) Math.Round(XvalNow)].Y - 5), new Size(7, 7));
                        Line.DrawRectangle(PenBlksqr, SS);
                        PrvSS = SS;
                        ThrDCurCtr = Convert.ToInt32(XvalNow);
                        RedrawOctave();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void SelectBand(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        objTrend.FreqVal = XVala[0].ToString();
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;

                        //}
                        //redraw();
                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void SelectValueForOverride(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;

            try
            {

                Msx = (float) e.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);

                        OverriddenRPM = (double) XVala[0];
                        if (!lblGrphUnitX.Text.Contains("CPM"))
                        {
                            OverriddenRPM = OverriddenRPM * 60;
                        }

                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                            }
                            else
                                redraw();

                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        Prv1 = pt1;
                        Prv2 = pt2;

                        if (AreaPlot == true)
                        {
                            FFTAreaPlot();
                        }

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void redrawSCL()
        {
            Region rgn1 = new Region(panel1.Bounds);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 1);
            Pen PenRed = new Pen(Color.Red, 2);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, (float) .5);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            PointF Ptsn1 = new PointF();
            PointF[] DegreePts = null;
            PointF[] directionPTS = new PointF[0];
            Brush objBrush = Brushes.Black;
            try
            {
                // ////// Y axis
                //double dYTopX = (double)(((double)panel1.Right - (double)panel1.Left) / 2);
                //double dYTopY = (double)panel1.Top;

                //double dYBottomX = (double)(((double)panel1.Right - (double)panel1.Left) / 2);
                //double dYBottomY = (double)panel1.Bottom;

                // //////// X axis
                //double dXLeftX = (double)panel1.Left;
                //double dXLeftY = (double)(((double)panel1.Bottom - (double)panel1.Top) / 2);

                //double dXRightX = (double)panel1.Right;
                //double dXRightY = (double)(((double)panel1.Bottom - (double)panel1.Top) / 2);

                // ///////// Forward Diagnol
                //double dXTopRightX = (double)panel1.Right;
                //double dXTopRightY = (double)panel1.Top;

                //double dXBottomLeftX = (double)panel1.Left;
                //double dXBottomLeftY = (double)panel1.Bottom;

                // ////////// backward diagnol
                //double dYTopLeftX = (double)panel1.Left;
                //double dYTopLeftY = (double)panel1.Top;

                //double dYBottomRightX = (double)panel1.Right;
                //double dYBottomRightY = (double)panel1.Bottom;
                SetAxis();
                ////// Y axis
                double dYTopX = (double) (((double) panel1.Right) / 2);
                double dYTopY = (double) panel1.Top + OneFifty;

                double dYBottomX = (double) (((double) panel1.Right) / 2);
                double dYBottomY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                double TotalYAxis =
                    Math.Sqrt((double) (((double) (dYTopX - dYBottomX) * (double) (dYTopX - dYBottomX)) +
                                        ((double) (dYTopY - dYBottomY) * (double) (dYTopY - dYBottomY))));

                //////// X axis
                double dXLeftX = (double) (pt.Right - TotalYAxis) / 2; //(double)panel1.Left + dYTopX/2+SixtyTwo;
                double dXLeftY = (double) (((double) panel1.Bottom - ((double) panel1.Bottom / 10) -
                                            (double) panel1.Top + OneFifty) / 2);

                double dXRightX = dXLeftX + TotalYAxis;
                double dXRightY = (double) (((double) panel1.Bottom - ((double) panel1.Bottom / 10) -
                                             (double) panel1.Top + OneFifty) / 2);


                double TotalXAxis =
                    Math.Sqrt((double) (((double) (dXLeftX - dXRightX) * (double) (dXLeftX - dXRightX)) +
                                        ((double) (dXLeftY - dXRightY) * (double) (dXLeftY - dXRightY))));

                ///////// Forward Diagnol
                double dXTopRightX = (double) dXRightX;
                double dXTopRightY = (double) panel1.Top + OneFifty;

                double dXBottomLeftX = (double) dXLeftX;
                double dXBottomLeftY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                ////////// backward diagnol
                double dYTopLeftX = (double) dXLeftX;
                double dYTopLeftY = (double) panel1.Top + OneFifty;

                double dYBottomRightX = (double) dXRightX;
                double dYBottomRightY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                ////Draw All Axis

                //Y Axis
                pt1 = new Point((int) dYTopX, (int) dYTopY);
                pt2 = new Point((int) dYBottomX, (int) dYBottomY);
                der.DrawLine(PenBlkB, pt1, pt2);

                //X Axis
                pt1 = new Point((int) dXLeftX, (int) dXLeftY);
                pt2 = new Point((int) dXRightX, (int) dXRightY);
                der.DrawLine(PenBlkB, pt1, pt2);

                //Forward Diagnol
                pt1 = new Point((int) dXTopRightX, (int) dXTopRightY);
                pt2 = new Point((int) dXBottomLeftX, (int) dXBottomLeftY);
                der.DrawLine(BlkDash, pt1, pt2); //BlkDash

                //backward diagnol
                pt1 = new Point((int) dYTopLeftX, (int) dYTopLeftY);
                pt2 = new Point((int) dYBottomRightX, (int) dYBottomRightY);
                der.DrawLine(BlkDash, pt1, pt2); //BlkDash


                //Draw X Probe
                PointF[] temppointf = new PointF[4];
                pt1 = new Point((int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 135))) + dXTopRightX),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 135))) +
                           dXTopRightY)); //pt1 = new Point((int)dXTopRightX - 1, (int)dXTopRightY - 2);
                pt2 = new Point((int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 270))) + dXTopRightX),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 270))) +
                           dXTopRightY)); //new Point((int)dXTopRightX + 2, (int)dXTopRightY + 1);
                der.DrawLine(BlkDash, pt1, pt2);

                temppointf[0] = pt1;
                temppointf[1] = pt2;

                //pt1 = new Point((int)dXTopRightX - 1, (int)dXTopRightY - 2);
                //pt2 = new Point((int)dXTopRightX + 5, (int)dXTopRightY - 10);
                //der.DrawLine(BlkDash, pt1, pt2);

                //pt1 = new Point((int)dXTopRightX + 2, (int)dXTopRightY + 1);
                //pt2 = new Point((int)dXTopRightX + 8, (int)dXTopRightY - 7);
                //der.DrawLine(BlkDash, pt1, pt2);

                pt1 = new Point(
                    (int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 135))) + dXTopRightX + TotalXAxis / 20),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 135))) + dXTopRightY -
                           TotalXAxis / 20)); //pt1 = new Point((int)dXTopRightX - 1, (int)dXTopRightY - 2);
                pt2 = new Point(
                    (int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 270))) + dXTopRightX + TotalXAxis / 20),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 270))) + dXTopRightY -
                           TotalXAxis / 20)); //new Point((int)dXTopRightX + 2, (int)dXTopRightY + 1);

                //pt1 = new Point((int)dXTopRightX + 5, (int)dXTopRightY - 10);
                //pt2 = new Point((int)dXTopRightX + 8, (int)dXTopRightY - 7);
                der.DrawLine(BlkDash, pt1, pt2);

                temppointf[3] = pt1;
                temppointf[2] = pt2;


                der.FillPolygon(objBrush, temppointf);
                temppointf = new PointF[5];
                temppointf[0] = pt2;
                temppointf[1] = new PointF(pt2.X + 5, pt2.Y + 3);
                temppointf[2] = new PointF(pt2.X + 10, pt2.Y);
                temppointf[3] = new PointF(pt2.X + 15, pt2.Y - 3);
                temppointf[4] = new PointF(pt2.X + 20, pt2.Y - 10);
                der.DrawCurve(PenBlkB, temppointf);

                //Draw Y Probe+
                temppointf = new PointF[4];
                //pt1 = new Point((int)dYTopLeftX + 1, (int)dYTopLeftY - 2);
                //pt2 = new Point((int)dYTopLeftX - 2, (int)dYTopLeftY + 1);
                pt1 = new Point((int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 45))) + dYTopLeftX),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 45))) +
                           dYTopLeftY)); //pt1 = new Point((int)dXTopRightX - 1, (int)dXTopRightY - 2);
                pt2 = new Point((int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 225))) + dYTopLeftX),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 225))) +
                           dYTopLeftY)); //new Point((int)dXTopRightX + 2, (int)dXTopRightY + 1);

                der.DrawLine(BlkDash, pt1, pt2);

                temppointf[0] = pt1;
                temppointf[1] = pt2;

                //pt1 = new Point((int)dYTopLeftX + 1, (int)dYTopLeftY - 2);
                //pt2 = new Point((int)dYTopLeftX - 5, (int)dYTopLeftY - 10);
                //der.DrawLine(BlkDash, pt1, pt2);

                //pt2 = new Point((int)dYTopLeftX - 2, (int)dYTopLeftY + 1);
                //pt2 = new Point((int)dYTopLeftX - 8, (int)dYTopLeftY - 7);
                //der.DrawLine(BlkDash, pt1, pt2);

                //pt1 = new Point((int)dYTopLeftX - 5, (int)dYTopLeftY - 10);
                //pt2 = new Point((int)dYTopLeftX - 8, (int)dYTopLeftY - 7);
                pt1 = new Point(
                    (int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 45))) + dYTopLeftX - TotalXAxis / 20),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 45))) + dYTopLeftY -
                           TotalXAxis / 20)); //pt1 = new Point((int)dXTopRightX - 1, (int)dXTopRightY - 2);
                pt2 = new Point(
                    (int) ((double) (5 * Math.Cos(0.0174532925 * (360 - 225))) + dYTopLeftX - TotalXAxis / 20),
                    (int) ((double) (5 * Math.Sin(0.0174532925 * (360 - 225))) + dYTopLeftY -
                           TotalXAxis / 20)); //new Point((int)dXTopRightX + 2, (int)dXTopRightY + 1);

                der.DrawLine(BlkDash, pt1, pt2);

                temppointf[3] = pt1;
                temppointf[2] = pt2;


                der.FillPolygon(objBrush, temppointf);

                temppointf = new PointF[5];
                temppointf[0] = pt2;
                temppointf[1] = new PointF(pt2.X - 5, pt2.Y + 3);
                temppointf[2] = new PointF(pt2.X - 10, pt2.Y);
                temppointf[3] = new PointF(pt2.X - 15, pt2.Y - 3);
                temppointf[4] = new PointF(pt2.X - 20, pt2.Y - 10);
                der.DrawCurve(PenBlkB, temppointf);

                der.DrawArc(PenBlkB, (float) dYTopLeftX, (float) dYTopLeftY, (float) TotalXAxis, (float) TotalYAxis, 0,
                    360);
                //der.DrawArc(PenBlkB, (float)pt.X / 2, (float)pt.Y / 2, (float)pt.Width / 2, (float)pt.Height / 2, 0, 360);
                double rad = (double) (TotalXAxis / 4);
                double rad1 = (double) (TotalXAxis / 2);
                DegreePts = new PointF[0];
                Font objFont = new Font("Roman", 10, FontStyle.Bold);

                Brush objBrushRed = Brushes.Red;
                for (int i = 0; i < 361; i++)
                {

                    //Array.Resize(ref DegreePts, DegreePts.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref DegreePts, 1);
                    double X = (double) (rad * Math.Cos(0.0174532925 * (360 - i))) + (double) (pt.Right / 2);
                    double Y = (double) (rad * Math.Sin(0.0174532925 * (360 - i))) +
                               (double) ((panel1.Bottom + OneFifty - ((double) panel1.Bottom / 10)) / 2);

                    Ptsn1 = new PointF((float) X, (float) Y);

                    if (i == 0 || i == 45 || i == 90 || i == 135 || i == 180 || i == 225 || i == 270 || i == 315)
                    {
                        int degree = i + 90;
                        if (degree >= 360)
                        {
                            degree = degree - 360;
                        }

                        der.DrawString(degree.ToString(), objFont, objBrush,
                            (float) ((double) ((rad1 + (rad) / 4) * Math.Cos(0.0174532925 * (360 - i))) +
                                     (double) (pt.Right / 2)),
                            (float) ((double) ((rad1 + (rad) / 5) * Math.Sin(0.0174532925 * (360 - i))) +
                                     (double) ((panel1.Bottom + OneFifty - ((double) panel1.Bottom / 10)) /
                                               2))); //+ "º"
                    }

                    if (i > 70 && i < 110)
                    {
                        //Array.Resize(ref directionPTS, directionPTS.Length + 1);
                        _ResizeArray.IncreaseArrayPointF(ref directionPTS, 1);
                        X = (double) ((rad1 + (rad * 2) / 4) * Math.Cos(0.0174532925 * (360 - i))) +
                            (double) (pt.Right / 2);
                        Y = (double) ((rad1 + (rad * 2) / 4) * Math.Sin(0.0174532925 * (360 - i))) +
                            (double) ((panel1.Bottom + OneFifty) / 2);

                        directionPTS[directionPTS.Length - 1] = new PointF((float) X, (float) Y);
                        if (i == 109)
                        {
                            der.DrawLine(BlkDash, (float) X, (float) Y, (float) X + 5, (float) Y - 10); //BlkDash
                            der.DrawLine(BlkDash, (float) X, (float) Y, (float) X + 10, (float) Y + 5); //BlkDash
                        }
                    }

                    DegreePts[i] = Ptsn1;
                }

                der.DrawCurve(BlkDash, DegreePts, (float) 0);

                der.DrawCurve(BlkDash, directionPTS, (float) 0);


                der.DrawCurve(PenRed, Pts, (float) 0);
                for (int i = 0; i < Pts.Length; i++)
                {
                    der.DrawString(
                        "X= " + Math.Round(XData[i], 3).ToString() + " Y=" + Math.Round(YData[i], 3).ToString(),
                        objFont, objBrushRed, Pts[i]);
                    der.FillRectangle(objBrush, Pts[i].X - 2, Pts[i].Y - 2, 4, 4);
                }

                SetAxisMarks(XData, YData);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        double[] XData = null;
        double[] YData = null;

        public void GenerateShaftCenterChange(double[] YAxis1, double[] YAxis2)
        {
            //OrbitXAxis = YAxis1;
            //OrbitYAxis = YAxis2;
            //splitContainerControl1.Panel1.Refresh();
            //DirectionComboEnabled = IsAxisCombo;
            //ButtonTrendEnabled = IsAxisCombo;
            //string SelectedCursorItem = cmbCurSors.Items[0].ToString();
            //CmbCursorSelectedItem(SelectedCursorItem);
            //ribbonControl1.SelectedPage = rpGraph; 
            //tpManagers.SelectedTabPage = tpGraph;
            //SetAxis();
            //bool TimeData = false;
            //Region rgn1 = new Region(panel1.Bounds);
            //System.Drawing.Graphics der = panel1.CreateGraphics();
            //der.Clip = rgn1;
            //Pen PenBlkB = new Pen(Color.Black, 2);
            //Pen PenRed = new Pen(Color.Red, 1);
            //RectangleF pt = der.ClipBounds;
            //TimeData = CheckForTimeData(y);
            ////double dTotalYAxis = 0.0;
            ////double dTotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            ////dTotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);

            ////double TotalXAxis = Math.Sqrt((dTotalXAxis * dTotalXAxis) + (dTotalYAxis * dTotalYAxis));
            ////double TotalYAxis = TotalXAxis;
            //double TotalYAxis = 0.0;
            //double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            //TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);


            //Pen BlkDash = new Pen(Color.Black, 2);
            //BlkDash.DashCap = DashCap.Triangle;
            //BlkDash.DashStyle = DashStyle.Dash;
            //Point pt1 = new Point();
            //Point pt2 = new Point();

            //PointF Ptsn1 = new PointF();

            //double MaxVal = 0;
            //double MaxVal2 = 0;
            //TimeDataAckForZoom = TimeData;
            //double HighestValYAxis1 = 0.0;
            //double HighestValYAxis2 = 0.0;
            //double MainYAxisInterval1 = 0;
            //double MainYAxisInterval2 = 0;
            //double MainXAxisInterval1 = 0.0;
            //double MainXAxisInterval2 = 0.0;
            //double CursorStartInterval1 = 0.0;
            //double CursorStartInterval2 = 0.0;
            //GraphType = "SCL";
            //try
            //{


            //    pt1 = new Point((int)(pt.Left + SixtyTwo + TotalXAxis / 2), (int)(pt.Bottom - (Fifty)));//TwoHundred
            //    pt2 = new Point((int)(pt.Left + SixtyTwo + TotalXAxis / 2), (int)(pt.Top + OneFifty));//FourHundred
            //    der.DrawLine(PenBlkB, pt1, pt2);
            //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
            //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
            //    der.DrawLine(PenBlkB, pt1, pt2);
            //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
            //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
            //   // der.DrawLine(BlkDash, pt1, pt2);//BlkDash

            //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));
            //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Top + OneFifty));
            //    der.DrawLine(BlkDash, pt1, pt2);//BlkDash


            //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));
            //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));
            //    der.DrawLine(BlkDash, pt1, pt2);



            //    Pts = new PointF[0];
            //    MaxVal = findHighestValue(YAxis1);
            //    MaxVal2 = findHighestValue(YAxis2);
            //    HighestValYAxis1 = MaxVal;
            //    HighestValYAxis2 = MaxVal2;
            //    HighestValYAxis = MaxVal2;
            //    MainYAxisInterval1 = (double)(MaxVal / (TotalXAxis / 2));
            //    MainYAxisInterval2 = (double)(MaxVal2 / (TotalYAxis));


            //   // SetAxisMarks(YAxis1, YAxis2);
            //    for (int i = 0; i < YAxis1.Length; i++)
            //    {


            //        Array.Resize(ref Pts, Pts.Length + 1);

            //        Ptsn1 = new PointF((float)((pt.Left + SixtyTwo + TotalXAxis / 2) + (float)(YAxis1[i] / MainYAxisInterval1)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(YAxis2[i] / MainYAxisInterval2)));

            //        Pts[i] = Ptsn1;
            //    }
            //    PtsSelected = new PointF[Pts.Length];
            //    PtsSelected = Pts;
            //    XSelected = new double[YAxis1.Length];
            //    YSelected = new double[YAxis2.Length];
            //    XSelected = YAxis1;
            //    YSelected = YAxis2;




            //    der.DrawCurve(new Pen(Color.DarkRed, (float).5), Pts, (float)0);




            //}

            //catch (Exception ex)
            //{
            //    ErrorLogFile(ex);
            //    //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            //}
            {
                SetAxis();
                Region rgn1 = new Region(panel1.Bounds);
                System.Drawing.Graphics der = panel1.CreateGraphics();
                der.Clip = rgn1;
                Pen PenBlkB = new Pen(Color.Black, 1);
                Pen PenRed = new Pen(Color.Red, 2);
                RectangleF pt = der.ClipBounds;
                Pen BlkDash = new Pen(Color.Black, (float) .5);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.Dash;
                Point pt1 = new Point();
                Point pt2 = new Point();
                PointF Ptsn1 = new PointF();
                try
                {
                    // ////// Y axis
                    // double dYTopX = (double)(((double)panel1.Right - (double)panel1.Left + SixtyTwo) / 2);
                    // double dYTopY = (double)panel1.Top + OneFifty;

                    //double dYBottomX = (double)(((double)panel1.Right - (double)panel1.Left + SixtyTwo) / 2);
                    //double dYBottomY = (double)panel1.Bottom-1;

                    // //////// X axis
                    //double dXLeftX = (double)panel1.Left + SixtyTwo;
                    //double dXLeftY = (double)(((double)panel1.Bottom - (double)panel1.Top + OneFifty) / 2);

                    //double dXRightX = (double)panel1.Right;
                    //double dXRightY = (double)(((double)panel1.Bottom - (double)panel1.Top + OneFifty) / 2);

                    // ///////// Forward Diagnol
                    //double dXTopRightX = (double)panel1.Right;
                    //double dXTopRightY = (double)panel1.Top + OneFifty;

                    //double dXBottomLeftX = (double)panel1.Left + SixtyTwo;
                    //double dXBottomLeftY = (double)panel1.Bottom-1;

                    // ////////// backward diagnol
                    //double dYTopLeftX = (double)panel1.Left + SixtyTwo;
                    //double dYTopLeftY = (double)panel1.Top + OneFifty;

                    //double dYBottomRightX = (double)panel1.Right;
                    //double dYBottomRightY = (double)panel1.Bottom-1;
                    ////// Y axis
                    double dYTopX = (double) (((double) panel1.Right) / 2);
                    double dYTopY = (double) panel1.Top + OneFifty;

                    double dYBottomX = (double) (((double) panel1.Right) / 2);
                    double dYBottomY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                    double TotalYAxis =
                        Math.Sqrt((double) (((double) (dYTopX - dYBottomX) * (double) (dYTopX - dYBottomX)) +
                                            ((double) (dYTopY - dYBottomY) * (double) (dYTopY - dYBottomY))));

                    //////// X axis
                    double dXLeftX = (double) (pt.Right - TotalYAxis) / 2; //(double)panel1.Left + dYTopX/2+SixtyTwo;
                    double dXLeftY = (double) (((double) panel1.Bottom - ((double) panel1.Bottom / 10) -
                                                (double) panel1.Top + OneFifty) / 2);

                    double dXRightX = dXLeftX + TotalYAxis;
                    double dXRightY = (double) (((double) panel1.Bottom - ((double) panel1.Bottom / 10) -
                                                 (double) panel1.Top + OneFifty) / 2);


                    double TotalXAxis =
                        Math.Sqrt((double) (((double) (dXLeftX - dXRightX) * (double) (dXLeftX - dXRightX)) +
                                            ((double) (dXLeftY - dXRightY) * (double) (dXLeftY - dXRightY))));

                    ///////// Forward Diagnol
                    double dXTopRightX = (double) dXRightX;
                    double dXTopRightY = (double) panel1.Top + OneFifty;

                    double dXBottomLeftX = (double) dXLeftX;
                    double dXBottomLeftY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                    ////////// backward diagnol
                    double dYTopLeftX = (double) dXLeftX;
                    double dYTopLeftY = (double) panel1.Top + OneFifty;

                    double dYBottomRightX = (double) dXRightX;
                    double dYBottomRightY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);



                    ////Draw All Axis

                    //Y Axis
                    pt1 = new Point((int) dYTopX, (int) dYTopY);
                    pt2 = new Point((int) dYBottomX, (int) dYBottomY);
                    der.DrawLine(PenBlkB, pt1, pt2);

                    //X Axis
                    pt1 = new Point((int) dXLeftX, (int) dXLeftY);
                    pt2 = new Point((int) dXRightX, (int) dXRightY);
                    der.DrawLine(PenBlkB, pt1, pt2);

                    //Forward Diagnol
                    pt1 = new Point((int) dXTopRightX, (int) dXTopRightY);
                    pt2 = new Point((int) dXBottomLeftX, (int) dXBottomLeftY);
                    der.DrawLine(BlkDash, pt1, pt2); //BlkDash

                    //backward diagnol
                    pt1 = new Point((int) dYTopLeftX, (int) dYTopLeftY);
                    pt2 = new Point((int) dYBottomRightX, (int) dYBottomRightY);
                    der.DrawLine(BlkDash, pt1, pt2); //BlkDash


                    der.DrawArc(PenBlkB, (float) dYTopLeftX, (float) dYTopLeftY, (float) TotalXAxis, (float) TotalYAxis,
                        0, 360);

                    //der.DrawArc(PenBlkB, pt, 0, 360);
                    //der.DrawArc(PenBlkB, (float)pt.X / 2, (float)pt.Y / 2, (float)pt.Width / 2, (float)pt.Height / 2, 0, 360);
                    ////double rad = (double)(panel1.Bottom / 4);
                    double rad = (double) (TotalXAxis / 4);


                    Pts = new PointF[0];
                    Font objFont = new Font("Roman", 10, FontStyle.Bold);
                    Brush objBrush = Brushes.Black;
                    for (int i = 0; i < 361; i++)
                    {

                        //Array.Resize(ref Pts, Pts.Length + 1);
                        _ResizeArray.IncreaseArrayPointF(ref Pts, 1);
                        //double X = (double)(rad * Math.Cos(0.0174532925 * (360 - i))) + (double)(panel1.Bottom / 2);
                        //double Y = (double)(rad * Math.Sin(0.0174532925 * (360 - i))) + (double)(panel1.Bottom / 2);
                        double X = (double) (rad * Math.Cos(0.0174532925 * (360 - i))) + (double) (pt.Right / 2);
                        double Y = (double) (rad * Math.Sin(0.0174532925 * (360 - i))) +
                                   (double) ((panel1.Bottom + OneFifty) / 2);

                        Ptsn1 = new PointF((float) X, (float) Y);

                        if (i == 0 || i == 45 || i == 90 || i == 135 || i == 180 || i == 225 || i == 270 || i == 315)
                        {
                            int degree = i + 90;
                            if (degree >= 360)
                            {
                                degree = degree - 360;
                            }

                            der.DrawString(degree.ToString() + "º", objFont, objBrush, Ptsn1);
                        }

                        Pts[i] = Ptsn1;
                    }

                    der.DrawCurve(BlkDash, Pts, (float) 0);

                    XData = YAxis1;
                    YData = YAxis2;

                    //TotalXAxis = Math.Sqrt((double)(((double)(dXLeftX - dXRightX) * (double)(dXLeftX - dXRightX)) + ((double)(dXLeftY - dXRightY) * (double)(dXLeftY - dXRightY))));
                    //TotalYAxis = Math.Sqrt((double)(((double)(dYTopX - dYBottomX) * (double)(dYTopX - dYBottomX)) + ((double)(dYTopY - dYBottomY) * (double)(dYTopY - dYBottomY))));


                    double MainYAxisInterval1 = 0;
                    double MainYAxisInterval2 = 0;

                    float HighestX = findHighestValue(XData);
                    float HighestY = findHighestValue(YData);

                    float MaxX = HighestX * 3; // *4;
                    float MaxY = HighestY * 3; // *4;

                    MainYAxisInterval1 = (double) (MaxX / (TotalXAxis / 2));
                    MainYAxisInterval2 = (double) (MaxY / (TotalYAxis));
                    Pts = new PointF[0];
                    if (MainYAxisInterval1 != 0 && MainYAxisInterval2 != 0)
                    {
                        for (int i = 0; i < XData.Length; i++)
                        {


                            //Array.Resize(ref Pts, Pts.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Pts, 1);

                            Ptsn1 = new PointF(
                                (float) ((dXLeftX + TotalXAxis / 2) + (float) (XData[i] / MainYAxisInterval1)),
                                (float) (dYBottomY - (float) (YData[i] / MainYAxisInterval2)));

                            Pts[i] = Ptsn1;
                            der.FillRectangle(objBrush, Pts[i].X - 2, Pts[i].Y - 2, 4, 4);
                        }

                        der.DrawCurve(PenRed, Pts, (float) 0);

                    }

                    // SetAxisMarks(XData,YData);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }
            }

        }

        private void MultipleLineCursorTwoD(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn1 = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn1;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);
            //if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(Color.Black, (float) .5);
            }
            //PenBlk

            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //PointF Prv1 = new PointF();
            //PointF Prv2 = new PointF();
            float Msx = 0;
            float PrvMX = 0;
            //PointF[] PtLineClr = new PointF[5];

            try
            {

                Msx = (float) e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - (Rgn.Left), (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - (Rgn.Left), (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - (Rgn.Left), (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        //label1.Text = "XValues " + Convert.ToString(x[(int)XvalNow]);
                        //label3.Text = "YValues " + Convert.ToString(y[(int)XvalNow]);


                        //if(x!=null)


                        try
                        {
                            XVala[0] = Convert.ToDouble(x[(int) XvalNow]);
                            YVala[0] = Convert.ToDouble(y[(int) XvalNow]);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x1[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y1[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x2[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y2[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x3[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y3[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x4[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y4[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x5[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y5[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x6[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y6[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        try
                        {
                            double FstVal = Convert.ToDouble(x7[(int) XvalNow]);
                            double ScndVal = Convert.ToDouble(y7[(int) XvalNow]);
                            //Array.Resize(ref XVala, XVala.Length + 1);
                            //Array.Resize(ref YVala, YVala.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref XVala, 1);
                            _ResizeArray.IncreaseArrayDouble(ref YVala, 1);

                            XVala[XVala.Length - 1] = FstVal;
                            YVala[YVala.Length - 1] = ScndVal;
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }

                        FillDatagrid(XVala, YVala);
                        if (PrvsValX != 0)
                        {
                            if (IsTrend == true)
                            {
                                redrawNew(PrvsValX);
                                //redraw();
                            }
                            else
                                redraw();

                            //PtLineClr[0] = Pts[(int)PrvsValNow - 2];
                            //PtLineClr[1] = Pts[(int)PrvsValNow-1];
                            //PtLineClr[2] = Pts[(int)PrvsValNow];
                            //PtLineClr[3] = Pts[(int)PrvsValNow+1];
                            //PtLineClr[4] = Pts[(int)PrvsValNow+2];
                            //Line.DrawCurve(new Pen(Color.Red, (float).5), PtLineClr,(float)0);
                            //(float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr))
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        //panel1.Refresh();
                        PrvsValX = XvalNow;
                        PrvMX = Msx;
                        //Prv1 = pt1;
                        //Prv2 = pt2;
                        //if (prvtest != 0)
                        //{
                        Prv1 = pt1;
                        Prv2 = pt2;

                        //}
                        //redraw();


                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    //if (Ctrc == 10)
                    //    Ctrc = 0;
                    //arrLocts[Ctrc] = pt1;
                    //Ctrc++;
                    //arrLocts[Ctrc] = pt2;
                    //Ctrc++;
                    prvtest++;
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void InitializeZoom()
        {
            try
            {
                SetAxis();

                //for (int i = 0; i <= 7; i++)
                //{
                //    ThreeDCreater();
                //}
                ChoosenType = "FFT";
                panel1.Refresh();
                panel1.Refresh();
                GphCtr = 0;
                //panel1.Refresh();
                DrawZoomed();
                panel1.Refresh();
                panel1.Refresh();
                redrawZoom();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void DrawZoomed()
        {
            //ExtractExcellData();
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = null;
            if (CtrSelectedCraph == 0)
            {
                PenRed = new Pen(Color.DarkRed, (float) .5);
            }
            else if (CtrSelectedCraph == 1)
            {
                PenRed = new Pen(Color.Blue, (float) .5);
            }
            else if (CtrSelectedCraph == 2)
            {
                PenRed = new Pen(Color.Chocolate, (float) .5);
            }
            else if (CtrSelectedCraph == 3)
            {
                PenRed = new Pen(Color.DarkBlue, (float) .5);
            }
            else if (CtrSelectedCraph == 4)
            {
                PenRed = new Pen(Color.DarkSeaGreen, (float) .5);
            }
            else if (CtrSelectedCraph == 5)
            {
                PenRed = new Pen(Color.DeepPink, (float) .5);
            }
            else if (CtrSelectedCraph == 6)
            {
                PenRed = new Pen(Color.DarkOrange, (float) .5);
            }
            else if (CtrSelectedCraph == 7)
            {
                PenRed = new Pen(Color.Maroon, (float) .5);
            }
            else
                PenRed = new Pen(Color.DarkRed, (float) .5);

            RectangleF pt = der.ClipBounds;
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            PtsZoomedVals = new PointF[0];
            PointF Ptsz1 = new PointF();
            //PointF Pts2 = new PointF();
            double MaxVal = 0;

            //label1.Location = new Point((int)(pt.Left + 5), (int)(pt.Bottom - 40));
            //label3.Location = new Point((int)(pt.Left + 5), (int)(pt.Bottom - 20));
            try
            {
                if (TimeDataAckForZoom == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);

                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);

                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);


                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);

                }
                //if (TimeDataAckForZoom == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                //pt1 = new Point((int)pt.Left + 62, (int)pt.Bottom - 52);
                //pt2 = new Point((int)pt.Right - 62, (int)pt.Bottom - 52);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //der.DrawLine(PenBlkB, pt1, pt2);
                ////pt1 = new Point((int)pt.Left + 62, (int)pt.Bottom - 52);
                ////pt2 = new Point((int)pt.Top + 52, (int)pt.Left + 62);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //der.DrawLine(PenBlkB, pt1, pt2);

                //if (TimeDataAckForZoom == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                MaxVal = findHighestValue(YZoom);
                MaxVal *= 1.25;
                MainYAxisIntervalZoom = (double) (MaxVal / TotalYAxis);
                MainXAxisIntervalZoom = (TotalXAxis / (YZoom.Length - 1));

                CursorStartInterval = MainXAxisIntervalZoom;
                SetAxisMarks(XZoom, YZoom);
                PtsZoomedVals = new PointF[YZoom.Length];
                for (int i = 0; i < YZoom.Length; i++)
                {


                    // Array.Resize(ref PtsZoomedVals, PtsZoomedVals.Length + 1);
                    if (TimeDataAckForZoom == true)
                    {
                        Ptsz1 = new PointF((float) (SixtyTwo + (MainXAxisIntervalZoom * i)),
                            (float) ((float) (pt.Bottom - (TwoHundred + OneFifty)) -
                                     (float) (YZoom[i] / MainYAxisIntervalZoom))); //52
                    }
                    else
                    {
                        Ptsz1 = new PointF((float) (SixtyTwo + (MainXAxisIntervalZoom * i)),
                            (float) ((float) (pt.Bottom - (Fifty)) - (float) (YZoom[i] / MainYAxisIntervalZoom))); //52
                    }

                    PtsZoomedVals[i] = Ptsz1;
                    //NewPtCtr++;

                }


                der.DrawCurve(PenRed, PtsZoomedVals, (float) 0);
                //if (AreaPlot)
                //{
                //    AreaPlotZoomed();
                //}

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        //private void AreaPlotZoomed()
        //{
        //    try
        //    {
        //        if (ChoosenType == "FFT")
        //        {
        //            if (BtnOk == 0)
        //            {
        //                AreaPlot = true;
        //                FFTZoomedAreaPlot();
        //                //btnZoom.Enabled = false;
        //                //BtnOk = 1;
        //            }
        //            else
        //            {
        //                AreaPlot = false;
        //                panel1.Refresh();
        //                setAxisCtr = 0;
        //                btnZoom.Enabled = true;
        //                redraw();
        //                //BtnOk = 0;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //    }
        //}

        //private void FFTZoomedAreaPlot()
        //{
        //    Region rgn1 = new Region(panel1.Bounds);
        //    Region rgn = new Region(ClientRectangle);
        //    System.Drawing.Graphics der = panel1.CreateGraphics();
        //    der.Clip = rgn1;

        //    Pen PenBlkB = new Pen(Color.Black, 2);
        //    Pen PenRed = new Pen(Color.Maroon, 1);
        //    RectangleF pt = der.ClipBounds;
        //    PointF pt1 = new PointF();
        //    PointF pt2 = new PointF();


        //    GraphicsPath objPath = new GraphicsPath();

        //    bool TimeDataForAreaPlot = CheckForTimeData(y);
        //    try
        //    {
        //        if (TrendType == "Trend")
        //        {
        //            pt1 = new PointF((float)(pt.Left + SixtyTwo), (float)(pt.Bottom - (Fifty)));//TwoHundred
        //            pt2 = new PointF((float)(pt.Right - OneSixtyTwo), (float)(pt.Bottom - (Fifty)));//TwoHundred

        //            PointF[] PtsArea = new PointF[PtsZoomedVals.Length + 2];
        //            PtsArea[0] = pt1;
        //            for (int i = 0; i < PtsZoomedVals.Length; i++)
        //            {
        //                PtsArea[i + 1] = PtsZoomedVals[i];
        //            }
        //            PtsArea[Pts.Length + 1] = pt2;

        //            objPath.AddCurve(PtsArea, 0);
        //            Brush objbr = Brushes.Maroon;
        //            der.FillPath(objbr, objPath);

        //        }
        //        else if (!TimeDataForAreaPlot)
        //        {
        //            pt1 = new PointF((float)(pt.Right - OneSixtyTwo), (float)(pt.Bottom - Fifty));
        //            pt2 = new PointF((float)(pt.Left + SixtyTwo), (float)(pt.Bottom - Fifty));
        //            PointF[] PtsArea = new PointF[PtsZoomedVals.Length];
        //            PtsArea = PtsZoomedVals;
        //            PtsArea[0].Y = (float)(pt.Bottom - Fifty);
        //            Array.Resize(ref PtsArea, PtsArea.Length + 1);
        //            PtsArea[PtsZoomedVals.Length] = pt1;

        //            objPath.AddCurve(PtsArea, 0);
        //            Brush objbr = Brushes.Maroon;
        //            der.FillPath(objbr, objPath);
        //        }
        //        else if (TimeDataForAreaPlot)
        //        {

        //            pt1 = new PointF((float)(pt.Left + SixtyTwo), (float)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //            pt2 = new PointF((float)(pt.Right - OneSixtyTwo), (float)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred

        //            PointF[] PtsArea = new PointF[PtsZoomedVals.Length + 2];
        //            PtsArea[0] = pt1;
        //            for (int i = 0; i < PtsZoomedVals.Length; i++)
        //            {
        //                PtsArea[i + 1] = PtsZoomedVals[i];
        //            }
        //            PtsArea[Pts.Length + 1] = pt2;

        //            objPath.AddCurve(PtsArea, 0);
        //            Brush objbr = Brushes.Maroon;
        //            der.FillPath(objbr, objPath);

        //        }



        //    }

        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //    }
        //}


        double LastYAxis = 0.0;
        double LastXAxis = 0.0;
        bool ExtraZoom = false;
        double[] xValsForExtraZoom = null;
        double[] yValsForExtraZoom = null;

        bool DrwGP = true;
        //private void DrawExtraZoom(string SideToExpand)
        //{
        //    //SetAxis();
        //    //lblDate.Text = "Date :-- " + SlctedDates[0].ToString();



        //    //Pen objBackColor = new Pen(panel1.BackColor);
        //    bool TimeData = false;
        //    Region rgn1 = new Region(panel1.Bounds);
        //    Region rgn = new Region(ClientRectangle);
        //    System.Drawing.Graphics der = panel1.CreateGraphics();
        //    der.Clip = rgn1;

        //    Pen PenBlkB = new Pen(Color.Black, 2);
        //    Pen PenRed = new Pen(Color.Red, 1);
        //    RectangleF pt = der.ClipBounds;
        //    TimeData = CheckForTimeData(y);
        //    double TotalYAxis = 0.0;
        //    double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
        //    if (LastXAxis == 0)
        //    {
        //        LastXAxis = TotalXAxis;
        //        //if (SideToExpand == "L")
        //        //{
        //        //    LastXAxis = LastXAxis - (LastXAxis * (.05));
        //        //}
        //        //else if (SideToExpand == "R")
        //        //{
        //        //    LastXAxis = LastXAxis + (LastXAxis * (.05));
        //        //}

        //    }
        //    else
        //    {
        //        if (SideToExpand == "L")
        //        {

        //            //if (LastXAxis > TotalXAxis)
        //            //{
        //            //    LastXAxis = Convert.ToDouble(LastXAxis / 1.05);
        //            //}
        //            //else if (LastXAxis <= TotalXAxis)
        //            //{

        //                LastXAxis = LastXAxis - 10; //LastXAxis - (LastXAxis * (.05)); //LastXAxis - 5;//

        //            //}

        //        }
        //        else if (SideToExpand == "R")
        //        {
        //            //if (LastXAxis < TotalXAxis)
        //            //{
        //            //    LastXAxis = Convert.ToDouble(LastXAxis / .95);
        //            //}
        //            //else if (LastXAxis >= TotalXAxis)
        //            //{
        //            if (DrwGP)
        //            {
        //                LastXAxis = LastXAxis + 10; //LastXAxis + (LastXAxis * (.05)); //LastXAxis + 5; //
        //            }
        //            //}

        //        }
        //    }
        //    if (Time == true)
        //    {
        //        TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);

        //    }
        //    else
        //    {
        //        TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
        //    }
        //    if (LastYAxis == 0)
        //    {

        //        LastYAxis = TotalYAxis;
        //    }
        //    else
        //    {
        //        if (SideToExpand == "D")
        //        {
        //            LastYAxis = LastYAxis - 10; //LastYAxis - (LastYAxis * (.05)); //LastYAxis - 5;//
        //        }
        //        else if (SideToExpand == "U")
        //        {
        //            LastYAxis = LastYAxis + 10; //LastYAxis + (LastYAxis * (.05)); //LastYAxis + 5; //
        //        }
        //    }
        //    Pen BlkDash = new Pen(Color.Black, 2);
        //    BlkDash.DashCap = DashCap.Triangle;
        //    BlkDash.DashStyle = DashStyle.Dash;
        //    Point pt1 = new Point();
        //    Point pt2 = new Point();

        //    PointF Ptsn1 = new PointF();

        //    double MaxVal = 0;
        //    //TimeData = CheckForTimeData(y);
        //    TimeDataAckForZoom = TimeData;

        //    try
        //    {
        //        //if (PtsExtraZoomed != null)
        //        //{
        //        //    der.DrawCurve(new Pen(panel1.BackColor, (float).5), PtsExtraZoomed, (float)0);
        //        //}
        //        //if (Time == true)
        //        //{
        //        //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //        //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
        //        //    der.DrawLine(PenBlkB, pt1, pt2);
        //        //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //        //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //        //    der.DrawLine(BlkDash, pt1, pt2);
        //        //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //        //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
        //        //    der.DrawLine(PenBlkB, pt1, pt2);
        //        //}

        //        //else
        //        //{
        //        //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //        //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //        //    der.DrawLine(PenBlkB, pt1, pt2);
        //        //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //        //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
        //        //    der.DrawLine(PenBlkB, pt1, pt2);
        //        //}


        //        if (x != null)
        //        {
        //            if (x.Length > 1)
        //            {
        //                PtsExtraZoomed = new PointF[0];
        //                xValsForExtraZoom = new double[0];
        //                yValsForExtraZoom = new double[0];
        //                MaxVal = findHighestValue(y);
        //                HighestValYAxis = MaxVal;
        //                MainYAxisInterval = (double)(MaxVal / LastYAxis);
        //                MainXAxisInterval = (LastXAxis / (x.Length - 1));
        //                CursorStartInterval = MainXAxisInterval;
        //                //SetAxisMarks(x, y);
        //            }
        //        }

        //        int ctrI = 0;


        //        if (MaxVal != 0.0 && GphCtr == 0 || GphCtr != 0)
        //        {
        //            for (int i = 0; i < x.Length; i++)
        //            {


        //                //Array.Resize(ref PtsExtraZoomed, PtsExtraZoomed.Length + 1);
        //                if (Time == true)
        //                {
        //                    Ptsn1 = new PointF((float)((pt.Left + SixtyTwo) + (MainXAxisInterval * i)), (float)(pt.Bottom - (TwoHundred + OneFifty) - (float)(y[i] / MainYAxisInterval)));
        //                }
        //                else
        //                {
        //                    Ptsn1 = new PointF((float)((pt.Left + SixtyTwo) + (MainXAxisInterval * i)), (float)(pt.Bottom - Fifty - (float)(y[i] / MainYAxisInterval)));
        //                }

        //                if (Ptsn1.X <= (pt.Right - OneSixtyTwo))// && Ptsn1.Y >= (pt.Top + OneFifty))
        //                {
        //                    Array.Resize(ref PtsExtraZoomed, PtsExtraZoomed.Length + 1);
        //                    Array.Resize(ref xValsForExtraZoom, xValsForExtraZoom.Length + 1);
        //                    Array.Resize(ref yValsForExtraZoom, yValsForExtraZoom.Length + 1);
        //                    xValsForExtraZoom[xValsForExtraZoom.Length - 1] = x[i];
        //                    if (Ptsn1.Y >= (pt.Top + OneFifty) && Ptsn1.Y <= (pt.Bottom - Fifty))
        //                    {
        //                        yValsForExtraZoom[yValsForExtraZoom.Length - 1] = y[i];
        //                    }
        //                    PtsExtraZoomed[ctrI] = Ptsn1;
        //                }
        //                else
        //                {
        //                    ctrI--;
        //                }
        //                ctrI++;
        //            }

        //            bool DrwGP=SetAxisMarksForExtraZoom(xValsForExtraZoom, yValsForExtraZoom, SideToExpand);
        //            if (DrwGP)
        //            {
        //                if (Time == true)
        //                {
        //                    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
        //                    der.DrawLine(PenBlkB, pt1, pt2);
        //                    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                    der.DrawLine(BlkDash, pt1, pt2);
        //                    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
        //                    der.DrawLine(PenBlkB, pt1, pt2);
        //                }

        //                else
        //                {
        //                    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //                    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //                    der.DrawLine(PenBlkB, pt1, pt2);
        //                    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //                    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
        //                    der.DrawLine(PenBlkB, pt1, pt2);
        //                }

        //                PtsSelected = new PointF[PtsExtraZoomed.Length];
        //                PtsSelected = PtsExtraZoomed;
        //                XSelected = new double[x.Length];
        //                YSelected = new double[y.Length];
        //                XSelected = x;
        //                YSelected = y;


        //                der.DrawCurve(new Pen(Color.DarkRed, (float).5), PtsExtraZoomed, (float)0);
        //            }

        //        }

        //    }

        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //    }

        //}


        private void DrawExtraZoom()
        {

            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (LastXAxis == 0)
            {
                LastXAxis = TotalXAxis;


            }


            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);

            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            if (LastYAxis == 0)
            {

                LastYAxis = TotalYAxis;





            }


            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;

            try
            {
                //if (PtsExtraZoomed != null)
                //{
                //    der.DrawCurve(new Pen(panel1.BackColor, (float).5), PtsExtraZoomed, (float)0);
                //}
                //if (Time == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}


                if (x != null)
                {
                    if (x.Length > 1)
                    {
                        PtsExtraZoomed = new PointF[0];
                        xValsForExtraZoom = new double[0];
                        yValsForExtraZoom = new double[0];
                        MaxVal = findHighestValue(y);
                        MaxVal *= 1.25;
                        HighestValYAxis = MaxVal;
                        MainYAxisInterval = (double) (MaxVal / LastYAxis);
                        MainXAxisInterval = (LastXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                        //SetAxisMarks(x, y);
                    }
                }

                int ctrI = 0;


                if (MaxVal != 0.0 && GphCtr == 0 || GphCtr != 0)
                {
                    for (int i = 0; i < x.Length; i++)
                    {


                        //Array.Resize(ref PtsExtraZoomed, PtsExtraZoomed.Length + 1);
                        if (Time == true)
                        {
                            Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                (float) (pt.Bottom - (TwoHundred + OneFifty) - (float) (y[i] / MainYAxisInterval)));
                        }
                        else
                        {
                            Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                        }

                        if (Ptsn1.X <= (pt.Right - OneSixtyTwo)) // && Ptsn1.Y >= (pt.Top + OneFifty))
                        {
                            //Array.Resize(ref PtsExtraZoomed, PtsExtraZoomed.Length + 1);
                            //Array.Resize(ref xValsForExtraZoom, xValsForExtraZoom.Length + 1);
                            //Array.Resize(ref yValsForExtraZoom, yValsForExtraZoom.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref PtsExtraZoomed, 1);
                            _ResizeArray.IncreaseArrayDouble(ref xValsForExtraZoom, 1);
                            _ResizeArray.IncreaseArrayDouble(ref yValsForExtraZoom, 1);
                            xValsForExtraZoom[xValsForExtraZoom.Length - 1] = x[i];
                            if (Ptsn1.Y >= (pt.Top + OneFifty) && Ptsn1.Y <= (pt.Bottom - Fifty))
                            {
                                yValsForExtraZoom[yValsForExtraZoom.Length - 1] = y[i];
                            }

                            PtsExtraZoomed[ctrI] = Ptsn1;
                        }
                        else
                        {
                            ctrI--;
                        }

                        ctrI++;
                    }


                    bool DrwGP = SetAxisMarksForExtraZoom(xValsForExtraZoom, yValsForExtraZoom, "U");
                    DrawBandRegion(xValsForExtraZoom, yValsForExtraZoom, "U");
                    //bool DrwGP = SetAxisMarksForExtraZoom(xValsForExtraZoom, yValsForExtraZoom, SideToExpand);

                    if (DrwGP)
                    {

                        if (Time == true)
                        {
                            pt1 = new Point((int) (pt.Left + SixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                            pt1 = new Point((int) (pt.Left + SixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            der.DrawLine(BlkDash, pt1, pt2);
                            pt1 = new Point((int) (pt.Left + SixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                        }

                        else
                        {
                            pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                            pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                            pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                            pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                        }


                        PtsSelected = new PointF[PtsExtraZoomed.Length];
                        PtsSelected = PtsExtraZoomed;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;


                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), PtsExtraZoomed, (float) 0);
                        //if (FaultFreq)
                        //{
                        //    DrawFaultFreq();
                        //}
                        //if (ShowRpmRatio)
                        //{
                        //    DrawRpm();
                        //}
                    }

                }

            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        private void DrawExtraZoom(string SideToExpand)
        {

            bool TimeData = false;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            TimeData = CheckForTimeData(y);
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (LastXAxis == 0)
            {
                LastXAxis = TotalXAxis;

                if (SideToExpand == "L")
                {
                    LastXAxis = LastXAxis - (LastXAxis * (.05));
                }
                else if (SideToExpand == "R")
                {
                    LastXAxis = LastXAxis + (LastXAxis * (.05));
                }
            }
            else
            {
                if (SideToExpand == "L")
                {

                    if (LastXAxis > TotalXAxis)
                    {
                        LastXAxis = Convert.ToDouble(LastXAxis / 1.05);



                    }
                    else if (LastXAxis <= TotalXAxis)
                    {

                        LastXAxis =
                            LastXAxis - (LastXAxis * (.05)); //LastXAxis - (LastXAxis * (.05)); //LastXAxis - 5;//

                    }

                    //LastXAxis = LastXAxis - (LastXAxis * (.05)); //LastXAxis - (LastXAxis * (.05)); //LastXAxis - 5;//



                }
                else if (SideToExpand == "R")
                {


                    if (LastXAxis < TotalXAxis)
                    {
                        LastXAxis = Convert.ToDouble(LastXAxis / .95);
                    }
                    else if (LastXAxis >= TotalXAxis)
                    {
                        if (DrwGP)
                        {
                            LastXAxis =
                                LastXAxis + (LastXAxis * (.05)); //LastXAxis + (LastXAxis * (.05)); //LastXAxis + 5; //
                        }
                    }


                    //LastXAxis = LastXAxis + (LastXAxis * (.05)); //LastXAxis + (LastXAxis * (.05)); //LastXAxis + 5; //



                }
            }

            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);

            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            if (LastYAxis == 0)
            {

                LastYAxis = TotalYAxis;

                if (SideToExpand == "D")
                {
                    LastYAxis = LastYAxis - (LastYAxis * (.05));
                }
                else if (SideToExpand == "U")
                {
                    LastYAxis = LastYAxis + (LastYAxis * (.05));
                }



            }
            else
            {
                if (SideToExpand == "D")
                {

                    if (LastYAxis > TotalYAxis)
                    {
                        LastYAxis = Convert.ToDouble(LastYAxis / 1.05);



                    }
                    else if (LastYAxis <= TotalYAxis)
                    {

                        LastYAxis =
                            LastYAxis - (LastYAxis * (.05)); //LastXAxis - (LastXAxis * (.05)); //LastXAxis - 5;//

                    }



                    //LastYAxis = LastYAxis - (LastYAxis * (.05)); //LastYAxis - (LastYAxis * (.05)); //LastYAxis - 5;//
                }
                else if (SideToExpand == "U")
                {


                    if (LastYAxis < TotalYAxis)
                    {
                        LastYAxis = Convert.ToDouble(LastYAxis / .95);
                    }
                    else if (LastYAxis >= TotalYAxis)
                    {
                        if (DrwGP)
                        {
                            LastYAxis =
                                LastYAxis + (LastYAxis * (.05)); //LastXAxis + (LastXAxis * (.05)); //LastXAxis + 5; //
                        }
                    }



                    //LastYAxis = LastYAxis + (LastYAxis * (.05)); //LastYAxis + (LastYAxis * (.05)); //LastYAxis + 5; //
                }
            }

            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();

            PointF Ptsn1 = new PointF();

            double MaxVal = 0;
            //TimeData = CheckForTimeData(y);
            TimeDataAckForZoom = TimeData;

            try
            {
                //if (PtsExtraZoomed != null)
                //{
                //    der.DrawCurve(new Pen(panel1.BackColor, (float).5), PtsExtraZoomed, (float)0);
                //}
                //if (Time == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}


                if (x != null)
                {
                    if (x.Length > 1)
                    {
                        PtsExtraZoomed = new PointF[0];
                        xValsForExtraZoom = new double[0];
                        yValsForExtraZoom = new double[0];
                        MaxVal = findHighestValue(y);
                        MaxVal *= 1.25;
                        HighestValYAxis = Convert.ToDouble(Math.Round(MaxVal, 3));
                        MainYAxisInterval = (double) (MaxVal / LastYAxis);
                        MainXAxisInterval = (LastXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                        //SetAxisMarks(x, y);
                    }
                }

                int ctrI = 0;


                if (MaxVal != 0.0 && GphCtr == 0 || GphCtr != 0)
                {
                    for (int i = 0; i < x.Length; i++)
                    {


                        //Array.Resize(ref PtsExtraZoomed, PtsExtraZoomed.Length + 1);
                        if (Time == true)
                        {
                            Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                (float) (pt.Bottom - (TwoHundred + OneFifty) - (float) (y[i] / MainYAxisInterval)));
                        }
                        else
                        {
                            Ptsn1 = new PointF((float) ((pt.Left + SixtyTwo) + (MainXAxisInterval * i)),
                                (float) (pt.Bottom - Fifty - (float) (y[i] / MainYAxisInterval)));
                        }

                        if (Ptsn1.X <= (pt.Right - OneSixtyTwo)) // && Ptsn1.Y >= (pt.Top + OneFifty))
                        {
                            //Array.Resize(ref PtsExtraZoomed, PtsExtraZoomed.Length + 1);
                            //Array.Resize(ref xValsForExtraZoom, xValsForExtraZoom.Length + 1);
                            //Array.Resize(ref yValsForExtraZoom, yValsForExtraZoom.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref PtsExtraZoomed, 1);
                            _ResizeArray.IncreaseArrayDouble(ref xValsForExtraZoom, 1);
                            _ResizeArray.IncreaseArrayDouble(ref yValsForExtraZoom, 1);
                            xValsForExtraZoom[xValsForExtraZoom.Length - 1] = x[i];
                            if (Ptsn1.Y >= (pt.Top + OneFifty) && Ptsn1.Y <= (pt.Bottom - Fifty))
                            {
                                yValsForExtraZoom[yValsForExtraZoom.Length - 1] = y[i];
                            }

                            PtsExtraZoomed[ctrI] = Ptsn1;
                        }
                        else
                        {
                            ctrI--;
                        }

                        ctrI++;
                    }


                    bool DrwGP = SetAxisMarksForExtraZoom(xValsForExtraZoom, yValsForExtraZoom, SideToExpand);
                    DrawBandRegion(xValsForExtraZoom, yValsForExtraZoom, SideToExpand);
                    //bool DrwGP = SetAxisMarksForExtraZoom(xValsForExtraZoom, yValsForExtraZoom, SideToExpand);

                    if (DrwGP)
                    {

                        if (Time == true)
                        {
                            pt1 = new Point((int) (pt.Left + SixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                            pt1 = new Point((int) (pt.Left + SixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            der.DrawLine(BlkDash, pt1, pt2);
                            pt1 = new Point((int) (pt.Left + SixtyTwo),
                                (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                            pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                        }

                        else
                        {
                            pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                            pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                            pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                            pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                            der.DrawLine(PenBlkB, pt1, pt2);
                        }


                        PtsSelected = new PointF[PtsExtraZoomed.Length];
                        PtsSelected = PtsExtraZoomed;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;


                        der.DrawCurve(new Pen(Color.DarkRed, (float) .5), PtsExtraZoomed, (float) 0);
                        //if (FaultFreq)
                        //{
                        //    DrawFaultFreq();
                        //}
                        //if (ShowRpmRatio)
                        //{
                        //    DrawRpm();
                        //}
                    }

                }

            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }




        private void DrawZoomedAsImage()
        {
            //ExtractExcellData();
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);

            Bitmap bmp = new Bitmap(panel1.Width, panel1.Height, PixelFormat.Format24bppRgb);

            System.Drawing.Graphics der = Graphics.FromImage(bmp);
            der.Clear(panel1.BackColor);

            //System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = null;
            if (CtrSelectedCraph == 0)
            {
                PenRed = new Pen(Color.Black, (float) .5); //Color.DarkRed
            }
            else if (CtrSelectedCraph == 1)
            {
                PenRed = new Pen(Color.Blue, (float) .5);
            }
            else if (CtrSelectedCraph == 2)
            {
                PenRed = new Pen(Color.Chocolate, (float) .5);
            }
            else if (CtrSelectedCraph == 3)
            {
                PenRed = new Pen(Color.DarkBlue, (float) .5);
            }
            else if (CtrSelectedCraph == 4)
            {
                PenRed = new Pen(Color.DarkSeaGreen, (float) .5);
            }
            else if (CtrSelectedCraph == 5)
            {
                PenRed = new Pen(Color.DeepPink, (float) .5);
            }
            else if (CtrSelectedCraph == 6)
            {
                PenRed = new Pen(Color.DarkOrange, (float) .5);
            }
            else if (CtrSelectedCraph == 7)
            {
                PenRed = new Pen(Color.Maroon, (float) .5);
            }
            else
                PenRed = new Pen(Color.Black, (float) .5); //Color.DarkRed

            RectangleF pt = der.ClipBounds;
            double TotalYAxis = 0.0;
            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
            if (Time == true)
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
            }
            else
            {
                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
            }

            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            PtsZoomedVals = new PointF[0];
            PointF Ptsz1 = new PointF();
            //PointF Pts2 = new PointF();
            double MaxVal = 0;

            //label1.Location = new Point((int)(pt.Left + 5), (int)(pt.Bottom - 40));
            //label3.Location = new Point((int)(pt.Left + 5), (int)(pt.Bottom - 20));
            try
            {
                if (TimeDataAckForZoom == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }
                //pt1 = new Point((int)pt.Left + 62, (int)pt.Bottom - 52);
                //pt2 = new Point((int)pt.Right - 62, (int)pt.Bottom - 52);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //der.DrawLine(PenBlkB, pt1, pt2);
                ////pt1 = new Point((int)pt.Left + 62, (int)pt.Bottom - 52);
                ////pt2 = new Point((int)pt.Top + 52, (int)pt.Left + 62);
                //pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //der.DrawLine(PenBlkB, pt1, pt2);

                //if (TimeDataAckForZoom == true)
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                MaxVal = findHighestValue(YZoom);
                MaxVal *= 1.25;
                MainYAxisIntervalZoom = (double) (MaxVal / TotalYAxis);
                MainXAxisIntervalZoom = (TotalXAxis / (YZoom.Length - 1));
                SetAxisMarks(XZoom, YZoom, der);
                for (int i = 0; i < YZoom.Length; i++)
                {


                    //Array.Resize(ref PtsZoomedVals, PtsZoomedVals.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref PtsZoomedVals, 1);
                    if (TimeDataAckForZoom == true)
                    {
                        Ptsz1 = new PointF((float) (SixtyTwo + (MainXAxisIntervalZoom * i)),
                            (float) ((float) (pt.Bottom - (TwoHundred + OneFifty)) -
                                     (float) (YZoom[i] / MainYAxisIntervalZoom))); //52
                    }
                    else
                    {
                        Ptsz1 = new PointF((float) (SixtyTwo + (MainXAxisIntervalZoom * i)),
                            (float) ((float) (pt.Bottom - (Fifty)) - (float) (YZoom[i] / MainYAxisIntervalZoom))); //52
                    }

                    PtsZoomedVals[i] = Ptsz1;
                    //NewPtCtr++;

                }


                der.DrawCurve(PenRed, PtsZoomedVals, (float) 0);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
            //if (Time == true)
            //{
            //    Brush objBrsh = Brushes.Black;
            //    StringFormat objVerticle = new StringFormat(StringFormatFlags.DirectionVertical);
            //    string[] Text = lblGraphUnitY.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);

            //    Font objFnt = new Font("Roman", 12, FontStyle.Bold);
            //    der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X - 65, Pts[0].Y - 5, objVerticle);
            //    Text = lblGrphUnitX.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);
            //    der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X + 230, Pts[0].Y + 300);

            //}
            //else
            //{

            //    Brush objBrsh = Brushes.Black;
            //    StringFormat objVerticle = new StringFormat(StringFormatFlags.DirectionVertical);
            //    string[] Text = lblGraphUnitY.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);

            //    Font objFnt = new Font("Roman", 12, FontStyle.Bold);
            //    der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X - 65, Pts[0].Y - 230, objVerticle);
            //    Text = lblGrphUnitX.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);
            //    der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X + 230, Pts[0].Y + 20);

            //}
            Brush objBrsh = Brushes.Black;
            Font objFnt = new Font("Roman", 8, FontStyle.Bold);
            if (Time == true)
            {
                string Text = lblGraphUnitY.Text.ToString();
                der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                Text = lblGrphUnitX.Text.ToString();
                der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);
                if (IsTrend)
                {
                    Text = lblYAxis.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                }
                else
                {
                    Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                }
            }
            else
            {
                string Text = lblGraphUnitY.Text.ToString();
                der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);
                Text = lblGrphUnitX.Text.ToString();
                der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
                //der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, Pts[0].Y - 20);


                // der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);


                //Text = lblGrphUnitX.Text.ToString();
                //string[] labelx = Text.Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);                    
                //der.DrawString(labelx[1].ToString(), objFnt, objBrsh, Pts[0].X + 65, Pts[0].Y);
                //der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);
                if (IsTrend)
                {
                    Text = lblYAxis.Text.ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                }
                else
                {
                    Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 80);
                }

            }

            Pen dashpen = new Pen(Color.Blue, 1);
            //dashpen.DashStyle=DashStyle.Dash;
            //dashpen.DashCap=DashCap.Triangle;
            //Graphics Line = panel1.CreateGraphics();

            string sText = "Overall: " + lblOverall.Text.ToString() + " " + lblDisplayunit.Text.ToString();
            der.DrawString(sText, objFnt, objBrsh, Pts[0].X - 45, 60);

            sText = "No. of Lines: " + lbllines.Text.ToString();
            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 60);

            sText = "Date&Time: " + lblDate.Text.ToString();
            der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 60);
            if (cmbCurSors.SelectedIndex != 0)
            {
                if (HarmncCrs)
                {
                    int iCounter = 0;
                    for (int i = 0; i < aatest.Length; i++)
                    {
                        StringFormat _sf = new StringFormat();
                        _sf.FormatFlags = StringFormatFlags.DirectionVertical;
                        der.DrawLine(new Pen(Color.Black, (float) .5), aatest[i], aatest[i + 1]);
                        der.DrawString(
                            "X: " + dataGridView1[0, iCounter].Value.ToString() + " " +
                            lblGrphUnitX.Text.ToString().Remove(0, 9) + " , Y: " +
                            dataGridView1[1, iCounter].Value.ToString() + " " +
                            lblGraphUnitY.Text.ToString().Remove(0, 9), new Font("Roman", 7, FontStyle.Italic),
                            Brushes.Blue, aatest[i + 1], _sf);
                        i++;
                        iCounter++;
                    }


                    //for (int i = 0; i < aatest.Length; i++)
                    //{
                    //    der.DrawLine(dashpen, aatest[i], aatest[i + 1]);
                    //    i++;
                    //}
                    //for (int i = 0; i < aatest.Length; i++)
                    //{
                    //    der.DrawLine(new Pen(Color.Black, (float).5), aatest[i], aatest[i + 1]);
                    //    i++;
                    //}

                }
                else if (TwoDCrossHairCursor || SingleCrs || TwDSingleSqrCrs || PeekCursor || SideBndCsr ||
                         SideBndCsrRatio || SideBandTrndDrw)
                {

                    der.DrawLine(new Pen(Color.Black, (float) .5), pt1forImage, pt2forImage);

                    sText = "Cursor X: " + dataGridView1[0, 0].Value.ToString() + " " +
                            lblGrphUnitX.Text.ToString().Remove(0, 9);
                    der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 20);

                    sText = "Cursor Y: " + dataGridView1[1, 0].Value.ToString() + " " +
                            lblGraphUnitY.Text.ToString().Remove(0, 9);
                    der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 100, 40);

                    if (TwoDCrossHairCursor)
                    {
                        der.DrawLine(new Pen(Color.Black, (float) .5), pt1forCImage, pt2forCImage);
                    }

                    if (TwDSingleSqrCrs)
                    {
                        der.DrawRectangle(new Pen(Color.Black, (float) .5), SS);
                    }

                    if (SideBndCsr || SideBndCsrRatio || SideBandTrndDrw)
                    {
                        der.DrawLine(new Pen(Color.Black, (float) .5), pts11, pts12);

                        sText = "Previous Cursor X: " + dataGridView1[0, 1].Value.ToString() + " " +
                                lblGrphUnitX.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 20);

                        sText = "Previous Cursor Y: " + dataGridView1[1, 1].Value.ToString() + " " +
                                lblGraphUnitY.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 270, 40);


                        der.DrawLine(new Pen(Color.Black, (float) .5), pts21, pts22);

                        sText = "Next Cursor X: " + dataGridView1[0, 2].Value.ToString() + " " +
                                lblGrphUnitX.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 500, 20);

                        sText = "Next Cursor Y: " + dataGridView1[1, 2].Value.ToString() + " " +
                                lblGraphUnitY.Text.ToString().Remove(0, 9);
                        der.DrawString(sText, objFnt, objBrsh, Pts[0].X + 500, 40);
                    }


                }
            }
            //if (Time == true)
            //{
            //    Brush objBrsh = Brushes.Black;

            //    string Text = lblGraphUnitY.Text.ToString();

            //    Font objFnt = new Font("Roman", 12, FontStyle.Bold);
            //    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
            //    Text = lblGrphUnitX.Text.ToString();
            //    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 40);

            //}
            //else
            //{

            //    Brush objBrsh = Brushes.Black;

            //    string Text = lblGraphUnitY.Text.ToString();
            //    Font objFnt = new Font("Roman", 12, FontStyle.Bold);
            //    der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 20);
            //    //der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, Pts[0].Y - 20);


            //    // der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);


            //    //Text = lblGrphUnitX.Text.ToString();
            //    //string[] labelx = Text.Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);                    
            //    //der.DrawString(labelx[1].ToString(), objFnt, objBrsh, Pts[0].X + 65, Pts[0].Y);
            //    //der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);
            //    if (IsTrend)
            //    {
            //        Text = lblYAxis.Text.ToString();
            //        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 60);
            //    }
            //    else
            //    {
            //        Text = "File Name: " + trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
            //        der.DrawString(Text, objFnt, objBrsh, Pts[0].X - 45, 60);
            //    }

            //}
            //Pen dashpen = new Pen(Color.Blue, 1);
            ////dashpen.DashStyle=DashStyle.Dash;
            ////dashpen.DashCap=DashCap.Triangle;
            ////Graphics Line = panel1.CreateGraphics();
            //if (HarmncCrs)
            //{
            //    for (int i = 0; i < aatest.Length; i++)
            //    {
            //        der.DrawLine(dashpen, aatest[i], aatest[i + 1]);
            //        i++;
            //    }

            //}
            //else
            //{

            //    der.DrawLine(new Pen(Color.Blue, 2), pt1forImage, pt2forImage);
            //    if (TwoDCrossHairCursor)
            //    {
            //        der.DrawLine(new Pen(Color.Blue, 2), pt1forCImage, pt2forCImage);
            //    }

            //}
            GC.Collect();
            bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg");
            bmpheight = bmp.Height;
            bmp.Dispose();
            GC.Collect();
        }

        private void CrsorCrossHairByKey(string tgt)
        {
            if (tgt == "L" && TrgtMinus == false)
            {
                //ThrDCurCtr--;
                panel1.Refresh();
                redraw();
                TrgtMinus = true;
            }

            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);



            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }



            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();



            PointF ptH1 = new PointF();
            PointF ptH2 = new PointF();

            int Msx = 0;
            int PrvMX = 0;
            try
            {

                //Msx = MousePosition.X;
                //if (Msx >= (Rgn.Left + SixtyTwo) && Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (x.Length - 1))))
                //{
                if ((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)) <= Rgn.Right - OneSixtyTwo)
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));
                    }
                    else
                    {
                        pt1 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                            (float) (Rgn.Bottom - Fifty));

                        //pt1 = new PointF((float)(Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)), (float)(Rgn.Bottom - ((TwoHundred + OneFifty))));
                    }

                    pt2 = new PointF((float) (Rgn.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                        (float) Rgn.Top + OneFifty); //52//FourHundred

                    //if (PrvMX != Msx)
                    //{
                    Line.DrawLines(PenWht, arrLocts);
                    Line.DrawLine(PenBlk, pt1, pt2);
                    //Line.DrawLine(PenWht, Prv1, Prv2);
                    //PrvMX = Msx;

                    //float testval = Msx - (Rgn.Left + SixtyTwo);
                    //float XvalNow = (float)(testval / MainXAxisInterval);
                    XVala[0] = Convert.ToDouble(XSelected[(int) ThrDCurCtr]);
                    YVala[0] = Convert.ToDouble(YSelected[(int) ThrDCurCtr]);
                    FillDatagrid(XVala, YVala);
                    if (Pts[(int) ThrDCurCtr].Y != (int) Rgn.Bottom - 52)
                    {
                        ptH1 = new PointF((int) Rgn.Left + SixtyTwo, Pts[(int) ThrDCurCtr].Y);
                        ptH2 = new PointF((int) Rgn.Right - OneSixtyTwo, Pts[(int) ThrDCurCtr].Y);
                    }

                    Line.DrawLine(PenWht, Prv1, Prv2);
                    Line.DrawLine(PenBlk, ptH1, ptH2);
                    if (prvtest != 0)
                    {
                        Prv1 = ptH1;
                        Prv2 = ptH2;

                    }

                    redraw();

                    //}

                    Line.DrawLine(PenBlk, pt1, pt2);
                    Line.DrawLine(PenBlk, ptH1, ptH2);
                    //Line.DrawLine(PenWht, Prv1, Prv2);
                    //if (PrvMX == Msx)
                    //{
                    //    Line.DrawLine(PenBlk, Prv1, Prv2);
                    //}

                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                    prvtest++;
                    if (prvtest == 1)
                    {
                        panel1.Refresh();
                        redraw();
                    }

                    //}
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void CrsorCrossHair(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            if (MainCursorColorSelected == true)
            {
                PenBlk = new Pen(MainCursorColor, (float) .5);
            }



            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();



            PointF ptH1 = new PointF();
            PointF ptH2 = new PointF();

            int Msx = 0;
            int PrvMX = 0;
            try
            {

                Msx = e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (Time == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {
                        Line.DrawLines(PenWht, arrLocts);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        //Line.DrawLine(PenWht, Prv1, Prv2);
                        PrvMX = Msx;

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisInterval);
                        XVala[0] = Convert.ToDouble(XSelected[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YSelected[(int) XvalNow]);
                        FillDatagrid(XVala, YVala);
                        if (PtsSelected[(int) XvalNow].Y != (int) Rgn.Bottom - 52)
                        {
                            ptH1 = new PointF((int) Rgn.Left + SixtyTwo, PtsSelected[(int) XvalNow].Y);
                            ptH2 = new PointF((int) Rgn.Right - OneSixtyTwo, PtsSelected[(int) XvalNow].Y);
                        }

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, ptH1, ptH2);
                        if (prvtest != 0)
                        {
                            Prv1 = ptH1;
                            Prv2 = ptH2;
                            ThrDCurCtr = Convert.ToInt32(XvalNow);
                        }

                        redraw();

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    Line.DrawLine(PenBlk, ptH1, ptH2);

                    pt1forImage = pt1;
                    pt2forImage = pt2;
                    pt1forCImage = ptH1;
                    pt2forCImage = ptH2;
                    //Line.DrawLine(PenWht, Prv1, Prv2);
                    //if (PrvMX == Msx)
                    //{
                    //    Line.DrawLine(PenBlk, Prv1, Prv2);
                    //}

                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                    prvtest++;
                    if (prvtest == 1)
                    {
                        panel1.Refresh();
                        redraw();
                    }
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void CrsorCrossHairForZoomed(MouseEventArgs e)
        {
            double[] XVala = new double[1];
            double[] YVala = new double[1];
            Region rgn = new Region(panel1.Bounds);
            Graphics Line = panel1.CreateGraphics();
            Line.Clip = rgn;
            RectangleF Rgn = Line.ClipBounds;
            Pen PenBlk = new Pen(Color.Black, (float) .5);


            // if (Color.BlackSelected == true)
            {
                PenBlk = new Pen(Color.Black, (float) .5);
            }



            Pen PenWht = new Pen(panel1.BackColor, (float) .5);
            //int TotalXAxis = (Convert.ToInt16(Rgn.Right - Rgn.Left)) - 124;
            //int TotalYAxis = (Convert.ToInt16(Rgn.Bottom - Rgn.Top)) - 104;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();



            PointF ptH1 = new PointF();
            PointF ptH2 = new PointF();

            int Msx = 0;
            int PrvMX = 0;
            try
            {

                Msx = e.X; // MousePosition.X;
                if (Msx >= (Rgn.Left + SixtyTwo) &&
                    Msx <= ((Rgn.Left + SixtyTwo) + (MainXAxisInterval * (XSelected.Length - 1))))
                {
                    if (TimeDataAckForZoom == true)
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                    }
                    else
                    {
                        pt1 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Bottom - Fifty);
                        //pt1 = new PointF((float)Msx - Rgn.Left, (float)Rgn.Bottom - (TwoHundred + OneFifty));//50////TwoHundred
                    }

                    pt2 = new PointF((float) Msx - Rgn.Left, (float) Rgn.Top + OneFifty); //52//FourHundred

                    if (PrvMX != Msx)
                    {
                        Line.DrawLines(PenWht, arrLocts);
                        Line.DrawLine(PenBlk, pt1, pt2);
                        //Line.DrawLine(PenWht, Prv1, Prv2);
                        PrvMX = Msx;

                        float testval = Msx - (Rgn.Left + SixtyTwo);
                        float XvalNow = (float) (testval / MainXAxisIntervalZoom);
                        XVala[0] = Convert.ToDouble(XZoom[(int) XvalNow]);
                        YVala[0] = Convert.ToDouble(YZoom[(int) XvalNow]);
                        FillDatagrid(XVala, YVala);
                        if (PtsSelected[(int) XvalNow].Y != (int) Rgn.Bottom - 52)
                        {
                            ptH1 = new PointF((int) Rgn.Left + SixtyTwo, PtsZoomedVals[(int) XvalNow].Y);
                            ptH2 = new PointF((int) Rgn.Right - OneSixtyTwo, PtsZoomedVals[(int) XvalNow].Y);
                        }

                        Line.DrawLine(PenWht, Prv1, Prv2);
                        Line.DrawLine(PenBlk, ptH1, ptH2);
                        if (prvtest != 0)
                        {
                            Prv1 = ptH1;
                            Prv2 = ptH2;

                        }

                        DrawZoomed();

                    }

                    Line.DrawLine(PenBlk, pt1, pt2);
                    Line.DrawLine(PenBlk, ptH1, ptH2);
                    //Line.DrawLine(PenWht, Prv1, Prv2);
                    //if (PrvMX == Msx)
                    //{
                    //    Line.DrawLine(PenBlk, Prv1, Prv2);
                    //}

                    if (Ctrc == 10)
                        Ctrc = 0;
                    arrLocts[Ctrc] = pt1;
                    Ctrc++;
                    arrLocts[Ctrc] = pt2;
                    Ctrc++;
                    prvtest++;
                    if (prvtest == 1)
                    {
                        panel1.Refresh();
                        redraw();
                    }
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void ThreeDeeCursor(string KeyType)
        {
            //ThreeDeeSquareCursor();
            //CtrSelectedCraph = -1;
            Pen PenBlk = new Pen(Color.Black, 1);

            // if (Color.BlackSelected == true)
            {
                PenBlk = new Pen(Color.Black, (float) .5);
            }




            //Pen PenWht = new Pen(Color.White, 2);
            Pen PenWht = new Pen(panel1.BackColor, 1);
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;
            PointF[] Thdpt1 = new PointF[0];
            PointF PtStrt = new PointF();
            PointF PtEnd = new PointF();
            double MaxVal = 0;
            //Pts = new PointF[0];
            //PointF Pts1 = new PointF();
            int Msx = 0;
            int PrvMX = 0;
            try
            {
                PtStrt = new PointF((float) (Rect.Left + (SixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                    (float) (Rect.Bottom - TwoHundred));
                //if (PtStrt != null)
                //{
                //    Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                //    Thdpt1[Thdpt1.Length - 1] = PtStrt;
                //}
                if (Pts != null)
                {
                    try
                    {
                        if (Pts[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts1 != null)
                {
                    try
                    {
                        if (Pts1[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts1[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts2 != null)
                {
                    try
                    {
                        if (Pts2[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts2[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts3 != null)
                {
                    try
                    {
                        if (Pts3[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts3[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts4 != null)
                {
                    try
                    {
                        if (Pts4[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts4[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts5 != null)
                {
                    try
                    {
                        if (Pts5[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts5[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts6 != null)
                {
                    try
                    {
                        if (Pts6[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts6[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                if (Pts7 != null)
                {
                    try
                    {
                        if (Pts7[ThrDCurCtr] != null)
                        {
                            //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                            Thdpt1[Thdpt1.Length - 1] = Pts7[ThrDCurCtr];
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }

                //Amit jain     DA_43	Line cursor is not moving in waterfall graph.	code related	minor	16/4/2010
                PtEnd = new PointF((float) (Rect.Left + (OneSixtyTwo) + (CursorStartInterval * ThrDCurCtr)),
                    (float) (Rect.Bottom - FourFifty));
                //Array.Resize(ref Thdpt1, Thdpt1.Length + 1);
                _ResizeArray.IncreaseArrayPointF(ref Thdpt1, 1);
                Thdpt1[Thdpt1.Length - 1] = PtEnd;
                //Thdpt1[9] = PtEnd;

                if (ThrDCurCtr != 0)
                {
                    ThreDee.DrawLines(PenWht, Thdpt2);

                    ThreeDeeRedraw();
                    if (AreaPlot == true)
                    {
                        WaterFallAreaPlot();
                    }

                }

                ThreDee.DrawLines(PenBlk, Thdpt1);

                Thdpt2 = Thdpt1;
                FillThreeDDataGrid(ThrDCurCtr);
                DrawGrids();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        private void FillThreeDDataGrid(int CtrCT)
        {

            try
            {
                try
                {
                    dataGridView1.Rows[0].Cells[0].Value = x[CtrCT];
                    dataGridView1.Rows[0].Cells[1].Value = y[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {

                    dataGridView1.Rows[1].Cells[0].Value = x1[CtrCT];
                    dataGridView1.Rows[1].Cells[1].Value = y1[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {
                    dataGridView1.Rows[2].Cells[0].Value = x2[CtrCT];
                    dataGridView1.Rows[2].Cells[1].Value = y2[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {
                    dataGridView1.Rows[3].Cells[0].Value = x3[CtrCT];
                    dataGridView1.Rows[3].Cells[1].Value = y3[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {
                    dataGridView1.Rows[4].Cells[0].Value = x4[CtrCT];
                    dataGridView1.Rows[4].Cells[1].Value = y4[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {
                    dataGridView1.Rows[5].Cells[0].Value = x5[CtrCT];
                    dataGridView1.Rows[5].Cells[1].Value = y5[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {
                    dataGridView1.Rows[6].Cells[0].Value = x6[CtrCT];
                    dataGridView1.Rows[6].Cells[1].Value = y6[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                try
                {
                    dataGridView1.Rows[7].Cells[0].Value = x7[CtrCT];
                    dataGridView1.Rows[7].Cells[1].Value = y7[CtrCT];
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            dataGridView1.Refresh();
        }

        private void FillThreeDDataGrid(int CtrCT, int SelectedGph)
        {

            try
            {
                switch (SelectedGph)
                {
                    case 0:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y[CtrCT];
                    }
                        break;
                    case 1:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x1[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y1[CtrCT];
                    }
                        break;
                    case 2:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x2[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y2[CtrCT];
                    }
                        break;
                    case 3:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x3[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y3[CtrCT];
                    }
                        break;
                    case 4:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x4[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y4[CtrCT];
                    }
                        break;
                    case 5:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x5[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y5[CtrCT];
                    }
                        break;
                    case 6:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x6[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y6[CtrCT];
                    }
                        break;
                    case 7:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x7[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y7[CtrCT];
                    }
                        break;
                    default:
                    {
                        dataGridView1.Rows[0].Cells[0].Value = x[CtrCT];
                        dataGridView1.Rows[0].Cells[1].Value = y[CtrCT];
                    }
                        break;



                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            dataGridView1.Refresh();
        }

        private void btnColors_Click(object sender, EventArgs e)
        {
            try
            {
                OpenColorDialogue();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private bool IncrementSelectedGraphCounter = false;


        //private void FwdBtnClked()
        //{
        //    if (IncrementSelectedGraphCounter == true)
        //    {
        //        if (GraphType == "FFT")
        //        {
        //            if (arlstSColors != null)
        //            {
        //                if (arlstSColors.Count == 0)
        //                {
        //                    CtrSelectedCraph = 0;
        //                }
        //                else if (CtrSelectedCraph == arlstSColors.Count - 1)
        //                {
        //                    CtrSelectedCraph = 0;
        //                }
        //                else
        //                    CtrSelectedCraph++;
        //            }
        //            else
        //            {
        //                if (CtrSelectedCraph == 7)
        //                {
        //                    CtrSelectedCraph = 0;
        //                }
        //                else
        //                    CtrSelectedCraph++;
        //            }
        //        }
        //        else
        //        {
        //            if (arlstSColors != null && arlstSColors.Count != 0)
        //            {
        //                if (CtrSelectedCraph == arlstSColors.Count - 1)
        //                {
        //                    CtrSelectedCraph = 0;
        //                }
        //                else
        //                    CtrSelectedCraph++;
        //            }
        //            else
        //            {
        //                if (CtrSelectedCraph == 7)
        //                {
        //                    CtrSelectedCraph = 0;
        //                }
        //                else
        //                    CtrSelectedCraph++;
        //            }
        //        }
        //    }
        //    //CheckSelection = true;
        //    drawPrvs();
        //    Region Rgn = new Region(panel1.Bounds);
        //    Graphics ThreDee = panel1.CreateGraphics();
        //    //ThreDee = panel1.CreateGraphics();
        //    ThreDee.Clip = Rgn;
        //    Pen BlkPen = new Pen(Color.Black, 1);
        //    RectangleF Rect = ThreDee.ClipBounds;
        //    PointF pt1 = new PointF();
        //    PointF pt2 = new PointF();
        //    float ScreenLenth = Rect.Right;
        //    float ScreenHeight = Rect.Bottom;
        //    double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - ((Rect.Left + SixtyTwo) + OneSixtyTwo);
        //    double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (TwoHundred + FourHundred);
        //    double MaxVal = 0;
        //    Pen PenBlkB = new Pen(Color.Black, 2);
        //    //Pts = new PointF[0];
        //    PointF Ptsn1 = new PointF();
        //    Pen BlkDash = new Pen(Color.Black, 2);
        //    BlkDash.DashCap = DashCap.Triangle;
        //    BlkDash.DashStyle = DashStyle.Dash;
        //    try
        //    {

        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
        //        //pt2 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
        //        //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
        //        //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
        //        //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
        //        //pt2 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
        //        //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
        //        //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        if (GraphType == "FFT")
        //        {
        //            if (Time == true)
        //            {
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                pt2 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Top + OneFifty));//FourHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                pt2 = new Point((int)(Rect.Right - OneSixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                ThreDee.DrawLine(BlkDash, pt1, pt2);
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                pt2 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - Fifty));//FourHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //            }

        //            else
        //            {
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - Fifty));//TwoHundred
        //                pt2 = new Point((int)(Rect.Right - OneSixtyTwo), (int)(Rect.Bottom - Fifty));//TwoHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - Fifty));//TwoHundred
        //                pt2 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Top + OneFifty));//FourHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //            }
        //            Thread.Sleep(20);
        //        }
        //        if (arlstSColors != null && arlstSColors.Count > 0)
        //        {
        //            if (CtrSelectedCraph == 0)
        //            {

        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts, (float)0);
        //                PtsSelected = new PointF[Pts.Length];
        //                PtsSelected = Pts;
        //                XSelected = new double[x.Length];
        //                YSelected = new double[y.Length];
        //                XSelected = x;
        //                YSelected = y;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 1)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts1, (float)0);
        //                PtsSelected = new PointF[Pts1.Length];
        //                PtsSelected = Pts1;
        //                XSelected = new double[x1.Length];
        //                YSelected = new double[y1.Length];
        //                XSelected = x1;
        //                YSelected = y1;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 2)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts2, (float)0);
        //                PtsSelected = new PointF[Pts2.Length];
        //                PtsSelected = Pts2;
        //                XSelected = new double[x2.Length];
        //                YSelected = new double[y2.Length];
        //                XSelected = x2;
        //                YSelected = y2;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 3)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts3, (float)0);
        //                PtsSelected = new PointF[Pts3.Length];
        //                PtsSelected = Pts3;
        //                XSelected = new double[x3.Length];
        //                YSelected = new double[y3.Length];
        //                XSelected = x3;
        //                YSelected = y3;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 4)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts4, (float)0);
        //                PtsSelected = new PointF[Pts4.Length];
        //                PtsSelected = Pts4;
        //                XSelected = new double[x4.Length];
        //                YSelected = new double[y4.Length];
        //                XSelected = x4;
        //                YSelected = y4;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 5)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts5, (float)0);
        //                PtsSelected = new PointF[Pts5.Length];
        //                PtsSelected = Pts5;
        //                XSelected = new double[x5.Length];
        //                YSelected = new double[y5.Length];
        //                XSelected = x5;
        //                YSelected = y5;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 6)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts6, (float)0);
        //                PtsSelected = new PointF[Pts6.Length];
        //                PtsSelected = Pts6;
        //                XSelected = new double[x6.Length];
        //                YSelected = new double[y6.Length];
        //                XSelected = x6;
        //                YSelected = y6;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            if (CtrSelectedCraph == 7)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts7, (float)0);
        //                PtsSelected = new PointF[Pts7.Length];
        //                PtsSelected = Pts7;
        //                XSelected = new double[x7.Length];
        //                YSelected = new double[y7.Length];
        //                XSelected = x7;
        //                YSelected = y7;
        //                if (GenDiGraph != "XY")
        //                {
        //                    lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //                }
        //            }
        //            CtrSelectedCraphPrvs = CtrSelectedCraph;
        //            SelectedGraph = CtrSelectedCraph;
        //        }
        //        else
        //        {
        //            if (CtrSelectedCraph == 0)
        //            {

        //                ThreDee.DrawCurve(new Pen(Color.DarkRed, (float)2), Pts, (float)0);
        //                PtsSelected = new PointF[Pts.Length];
        //                PtsSelected = Pts;
        //                XSelected = new double[x.Length];
        //                YSelected = new double[y.Length];
        //                XSelected = x;
        //                YSelected = y;
        //            }
        //            if (CtrSelectedCraph == 1)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float)2), Pts1, (float)0);
        //                PtsSelected = new PointF[Pts1.Length];
        //                PtsSelected = Pts1;
        //                XSelected = new double[x1.Length];
        //                YSelected = new double[y1.Length];
        //                XSelected = x1;
        //                YSelected = y1;
        //            }
        //            if (CtrSelectedCraph == 2)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float)2), Pts2, (float)0);
        //                PtsSelected = new PointF[Pts2.Length];
        //                PtsSelected = Pts2;
        //                XSelected = new double[x2.Length];
        //                YSelected = new double[y2.Length];
        //                XSelected = x2;
        //                YSelected = y2;
        //            }
        //            if (CtrSelectedCraph == 3)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float)2), Pts3, (float)0);
        //                PtsSelected = new PointF[Pts3.Length];
        //                PtsSelected = Pts3;
        //                XSelected = new double[x3.Length];
        //                YSelected = new double[y3.Length];
        //                XSelected = x3;
        //                YSelected = y3;
        //            }
        //            if (CtrSelectedCraph == 4)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts4, (float)0);
        //                PtsSelected = new PointF[Pts4.Length];
        //                PtsSelected = Pts4;
        //                XSelected = new double[x4.Length];
        //                YSelected = new double[y4.Length];
        //                XSelected = x4;
        //                YSelected = y4;
        //            }
        //            if (CtrSelectedCraph == 5)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DimGray, (float)2), Pts5, (float)0);
        //                PtsSelected = new PointF[Pts5.Length];
        //                PtsSelected = Pts5;
        //                XSelected = new double[x5.Length];
        //                YSelected = new double[y5.Length];
        //                XSelected = x5;
        //                YSelected = y5;
        //            }
        //            if (CtrSelectedCraph == 6)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts6, (float)0);
        //                PtsSelected = new PointF[Pts6.Length];
        //                PtsSelected = Pts6;
        //                XSelected = new double[x6.Length];
        //                YSelected = new double[y6.Length];
        //                XSelected = x6;
        //                YSelected = y6;
        //            }
        //            if (CtrSelectedCraph == 7)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float)2), Pts7, (float)0);
        //                PtsSelected = new PointF[Pts7.Length];
        //                PtsSelected = Pts7;
        //                XSelected = new double[x7.Length];
        //                YSelected = new double[y7.Length];
        //                XSelected = x7;
        //                YSelected = y7;
        //            }
        //            CtrSelectedCraphPrvs = CtrSelectedCraph;
        //            SelectedGraph = CtrSelectedCraph;
        //            //CtrSelectedCraph++;

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //        tpGraph_Paint(null, null);
        //    }
        //}

        private void drawPrvs()
        {
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - ((Rect.Left + SixtyTwo) + OneSixtyTwo);
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (FourHundred + TwoHundred);
            double MaxVal = 0;
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();
            try
            {
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);

                if (arlstSColors != null && arlstSColors.Count > 0)
                {
                    if (CtrSelectedCraphPrvs == 0)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts, (float) 0);

                    }

                    if (CtrSelectedCraphPrvs == 1)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts1, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts1, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 2)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts2, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts2, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 3)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts3, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts3, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 4)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts4, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts4, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 5)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts5, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts5, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 6)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts6, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts6, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 7)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts7, (float) 0);
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraphPrvs])), (float) .5),
                            Pts7, (float) 0);
                    }
                }
                else
                {


                    if (CtrSelectedCraphPrvs == 0)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DarkRed, (float) .5), Pts, (float) 0);

                    }

                    if (CtrSelectedCraphPrvs == 1)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts1, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float) .5), Pts1, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 2)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts2, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float) .5), Pts2, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 3)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts3, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float) .5), Pts3, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 4)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts4, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float) .5), Pts4, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 5)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts5, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DimGray, (float) .5), Pts5, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 6)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts6, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.Chocolate, (float) .5), Pts6, (float) 0);
                    }

                    if (CtrSelectedCraphPrvs == 7)
                    {
                        ThreDee.DrawCurve(new Pen(panel1.BackColor, (float) 2), Pts7, (float) 0);
                        ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float) .5), Pts7, (float) 0);
                    }

                    //CtrSelectedCraphPrvs = CtrSelectedCraph;
                    //CtrSelectedCraph--;
                    //CtrSelectedCraphPrvs--;
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                tpGraph_Paint(null, null);
            }
        }

        //private void DrawBkwd()
        //{
        //    drawPrvs();


        //    if (GraphType == "FFT")
        //    {
        //        if (arlstSColors != null)
        //        {
        //            if (arlstSColors.Count == 0)
        //            {
        //                CtrSelectedCraph = 0;
        //            }
        //            else if (CtrSelectedCraph == arlstSColors.Count - 1)
        //            {
        //                CtrSelectedCraph = 0;
        //            }
        //            else
        //                CtrSelectedCraph++;
        //        }
        //        else
        //        {
        //            if (CtrSelectedCraph == 7)
        //            {
        //                CtrSelectedCraph = 0;
        //            }
        //            else
        //                CtrSelectedCraph++;
        //        }
        //    }
        //    else
        //    {
        //        if (arlstSColors != null && arlstSColors.Count != 0)
        //        {
        //            if (CtrSelectedCraph == 0 || CtrSelectedCraph == -1)
        //            {
        //                CtrSelectedCraph = arlstSColors.Count - 1;
        //            }
        //            else
        //                CtrSelectedCraph--;
        //        }
        //        else
        //        {
        //            if (CtrSelectedCraph == 0 || CtrSelectedCraph == -1)
        //            {
        //                CtrSelectedCraph = 7;
        //            }
        //            else
        //                CtrSelectedCraph--;
        //        }
        //    }
        //    Region Rgn = new Region(panel1.Bounds);
        //    Graphics ThreDee = panel1.CreateGraphics();
        //    //ThreDee = panel1.CreateGraphics();
        //    ThreDee.Clip = Rgn;
        //    Pen BlkPen = new Pen(Color.Black, 1);
        //    RectangleF Rect = ThreDee.ClipBounds;
        //    PointF pt1 = new PointF();
        //    PointF pt2 = new PointF();
        //    float ScreenLenth = Rect.Right;
        //    float ScreenHeight = Rect.Bottom;
        //    double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (OneSixtyTwo + (Rect.Left + SixtyTwo));
        //    double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (FourHundred + TwoHundred);
        //    double MaxVal = 0;
        //    Pen PenBlkB = new Pen(Color.Black, 2);
        //    //Pts = new PointF[0];
        //    PointF Ptsn1 = new PointF();
        //    Pen BlkDash = new Pen(Color.Black, 2);
        //    BlkDash.DashCap = DashCap.Triangle;
        //    BlkDash.DashStyle = DashStyle.Dash;
        //    try
        //    {
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
        //        //pt2 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
        //        //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
        //        //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
        //        //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
        //        //pt2 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
        //        //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        //pt1 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
        //        //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
        //        //ThreDee.DrawLine(BlkPen, pt1, pt2);
        //        if (GraphType == "FFT")
        //        {
        //            if (Time == true)
        //            {
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                pt2 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Top + OneFifty));//FourHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                pt2 = new Point((int)(Rect.Right - OneSixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                ThreDee.DrawLine(BlkDash, pt1, pt2);
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - (TwoHundred + OneFifty)));//TwoHundred
        //                pt2 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - Fifty));//FourHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //            }

        //            else
        //            {
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - Fifty));//TwoHundred
        //                pt2 = new Point((int)(Rect.Right - OneSixtyTwo), (int)(Rect.Bottom - Fifty));//TwoHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //                pt1 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Bottom - Fifty));//TwoHundred
        //                pt2 = new Point((int)(Rect.Left + SixtyTwo), (int)(Rect.Top + OneFifty));//FourHundred
        //                ThreDee.DrawLine(PenBlkB, pt1, pt2);
        //            }
        //            Thread.Sleep(20);
        //        }
        //        if (arlstSColors != null && arlstSColors.Count > 0)
        //        {
        //            if (CtrSelectedCraph == 0)
        //            {

        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts, (float)0);
        //                PtsSelected = new PointF[Pts.Length];
        //                PtsSelected = Pts;
        //                XSelected = new double[x.Length];
        //                YSelected = new double[y.Length];
        //                XSelected = x;
        //                YSelected = y;
        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 1)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts1, (float)0);
        //                PtsSelected = new PointF[Pts1.Length];
        //                PtsSelected = Pts1;
        //                XSelected = new double[x1.Length];
        //                YSelected = new double[y1.Length];
        //                XSelected = x1;
        //                YSelected = y1;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 2)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts2, (float)0);
        //                PtsSelected = new PointF[Pts2.Length];
        //                PtsSelected = Pts2;
        //                XSelected = new double[x2.Length];
        //                YSelected = new double[y2.Length];
        //                XSelected = x2;
        //                YSelected = y2;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 3)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts3, (float)0);
        //                PtsSelected = new PointF[Pts3.Length];
        //                PtsSelected = Pts3;
        //                XSelected = new double[x3.Length];
        //                YSelected = new double[y3.Length];
        //                XSelected = x3;
        //                YSelected = y3;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 4)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts4, (float)0);
        //                PtsSelected = new PointF[Pts4.Length];
        //                PtsSelected = Pts4;
        //                XSelected = new double[x4.Length];
        //                YSelected = new double[y4.Length];
        //                XSelected = x4;
        //                YSelected = y4;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 5)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts5, (float)0);
        //                PtsSelected = new PointF[Pts5.Length];
        //                PtsSelected = Pts5;
        //                XSelected = new double[x5.Length];
        //                YSelected = new double[y5.Length];
        //                XSelected = x5;
        //                YSelected = y5;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 6)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts6, (float)0);
        //                PtsSelected = new PointF[Pts6.Length];
        //                PtsSelected = Pts6;
        //                XSelected = new double[x6.Length];
        //                YSelected = new double[y6.Length];
        //                XSelected = x6;
        //                YSelected = y6;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            if (CtrSelectedCraph == 7)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float)2), Pts7, (float)0);
        //                PtsSelected = new PointF[Pts7.Length];
        //                PtsSelected = Pts7;
        //                XSelected = new double[x7.Length];
        //                YSelected = new double[y7.Length];
        //                XSelected = x7;
        //                YSelected = y7;

        //                lblDate.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
        //            }
        //            CtrSelectedCraphPrvs = CtrSelectedCraph;
        //            SelectedGraph = CtrSelectedCraph;
        //        }
        //        else
        //        {
        //            if (CtrSelectedCraph == 0)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkRed, (float)2), Pts, (float)0);
        //                PtsSelected = new PointF[Pts.Length];
        //                PtsSelected = Pts;
        //                XSelected = new double[x.Length];
        //                YSelected = new double[y.Length];
        //                XSelected = x;
        //                YSelected = y;
        //            }
        //            if (CtrSelectedCraph == 1)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float)2), Pts1, (float)0);
        //                PtsSelected = new PointF[Pts1.Length];
        //                PtsSelected = Pts1;
        //                XSelected = new double[x1.Length];
        //                YSelected = new double[y1.Length];
        //                XSelected = x1;
        //                YSelected = y1;
        //            }
        //            if (CtrSelectedCraph == 2)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float)2), Pts2, (float)0);
        //                PtsSelected = new PointF[Pts2.Length];
        //                PtsSelected = Pts2;
        //                XSelected = new double[x2.Length];
        //                YSelected = new double[y2.Length];
        //                XSelected = x2;
        //                YSelected = y2;
        //            }
        //            if (CtrSelectedCraph == 3)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float)2), Pts3, (float)0);
        //                PtsSelected = new PointF[Pts3.Length];
        //                PtsSelected = Pts3;
        //                XSelected = new double[x3.Length];
        //                YSelected = new double[y3.Length];
        //                XSelected = x3;
        //                YSelected = y3;
        //            }
        //            if (CtrSelectedCraph == 4)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float)2), Pts4, (float)0);
        //                PtsSelected = new PointF[Pts4.Length];
        //                PtsSelected = Pts4;
        //                XSelected = new double[x4.Length];
        //                YSelected = new double[y4.Length];
        //                XSelected = x4;
        //                YSelected = y4;
        //            }
        //            if (CtrSelectedCraph == 5)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DimGray, (float)2), Pts5, (float)0);
        //                PtsSelected = new PointF[Pts5.Length];
        //                PtsSelected = Pts5;
        //                XSelected = new double[x5.Length];
        //                YSelected = new double[y5.Length];
        //                XSelected = x5;
        //                YSelected = y5;
        //            }
        //            if (CtrSelectedCraph == 6)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.Chocolate, (float)2), Pts6, (float)0);
        //                PtsSelected = new PointF[Pts6.Length];
        //                PtsSelected = Pts6;
        //                XSelected = new double[x6.Length];
        //                YSelected = new double[y6.Length];
        //                XSelected = x6;
        //                YSelected = y6;
        //            }
        //            if (CtrSelectedCraph == 7)
        //            {
        //                ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float)2), Pts7, (float)0);
        //                PtsSelected = new PointF[Pts7.Length];
        //                PtsSelected = Pts7;
        //                XSelected = new double[x7.Length];
        //                YSelected = new double[y7.Length];
        //                XSelected = x7;
        //                YSelected = y7;
        //            }
        //            CtrSelectedCraphPrvs = CtrSelectedCraph;
        //            SelectedGraph = CtrSelectedCraph;
        //            //CtrSelectedCraph--;
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //        tpGraph_Paint(null, null);
        //    }
        //}

        void tpGraph_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Region rgn1 = new Region(panel1.Bounds);
                System.Drawing.Graphics der = panel1.CreateGraphics();
                der.Clip = rgn1;
                RectangleF pt = der.ClipBounds;
                pnlForlabel.Height = (int) (pt.Top + OneFifty - 1);
                if (ExtraZoom)
                {
                    DrawBandRegion(x, y, "J");
                    if (GraphType == "FFT" && GraphZoomedAlready == false) //if (GraphType == "FFT")
                    {
                        redraw();
                    }
                    else if (GraphType == "FFT" && GraphZoomedAlready == true)
                    {
                        redrawZoom();
                    }
                    else if (GraphType == "Orbit")
                    {
                        redrawOrbit();
                    }
                    // DA_7   code related    minor    Amit Jain  30-03-2010

                    else if (GraphType == "Octave")
                    {
                        RedrawOctave();
                    }
                    else
                    {
                        panel1.Refresh();
                        ThreeDeeRedraw();
                    }

                    //tbSideBandPercentage.Text = Convert.ToString(iConstSBValue);
                    //tbSideBandRatio.Text = "1/" + Convert.ToString(iConstSBRatio);
                    //tsSideBandTrendValue.Text = Convert.ToString(iConstSBTrendValue);
                    SBValue = Convert.ToString(iConstSBValue);
                    TrendRatio = "1/" + Convert.ToString(iConstSBRatio);
                    TrendValue = Convert.ToString(iConstSBTrendValue);
                }
                else
                {
                    if (Pts != null)
                    {
                        //splitContainerControl1.Visible = true;
                        panel1.Visible = true;

                        if (GraphType == "FFT" && GraphZoomedAlready == false) //if (GraphType == "FFT")
                        {
                            redraw();
                        }
                        else if (GraphType == "FFT" && GraphZoomedAlready == true)
                        {
                            redrawZoom();
                        }
                        else if (GraphType == "Orbit")
                        {
                            redrawOrbit();
                        }
                        // DA_7   code related    minor    Amit Jain  30-03-2010

                        else if (GraphType == "Octave")
                        {
                            RedrawOctave();
                        }
                        else
                        {
                            panel1.Refresh();
                            ThreeDeeRedraw();
                        }

                        //tbSideBandPercentage.Text = Convert.ToString(iConstSBValue);
                        //tbSideBandRatio.Text = "1/" + Convert.ToString(iConstSBRatio);
                        //tsSideBandTrendValue.Text = Convert.ToString(iConstSBTrendValue);
                        SBValue = Convert.ToString(iConstSBValue);
                        TrendRatio = "1/" + Convert.ToString(iConstSBRatio);
                        TrendValue = Convert.ToString(iConstSBTrendValue);
                    }
                    else
                    {
                        //splitContainerControl1.Visible = false;
                        panel1.Visible = true;
                    }
                }
                //string sInstName = GetInstrumentName();
                //if (sInstName == "DI-460")
                //{
                //    SetGraphFeatures();
                //    comboBoxEdit1.Enabled = false;
                //    comboBoxEdit111.Enabled = false;
                //}



            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        int iConstSBTrendValue = 10;
        double iConstSBTrendFreq = 100;

        //private void tsBtnSideBandTrend_Click(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        SideBandTrend objTrend = new SideBandTrend();

        //        objTrend.ShowDialog();
        //        iConstSBTrendFreq = objTrend._Freq;
        //        iConstSBTrendValue = objTrend._Value;
        //        if (ExtraZoom)
        //        {
        //            DrawBandRegion(x, y, "J");
        //            if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
        //            {
        //                redraw();
        //            }
        //            else if (GraphType == "FFT" && GraphZoomedAlready == true)
        //            {
        //                redrawZoom();
        //            }
        //            else if (GraphType == "Orbit")
        //            {
        //                redrawOrbit();
        //            }
        //            else
        //            {
        //                ThreeDeeRedraw();
        //            }
        //            TrendValue = Convert.ToString(iConstSBTrendValue); //tsSideBandTrendValue.Text = Convert.ToString(iConstSBTrendValue);
        //        }
        //        else
        //        {
        //            if (Pts != null)
        //            {
        //                //splitContainerControl1.Visible = true;
        //                panel1.Visible = true;

        //                if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
        //                {
        //                    redraw();
        //                }
        //                else if (GraphType == "FFT" && GraphZoomedAlready == true)
        //                {
        //                    redrawZoom();
        //                }
        //                else if (GraphType == "Orbit")
        //                {
        //                    redrawOrbit();
        //                }
        //                else
        //                {
        //                    ThreeDeeRedraw();
        //                }
        //                TrendValue = Convert.ToString(iConstSBTrendValue);// tsSideBandTrendValue.Text = Convert.ToString(iConstSBTrendValue);
        //            }
        //            else
        //            {
        //                //splitContainerControl1.Visible = false;
        //                panel1.Visible = true;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //}
        private void tsBtnSideBandTrend_Click(object sender, EventArgs e)
        {
            try
            {
                objTrend = new SideBandTrend();

                SingleCrs = false;
                HarmncCrs = false;
                SideBndCsr = false;
                SideBndCsrRatio = false;
                SideBandTrndDrw = false;
                TwDSingleSqrCrs = false;
                TwoDCrossHairCursor = false;
                ThrdSqr = false;
                ThrdLn = false;
                //cmbCurSors.SelectedIndex = 0;
                //Amit jain     DA_38	click the sidebandtrend single line cursor moves ,but I have not selected any cursor	code related	minor 	12-4-2010

                objTrend._Form1 = this;

                SelectBandTrend = true;
                //_LineGraph.SelectBandTrend = true;
                //_LineGraph.SetCursorType("SidebandtrendButton");
                //_LineGraph.SetCursorType("Select Cursor");
                //_LineGraph.SideBandTrendClicked();

                objTrend.Show();




                //if (ExtraZoom)
                //{
                //    DrawBandRegion(x, y, "J");
                //    if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
                //    {
                //        redraw();
                //    }
                //    else if (GraphType == "FFT" && GraphZoomedAlready == true)
                //    {
                //        redrawZoom();
                //    }
                //    else if (GraphType == "Orbit")
                //    {
                //        redrawOrbit();
                //    }
                //    else if (GraphType == "SCL")
                //    {
                //        redrawSCL();
                //    }
                //    // DA_7   code related    minor    Amit Jain  30-03-2010

                //    else if (GraphType == "Octave")
                //    {
                //        RedrawOctave();
                //    }
                //    else
                //    {
                //        ThreeDeeRedraw();
                //    }
                //    TrendValue = Convert.ToString(FillValueFreq());
                //}
                //else
                //{
                //    if (Pts != null)
                //    {
                //        panel1.Visible = true;//splitContainerControl1.Visible = true;

                //        if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
                //        {
                //            redraw();
                //        }
                //        else if (GraphType == "FFT" && GraphZoomedAlready == true)
                //        {
                //            redrawZoom();
                //        }
                //        else if (GraphType == "Orbit")
                //        {
                //            redrawOrbit();
                //        }
                //        else if (GraphType == "SCL")
                //        {
                //            redrawSCL();
                //        }
                //        // DA_7   code related    minor    Amit Jain  30-03-2010

                //        else if (GraphType == "Octave")
                //        {
                //            RedrawOctave();
                //        }
                //        else
                //        {
                //            ThreeDeeRedraw();
                //        }
                //        TrendValue = Convert.ToString(FillValueFreq());
                //    }
                //    else
                //    {
                //        panel1.Visible = false; //splitContainerControl1.Visible = false;
                //    }
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private bool MultipleCrsr = false;
        //public void NullCursorBools()
        //{
        //    try
        //    {
        //        SingleCrs = false;
        //        HarmncCrs = false;
        //        SideBndCsr = false;
        //        SideBndCsrRatio = false;
        //        PeekCursor = false;
        //        SideBandTrndDrw = false;
        //        LineCursor = false;
        //        SqureCrs = false;
        //        HarmncCrs = false;
        //        SingleCrs = false;
        //        TwDSingleSqrCrs = false;
        //        TwoDCrossHairCursor = false;
        //        LineCursor = false;
        //        SqureCrs = false;

        //        AreaPlot = false;
        //        //BtnOk = 1;
        //        MultipleCrsr = false;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //}


        private void SingleCursorFFTButtonClicked()
        {
            try
            {

                SingleCrs = !SingleCrs;
                HarmncCrs = false;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void HarmonicFFTCursorClicked()
        {
            try
            {

                HarmncCrs = !HarmncCrs;
                SingleCrs = false;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void DrawWaterFallClicked()
        {
            SetAxis();
            x = new double[0];
            y = new double[0];
            x1 = new double[0];
            y1 = new double[0];
            x2 = new double[0];
            y2 = new double[0];
            x3 = new double[0];
            y3 = new double[0];
            x4 = new double[0];
            y4 = new double[0];
            x5 = new double[0];
            y5 = new double[0];
            x6 = new double[0];
            y6 = new double[0];
            x7 = new double[0];
            y7 = new double[0];
            Pts = null;
            Pts1 = null;
            Pts2 = null;
            Pts3 = null;
            Pts4 = null;
            Pts5 = null;
            Pts6 = null;
            Pts7 = null;
            ChoosenType = "WaterFall";
            panel1.Refresh();
            deletedataGridRows();
            dataGridView1.Rows.Add(8);
            for (int i = 0; i <= 7; i++)
            {
                ThreeDCreater();
            }
        }

        private void SqureWaterFallCursorClicked()
        {
            SqureCrs = true;
            LineCursor = false;
        }

        private void LineCursorWaterFallClicked()
        {
            ThreeDeeRedraw();
            LineCursor = true;
            SqureCrs = false;
        }

        public void RefreshZoomParam()
        {

            btnUnZoom.Enabled = false;
            Zoom = false;
            XZoom = null;
            YZoom = null;
            ZoomedY = null;
            ZommedX = null;
            PtsForZoom = null;
            PtsZoomedVals = null;
            ZommArrCtr = 0;
            //panel1.Refresh();
            //Thread.Sleep(20);
            GphCtr = 0;
            CtrSelectedCraph = -1;
            GraphZoomedAlready = false;
            //redraw();
            //redraw();
        }

        string sInstrment = null;

        public string instrument
        {
            set { sInstrment = value; }

        }

        public void ClearCmbCursor()
        {
            try
            {
                cmbCurSors.Items.Clear();
                repositoryItemComboBox1.Items.Clear();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public bool sidebandbuttonEnabled
        {
            get { return bbSBRatio.Enabled; }
            set
            {
                tsBtnSideBandRatio.Enabled = value;
                tsBtnSideBandTrend.Enabled = value;
                tsbtnSideBandValue.Enabled = value;

                bbSBRatio.Enabled = value;
                bbSBTrend.Enabled = value;
                bbSBValue.Enabled = value;
            }
        }

        public bool ZommingButton
        {

            set
            {
                btnUnZoom.Enabled = !value;
                btnZoom.Enabled = value;

                bbZoom.Enabled = value;
                bbUnzoom.Enabled = !value;
            }
        }

        public bool AreaGraphButtonEnabled
        {
            get { return btnAreaGraph.Enabled; }
            set
            {
                btnAreaGraph.Enabled = value;
                bbArea.Enabled = value;
            }
        }

        public bool ExtraZoomButtonEnabled
        {
            get { return tsBtnExtraZoom.Enabled; }
            set
            {
                tsBtnExtraZoom.Enabled = value;
                bbBand.Enabled = value;
            }
        }

        private void btnUnZoom_Click(object sender, EventArgs e)
        {
            try
            {
                if (GraphType == "FFT")
                {

                    AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;
                    btnColors.Enabled = true;


                    {
                        TrendButtonEnabled = true; // btnTrend.Enabled = true;
                    }
                    //btnOrbit.Enabled = true;



                    tsBtnHighestFive.Enabled = true;


                    ExtraZoomButtonEnabled = true; // tsBtnExtraZoom.Enabled = true;
                    //tsBtnSideBandRatio.Enabled = true;
                    //tsBtnSideBandTrend.Enabled = true;
                    //tsbtnSideBandValue.Enabled = true;
                    sidebandbuttonEnabled = true;
                    //comboBoxEdit1.Enabled = true;
                    //comboBoxEdit111.Enabled = true;
                    ClearCmbCursor();
                    //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair","Sideband","SidebandRatio","SideBandTrend" });

                    ZoomTimes = 0;
                    //btnUnZoom.Enabled = false;
                    //btnZoom.Enabled = true;
                    ZommingButton = true;
                    AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;

                    tsBtnHighestFive.Enabled = true;
                    ArrayList CursorItems = new ArrayList();

                    bool bgtype = CheckForTimeDataInAxisLines(y);


                    if (bgtype || TrendType == "Trend")
                    {
                        //tsBtnExtraZoom.Enabled = false;
                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Single With Square", "Cross Hair" });
                        CursorItems.Add("Select Cursor");
                        CursorItems.Add("Single");
                        CursorItems.Add("Single With Square");
                        CursorItems.Add("Cross Hair");
                    }
                    else
                    {
                        //tsBtnExtraZoom.Enabled = true;
                        //tsBtnSideBandRatio.Enabled = true;
                        //tsBtnSideBandTrend.Enabled = true;
                        //tsbtnSideBandValue.Enabled = true;
                        //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair", "Sideband", "SidebandRatio", "SideBandTrend", "PeekCursor" });
                        CursorItems.Add("Select Cursor");
                        CursorItems.Add("Single");
                        CursorItems.Add("Harmonic");
                        CursorItems.Add("Single With Square");
                        CursorItems.Add("Cross Hair");
                        CursorItems.Add("Sideband");
                        CursorItems.Add("SidebandRatio");
                        CursorItems.Add("SideBandTrend");
                        CursorItems.Add("PeekCursor");
                    }

                    StringBuilder CmbcursorItems = new StringBuilder();
                    //ArrayList CursorItems = new ArrayList();
                    //CursorItems.Add("Select Cursor");
                    ////CursorItems.Add("Single With Square");

                    AddToCmbCursor(CursorItems);
                    //for (int i = 0; i < arlBZCmbCursorItems.Count; i++)
                    //{
                    //    //CmbcursorItems.Append(arlBZCmbCursorItems[i].ToString());
                    //    //CmbcursorItems.Append("//");

                    //    cmbCurSors.Items.Add((object)arlBZCmbCursorItems[i].ToString());
                    //}

                    Zoom = false;
                    XZoom = null;
                    YZoom = null;
                    ZoomedY = null;
                    ZommedX = null;
                    PtsForZoom = null;
                    PtsZoomedVals = null;
                    ZommArrCtr = 0;
                    panel1.Refresh();
                    Thread.Sleep(20);
                    GphCtr = GrpCountForZoom;
                    CtrSelectedCraph = -1;
                    GraphZoomedAlready = false;
                    string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                    CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;

                    //if (GraphType == "Trend")
                    //{
                    //    btnTrend.Enabled = false;
                    //    btnWaterFall.Enabled = false;
                    //    tsBtnFaultFreq.Enabled = false;
                    //    tsBtnHighestFive.Enabled = false;
                    //    tsbtnRpm.Enabled = false;
                    //    tsBtnExtraZoom.Enabled = false;
                    //    tsBtnSideBandRatio.Enabled = false;
                    //    tsBtnSideBandTrend.Enabled = false;
                    //    tsbtnSideBandValue.Enabled = false;
                    //    //btnOrbit.Enabled = false;
                    //}
                    //if (GraphType == "Time")
                    //{
                    //    btnWaterFall.Enabled = false;
                    //    tsBtnFaultFreq.Enabled = false;
                    //    tsBtnHighestFive.Enabled = false;
                    //    tsbtnRpm.Enabled = false;
                    //    tsBtnExtraZoom.Enabled = false;
                    //    tsBtnSideBandRatio.Enabled = false;
                    //    tsBtnSideBandTrend.Enabled = false;
                    //    tsbtnSideBandValue.Enabled = false;
                    //    if (OrbitCheck == true)
                    //    {
                    //        btnOrbit.Enabled = true;
                    //    }
                    //   // btnOrbit.Enabled = false;
                    //}






                    TrendButtonEnabled = BZTrend; // btnTrend.Enabled = BZTrend;

                    tsBtnHighestFive.Enabled = BZHighestFive;

                    //tsBtnSideBandRatio.Enabled = BZSidebandRatio;
                    //tsBtnSideBandTrend.Enabled = BZSidebandTrend;
                    //tsbtnSideBandValue.Enabled = BZSidebandValue;

                    sidebandbuttonEnabled = BZSidebandRatio;


                    //StringBuilder CmbcursorItems=new StringBuilder();

                    //  for (int i = 0; i < arlBZCmbCursorItems.Count; i++)
                    //  {
                    //      //CmbcursorItems.Append(arlBZCmbCursorItems[i].ToString());
                    //      //CmbcursorItems.Append("//");
                    //      cmbCurSors.Items.Add((object) arlBZCmbCursorItems[i].ToString() );
                    //  }
                    //string[] stringCursor = CmbcursorItems.ToString().Split(new string[] { "//" }, StringSplitOptions.RemoveEmptyEntries);






                    redraw();
                    redraw();
                }

                //else if (GraphType == "WaterFall")
                //{
                //    CtrSelectedCraph = -1;
                //    ThreeDeeRedraw();
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void AddToCmbCursor(ArrayList CursorItems)
        {
            try
            {
                for (int i = 0; i < CursorItems.Count; i++)
                {
                    cmbCurSors.Items.Add((object) CursorItems[i].ToString());
                    repositoryItemComboBox1.Items.Add((object) CursorItems[i].ToString());
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public string SetXLabel
        {
            get { return lblXAxis.Text; }
            set { lblXAxis.Text = value; }
        }

        public string SetYlabel
        {
            get { return lblYAxis.Text; }
            set { lblYAxis.Text = value; }
        }


        private void OpenColorDialogue()
        {
            ColorDialog objColor = new ColorDialog();
            objColor.ShowDialog();
            Color selctedColor = Color.White;
            if (objColor.Color != Color.Black)
            {
                selctedColor = objColor.Color;
            }

            //InitializeComponent();
            panel1.BackColor = selctedColor;
            panel1.Refresh();
            dataGridView1.BackgroundColor = selctedColor;
            dataGridView2.BackgroundColor = selctedColor;
            if (ChoosenType == "FFT")
            {
                redraw();
                redraw();
            }
            else if (ChoosenType == "WaterFall")
            {
                ThreeDeeRedraw();
            }
            else if (GraphType == "Orbit")
            {
                redrawOrbit();
                redrawOrbit();
            }
            // DA_7   code related    minor    Amit Jain  30-03-2010
            else if (GraphType == "Octave")
            {
                RedrawOctave();
            }
        }

        private void AreaPlotSelected()
        {
            if (ChoosenType == "FFT")
            {
                if (BtnOk == 0)
                {
                    AreaPlot = true;
                    FFTAreaPlot();
                    //btnZoom.Enabled = false;
                    //BtnOk = 1;
                }
                else
                {
                    AreaPlot = false;
                    panel1.Refresh();
                    setAxisCtr = 0;
                    //btnZoom.Enabled = true;
                    ZommingButton = true;
                    redraw();
                    //BtnOk = 0;
                }
            }
            else if (ChoosenType == "WaterFall")
            {
                if (BtnOk == 0)
                {
                    AreaPlot = true;
                    WaterFallAreaPlot();
                    //BtnOk = 1;
                }
                else
                {
                    AreaPlot = false;
                    panel1.Refresh();
                    ThreeDeeRedraw();
                    //BtnOk = 0;
                }
            }
        }

        PointF[] LastAreaThrdPoints = null;


        private void DeletePreviousAreaOfWaterFall()
        {
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            GraphicsPath objPath1 = new GraphicsPath();
            try
            {
                if (LastAreaThrdPoints != null)
                {
                    Brush objBrush = new System.Drawing.SolidBrush(panel1.BackColor);
                    objPath1.AddCurve(LastAreaThrdPoints, 0);
                    der.FillPath(objBrush, objPath1);

                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }


        private void WaterFallAreaPlot()
        {
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Red, 1);
            RectangleF pt = der.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            //Pts = new PointF[0];
            //PointF Pts1 = new PointF();
            //PointF Pts2 = new PointF();
            double MaxVal = 0;
            GraphicsPath objPath = new GraphicsPath();

            //pt1 = new PointF((float)(pt.Right - 62 - 100), (float)(pt.Bottom - 200));
            //PointF[] PtsArea = new PointF[Pts.Length];
            //PtsArea = Pts;
            //Array.Resize(ref PtsArea, PtsArea.Length + 1);
            //PtsArea[Pts.Length] = pt1;
            //Ptsn1 = new PointF((float)((Rect.Left + SixtyTwo) + (Fifteen * GphCtr) - (TwoPointFive * GphCtr) + (MainXAxisInterval * i)), (float)(Rect.Bottom - (TwoHundred + (Thrghty * GphCtr)) - (float)(y[i] / MainYAxisInterval)));

            int CurrentGraph = SelectedGraph;
            //objPath.AddCurve(PtsArea, 0);
            Brush objbr = null;
            float Lenth = pt.Right - SixtyTwo - OneSixtyTwo;
            try
            {

                if (CurrentGraph == 0)
                {

                    PointF[] objPoints = new PointF[Pts.Length];
                    objPoints = Pts;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts[0].X + Lenth, Pts[0].Y);
                    objPoints[Pts.Length] = pt1;
                    //objPoints[Pts.Length+1] = pt2;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DarkRed;
                }
                else if (CurrentGraph == 1)
                {
                    PointF[] objPoints = new PointF[Pts1.Length];
                    objPoints = Pts1;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts1[0].X + Lenth, Pts1[0].Y);
                    objPoints[Pts1.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DarkGreen;
                }
                else if (CurrentGraph == 2)
                {
                    PointF[] objPoints = new PointF[Pts2.Length];
                    objPoints = Pts2;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts2[0].X + Lenth, Pts2[0].Y);
                    objPoints[Pts2.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DarkGoldenrod;
                }
                else if (CurrentGraph == 3)
                {
                    PointF[] objPoints = new PointF[Pts3.Length];
                    objPoints = Pts3;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts3[0].X + Lenth, Pts3[0].Y);
                    objPoints[Pts3.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DarkViolet;
                }
                else if (CurrentGraph == 4)
                {
                    PointF[] objPoints = new PointF[Pts4.Length];
                    objPoints = Pts4;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts4[0].X + Lenth, Pts4[0].Y);
                    objPoints[Pts4.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DarkBlue;
                }
                else if (CurrentGraph == 5)
                {
                    PointF[] objPoints = new PointF[Pts5.Length];
                    objPoints = Pts5;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts5[0].X + Lenth, Pts5[0].Y);
                    objPoints[Pts5.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DimGray;
                }
                else if (CurrentGraph == 6)
                {
                    PointF[] objPoints = new PointF[Pts6.Length];
                    objPoints = Pts6;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts6[0].X + Lenth, Pts6[0].Y);
                    objPoints[Pts6.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.Chocolate;
                }
                else if (CurrentGraph == 7)
                {
                    PointF[] objPoints = new PointF[Pts7.Length];
                    objPoints = Pts7;
                    //Array.Resize(ref objPoints, objPoints.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref objPoints, 1);
                    pt1 = new PointF(Pts7[0].X + Lenth, Pts7[0].Y);
                    objPoints[Pts7.Length] = pt1;
                    objPath.AddCurve(objPoints, 0);
                    LastAreaThrdPoints = new PointF[objPoints.Length];
                    LastAreaThrdPoints = objPoints;
                    objbr = Brushes.DarkKhaki;
                }

                der.FillPath(objbr, objPath);



            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        bool BZTrend = false;
        bool BZWaterFall = false;
        bool BZFaultFreq = false;
        bool BZRPM = false;
        bool BZHighestFive = false;
        bool BZExtraZoom = false;
        bool BZSidebandRatio = false;
        bool BZSidebandTrend = false;
        bool BZSidebandValue = false;
        bool BZCombobox1 = false;
        bool BZCombobox111 = false;
        bool BZOrbit = false;
        ArrayList arlBZCmbCursorItems = null;

        private void btnZoom_Click(object sender, EventArgs e)
        {
            GrpCountForZoom = GphCtr;
            try
            {


                arlBZCmbCursorItems = new ArrayList();
                for (int i = 0; i < cmbCurSors.Items.Count; i++)
                {
                    arlBZCmbCursorItems.Add(cmbCurSors.Items[i].ToString());
                }

                BZTrend = TrendButtonEnabled; // btnTrend.Enabled;


                BZHighestFive = tsBtnHighestFive.Enabled;

                //BZSidebandRatio = tsBtnSideBandRatio.Enabled;
                //BZSidebandTrend = tsBtnSideBandTrend.Enabled;
                //BZSidebandValue = tsbtnSideBandValue.Enabled;

                BZSidebandRatio = sidebandbuttonEnabled;













                AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;
                btnColors.Enabled = false;




                TrendButtonEnabled = false; // btnTrend.Enabled = false;
                //btnOrbit.Enabled = false;

                tsBtnHighestFive.Enabled = false;

                ExtraZoomButtonEnabled = false; // tsBtnExtraZoom.Enabled = false;
                //tsBtnSideBandRatio.Enabled = false;
                //tsBtnSideBandTrend.Enabled = false;
                //tsbtnSideBandValue.Enabled = false;
                sidebandbuttonEnabled = false;
                ClearCmbCursor();
                //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single" });
                ArrayList CursorItems = new ArrayList();
                CursorItems.Add("Select Cursor");

                CursorItems.Add("Single");
                if (!Time)
                {
                    CursorItems.Add("Harmonic");
                }

                AddToCmbCursor(CursorItems);

                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;

                Zoom = true;
                //btnUnZoom.Enabled = true;
                //btnZoom.Enabled = false;
                ZommingButton = false;
                AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                tsBtnHighestFive.Enabled = false;
                ExtraZoomButtonEnabled = false; // tsBtnExtraZoom.Enabled = false;
                //tsBtnSideBandRatio.Enabled = false;
                //tsBtnSideBandTrend.Enabled = false;
                //tsbtnSideBandValue.Enabled = false;
                sidebandbuttonEnabled = false;
                //if (GraphType == "FFT")
                //{
                //    Thread.Sleep(20);
                //    redraw();

                //}

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        bool OrbitCheck = false;
        string[] BandAlarmsPowerAxial = null;
        string[] BandAlarmsPowerHorizontal = null;
        string[] BandAlarmsPowerVerticle = null;
        string[] BandAlarmsDemodulateAxial = null;
        string[] BandAlarmsDemodulateHorizontal = null;
        string[] BandAlarmsDemodulateVerticle = null;


        private void FFTAreaPlot()
        {
            Region rgn1 = new Region(panel1.Bounds);
            Region rgn = new Region(ClientRectangle);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;

            Pen PenBlkB = new Pen(Color.Black, 2);
            Pen PenRed = new Pen(Color.Maroon, 1);
            RectangleF pt = der.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();


            GraphicsPath objPath = new GraphicsPath();

            bool TimeDataForAreaPlot = CheckForTimeData(y);
            try
            {
                if (TrendType == "Trend")
                {
                    pt1 = new PointF((float) (pt.Left + SixtyTwo), (float) (pt.Bottom - (Fifty))); //TwoHundred
                    pt2 = new PointF((float) (pt.Right - OneSixtyTwo), (float) (pt.Bottom - (Fifty))); //TwoHundred

                    PointF[] PtsArea = new PointF[Pts.Length + 2];
                    PtsArea[0] = pt1;
                    for (int i = 0; i < Pts.Length; i++)
                    {
                        PtsArea[i + 1] = Pts[i];
                    }

                    PtsArea[Pts.Length + 1] = pt2;

                    objPath.AddCurve(PtsArea, 0);
                    Brush objbr = Brushes.Maroon;
                    der.FillPath(objbr, objPath);

                }
                else if (!TimeDataForAreaPlot)
                {
                    pt1 = new PointF((float) (pt.Right - OneSixtyTwo), (float) (pt.Bottom - Fifty));
                    pt2 = new PointF((float) (pt.Left + SixtyTwo), (float) (pt.Bottom - Fifty));
                    PointF[] PtsArea = new PointF[Pts.Length];
                    PtsArea = Pts;
                    PtsArea[0] = pt2;
                    //Array.Resize(ref PtsArea, PtsArea.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref PtsArea, 1);
                    PtsArea[Pts.Length] = pt1;

                    objPath.AddCurve(PtsArea, 0);
                    Brush objbr = Brushes.Maroon;
                    der.FillPath(objbr, objPath);
                }
                else if (TimeDataForAreaPlot)
                {

                    pt1 = new PointF((float) (pt.Left + SixtyTwo),
                        (float) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new PointF((float) (pt.Right - OneSixtyTwo),
                        (float) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred

                    PointF[] PtsArea = new PointF[Pts.Length + 2];
                    PtsArea[0] = pt1;
                    for (int i = 0; i < Pts.Length; i++)
                    {
                        PtsArea[i + 1] = Pts[i];
                    }

                    PtsArea[Pts.Length + 1] = pt2;

                    objPath.AddCurve(PtsArea, 0);
                    Brush objbr = Brushes.Maroon;
                    der.FillPath(objbr, objPath);

                }



            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        #endregion

        #region CLV

        UI_Interface _UI_Interface = new UI_Controls();

        bool SelectBandTrend = false;
        SideBandTrend objTrend = null;
        bool cepstrum = false;
        ArrayList arlSelectedColorTag = null;
        bool Channel1GraphToDraw = true;
        int position = 0;
        int[] positionarray = null;
        int[] discardedPosition = null;
        ArrayList _2secYdata = new ArrayList();
        ArrayList _2secXdata = new ArrayList();
        ArrayList _2secRPMdata = new ArrayList();
        ImageList m_ImgLst = new ImageList();
        string sErrorLogPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
        FileStream aa = null;
        StreamWriter sw = null;
        StreamReader sr = null;
        string DestbeforeTrend = null;
        string previousnode = null;
        string dateofwav = null;
        string sCurrentGraph = null;
        string TrendType = null;
        bool[] PreviousPositions = new bool[15];
        int trendValCtr = 0;
        TreeListNode tlNode = null;
        string sApp = null;
        double[] xarray = new double[0];
        double[] yarray = new double[0];
        double[] Anyarray = new double[0];
        string sDisplayUnitToCompare = null;
        string sApplicationToCompare = null;
        string sHPFToCompare = null;
        string sFTypeToCompare = null;
        string sordertocompare = null;
        string sDetectionToCompare = null;
        string sNoOfLinesToCompare = null;
        string sWindowTypeToCompare = null;
        string sYaxisUnitToCompare = null;
        string sXaxisUnitToCompare = null;
        string sYaxisDisplayToCompare = null;
        string sDomainToCompare = null;
        bool bRucd = false;
        string DisplayType = null;
        string DispType = null;
        bool IsFoundValues = false;
        int totalValues = 1;
        int iclick = 1;
        int jclick = 1;
        ArrayList arlstSelectedTime = null;
        int iFinalFrequency = 0;
        ArrayList arlYData = new ArrayList();
        ArrayList arlYDataPhase = new ArrayList();
        ArrayList arlFRFCoherence = new ArrayList();
        ArrayList arlFRFReal = new ArrayList();
        ArrayList arlFRFImag = new ArrayList();
        bool bWave = false;
        Process BusyImageProcess;
        double[] Channel1WavX = null;
        double[] Channel1WavY = null;
        bool IsWaterfall = false;
        bool IsOctave = false;
        bool IsCrestTrend = false;
        double[] Channel2WavX = null;

        double[] Channel2WavY = null;

        //bool bXunitConvert = false;
        ImageList objlistimg = new ImageList();
        Hashtable hshDrag = null;
        double StoreCursorStartInterval = 0.0;
        double StoreMainYAxisInterval = 0;
        DataGridViewCellEventArgs farziE = new DataGridViewCellEventArgs(3, 0);
        bool IsImageDrawn = false;
        ArrayList arlstXY = null;
        int ivalctr = 0;
        int PageCtr = 1;
        ArrayList arlSelectedDataGridValue = null;
        ArrayList arlselectedFiles = null;
        int iConstSBValue = 10;
        int iConstSBRatio = 10;
        ArrayList arrXYValues = null;
        ArrayList arrSelTime = null;
        double divider_CH1 = 1;
        double divider_CH2 = 1;
        double sensitivity_CH1 = 0;
        double sensitivity_CH2 = 0;
        string label_Ch1 = null;
        string label_Ch2 = null;
        string Name_Ch1 = null;
        string Name_Ch2 = null;
        int AvgBytesPerSec = 0;
        int SF = 0;
        int iLastFrequency = 0;
        int iLOR = 0;
        int LineOfResolution = 0;
        double ExectTime = 0;
        int ExectDataByteSample = 0;
        int TotalDataBytes = 0;
        double TimeVal = 0;
        int TotalTime = 0;
        double[] Fulldata_CH1 = null;
        double[] Fulldata_CH2 = null;
        double[] FullTime_CH1 = null;
        double[] FullTime_CH2 = null;
        int channel = 1;
        int SamplePerSec = 0;
        int RUCDvariable = 5;
        private int n, nu;
        ArrayList arlstData = new ArrayList();
        bool bShowOrbit = false;
        string sARGB = null;
        string spath = null;
        Report _Report = new Report();
        string sParameter = null;
        //CImageCreation m_objImageCreation = null; // new CImageCreation();
        //CSysPro m_objCSysPro = null;
        bool m_bAcknowledgement = false;
        bool bAck = false;
        bool bNever = false;
        bool NotNow = false;
        bool bOnce = false;
        //Hasp hasp;
        //HaspStatus status = new HaspStatus();
        private bool m_bTryButtonClick = false;
        private bool m_bDemoButtonClicked = false;
        public string vendorCode = null;
        ManagementEventWatcher w = null;
        Thread m_objHaspCheck = null;
        Thread Rockey_Thread = null;
        Process objStartProcess;
        string sourceCSV = null;
        string sourceDAT = null;
        string sourceBAL = null;
        bool bPhase = false;
        TreeListNode tlnNodeBeforeTrend = null;
        Bal_interface _BAL = new Bal_Control();
        string _Detection = null;
        string _MeasType = null;
        double _Amplitude = 0;
        double _Angle = 0;
        bool bRepaint = false;
        int NODragDropCTR = 0;
        ArrayList arlTachoData = new ArrayList();
        ArrayList arlSelectedDataGridNumber = new ArrayList();
        ArrayList arrWAVReportXYVals = new ArrayList();
        ArrayList PhasetoDisplay = null;
        int[] RPMtoDisplay = null;
        ArrayList arlTachoPositionslist = new ArrayList();
        ArrayList FinalTachoPositions = new ArrayList();
        ArrayList lowerPeak = new ArrayList();
        ArrayList UpperPeak = new ArrayList();
        int RPMCount = 10;
        double OverriddenRPM = 0;
        Hashtable SelectedHash = null;
        string PreviousManufacturer = null;
        BearingLibraryClass _BLC = new BearingLibraryClass();
        int bbphaseCtr = 0;
        ResizeArray_Interface _ResizeArray = new ResizeArray_Control();

        #endregion

        #region Constructor

        public Form1()
        {
            try
            {

                objStartProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "splash.exe");
                objStartProcess.WaitForExit(1000);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            InitializeComponent();
            mainlog();
            foreach (SkinContainer cnt in SkinManager.Default.Skins)
            {
                toolStripComboBox1.Items.Add(cnt.SkinName);
            }

            DoConstructionWork();
            AddImagestoButtons();
            AddImagestoImagelists();
            try
            {
                // m_objHaspCheck.Start();
                // Rockey_Thread.Start();
            }
            catch (Exception ex)
            {
            }

            this.ribbonControl1.ApplicationIcon = Resources.vibanalyst;
            try
            {
                objStartProcess.Kill();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        private void AddImagestoImagelists()
        {
            try
            {
                m_ImgLst.Images.Add(Resources.openfolder);
                m_ImgLst.Images.Add(Resources.CSVf);
                m_ImgLst.Images.Add(Resources.WAVf);
                m_ImgLst.Images.Add(Resources.DAT);
                m_ImgLst.Images.Add(Resources.file);

                objlistimg.Images.Add(Resources.DarkRed);
                objlistimg.Images.Add(Resources.DarkGreen);
                objlistimg.Images.Add(Resources.DarkGoldenRod);
                objlistimg.Images.Add(Resources.DarkVoilet);
                objlistimg.Images.Add(Resources.DarkBlue);
                objlistimg.Images.Add(Resources.DimGrey);
                objlistimg.Images.Add(Resources.Chocolate);
                objlistimg.Images.Add(Resources.DarkKhaki);
                objlistimg.Images.Add(Resources.Black);
                objlistimg.Images.Add(Resources.Orange);
                objlistimg.Images.Add(Resources.Cyan);
                objlistimg.Images.Add(Resources.AquaMarine);
                objlistimg.Images.Add(Resources.Bisque);
                objlistimg.Images.Add(Resources.Blue);
                objlistimg.Images.Add(Resources.BlueViolet);
                objlistimg.Images.Add(Resources.Coral);
                objlistimg.Images.Add(Resources.Darkmagenta);
                objlistimg.Images.Add(Resources.DarkseaGreen);
                objlistimg.Images.Add(Resources.DarkSlateBlue);
                objlistimg.Images.Add(Resources.Deeppink);
                objlistimg.Images.Add(Resources.DodgerBlue);
                objlistimg.Images.Add(Resources.FireBrick);
                objlistimg.Images.Add(Resources.ForestGreen);
                objlistimg.Images.Add(Resources.GreenYellow);
                objlistimg.Images.Add(Resources.HotPink);
                objlistimg.Images.Add(Resources.IndianRed);
                objlistimg.Images.Add(Resources.Darkorange);
                objlistimg.Images.Add(Resources.Darkorchid);
                objlistimg.Images.Add(Resources.DeepSkyBlue);
                objlistimg.Images.Add(Resources.SandyBrown);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void AddImagestoButtons()
        {
            try
            {
                btnWaterFall.Image = Resources._10652;
                bbWaterfall.LargeGlyph = btnWaterFall.Image;
                btnXUnitConverter.Image = Resources.converter;
                btnZoom.Image = Resources.Magnification;
                bbZoom.Glyph = btnZoom.Image;
                btnUnZoom.Image = Resources.UnMag;
                bbUnzoom.Glyph = btnUnZoom.Image;
                btnColors.Image = Resources._7;
                btnTrend.Image = Resources.trend;
                bbTrend.LargeGlyph = btnTrend.Image;
                btnBkwd.Image = Resources.previus;
                bbGraphBack.Glyph = btnBkwd.Image;
                btnFwd.Image = Resources.Next;
                bbGraphNext.Glyph = btnFwd.Image;
                tsBtnSideBandTrend.Image = Resources._3;
                bbSBTrend.Glyph = tsBtnSideBandTrend.Image;
                tsbtnSideBandValue.Image = Resources._2;
                bbSBValue.Glyph = tsbtnSideBandValue.Image;
                tsBtnSideBandRatio.Image = Resources._1;
                bbSBRatio.Glyph = tsBtnSideBandRatio.Image;
                btnAreaGraph.Image = Resources.AreaPlot;
                bbArea.LargeGlyph = btnAreaGraph.Image;
                btnCopyGraphToClipBord.Image = Resources.cp;
                bbCopyGraph.Glyph = btnCopyGraphToClipBord.Image;
                tsbtnWav.Image = Resources.wav;
                bbOctave.LargeGlyph = Resources.bargraph;
                tsbtnRuCD.Image = Resources.rucd;
                tsBtnExtraZoom.Image = Resources.ExtraZooming1;
                bbBand.LargeGlyph = tsBtnExtraZoom.Image;
                bbOpenInst.LargeGlyph = Resources.fieldpac;
                bbExit.LargeGlyph = Resources.exit;
                bbOpen.LargeGlyph = Resources.open;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void DoConstructionWork()
        {
            bool bAcknowledge = false;
            try
            {
                toolStripComboBox1.SelectedIndex = toolStripComboBox1.Items.Count - 1;
                barEditItem1.EditValue = repositoryItemComboBox3.Items[repositoryItemComboBox3.Items.Count - 1];

                trlPlantMangerComponents.StateImageList = m_ImgLst;
                dataGridView1.Height = panel1.Height / 2;
                dataGridView2.Height = dataGridView1.Height;

                tcMain.Enabled = false;

                // for New graph control
                //AreaGraphButtonEnabled = false;// btnAreaGraph.Enabled = false;
                //btnBkwd.Enabled = false;
                //btnColors.Enabled = false;
                //btnCopyGraphToClipBord.Enabled = false;
                //btnFwd.Enabled = false;
                //TrendButtonEnabled = false;// btnTrend.Enabled = false;
                //ZommingButton = true;
                //tsbtnComparePoints.Enabled = false;
                //tsbtnCopyValues.Enabled = false;
                //tsBtnHighestFive.Enabled = false;
                //sidebandbuttonEnabled = false;
                //ExtraZoomButtonEnabled = false;// tsBtnExtraZoom.Enabled = false;
                //tsbtnRuCD.Enabled = false;
                //tsbtnWav.Enabled = false;
                //WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
                //cmbCurSors.Enabled = false;
                //btnXUnitConverter.Enabled = false;

                SBValue = Convert.ToString(iConstSBValue);
                TrendRatio = "1/" + Convert.ToString(iConstSBRatio);
                TrendValue = Convert.ToString(iConstSBTrendValue);
                rpGraphTools.Visible = false;
                UsbController();
                //m_objImageCreation = new CImageCreation();
                //m_objCSysPro = new CSysPro();
                //if (m_objCSysPro != null)
                //{
                //    m_objCSysPro.ExitButtonClicked +=
                //        new CSysPro.ExitButtonClickHandler(m_objCSysPro_ExitButtonClicked);
                //    m_objCSysPro.DemoButtonClick += new CSysPro.ExitButtonClickHandler(m_objCSysPro_DemoButtonClick);
                //    m_objCSysPro.TryButtonClicked += new CSysPro.ExitButtonClickHandler(m_objCSysPro_TryButtonClicked);
                //}

                //m_objHaspCheck = new Thread(new ThreadStart(CheckHasp));
                //Rockey_Thread = new Thread(new ThreadStart(CheckRockey));
                //m_objHaspCheck.Name = "CheckHaspBG";
                //Rockey_Thread.Name = "CheckRockey";
                //bAcknowledge = m_objCSysPro.Test_Rockey();
                //bAcknowledge = m_objCSysPro.Test();
                ////Rockey
                //if (m_objImageCreation != null)
                //{
                //    byte[] arrBytes = m_objImageCreation.GetBytes();

                //    if (arrBytes != null)
                //    {
                //        m_objImageCreation.FirstTest(arrBytes);
                //        m_bAcknowledgement = m_objImageCreation.SecondTest(arrBytes);
                //    }
                //}

                ////Rockey
                ////if (!bAcknowledge || !m_bAcknowledgement)
                ////    m_objCSysPro.DCB();
                //if (!bAcknowledge) //|| !m_bAcknowledgement)
                //{
                //    m_objCSysPro.OpenFrm();
                //}
                //else
                {
                    SetupToolMenu();
                }

                //if (bAcknowledge || m_bDemoButtonClicked)
                //{

                if (bAcknowledge)
                {
                    bbOpen.Enabled = true;
                    bbOpenInst.Enabled = true;
                }
                else if (m_bDemoButtonClicked)
                {
                    bbOpen.Enabled = false;
                    bbOpenInst.Enabled = false;
                }
                //}

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        //private void CheckRockey()
        //{
        //    //try
        //    //{

        //    //    //for (int i = 0; i < 10; i++)
        //    //    {
        //    //        if (m_objCSysPro != null)
        //    //        {
        //    //            bAck = m_objCSysPro.Test_Rockey();
        //    //            if (bAck == true)
        //    //            {
        //    //                //if (rbBearingNumber.Checked)
        //    //                //{
        //    //                //    cmbbxManufacturer.Enabled = true;
        //    //                //    cmbbxBearingNumber.Enabled = true;
        //    //                //}                            
        //    //            }
        //    //            if (bAck == false)
        //    //            {
        //    //                cmbbxBearingNumber.Items.Clear();
        //    //                cmbbxBearingNumber.Text = "";
        //    //                tbBalls.Text = "0";
        //    //                tbBPFI.Text = "0";
        //    //                tbBPFO.Text = "0";
        //    //                tbBSF.Text = "0";
        //    //                tbFTF.Text = "0";
        //    //            }
        //    //        }
        //    //    }
        //    //}//end( try)
        //    //catch (Exception ex)
        //    //{
        //    //    ErrorLogFile(ex);
        //    //}//end(catch (Exception ex))




        //    try
        //    {
        //        frmHasp objNOhasp = new frmHasp();
        //        //for (int i = 0; i < 10; i++)
        //        {
        //            if (m_objCSysPro != null)
        //            {
        //                bAck = m_objCSysPro.Test_Rockey();
        //                if (bAck == true)
        //                {
        //                    m_objCSysPro_TryButtonClicked();
        //                    this.Enabled = true;
        //                }

        //                if (bAck == false)
        //                {
        //                    this.Invoke(new ThreadStart(CallToTest));
        //                    //this.Enabled = false;
        //                }
        //            }
        //        }
        //    } //end( try)
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);

        //        //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
        //    } //end(catch (Exception ex))

        //}

        //private void CheckHasp()
        //{
        //    try
        //    {
        //        frmHasp objNOhasp = new frmHasp();
        //        for (int i = 0; i < 10; i++)
        //        {
        //            if (m_objCSysPro != null)
        //            {
        //                bAck = m_objCSysPro.Test();
        //                if (bAck == true)
        //                {
        //                    bOnce = true;
        //                    if (bNever)
        //                    {
        //                        NotNow = false;
        //                        {
        //                            messageshown = false;
        //                            m_objCSysPro_TryButtonClicked();
        //                        }
        //                        bNever = false;
        //                    }
        //                    else
        //                    {
        //                        NotNow = true;
        //                    }

        //                    if (m_bDemoButtonClicked)
        //                    {
        //                    }
        //                }

        //                if (bAck == false)
        //                {
        //                    bNever = true;
        //                    if (!m_bDemoButtonClicked)
        //                    {
        //                        this.Invoke(new ThreadStart(CallToTest));
        //                    }

        //                    m_objCSysPro.FromOtherThread = "FromOtherThread";
        //                    if (!m_bDemoButtonClicked && bOnce)
        //                    {
        //                    }

        //                    m_objCSysPro.DCB();
        //                }
        //            }
        //        }
        //    } //end( try)
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //        ErrorLogFile(ex);
        //    } //end(catch (Exception ex))
        //}

        bool messageshown = false;

        private void CallToTest()
        {
            try
            {
                if (!messageshown)
                {
                    messageshown = true;


                    DialogResult DR = MessageBoxEx.Show("Application will not Work if  dongle is not Present.",
                        "Dongle Detached", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    this.Enabled = false;
                    switch (DR)
                    {
                        case DialogResult.Cancel:
                        {
                            CloseAppLication();
                            break;
                        }
                        case DialogResult.Retry:
                        {
                            messageshown = false;
                            //UsbEventArrived(null, null);
                            //CheckHasp();
                            //CheckRockey();
                            break;
                        }
                        //case DialogResult.Ignore:
                        //    {
                        //        this.Enabled = true;
                        //        DoConstructionWork();
                        //        trlPlantMangerComponents.Nodes.Clear();
                        //        Form1_Shown(null, null);
                        //        break;
                        //    }
                    }
                }

                //this.Enabled = false;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        void m_objCSysPro_TryButtonClicked()
        {
            bool bTest = false;
            try
            {
                m_bDemoButtonClicked = false;
                m_bTryButtonClick = true;

                //if (m_objCSysPro != null)
                //{
                //    //bTest = m_objCSysPro.Test_Rockey();
                //    bTest = m_objCSysPro.Test();
                //}

                //if (bTest)
                {
                    try
                    {
                        this.Invoke(new ThreadStart(SetupToolMenu));
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        SetupToolMenu();
                    }
                }

                //if (m_objCSysPro != null && bTest)
                //{
                //    m_objCSysPro.DDB();
                //    m_objCSysPro.DCB();
                //}

                if (bTest)
                {
                    try
                    {
                        this.Invoke(new ThreadStart(EnableForm));
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        EnableForm();
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void EnableForm()
        {
            try
            {
                this.Enabled = true;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void SetupToolMenu()
        {
            try
            {

                //Amit Jain
                string strinsName = ExtractInstrumentName();
                if (strinsName == null)
                {
                    strinsName = " ";
                }

                string[] insName = strinsName.Split(new string[] {"|"}, StringSplitOptions.None);
                bool CheckIns = false;

                try
                {
                    if (insName[0].Contains("Benstone"))
                    {
                        CheckIns = true;
                        if (!bbOpen.Enabled)
                        {
                            bbOpen.Enabled = true;
                            bbOpenInst.Enabled = true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    CheckIns = false;
                }

                //CheckIns = true; //disabling Hasp Check  Should be removed **************
                if (CheckIns == false)
                {
                    MessageBoxEx.Show("You can not use other key! Please contact the Vendor", "Wrong Key Detected",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    Environment.Exit(1);
                }

                if (insName[0] == "DI 460")
                {
                    //rpAlarms.Visible = false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public string ExtractInstrumentName()
        {
            string currentName = null;
            try
            {
                //vendorCode = CImageCreation.Vcode;
                //hasp = new Hasp(new HaspFeature(10));
                //status = hasp.Login(vendorCode);
                //Int32 offset = 0;
                //Int32 size = 48;
                //byte[] data = new byte[size];
                //HaspFile file = hasp.GetFile(HaspFileId.ReadWrite);
                //file.FilePos = offset;
                //status = file.Read(data, 0, data.Length);
                //currentName = Encoding.ASCII.GetString(data).TrimEnd(new char[] {'\0'});
                currentName = "Benstone";

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            return currentName;
        }

        //Rockey
        //Rockey
        ushort ret;
        byte[] buffer = new byte[1000];
        ushort p1 = 0;
        ushort p2 = 0;
        ushort p3 = 0;
        ushort p4 = 0;
        uint lp1 = 0;
        uint lp2 = 0;
        const ushort RY_FIND = 1;
        const ushort RY_FIND_NEXT = 2;
        const ushort RY_OPEN = 3;
        const ushort RY_CLOSE = 4;
        const ushort RY_READ = 5;

        Rockey4NDControl.Rockey4ND r4nd = new Rockey4NDControl.Rockey4ND();
        ushort[] m_Handle = new ushort[32];

        int m_HandleNum = 0;
        //Rockey
        //public string ExtractInstrumentName()
        //{
        //    string strData = null;

        //    // subodh Rockey
        //    try
        //    {
        //        p1 = 0xea0b;
        //        p2 = 0xd5e9;
        //        p3 = 0xd961;
        //        p4 = 0x2919;
        //        byte[] buffer = new byte[1000];
        //        ret = r4nd.Rockey(RY_FIND, ref m_Handle[0], ref lp1, ref lp2, ref p1, ref p2, ref p3, ref p4, buffer);
        //        if (ret == 0)
        //        {
        //            ret = r4nd.Rockey(RY_OPEN, ref m_Handle[0], ref lp1, ref lp2, ref p1, ref p2, ref p3, ref p4, buffer);
        //            if (ret == 0)
        //            {
        //                m_HandleNum = 1;
        //                while (ret == 0)
        //                {
        //                    ret = r4nd.Rockey(RY_FIND_NEXT, ref m_Handle[0], ref lp1, ref lp2, ref p1, ref p2, ref p3, ref p4, buffer);
        //                    if (ret != 0)
        //                    {
        //                        break;
        //                    }
        //                    else
        //                    {
        //                        MessageBox.Show("HID: " + lp1.ToString("X") + "\r\n");
        //                    }
        //                    ret = r4nd.Rockey(RY_OPEN, ref m_Handle[0], ref lp1, ref lp2, ref p1, ref p2, ref p3, ref p4, buffer);
        //                    if (ret != 0)
        //                    {
        //                        break;
        //                    }
        //                    m_HandleNum = m_HandleNum + 1;
        //                }
        //                int i, k;
        //                p1 = 0; p2 = 0; p3 = 0; p4 = 0;
        //                lp1 = 0; lp2 = 0;
        //                String[] str1 = new String[m_HandleNum];
        //                for (i = 0; i < m_HandleNum; i++)
        //                {
        //                    p1 = 0; //offset
        //                    p2 = 100; //length
        //                    ret = r4nd.Rockey(RY_READ, ref m_Handle[0], ref lp1, ref lp2, ref p1, ref p2, ref p3, ref p4, buffer);
        //                    if (ret != 0)
        //                    {
        //                        MessageBox.Show("RY_READ error");
        //                    }
        //                    else
        //                    {
        //                        for (k = 0; k < p2; k++)
        //                        {
        //                            if (buffer[k] == 0)
        //                            {
        //                                break;
        //                            }
        //                            str1[i] += Convert.ToChar(buffer[k]);
        //                        }
        //                        strData = str1[i];
        //                        //IName = strData;
        //                    }
        //                }
        //            }
        //        }
        //        ret = r4nd.Rockey(RY_CLOSE, ref m_Handle[0], ref lp1, ref lp2, ref p1, ref p2, ref p3, ref p4, buffer);
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogFile(ex);
        //    }
        //    return strData;
        //}
        //Rockey end
        void m_objCSysPro_DemoButtonClick()
        {
            try
            {
                m_bDemoButtonClicked = true;
                m_bTryButtonClick = false;


                //if (m_objCSysPro != null)
                //{
                //    m_objCSysPro.DDB();
                //    m_objCSysPro.ECB();
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        public void m_objCSysPro_ExitButtonClicked()
        {
            try
            {
                // Amit Jain    DA_37	Click exist button on Dongle detection form splash screen not closed	code related	minor 	12-4-2010

                try
                {
                    objStartProcess.Kill();
                }
                catch
                {

                }

                m_bTryButtonClick = false;
                m_bDemoButtonClicked = false;
                CloseAppLication();
            } //end(try)
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                Application.Exit();
            }
        }

        private void UsbController()
        {
            try
            {
                //UsbDetect we = new UsbDetect();

                WqlEventQuery q;
                ManagementOperationObserver observer = new ManagementOperationObserver();
                // Bind to local machine

                ManagementScope scope = new ManagementScope("root\\CIMV2");
                scope.Options.EnablePrivileges = true; //sets required privilege
                try
                {
                    q = new WqlEventQuery();
                    q.EventClassName = "__InstanceOperationEvent";
                    q.WithinInterval = new TimeSpan(0, 0, 3);
                    q.Condition = @"TargetInstance ISA 'Win32_USBControllerdevice' ";

                    //Console.WriteLine(q.QueryString);
                    w = new ManagementEventWatcher(scope, q);

                    w.EventArrived += new EventArrivedEventHandler(UsbEventArrived);

                    w.Start();

                    //Console.ReadLine(); // block main thread for test purposes
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                    //Console.WriteLine(e.Message);
                }
                finally
                {
                    // w.Stop();
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void UsbEventArrived(object sender, EventArrivedEventArgs e)
        {

            try
            {
                //if (m_objHaspCheck.ThreadState == System.Threading.ThreadState.Stopped ||
                //    m_objHaspCheck.ThreadState == System.Threading.ThreadState.Unstarted)
                //{
                //    m_objHaspCheck = new Thread(new ThreadStart(CheckHasp));
                //    m_objHaspCheck.Start();
                //}

                //if (Rockey_Thread.ThreadState == System.Threading.ThreadState.Stopped)// || Rockey_Thread.ThreadState == System.Threading.ThreadState.Unstarted)
                //{
                //    Rockey_Thread = new Thread(new ThreadStart(CheckRockey));
                //    Rockey_Thread.Start();
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        #endregion

        #region Public functions

        public void ShowCurrentDate()
        {
            ImageList objlistimg = new ImageList();
            try
            {
                objlistimg.Images.Add(Resources.DarkRed);
                dataGridView2.Rows[0].Cells[0].Value = lblDate.Text.ToString();
                dataGridView2.Rows[0].Cells[1].Value = "√";
                dataGridView2.Rows[0].Cells[3].Value = objlistimg.Images[0];
                //lblDate.Text = "Date : " + dataGridView2.Rows[0].Cells[0].Value.ToString();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public void ResetZoomButton()
        {
            try
            {
                //tnZoom.Enabled = true;
                ZommingButton = true;
                AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;
                btnColors.Enabled = true;
                tsBtnHighestFive.Enabled = true;

                if (GraphType == "FFT")
                {
                    WaterfallbuttonEnabled = true;
                }

                //tsBtnSideBandRatio.Enabled = true;
                //tsBtnSideBandTrend.Enabled = true;
                //tsbtnSideBandValue.Enabled = true;
                sidebandbuttonEnabled = true;
                //btnUnZoom.Enabled = true;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public void setCursorCombo(string sCG)
        {
            try
            {
                TrendType = sCG;
                ClearCmbCursor();
                if (sCG == "Time" || sCG == "Trend")
                {
                    //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Single With Square", "Cross Hair" });
                    ArrayList CursorItems = new ArrayList();
                    CursorItems.Add("Select Cursor");
                    CursorItems.Add("Single");
                    CursorItems.Add("Single With Square");
                    CursorItems.Add("Cross Hair");
                    CursorItems.Add("Difference Cursors");

                    AddToCmbCursor(CursorItems);
                }
                else
                {
                    //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair", "Sideband", "SidebandRatio", "SideBandTrend", "PeekCursor" });
                    ArrayList CursorItems = new ArrayList();
                    CursorItems.Add("Select Cursor");
                    CursorItems.Add("Single");
                    CursorItems.Add("Harmonic");
                    CursorItems.Add("Single With Square");
                    CursorItems.Add("Cross Hair");
                    CursorItems.Add("Sideband");
                    CursorItems.Add("SidebandRatio");
                    CursorItems.Add("SideBandTrend");
                    CursorItems.Add("PeekCursor");
                    CursorItems.Add("Kill Cursor");
                    CursorItems.Add("Difference Cursors");
                    AddToCmbCursor(CursorItems);
                }

                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void CallClearDataGridMain()
        {
            try
            {
                dataGridView2.Rows.Clear();
                for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                {
                    dataGridView2.Rows.RemoveAt(0);
                }

                dataGridViewX1.Rows.Clear();
                for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                {
                    dataGridViewX1.Rows.RemoveAt(0);
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void DrawDiTrend(ArrayList arrXYVals, ArrayList Time, ArrayList arlstSColors)
        {
            try
            {
                //if (m_objMainControl != null)
                {
                    //if (m_objMainControl.MainForm != null)
                    {
                        NullAllGphElements();
                        //if (m_objMainControl.MainForm != null)
                        {
                            int CtrLoop = 0;
                            int StartPosition = 0;
                            {
                                if (arrXYVals.Count > 16)
                                {
                                    StartPosition = arrXYVals.Count - 16;
                                }
                                else
                                {
                                    StartPosition = 0;

                                }

                                if (arrXYVals.Count >= 2)
                                {
                                    FstLineX = (double[]) arrXYVals[StartPosition];
                                    FstLineY = (double[]) arrXYVals[StartPosition + 1];
                                    CtrLoop = 0;
                                }

                                if (arrXYVals.Count >= 4)
                                {
                                    SecondLineX = (double[]) arrXYVals[StartPosition + 2];
                                    SecondLineY = (double[]) arrXYVals[StartPosition + 3];
                                    CtrLoop++;
                                }

                                if (arrXYVals.Count >= 6)
                                {
                                    ThrdLineX = (double[]) arrXYVals[StartPosition + 4];
                                    ThrdLineY = (double[]) arrXYVals[StartPosition + 5];
                                    CtrLoop++;
                                }

                                if (arrXYVals.Count >= 8)
                                {
                                    ForthLineX = (double[]) arrXYVals[StartPosition + 6];
                                    ForthLineY = (double[]) arrXYVals[StartPosition + 7];
                                    CtrLoop++;
                                }

                                if (arrXYVals.Count >= 10)
                                {
                                    FifthLineX = (double[]) arrXYVals[StartPosition + 8];
                                    FifthLineY = (double[]) arrXYVals[StartPosition + 9];
                                    CtrLoop++;
                                }

                                if (arrXYVals.Count >= 12)
                                {
                                    SixthLineX = (double[]) arrXYVals[StartPosition + 10];
                                    SixthLineY = (double[]) arrXYVals[StartPosition + 11];
                                    CtrLoop++;
                                }

                                if (arrXYVals.Count >= 14)
                                {
                                    SvnthLineX = (double[]) arrXYVals[StartPosition + 12];
                                    SvnthLineY = (double[]) arrXYVals[StartPosition + 13];
                                    CtrLoop++;
                                }

                                if (arrXYVals.Count >= 16)
                                {
                                    EghthLineX = (double[]) arrXYVals[StartPosition + 14];
                                    EghthLineY = (double[]) arrXYVals[StartPosition + 15];
                                    CtrLoop++;
                                }

                                CtrSetForThreeDD = 0;
                                //GraphType = "FFT";
                                GraphLoops = CtrLoop;
                                for (int i = 0; i <= CtrLoop; i++)
                                {
                                    CreatGPWithVariable("Test");
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public void SetGraphFeatures()
        {

            try
            {
                //if (GenDiGraph != "Trend")
                {

                    switch (GraphType)
                    {
                        case "FFT":
                        {
                            SetFFtButtons();
                        }
                            break;
                        case "Time":
                        {
                            SetTimeButtons();
                        }
                            break;

                    }
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void DrawGraph(ArrayList arrXYVals, ArrayList Time, ArrayList ColorTag)
        {
            OdbcCommand objCommand = null;
            //ArrayList arrXYVals = null;

            try
            {
                //using (OdbcConnection objConnection = new OdbcConnection())
                {
                    //objConnection.ConnectionString = m_objMainControl.MainForm.ConnecStr;
                    //objConnection.Open();

                    //objCommand = new OdbcCommand();
                    // if (m_objMainControl != null)
                    {
                        //ImpaqHandler objNewIHandler = new ImpaqHandler(m_objMainControl);
                        //arrXYVals = objNewIHandler.GetAllPlotValues(m_objMainControl._PointID, null, null, Time, Graph, Axis);


                        ArrayList arlstReturnedDoubleValues = null;


                        //if (arrXYVals.Count > 0)
                        //    arlstReturnedDoubleValues = CreateNewOnes(arrXYVals);



                        //if (m_objMainControl.MainForm != null)
                        //    m_objMainControl.MainForm.CreateGraph(arlstReturnedDoubleValues, Time, null);
                        {




                            // m_objMainControl.MainForm.SlctedDates = Time;
                            NullAllGphElements();
                            //if (m_objMainControl.MainForm != null)
                            {
                                //m_objMainControl.MainForm.GraphType = "FFT";
                                int CtrLoop = 0;
                                //m_objfrmMain.CreateGraph(arlstReturnedDoubleValues, m_objImpaqHandler.SelectedDates, null);
                                int StartPosition = 0;
                                //if (objSelector.WaterFall == false)//arrXYVals.Count<=2
                                {
                                    if (arrXYVals.Count > 16)
                                    {
                                        StartPosition = arrXYVals.Count - 16;
                                    }
                                    else
                                    {
                                        StartPosition = 0;

                                    }

                                    if (arrXYVals.Count >= 2)
                                    {
                                        FstLineX = (double[]) arrXYVals[StartPosition];
                                        FstLineY = (double[]) arrXYVals[StartPosition + 1];
                                        CtrLoop = 0;
                                    }

                                    if (arrXYVals.Count >= 4)
                                    {
                                        SecondLineX = (double[]) arrXYVals[StartPosition + 2];
                                        SecondLineY = (double[]) arrXYVals[StartPosition + 3];
                                        CtrLoop++;
                                    }

                                    if (arrXYVals.Count >= 6)
                                    {
                                        ThrdLineX = (double[]) arrXYVals[StartPosition + 4];
                                        ThrdLineY = (double[]) arrXYVals[StartPosition + 5];
                                        CtrLoop++;
                                    }

                                    if (arrXYVals.Count >= 8)
                                    {
                                        ForthLineX = (double[]) arrXYVals[StartPosition + 6];
                                        ForthLineY = (double[]) arrXYVals[StartPosition + 7];
                                        CtrLoop++;
                                    }

                                    if (arrXYVals.Count >= 10)
                                    {
                                        FifthLineX = (double[]) arrXYVals[StartPosition + 8];
                                        FifthLineY = (double[]) arrXYVals[StartPosition + 9];
                                        CtrLoop++;
                                    }

                                    if (arrXYVals.Count >= 12)
                                    {
                                        SixthLineX = (double[]) arrXYVals[StartPosition + 10];
                                        SixthLineY = (double[]) arrXYVals[StartPosition + 11];
                                        CtrLoop++;
                                    }

                                    if (arrXYVals.Count >= 14)
                                    {
                                        SvnthLineX = (double[]) arrXYVals[StartPosition + 12];
                                        SvnthLineY = (double[]) arrXYVals[StartPosition + 13];
                                        CtrLoop++;
                                    }

                                    if (arrXYVals.Count >= 16)
                                    {
                                        EghthLineX = (double[]) arrXYVals[StartPosition + 14];
                                        EghthLineY = (double[]) arrXYVals[StartPosition + 15];
                                        CtrLoop++;
                                    }

                                    CtrSetForThreeDD = 0;
                                    //GraphType = "FFT";
                                    GraphLoops = CtrLoop;
                                    for (int i = 0; i <= CtrLoop; i++)
                                    {
                                        CreatGPWithVariable(ColorTag[i].ToString());
                                    }
                                }

                            }

                        }

                    }

                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public void DrawWaterFallForDi(string Channel, ArrayList Time, ArrayList ColorTag)
        {
            OdbcCommand objCommand = null;
            ArrayList arrXYVals = null;
            int CtrArrForTime = Time.Count - 8;
            ArrayList TimeOrig = new ArrayList();
            try
            {
                //using (OdbcConnection objConnection = new OdbcConnection())


                if (Time.Count > 8)
                {
                    for (int i = CtrArrForTime; i < Time.Count; i++)
                    {
                        TimeOrig.Add(Time[i].ToString());
                    }
                }
                else
                {
                    TimeOrig = Time;
                }

                // arrXYVals = GetAllPlotValuesDI(m_objMainControl._PointID, TimeOrig, Channel);
                arrXYVals = GetAllPlotValues(TimeOrig);
                ArrayList arlstReturnedDoubleValues = null;


                //if (arrXYVals.Count > 0)
                //    arlstReturnedDoubleValues = CreateNewOnes(arrXYVals);



                //if (m_objMainControl.MainForm != null)
                {
                    SlctedDates = new ArrayList();
                    for (int i = 0; i < Time.Count; i++)
                    {
                        string[] splittime = Time[i].ToString()
                            .Split(new string[] {"<>"}, StringSplitOptions.RemoveEmptyEntries);
                        if (splittime.Length > 1)
                        {
                            SlctedDates.Add(splittime[1].ToString());
                        }
                        else
                        {
                            SlctedDates.Add(splittime[0].ToString());
                        }
                    }


                    //SlctedDates = Time;
                    NullAllGphElements();
                    int CtrLoop = 0;
                    int StartPosition = 0;
                    //int CtrLoop = 0;
                    CtrSetForThreeDD = 0;
                    GraphType = "WaterFall";
                    if (arrXYVals.Count > 16)
                    {
                        StartPosition = arrXYVals.Count - 16;
                    }
                    else
                    {
                        StartPosition = 0;

                    }

                    if (arrXYVals.Count >= 2)
                    {
                        FstLineX = (double[]) arrXYVals[StartPosition];
                        FstLineY = (double[]) arrXYVals[StartPosition + 1];
                        CtrLoop = 0;
                    }

                    if (arrXYVals.Count >= 4)
                    {
                        SecondLineX = (double[]) arrXYVals[StartPosition + 2];
                        SecondLineY = (double[]) arrXYVals[StartPosition + 3];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 6)
                    {
                        ThrdLineX = (double[]) arrXYVals[StartPosition + 4];
                        ThrdLineY = (double[]) arrXYVals[StartPosition + 5];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 8)
                    {
                        ForthLineX = (double[]) arrXYVals[StartPosition + 6];
                        ForthLineY = (double[]) arrXYVals[StartPosition + 7];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 10)
                    {
                        FifthLineX = (double[]) arrXYVals[StartPosition + 8];
                        FifthLineY = (double[]) arrXYVals[StartPosition + 9];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 12)
                    {
                        SixthLineX = (double[]) arrXYVals[StartPosition + 10];
                        SixthLineY = (double[]) arrXYVals[StartPosition + 11];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 14)
                    {
                        SvnthLineX = (double[]) arrXYVals[StartPosition + 12];
                        SvnthLineY = (double[]) arrXYVals[StartPosition + 13];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 16)
                    {
                        EghthLineX = (double[]) arrXYVals[StartPosition + 14];
                        EghthLineY = (double[]) arrXYVals[StartPosition + 15];
                        CtrLoop++;
                    }

                    GraphLoops = CtrLoop;
                    for (int i = 0; i <= CtrLoop; i++)
                    {
                        ThreeDCreater();
                    }



                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public void DrawWaveFallForDi(string Channel, ArrayList Time, ArrayList ColorTag)
        {
            OdbcCommand objCommand = null;
            ArrayList arrXYVals = null;
            int CtrArrForTime = Time.Count - 9;
            ArrayList TimeOrig = new ArrayList();
            try
            {
                //using (OdbcConnection objConnection = new OdbcConnection())


                if (Time.Count > 9)
                {
                    for (int i = CtrArrForTime; i < Time.Count; i++)
                    {
                        TimeOrig.Add(Time[i].ToString());
                    }
                }
                else
                {
                    TimeOrig = Time;
                }

                // arrXYVals = GetAllPlotValuesDI(m_objMainControl._PointID, TimeOrig, Channel);
                arrXYVals = GetWaveData(TimeOrig);
                if (Channel == "Phase")
                {
                    arrXYVals = GetPhaseData(TimeOrig);
                }

                ArrayList arlstReturnedDoubleValues = null;


                //if (arrXYVals.Count > 0)
                //    arlstReturnedDoubleValues = CreateNewOnes(arrXYVals);



                //if (m_objMainControl.MainForm != null)
                {
                    SlctedDates = new ArrayList();
                    arrSelTime = new ArrayList();
                    for (int i = 0; i < Time.Count; i++)
                    {
                        string[] splittime = Time[i].ToString()
                            .Split(new string[] {"<>"}, StringSplitOptions.RemoveEmptyEntries);
                        if (splittime.Length > 1)
                        {
                            SlctedDates.Add(splittime[1].ToString());
                        }
                        else
                        {
                            SlctedDates.Add(splittime[0].ToString());
                        }

                        arrSelTime.Add(lblDate.Text.ToString());
                    }


                    //SlctedDates = Time;
                    NullAllGphElements();
                    int CtrLoop = 0;
                    int StartPosition = 0;
                    //int CtrLoop = 0;
                    CtrSetForThreeDD = 0;
                    GraphType = "WaterFall";
                    if (arrXYVals.Count > 16)
                    {
                        StartPosition = arrXYVals.Count - 16;
                    }
                    else
                    {
                        StartPosition = 0;

                    }

                    if (arrXYVals.Count >= 2)
                    {
                        FstLineX = (double[]) arrXYVals[StartPosition];
                        FstLineY = (double[]) arrXYVals[StartPosition + 1];
                        CtrLoop = 0;
                    }

                    if (arrXYVals.Count >= 4)
                    {
                        SecondLineX = (double[]) arrXYVals[StartPosition + 2];
                        SecondLineY = (double[]) arrXYVals[StartPosition + 3];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 6)
                    {
                        ThrdLineX = (double[]) arrXYVals[StartPosition + 4];
                        ThrdLineY = (double[]) arrXYVals[StartPosition + 5];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 8)
                    {
                        ForthLineX = (double[]) arrXYVals[StartPosition + 6];
                        ForthLineY = (double[]) arrXYVals[StartPosition + 7];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 10)
                    {
                        FifthLineX = (double[]) arrXYVals[StartPosition + 8];
                        FifthLineY = (double[]) arrXYVals[StartPosition + 9];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 12)
                    {
                        SixthLineX = (double[]) arrXYVals[StartPosition + 10];
                        SixthLineY = (double[]) arrXYVals[StartPosition + 11];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 14)
                    {
                        SvnthLineX = (double[]) arrXYVals[StartPosition + 12];
                        SvnthLineY = (double[]) arrXYVals[StartPosition + 13];
                        CtrLoop++;
                    }

                    if (arrXYVals.Count >= 16)
                    {
                        EghthLineX = (double[]) arrXYVals[StartPosition + 14];
                        EghthLineY = (double[]) arrXYVals[StartPosition + 15];
                        CtrLoop++;
                    }

                    GraphLoops = CtrLoop;
                    for (int i = 0; i <= CtrLoop; i++)
                    {
                        //CreatGPWithVariableForDi();
                        ThreeDCreaterByAmit();
                    }



                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public double[] fftMag(double[] x)
        {

            // assume n is a power of 2
            if (x.Length % 2 == 0)
            {
                n = x.Length;
            }
            else
            {
                n = x.Length - 1;
            }

            nu = (int) (Math.Log(n) / Math.Log(2));
            int n2 = n / 2;
            int nu1 = nu - 1;
            double[] xre = new double[n];
            double[] xim = new double[n];
            double[] mag = new double[n2];
            double tr, ti, p, arg, c, s;
            try
            {
                for (int i = 0; i < n; i++)
                {
                    xre[i] = x[i];
                    xim[i] = 0.0f;
                }

                int k = 0;

                for (int l = 1; l <= nu; l++)
                {
                    while (k < n)
                    {
                        for (int i = 1; i <= n2; i++)
                        {
                            if ((k + n2) < n)
                            {
                                try
                                {
                                    p = bitrev(k >> nu1);
                                    arg = 2 * (double) Math.PI * p / n;
                                    c = (double) Math.Cos(arg);
                                    s = (double) Math.Sin(arg);
                                    tr = xre[k + n2] * c + xim[k + n2] * s;
                                    ti = xim[k + n2] * c - xre[k + n2] * s;
                                    xre[k + n2] = xre[k] - tr;
                                    xim[k + n2] = xim[k] - ti;
                                    xre[k] += tr;
                                    xim[k] += ti;
                                    k++;
                                }
                                catch
                                {
                                }
                            }
                        }

                        k += n2;
                    }

                    k = 0;
                    nu1--;
                    n2 = n2 / 2;
                }

                k = 0;
                int r;
                while (k < n)
                {
                    r = bitrev(k);
                    if (r > k)
                    {
                        tr = xre[k];
                        ti = xim[k];
                        xre[k] = xre[r];
                        xim[k] = xim[r];
                        xre[r] = tr;
                        xim[r] = ti;
                    }

                    k++;
                }

                mag[0] = 0; // (double)(Math.Sqrt(xre[0] * xre[0] + xim[0] * xim[0])) / n;
                for (int i = 1; i < n / 2; i++)
                {
                    //double temp_mag = (double)(Math.Sqrt(xre[i] * xre[i] + xim[i] * xim[i])) / 1000;
                    //double temp_2Per_mag = (2 * temp_mag) / 100;

                    //mag[i] = (float)(Math.Sqrt(xre[i] * xre[i] + xim[i] * xim[i])) / 1000;
                    //mag[i] = temp_mag - temp_2Per_mag;
                    mag[i] = (float) ((2 * (float) (Math.Sqrt(xre[i] * xre[i] + xim[i] * xim[i]))) / n);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return mag;
        }

        public void SetExtraZoomFalse()
        {
            try
            {
                ExtraZoom = false;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        #endregion

        #region public Properties

        public TreeList MainTreelist
        {
            get { return trlPlantMangerComponents; }
        }

        public DataGridView _Datagridview1
        {
            get { return dataGridView1; }
        }

        public DataGridView _Datagridview2
        {
            get { return dataGridView2; }
        }

        public Panel _panel1
        {
            get { return panel1; }
        }

        public string CurrentGraph
        {
            get { return sCurrentGraph; }
            set { sCurrentGraph = value; }
        }

        public bool Waterfalbuton
        {

            set
            {

                tsBtnHighestFive.Enabled = value;


                //tsBtnSideBandRatio.Enabled = value;
                //tsBtnSideBandTrend.Enabled = value;
                //tsbtnSideBandValue.Enabled = value;
                sidebandbuttonEnabled = value;

            }
        }

        public string PATH
        {
            get { return spath; }
            set { spath = value; }
        }

        public bool Datagrid3visible
        {
            set
            {
                expandableSplitter4.Visible = value;
                dataGridView3.Visible = value;
                if (value == true)
                {
                    dataGridView2.Height = panel1.Height / 3;
                    dataGridView3.Height = panel1.Height / 3;
                }
                else
                {
                    dataGridView2.Height = panel1.Height / 2;
                    dataGridView3.Height = dataGridView1.Height;
                }
            }

        }

        public bool FFbuttonEnabled
        {
            get { return tsBtnFaultFreq.Enabled; }
            set
            {
                tsBtnFaultFreq.Enabled = value;
                bbFaultFreq.Enabled = value;
                bbRPM.Enabled = value;
                bbBearingFF.Enabled = value;
            }
        }

        public string ARGBValues
        {
            get { return sARGB; }
            set { sARGB = value; }


        }

        public bool SetCurSorVal
        {
            set
            {
                SelectBandTrend = value;

                TrendValue = Convert.ToString(FillValueFreq());
            }
        }

        public bool WaterfallbuttonEnabled
        {
            get { return btnWaterFall.Enabled; }
            set
            {
                btnWaterFall.Enabled = value;
                bbWaterfall.Enabled = value;
            }
        }

        public ExpandableSplitter _ExpandableSplitter1
        {
            get { return expandableSplitter1; }
            set { expandableSplitter1 = value; }
        }

        public ExpandableSplitter _ExpandableSplitter2
        {
            get { return expandableSplitter2; }
            set { expandableSplitter2 = value; }
        }

        public ExpandableSplitter _ExpandableSplitter3
        {
            get { return expandableSplitter3; }
            set { expandableSplitter3 = value; }
        }

        public ExpandableSplitter _ExpandableSplitter4
        {
            get { return expandableSplitter4; }
            set { expandableSplitter4 = value; }
        }

        public ExpandableSplitter _ExpandableSplitter5
        {
            get { return expandableSplitter5; }
            set { expandableSplitter5 = value; }
        }

        #endregion

        #region Private functions

        private ArrayList GetPhaseData(ArrayList TimeOrig)
        {
            arrXYValues = new ArrayList();
            arrSelTime = new ArrayList();
            try
            {
                for (int i = 0; i < TimeOrig.Count; i++)
                {
                    string[] sarrFileName = TimeOrig[i].ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (sarrFileName.Length > 1)
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(sarrFileName[0]);
                            if (hshDrag[hshval] != null)
                            {
                                yarray = (double[]) (arlYDataPhase[Convert.ToInt32(hshDrag[hshval])]);
                                arrXYValues.Add(xarray);
                                arrXYValues.Add(yarray);
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }
                    else
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(TimeOrig[i]);
                            yarray = (double[]) (arlYDataPhase[Convert.ToInt32(hshDrag[hshval])]);
                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }

                    arrSelTime.Add(lblDate.Text.ToString());
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return arrXYValues;
        }

        private void CloseAppLication()
        {
            try
            {
                if (m_objHaspCheck.ThreadState == System.Threading.ThreadState.Running ||
                    m_objHaspCheck.ThreadState == System.Threading.ThreadState.WaitSleepJoin)
                {
                    m_objHaspCheck.Abort();
                }

                //if (Rockey_Thread.ThreadState == System.Threading.ThreadState.Running || Rockey_Thread.ThreadState == System.Threading.ThreadState.WaitSleepJoin)
                //{
                //    Rockey_Thread.Abort();
                //}
                Process[] objProcesses = Process.GetProcessesByName("BusyProcess");
                foreach (Process process in objProcesses)
                {
                    process.Kill();
                }

                w.Stop();
                //Environment.Exit(0);
                Application.Exit();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void DrawFaultFreq()
        {
            if (!Zoom)
            {
                Region rgn1 = new Region(panel1.Bounds);

                System.Drawing.Graphics der = panel1.CreateGraphics();
                der.Clip = rgn1;
                //Pen PenBlkB = new Pen(Color.Black, 2);
                //Pen PenRed = new Pen(Color.Red, 3);
                RectangleF pt = der.ClipBounds;
                Pen BlkDash = new Pen(Color.BlueViolet, 2);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.DashDotDot;

                PointF[] pt1 = new PointF[0];
                PointF[] pt2 = new PointF[0];
                PointF[] ptString = new PointF[0];
                string[] Names = new string[0];
                Font objFont = new Font("Roman", 7, FontStyle.Regular);
                Brush objBrush = Brushes.Red;
                try
                {
                    if (Pts != null)
                    {

                        dataGridView3.Rows.Clear();
                        for (int i = 0; i < dataGridView3.Rows.Count - 1; i++)
                        {
                            dataGridView3.Rows.RemoveAt(0);
                        }

                        double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                        double MainInterval = (TotalXAxis / (x.Length - 1));

                        StringFormat sf = new StringFormat(StringFormatFlags.DirectionVertical);

                        //Predicate<
                        //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());

                        string[] Frequencies = new string[0];

                        for (int i = 0; i < dgvDiFF.RowCount - 1; i++)
                        {
                            //Array.Resize(ref Frequencies, Frequencies.Length + 1);
                            _ResizeArray.IncreaseArrayString(ref Frequencies, 1);

                            Frequencies[Frequencies.Length - 1] =
                                dgvDiFF.Rows[i].Cells[0].Value.ToString() + "=" +
                                dgvDiFF.Rows[i].Cells[1].Value.ToString();
                        }







                        for (int i = 0; i < Frequencies.Length; i++)
                        {
                            string[] ExtractFreqSingle = Frequencies[i]
                                .Split(new string[] {"="}, StringSplitOptions.RemoveEmptyEntries);
                            double Comparator = Convert.ToDouble(ExtractFreqSingle[1]);
                            if (lblGrphUnitX.Text.Contains("CPM"))
                            {
                                Comparator = Comparator * 60;
                            }

                            int MainIndex = Array.FindIndex(XSelected,
                                delegate(double item) { return item == Comparator; });
                            if (MainIndex == -1)
                            {
                                if (Comparator <= XSelected[XSelected.Length - 1])
                                {
                                    Comparator = FindNearest(XSelected, Comparator);
                                    MainIndex = Array.FindIndex(XSelected,
                                        delegate(double item) { return item == Comparator; });
                                }
                            }

                            if (MainIndex != -1)
                            {
                                //Array.Resize(ref pt1, pt1.Length + 1);
                                //Array.Resize(ref pt2, pt2.Length + 1);
                                //Array.Resize(ref ptString, ptString.Length + 1);
                                //Array.Resize(ref Names, Names.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt1, 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt2, 1);
                                _ResizeArray.IncreaseArrayPointF(ref ptString, 1);
                                _ResizeArray.IncreaseArrayString(ref Names, 1);

                                pt1[pt1.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Bottom - Fifty));
                                pt2[pt2.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                ptString[ptString.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                Names[Names.Length - 1] =
                                    ExtractFreqSingle[0].ToString() + "   " +
                                    Convert.ToString(Math.Round(YSelected[MainIndex], 5));
                                dataGridView3.Rows.Add(1);
                                dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[0].Value =
                                    ExtractFreqSingle[0].ToString();
                                dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value =
                                    Convert.ToString(Math.Round(XSelected[MainIndex], 5));
                                dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[2].Value =
                                    Convert.ToString(Math.Round(YSelected[MainIndex], 5));
                            }
                        }

                        for (int i = 0; i < pt1.Length; i++)
                        {
                            der.DrawLine(BlkDash, pt1[i], pt2[i]);
                            //der.TranslateTransform(150, 0);
                            //der.RotateTransform(180);
                            der.DrawString(Names[i], objFont, objBrush, ptString[i], sf);

                        }


                    }
                    else
                    {

                    }

                    //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
            }
        }

        private void displayChildNodes(TreeListNode parentNode)
        {
            DirectoryInfo FS = new DirectoryInfo(GetPath(parentNode));
            TreeListNode node1 = null;
            TreeListNode node = null;
            try
            {
                //spath = FS.FullName;

                foreach (DirectoryInfo dirInfo in FS.GetDirectories())
                {
                    //' �-create a new node �-
                    node1 = trlPlantMangerComponents.AppendNode(new object[] {dirInfo.Name}, parentNode);
                    node1.Tag = "Folder";
                    node1.StateImageIndex = 0;
                    node = trlPlantMangerComponents.AppendNode(new object[] {""}, node1);

                }
            }
            catch (Exception err)
            {
                ErrorLog_Class.ErrorLogEntry(err);
                MessageBoxEx.Show(err.Message);
            }

            try
            {
                // �display all files�-
                foreach (FileInfo fileInfo in FS.GetFiles())
                {
                    if (fileInfo.Name.EndsWith(".csv", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "CSVFile";
                        node1.StateImageIndex = 1;
                    }

                    if (fileInfo.Name.EndsWith(".wav", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "WAVFile";
                        node1.StateImageIndex = 2;
                    }

                    if (fileInfo.Name.EndsWith(".dat", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "DATFile";
                        node1.StateImageIndex = 3;
                    }

                    if (fileInfo.Name.EndsWith(".ba2", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "BenstoneBALFile";
                        node1.StateImageIndex = 4;
                    }

                    if (fileInfo.Name.EndsWith(".bal", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "BALFile";
                        node1.StateImageIndex = 4;
                    }

                    //for fd2 files
                    if (fileInfo.Name.EndsWith(".fd2", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "FDTFile";
                        node1.StateImageIndex = 5;
                    }

                    //for otd files
                    if (fileInfo.Name.EndsWith(".otd", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "OTDFile";
                        node1.StateImageIndex = 5;
                    }

                    //for drd files
                    if (fileInfo.Name.EndsWith(".drd", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "DRDFile";
                        node1.StateImageIndex = 5;
                    }

                    //for fft files
                    if (fileInfo.Name.EndsWith(".fft", true, null))
                    {
                        node1 = trlPlantMangerComponents.AppendNode(new object[] {fileInfo.Name}, parentNode);
                        node1.Tag = "FFTFile";
                        node1.StateImageIndex = 5;
                    }
                }
            }
            catch (Exception err)
            {
                ErrorLog_Class.ErrorLogEntry(err);
                MessageBoxEx.Show(err.Message);
            }
        }

        private string GetPath(TreeListNode parentNode)
        {
            string SelectedPath = null;
            string temp = null;
            try
            {
                do
                {
                    temp += parentNode.GetDisplayText(0);
                    temp += "<>";
                    parentNode = parentNode.ParentNode;
                } while (parentNode != null);

                string[] splitedtemp = temp.Split(new string[] {"<>"}, StringSplitOptions.RemoveEmptyEntries);
                for (int i = splitedtemp.Length - 1; i >= 0; i--)
                {
                    SelectedPath += splitedtemp[i] + @"\";
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return SelectedPath;
        }

        private string getdatetimeoffile(string SelectedWavPath)
        {
            string timeoffile = null;
            try
            {
                timeoffile = File.GetLastWriteTime(SelectedWavPath).ToString();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return timeoffile;
        }

        private void ReadTXTfile(string Dest, bool Exact)
        {
            xarray = new double[0];
            yarray = new double[0];
            string data = null;
            try
            {
                string[] sarrpath = null;
                if (!Exact)
                {
                    sarrpath = Dest.Split(new string[] {"\\"}, StringSplitOptions.RemoveEmptyEntries);
                    aa = new FileStream("c:\\vvtemp\\" + sarrpath[sarrpath.Length - 1], FileMode.Open, FileAccess.Read);
                    DestbeforeTrend = "c:\\vvtemp\\" + sarrpath[sarrpath.Length - 1];
                }
                else
                {

                    aa = new FileStream(Dest, FileMode.Open, FileAccess.Read);
                    DestbeforeTrend = Dest;
                }

                sr = new StreamReader(aa);
                data = sr.ReadToEnd();
                sr.Close();
                string[] splitedData = data.Split(new string[] {"....."}, StringSplitOptions.RemoveEmptyEntries);
                xarray = new double[splitedData.Length];
                yarray = new double[splitedData.Length];
                Anyarray = new double[splitedData.Length];
                for (int i = 0; i < splitedData.Length; i++)
                {
                    string[] splittedXYData = splitedData[i].ToString()
                        .Split(new string[] {"/././"}, StringSplitOptions.RemoveEmptyEntries);
                    xarray[i] = Convert.ToDouble(splittedXYData[0]);
                    yarray[i] = Convert.ToDouble(splittedXYData[1]);
                    Anyarray[i] = Convert.ToDouble(splittedXYData[1]);
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private void ClearDatagrid()
        {

            try
            {
                dataGridView1.Rows.Clear();
                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                {
                    dataGridView1.Rows.RemoveAt(0);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }


        //private void GetConfCheckImages(string sPath)
        //{

        //    double[] actualXdata = new double[0];
        //    double[] actualYdata = new double[0];
        //    double[] Orderdata = new double[0];
        //    double[] RPMdata = new double[0];
        //    double[] TSdata = new double[0];
        //    arrXYValues = new ArrayList();
        //    try
        //    {
        //        tpGraph.PageVisible = false;
        //        tpConfCheck.PageVisible = true;
        //        try
        //        {
        //            // this.Enabled = false;
        //            this.Refresh();
        //            BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
        //            this.Cursor = Cursors.WaitCursor;
        //        }
        //        catch (Exception ep)
        //        {
        //            ErrorLog_Class.ErrorLogEntry(ep);
        //            ErrorLogFile(ep);
        //        }
        //        ArrayList data = FunctionforConformanceCSV(sPath); //FunctionForNyquistCSV(spath);


        //        DrawBarinImage(data);



        //        try
        //        {
        //            // this.Enabled = true;
        //            BusyImageProcess.Kill();
        //            this.Cursor = Cursors.Default;
        //        }
        //        catch
        //        {
        //        }






        //        //ArrayList data= FunctionForNyquistCSV(spath);
        //        //bool IsOrder = false;
        //        //bool IsRPM = false;
        //        //bool IsTS = false;
        //        //bool IsMag = false;
        //        //bool IsPhase = false;
        //        //int orderColumn = 0;
        //        //int RPMColumn = 0;
        //        //int DisplayColumn = 0;
        //        //int TS = 0;
        //        //arlYData = new ArrayList();
        //        //arlYDataPhase = new ArrayList();
        //        //for (int i = 0; i < data.Count; i++)
        //        //{
        //        //    actualYdata = new double[0];
        //        //    string[] sdata = (string[])data[i];
        //        //    double dValue = 0;
        //        //    string sValue = null;

        //        //    for (int j = 0; j < sdata.Length; j++)
        //        //    {

        //        //        try
        //        //        {
        //        //            dValue = Convert.ToDouble(sdata[j]);//.ToString();
        //        //            if (i == 0)
        //        //            {
        //        //                Array.Resize(ref actualXdata, actualXdata.Length + 1);
        //        //                actualXdata[actualXdata.Length - 1] = dValue;
        //        //            }
        //        //            else
        //        //            {
        //        //                if (j != orderColumn && j != RPMColumn && j != TS && j != DisplayColumn)
        //        //                {
        //        //                    Array.Resize(ref actualYdata, actualYdata.Length + 1);
        //        //                    if (DisplayType == "Bode" && sValue.Contains("Phase"))
        //        //                    {
        //        //                        if (dValue < 100 && dValue > 0)
        //        //                        {
        //        //                            dValue += 360;
        //        //                        }
        //        //                    }
        //        //                    actualYdata[actualYdata.Length - 1] = dValue;
        //        //                }
        //        //                else if (j == orderColumn)
        //        //                {
        //        //                    Array.Resize(ref Orderdata, Orderdata.Length + 1);
        //        //                    Orderdata[Orderdata.Length - 1] = dValue;
        //        //                }
        //        //                else if (j == RPMColumn)
        //        //                {
        //        //                    Array.Resize(ref RPMdata, RPMdata.Length + 1);
        //        //                    RPMdata[RPMdata.Length - 1] = dValue;
        //        //                }
        //        //                else if (j == TS)
        //        //                {
        //        //                    Array.Resize(ref TSdata, TSdata.Length + 1);
        //        //                    TSdata[TSdata.Length - 1] = dValue;
        //        //                }

        //        //            }
        //        //        }
        //        //        catch (Exception es)
        //        //        {
        //        //            sValue = sdata[j].ToString();
        //        //            if (j == DisplayColumn)
        //        //            {
        //        //                DisplayType = sValue;
        //        //            }
        //        //        }
        //        //        if (sValue == "Disp Type")
        //        //        {
        //        //            DisplayColumn = j;
        //        //            //DisplayType=
        //        //        }
        //        //        else if (sValue == "Order" || sValue == "Overall")
        //        //        {
        //        //            if (sValue == "Order")
        //        //            {
        //        //                IsOrder = true;
        //        //            }
        //        //            else
        //        //            {
        //        //                IsOrder = false;
        //        //            }
        //        //            orderColumn = j;
        //        //        }
        //        //        else if (sValue == "RPM Stamp")
        //        //        {
        //        //            IsRPM = true;
        //        //            RPMColumn = j;
        //        //        }
        //        //        else if (sValue == "Time Stamp")
        //        //        {
        //        //            IsTS = true;
        //        //            TS = j;
        //        //        }

        //        //    }
        //        //    if (sValue != null)
        //        //        if (sValue.Contains("Y-Axis"))
        //        //        {
        //        //            if (actualYdata.Length > 1)
        //        //            {
        //        //                if (IsOrder && sValue.Contains("Mag"))
        //        //                {
        //        //                    xarray = actualXdata;
        //        //                    arlYData.Add(actualYdata);
        //        //                }
        //        //                else if (IsOrder && sValue.Contains("Phase"))
        //        //                {
        //        //                    xarray = actualXdata;
        //        //                    arlYDataPhase.Add(actualYdata);
        //        //                }
        //        //                else if (!IsOrder)
        //        //                {
        //        //                    xarray = actualXdata;
        //        //                    arlYData.Add(actualYdata);
        //        //                }
        //        //                //arrXYValues.Add(actualXdata);
        //        //                //arrXYValues.Add(actualYdata);
        //        //                if (i == 1)
        //        //                {
        //        //                    RPMColumn -= 1;
        //        //                    TS -= 1;
        //        //                }
        //        //            }
        //        //        }
        //        //}

        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        //private void DrawBarinImage(ArrayList data)
        //{

        //    Point pt1 = new Point();
        //    Point pt2 = new Point();
        //    try
        //    {

        //        string[] sdataArray = (string[])data[2];
        //        double[] dxData = new double[sdataArray.Length];
        //        double[] dyData = new double[dxData.Length];


        //        for (int idata = 3, ictr = 0; ictr < 3; ictr++, idata++)
        //        {


        //            Rectangle _rect = new Rectangle(0, 0, 1000, 300);
        //            Region rgn1 = new Region(_rect);

        //            //System.Drawing.Graphics der = panel1.CreateGraphics();
        //            //der.Clip = rgn1;
        //            Bitmap bmp = new Bitmap(_rect.Width, _rect.Height, PixelFormat.Format24bppRgb);

        //            System.Drawing.Graphics der = Graphics.FromImage(bmp);
        //            //der.Clear(Color.White);
        //            der.Clear(trlPlantMangerComponents.Appearance.EvenRow.BackColor);
        //            der.Clip = rgn1;
        //            SetBarAxis(der);
        //            Pen PenBlkB = new Pen(Color.Black, 1);
        //            Pen PenRed = new Pen(Color.Red, 2);
        //            RectangleF pt = der.ClipBounds;
        //            Pen BlkDash = new Pen(Color.Black, 1);
        //            BlkDash.DashCap = DashCap.Triangle;
        //            BlkDash.DashStyle = DashStyle.Dash;

        //            //Pts = new PointF[0];
        //            //panel1.Refresh();
        //            PointF Ptsn1 = new PointF();
        //            Font objFont = new Font("Roman", 10, FontStyle.Bold);
        //            Brush objBrush = Brushes.Black;


        //            sdataArray = (string[])data[idata];
        //            for (int i = 0; i < sdataArray.Length; i++)
        //            {
        //                dyData[i] = Convert.ToDouble(sdataArray[i].ToString());
        //                dxData[i] = Convert.ToDouble((i + 1).ToString());

        //            }


        //            idata++;
        //            {
        //                pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //                pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //                der.DrawLine(PenBlkB, pt1, pt2);
        //                der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three, pt2.Y - 7);


        //                pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
        //                pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
        //                der.DrawLine(PenBlkB, pt1, pt2);
        //                der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
        //            }

        //            CalCulateGhpDisplayed = GphCtr - 1;
        //            //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

        //            double TotalYAxis = 0.0;
        //            double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
        //            if (Time == true)
        //            {
        //                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
        //            }
        //            else
        //            {
        //                TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
        //            }


        //            if (setAxisCtr == 0 && dxData != null)
        //            {
        //                if (Panel1Resized)
        //                {
        //                    MainYAxisInterval = (double)(HighestValYAxis / TotalYAxis);
        //                    MainXAxisInterval = (TotalXAxis / (dxData.Length - 1));
        //                    CursorStartInterval = MainXAxisInterval;
        //                }

        //                // SetAxisMarks(dxData, dyData);
        //            }



        //            try
        //            {
        //                double MainYAxisInterval1 = 0;
        //                double MainYAxisInterval2 = 0;

        //                float HighestX = findHighestValue(dxData);
        //                float HighestY = findHighestValue(dyData);
        //                //XSelected = octaveCenterData;
        //                //YSelected = dActXData;

        //                MainYAxisInterval = (double)(HighestY / TotalYAxis);
        //                MainXAxisInterval = (TotalXAxis / (dxData.Length - 1));

        //                float MaxX = HighestX;
        //                float MaxY = HighestY;

        //                MainYAxisInterval1 = (double)(MaxX / (TotalXAxis));
        //                MainYAxisInterval2 = (double)(MaxY / (TotalYAxis));
        //                Pts = new PointF[0];
        //                //Font objFont = new Font("Roman", 10, FontStyle.Bold);
        //                //Brush objBrush = Brushes.Black;
        //                Pen PenBlackBAR = new Pen(Color.Black, (float)(TotalXAxis / Pts.Length));
        //                Brush objBrush1 = Brushes.Red;
        //                //PointF OriginPts = new PointF(Pts[i].X, (float)pt.Bottom - Fifty);
        //                for (int i = 0; i < dxData.Length; i++)
        //                {
        //                    Pen PenRedBAR = new Pen(Color.LightGreen, (float)(TotalXAxis / dxData.Length) - 2);//.FromArgb(red, Green, blue)

        //                    StringFormat sf = new StringFormat();
        //                    Array.Resize(ref Pts, Pts.Length + 1);
        //                    // Pen PenRedBAR = new Pen(Color.Red, (float)(TotalXAxis / dxData.Length));

        //                    Ptsn1 = new PointF((float)(pt.Left + SixtyTwo + (float)((i + 0) * ((dxData[dxData.Length - 1]) / dxData.Length) / MainYAxisInterval1)) + PenRedBAR.Width / 2, (float)Math.Round((float)(pt.Bottom - Fifty - (float)(dyData[i] / MainYAxisInterval2)), 3));
        //                    PointF OriginPts = new PointF(Ptsn1.X, (float)pt.Bottom - Fifty);
        //                    //der.DrawLine(PenRedBAR, OriginPts, Ptsn1);
        //                    //der.DrawString(dxData[i].ToString(), objFont, objBrush, OriginPts.X, OriginPts.Y - 20);
        //                    //der.DrawString(Math.Round(dyData[i], 4).ToString(), objFont, objBrush, OriginPts.X, (float)(Ptsn1.Y));

        //                    // Pts[i] = Ptsn1;


        //                    //der.DrawLine(PenBlackBAR, OriginPts, Pts[i]);
        //                    if (Ptsn1.Y < OriginPts.Y)
        //                    {
        //                        der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Ptsn1.X, Ptsn1.Y + 1);
        //                    }
        //                    else
        //                    {
        //                        der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Ptsn1.X, Ptsn1.Y);
        //                    }
        //                    sf.FormatFlags = StringFormatFlags.DirectionVertical;

        //                    // if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
        //                    {

        //                        der.DrawString(Math.Round(dxData[i], 3).ToString(), objFont, objBrush, OriginPts.X - ((float)(TotalXAxis / dxData.Length) / 2), OriginPts.Y, sf);
        //                    }
        //                    //ixptr++;
        //                    if (Ptsn1.Y < (OriginPts.Y - 10))
        //                    {


        //                        der.DrawString(Math.Round(dyData[i], 4).ToString(), objFont, objBrush1, OriginPts.X - ((float)(TotalXAxis / dxData.Length) / 2), (float)(Ptsn1.Y), sf);

        //                    }

        //                }

        //            }
        //            catch (Exception ex)
        //            {
        //                ErrorLog_Class.ErrorLogEntry(ex);
        //            }
        //            GC.Collect();
        //            if (File.Exists(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip" + ictr + ".jpg"))
        //            {

        //                File.Delete(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip" + ictr + ".jpg");
        //            }


        //            bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip" + ictr + ".jpg");

        //            bmp.Dispose();
        //            GC.Collect();

        //            //Image _img = Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip" + ictr + ".jpg");
        //            //Image _img_clone = (Image)_img.Clone();
        //            byte[] IMG = ReadImage(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip" + ictr + ".jpg", new string[] { ".gif", ".jpg", ".bmp" });
        //            switch (ictr)
        //            {
        //                case 0:
        //                    {
        //                        pbDisp.Image = byteArrayToImage(IMG);
        //                        break;
        //                    }
        //                case 1:
        //                    {
        //                        pbVelocity.Image = byteArrayToImage(IMG);
        //                        break;
        //                    }
        //                case 2:
        //                    {
        //                        pbAcceleration.Image = byteArrayToImage(IMG);
        //                        break;
        //                    }
        //            }

        //            // _img.Dispose();
        //            GC.Collect();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        public Image byteArrayToImage(byte[] byteArrayIn)
        {

            MemoryStream ms = new MemoryStream(byteArrayIn);
            Image returnImage = Image.FromStream(ms);

            return returnImage;

        }

        private static byte[] ReadImage(string p_postedImageFileName, string[] p_fileType)
        {

            bool isValidFileType = false;

            try
            {

                FileInfo file = new FileInfo(p_postedImageFileName);



                foreach (string strExtensionType in p_fileType)
                {

                    if (strExtensionType == file.Extension)
                    {

                        isValidFileType = true;

                        break;

                    }

                }

                if (isValidFileType)
                {

                    FileStream fs = new FileStream(p_postedImageFileName, FileMode.Open, FileAccess.Read);



                    BinaryReader br = new BinaryReader(fs);



                    byte[] image = br.ReadBytes((int) fs.Length);



                    br.Close();



                    fs.Close();



                    return image;

                }

                return null;

            }

            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                throw ex;

            }

        }

        private void SetBarAxis(System.Drawing.Graphics der)
        {

            try
            {

                Rectangle _rect = new Rectangle(0, 0, 1000, 300);
                Region rgn1 = new Region(_rect);

                RectangleF pt = der.ClipBounds;

                OneFifty = (int) Math.Round((18.5643 * pt.Bottom) / 100, 0);
                TwoHundred = (int) Math.Round((24.7524 * pt.Bottom) / 100, 0);
                FourFifty = (int) Math.Round((55.6930 * pt.Bottom) / 100, 0);
                FourHundred = (int) Math.Round((49.5049 * pt.Bottom) / 100, 0);
                //16-02-2010 4:27   DA_1    Amit Jain   No over lap of y axis string, values and graph
                SixtyTwo = 62; // (int)Math.Round((6.7982 * pt.Right) / 100, 0);
                OneSixtyTwo = (int) Math.Round((17.7631 * pt.Right) / 100, 0);
                Thrghty = (int) Math.Round((3.7128 * pt.Bottom) / 100, 0);
                Fifteen = (int) Math.Round((2.0833 * pt.Right) / 100, 0); //1.6447
                TwoPointFive = (int) Math.Round((.7127 * pt.Right) / 100, 0); //.2741
                Three = (int) Math.Round((.75 * pt.Right) / 100, 0);
                Fifty = (int) Math.Round((6.1881 * pt.Bottom) / 100, 0);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }
        //private ArrayList FunctionforConformanceCSV(string sPath)
        //{
        //    Microsoft.Office.Interop.Excel.Sheets objSheets;
        //    Microsoft.Office.Interop.Excel._Worksheet objSheet;
        //    Microsoft.Office.Interop.Excel.Range range;
        //    Microsoft.Office.Interop.Excel.Workbooks objBooks;
        //    {

        //        try
        //        {

        //            // Instantiate Excel and start a new workbook.
        //            ExcelApp = new Microsoft.Office.Interop.Excel.Application();
        //            objBooks = ExcelApp.Workbooks;
        //            objBook = objBooks.Add(sPath);
        //            arlstData = new ArrayList();
        //            try
        //            {
        //                //Get a reference to the first sheet of the workbook.
        //                objSheets = objBook.Worksheets;
        //                objSheet = (Microsoft.Office.Interop.Excel._Worksheet)objSheets.get_Item(1);
        //            }

        //            catch (Exception theException)
        //            {
        //                ErrorLog_Class.ErrorLogEntry(theException);
        //                String errorMessage;
        //                errorMessage = "Can't find the Excel workbook.";

        //                MessageBoxEx.Show(errorMessage, "Missing Workbook?");

        //                //You can't automate Excel if you can't find the data you created, so 
        //                //leave the subroutine.
        //                return null;
        //            }


        //            int i = 1;
        //            int Row = 1;
        //            int Column = 1;
        //            string[] strtext = new string[0];
        //            string[] strtext1 = new string[0];
        //            bool done = false;
        //            do
        //            {
        //                range = objSheet.get_Range(objSheet.Cells[Row, Column], objSheet.Cells[Row, Column + 1]);
        //                Object[,] saRet1;
        //                saRet1 = (System.Object[,])range.get_Value(Missing.Value);

        //                string val = Convert.ToString(saRet1[1, 1]);
        //                string val1 = Convert.ToString(saRet1[1, 2]);
        //                //if (Row == 8 && !done)
        //                //{
        //                //    done = true;
        //                //    range = objSheet.get_Range(objSheet.Cells[Row, 4], objSheet.Cells[Row, 5]);
        //                //    // Object[,] saRet1;
        //                //    saRet1 = (System.Object[,])range.get_Value(Missing.Value);

        //                //    val = Convert.ToString(saRet1[1, 1]);
        //                //    val1 = Convert.ToString(saRet1[1, 2]);
        //                //}
        //                if (!string.IsNullOrEmpty(val) && !string.IsNullOrEmpty(val1))
        //                {
        //                    if (Row > 14 || Row == 8)
        //                    {
        //                        Array.Resize(ref strtext, strtext.Length + 1);
        //                        strtext[strtext.Length - 1] = val;
        //                        Array.Resize(ref strtext1, strtext1.Length + 1);
        //                        strtext1[strtext1.Length - 1] = val1;
        //                    }
        //                }
        //                Row++;
        //                if (Row > 14 && string.IsNullOrEmpty(val) && string.IsNullOrEmpty(val1))
        //                {
        //                    Column += 2;
        //                    Row = 1;
        //                    if (strtext.Length == 0 && strtext1.Length == 0)
        //                    {
        //                        break;
        //                    }
        //                    else
        //                    {
        //                        arlstData.Add(strtext);
        //                        arlstData.Add(strtext1);
        //                        strtext = new string[0];
        //                        strtext1 = new string[0];
        //                    }

        //                }
        //            } while (true);
        //            ReleaseExcel(objSheets);
        //            ReleaseExcel(objSheet);
        //            ReleaseExcel(range);
        //            ReleaseExcel(objBooks);
        //        }

        //        catch (Exception theException)
        //        {
        //            ErrorLog_Class.ErrorLogEntry(theException);
        //            String errorMessage;
        //            errorMessage = "Error: ";
        //            errorMessage = String.Concat(errorMessage, theException.Message);
        //            errorMessage = String.Concat(errorMessage, " Line: ");
        //            errorMessage = String.Concat(errorMessage, theException.Source);

        //            MessageBoxEx.Show(errorMessage, "Error");
        //        }


        //        finally
        //        {
        //            //ExcelApp. = null;

        //            ReleaseExcel(objBook);

        //            ExcelApp.Quit();
        //            ReleaseExcel(ExcelApp);

        //        }
        //        return arlstData;
        //    }
        //}
        private void ReadCSVfile(string path, int ipos)
        {
            xarray = new double[0];
            yarray = new double[0];

            string[] sarrpath = path.Split(new string[] {"\\"}, StringSplitOptions.RemoveEmptyEntries);

            string newpath = null;
            for (int i = 0; i < sarrpath.Length - 1; i++)
            {
                newpath += sarrpath[i].ToString() + "\\";
            }

            try
            {
                string connectionString = "Provider=Microsoft.Jet.OleDb.4.0;Data Source=" + newpath +
                                          ";Extended Properties='Text;HDR=NO;IMEX=1;FMT=Delimited';";
                //Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Documents and Settings\rajesh.yadava\Desktop\orcad;Extended Properties="Text;HDR=YES;IMEX=1;FMT=Delimited"


                //connectionString += "Extended Properties=Excel 8.0;";

                // always read from the sheet1.
                OleDbConnection myConnection = new OleDbConnection(connectionString);
                // string a1s = trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                OleDbCommand myCommand =
                    new OleDbCommand("Select * from[" + sarrpath[sarrpath.Length - 1].ToString() + "]", myConnection);



                myConnection.Open();

                myCommand.Connection = myConnection;

                OleDbDataReader myReader = myCommand.ExecuteReader();

                while (myReader.Read())
                {
                    string first = myReader[0].ToString();
                    string second = myReader[ipos].ToString();

                    if (!string.IsNullOrEmpty(first))
                    {
                        switch (first)
                        {
                            case "Application":
                            {

                                //lblDate.Text = second.ToString();
                                break;
                            }
                            case "User ID":
                            {
                                //lblDate.Text = second.ToString();
                                break;
                            }
                            case "Unit ID":
                            {
                                // lblDate.Text = second.ToString();
                                break;
                            }
                            case "Date/Time":
                            {

                                break;
                            }

                            case "Trigger Type":
                            {

                                break;
                            }
                            case "Trigger Level":
                            {

                                break;
                            }
                            case "Slope":
                            {

                                break;
                            }
                            case "Transducer Units":
                            {

                                break;
                            }
                            case "Sensitivity":
                            {

                                break;
                            }
                            case "Transducer Offset":
                            {

                                break;
                            }
                            case "Display Units":
                            {
                                lblGraphUnitY.Text = "Y Unit : " + second.ToString();

                                break;
                            }
                            case "High Pass Filter":
                            {

                                break;
                            }
                            case "Coupling Type":
                            {

                                break;
                            }
                            case "Channel Input":
                            {

                                break;
                            }
                            case "Freq Type":
                            {

                                break;
                            }
                            case "Max Freq / Orders":
                            {

                                break;
                            }
                            case "No. of Averages":
                            {

                                break;
                            }
                            case "Average Type":
                            {

                                break;
                            }
                            case "Overlap (%)":
                            {

                                break;
                            }
                            case "Detection":
                            {

                                break;
                            }
                            case "No. of Lines":
                            {

                                break;
                            }
                            case "No. of Samples":
                            {

                                break;
                            }
                            case "Window Type":
                            {

                                break;
                            }
                            case "Input Range Mode":
                            {

                                break;
                            }
                            case "Fixed Range Value":
                            {

                                break;
                            }
                            case "Auto Mode":
                            {

                                break;
                            }
                            case "Meas. Type":
                            {

                                break;
                            }
                            case "Meas. Domain":
                            {

                                break;
                            }
                            case "Trigger Hysteresis":
                            {

                                break;
                            }
                            case "Trigger Pullup":
                            {

                                break;
                            }
                            case "Bin Zeroing":
                            {

                                break;
                            }
                            case "Units String":
                            {


                                break;
                            }
                            case "Y-axis Units":
                            {
                                lblYunit.Text = second.ToString();

                                break;
                            }
                            case "X-axis Units":
                            {
                                lblXunit.Text = second.ToString();
                                lblGrphUnitX.Text = "X Unit : " + second.ToString();
                                break;
                            }
                            case "View Signal":
                            {

                                break;
                            }
                            case "Y-axis Display":
                            {

                                break;
                            }
                            case "Sensor Type":
                            {

                                break;
                            }
                            case "Overall":
                            {

                                break;
                            }
                            case "X-Axis":
                            {
                                //lblOverall.Text = second.ToString();
                                break;
                            }
                            case "Rec Start Mode":
                            {
                                break;
                            }
                            case "Rec Trig Level":
                            {
                                break;
                            }
                            case "Acq. Errors":
                            {
                                break;
                            }
                            case "Order":
                            {
                                break;
                            }
                            case "RPM Stamp":
                            {
                                break;
                            }
                            case "Time Stamp":
                            {
                                break;
                            }
                            default:
                            {
                                try
                                {
                                    double test = Convert.ToDouble(first);
                                    //Array.Resize(ref xarrayNew, xarrayNew.Length + 1);
                                    //Array.Resize(ref yarrayNew, yarrayNew.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref xarrayNew, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref yarrayNew, 1);
                                    //if (lblXunit.Text.ToString() == "CPM")
                                    //{
                                    //    first = Convert.ToString(Convert.ToDouble(first) / 60);
                                    //}
                                    xarrayNew[xarrayNew.Length - 1] = Convert.ToDouble(first);
                                    yarrayNew[yarrayNew.Length - 1] = Convert.ToDouble(second);
                                }
                                catch
                                {
                                }

                                break;
                            }
                            //{

                            //    {
                            //        //Array.Resize(ref xarray, xarray.Length + 1);
                            //        //Array.Resize(ref yarray, yarray.Length + 1);
                            //        _ResizeArray.IncreaseArrayDouble(ref xarray, 1);
                            //        _ResizeArray.IncreaseArrayDouble(ref yarray, 1);
                            //        xarray[xarray.Length - 1] = Convert.ToDouble(first);
                            //        yarray[yarray.Length - 1] = Convert.ToDouble(second);
                            //    }
                            //    break;
                            //}
                        }
                    }

                }

                myReader.Close();
                myConnection.Close();





            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }


        }

        private void SetAxis(Graphics der)
        {
            try
            {
                Rectangle Rect = new Rectangle(0, 0, 800, 480);

                Region rgn1 = new Region(Rect);



                RectangleF pt = new RectangleF(0, 0, 800, 480);

                OneFifty = (int) Math.Round((18.5643 * pt.Bottom) / 100, 0);
                TwoHundred = (int) Math.Round((24.7524 * pt.Bottom) / 100, 0);
                FourFifty = (int) Math.Round((55.6930 * pt.Bottom) / 100, 0);
                FourHundred = (int) Math.Round((49.5049 * pt.Bottom) / 100, 0);
                //16-02-2010 4:27   DA_1    Amit Jain   No over lap of y axis string, values and graph
                SixtyTwo = 62; // (int)Math.Round((6.7982 * pt.Right) / 100, 0);
                OneSixtyTwo = (int) Math.Round((17.7631 * pt.Right) / 100, 0);
                Thrghty = (int) Math.Round((3.7128 * pt.Bottom) / 100, 0);
                Fifteen = (int) Math.Round((2.0833 * pt.Right) / 100, 0); //1.6447
                TwoPointFive = (int) Math.Round((.7127 * pt.Right) / 100, 0); //.2741
                Three = (int) Math.Round((.75 * pt.Right) / 100, 0);
                Fifty = (int) Math.Round((6.1881 * pt.Bottom) / 100, 0);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void SetAxis()
        {
            try
            {
                //splitContainerControl1.Panel2.MinSize = splitContainerControl1.Size.Width - splitContainerControl1.Panel1.Size.Width;


                Region rgn1 = new Region(panel1.Bounds);

                System.Drawing.Graphics der = panel1.CreateGraphics();

                der.Clip = rgn1;

                //Pen PenBlkB = new Pen(Color.Black, 2);
                //Pen PenRed = new Pen(Color.Red, 1);
                RectangleF pt = der.ClipBounds;

                OneFifty = (int) Math.Round((18.5643 * pt.Bottom) / 100, 0);
                TwoHundred = (int) Math.Round((24.7524 * pt.Bottom) / 100, 0);
                FourFifty = (int) Math.Round((55.6930 * pt.Bottom) / 100, 0);
                FourHundred = (int) Math.Round((49.5049 * pt.Bottom) / 100, 0);
                //16-02-2010 4:27   DA_1    Amit Jain   No over lap of y axis string, values and graph
                SixtyTwo = 62; // (int)Math.Round((6.7982 * pt.Right) / 100, 0);
                OneSixtyTwo = (int) Math.Round((17.7631 * pt.Right) / 100, 0);
                Thrghty = (int) Math.Round((3.7128 * pt.Bottom) / 100, 0);
                Fifteen = (int) Math.Round((2.0833 * pt.Right) / 100, 0); //1.6447
                TwoPointFive = (int) Math.Round((.7127 * pt.Right) / 100, 0); //.2741
                Three = (int) Math.Round((.75 * pt.Right) / 100, 0);
                Fifty = (int) Math.Round((6.1881 * pt.Bottom) / 100, 0);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void Trending(string Channel)
        {
            ArrayList arrXYVals = null;
            ArrayList Time = new ArrayList();
            ArrayList SltTime = new ArrayList();
            string[] ColorCode =
            {
                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
                "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                "6737204", "16728065", "744352"
            };
            int icc = 0;
            int color = 0;
            arlstSColors = new ArrayList();
            ImageList objlistimg = new ImageList();
            try
            {
                iclick = 1;
                objlistimg.Images.Add(Resources.DarkRed);
                objlistimg.Images.Add(Resources.DarkGreen);
                objlistimg.Images.Add(Resources.DarkGoldenRod);
                objlistimg.Images.Add(Resources.DarkVoilet);
                objlistimg.Images.Add(Resources.DarkBlue);
                objlistimg.Images.Add(Resources.DimGrey);
                objlistimg.Images.Add(Resources.Chocolate);
                objlistimg.Images.Add(Resources.DarkKhaki);
                objlistimg.Images.Add(Resources.Black);
                objlistimg.Images.Add(Resources.Orange);
                objlistimg.Images.Add(Resources.Cyan);
                objlistimg.Images.Add(Resources.AquaMarine);
                objlistimg.Images.Add(Resources.Bisque);
                objlistimg.Images.Add(Resources.Blue);
                objlistimg.Images.Add(Resources.BlueViolet);
                objlistimg.Images.Add(Resources.Coral);
                objlistimg.Images.Add(Resources.Darkmagenta);
                objlistimg.Images.Add(Resources.DarkseaGreen);
                objlistimg.Images.Add(Resources.DarkSlateBlue);
                objlistimg.Images.Add(Resources.Deeppink);
                objlistimg.Images.Add(Resources.DodgerBlue);
                objlistimg.Images.Add(Resources.FireBrick);
                objlistimg.Images.Add(Resources.ForestGreen);
                objlistimg.Images.Add(Resources.GreenYellow);
                objlistimg.Images.Add(Resources.HotPink);
                objlistimg.Images.Add(Resources.IndianRed);
                objlistimg.Images.Add(Resources.Darkorange);
                objlistimg.Images.Add(Resources.Darkorchid);
                objlistimg.Images.Add(Resources.DeepSkyBlue);
                objlistimg.Images.Add(Resources.SandyBrown);
                dataGridViewImageColumn1.ValuesAreIcons = false;

                for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                {
                    Time.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                }

                //Time = dataGridView2.Rows.
                if (Time.Count > 0)
                {
                    // CallClearDataGridMain();
                    // dataGridView2.Rows.Add(Time.Count);
                    //for (int i = 0; i < Time.Count; i++)
                    //{
                    //    dataGridView2.Rows[i].Cells[0].Value = Time[i].ToString();
                    //    if (i < 8)
                    //    {
                    //        dataGridView2.Rows[i].Cells[1].Value = "√";
                    //        SltTime.Add(Time[i].ToString());
                    //        iclick += 1;
                    //        arlstSColors.Add(ColorCode[i]);
                    //    }
                    //    else
                    //    {
                    //        dataGridView2.Rows[i].Cells[1].Value = "X";
                    //    }
                    //    //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                    //    dataGridView2.Rows[i].Cells[3].Value = objlistimg.Images[icc];
                    //    dataGridView2.Rows[i].Cells[3].Tag = ColorCode[icc].ToString();
                    //    color++;
                    //    icc++;
                    //    if (icc >= 30)
                    //    {
                    //        icc = 0;
                    //    }
                    //}
                    dataGridView2.Rows[dataGridView2.Rows.Count - 1].Cells[3].Value = Resources.White;

                    //arrXYVals =  GetAllPlotValuesDI(Time);
                    //DrawDiTrend(arrXYVals, Time, arlstSColors);
                    //arlstSelectedTime = new ArrayList();
                    //arlstSelectedTime = Time;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

        }

        private void SetTimeButtons()
        {
            try
            {
                btnBkwd.Enabled = true;
                btnFwd.Enabled = true;
                btnColors.Enabled = true;

                //btnZoom.Enabled = true;
                //btnUnZoom.Enabled = false;
                ZommingButton = true;
                TrendButtonEnabled = true; // btnTrend.Enabled = true;

                AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;

                tsbtnCopyValues.Enabled = true;
                btnCopyGraphToClipBord.Enabled = true;

                //tsbtnSideBandValue.Enabled = false;
                //tsBtnSideBandRatio.Enabled = false;
                //tsBtnSideBandTrend.Enabled = false;
                sidebandbuttonEnabled = false;
                ClearCmbCursor();
                //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Single With Square", "Cross Hair" });
                ArrayList CursorItems = new ArrayList();
                CursorItems.Add("Select Cursor");
                CursorItems.Add("Single");

                CursorItems.Add("Single With Square");
                CursorItems.Add("Cross Hair");


                AddToCmbCursor(CursorItems);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void SetFFtButtons()
        {
            try
            {
                btnBkwd.Enabled = true;
                btnFwd.Enabled = true;
                btnColors.Enabled = true;

                //btnZoom.Enabled = true;
                //btnUnZoom.Enabled = false;
                ZommingButton = true;
                TrendButtonEnabled = true; // btnTrend.Enabled = true;

                AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;

                tsbtnCopyValues.Enabled = true;
                btnCopyGraphToClipBord.Enabled = true;

                //tsbtnSideBandValue.Enabled = true;
                //tsBtnSideBandRatio.Enabled = true;
                //tsBtnSideBandTrend.Enabled = true;

                sidebandbuttonEnabled = true;
                ClearCmbCursor();
                //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single", "Harmonic", "Single With Square", "Cross Hair", "Sideband", "SidebandRatio", "SideBandTrend", "PeekCursor" });
                ArrayList CursorItems = new ArrayList();
                CursorItems.Add("Select Cursor");
                CursorItems.Add("Single");
                CursorItems.Add("Harmonic");
                CursorItems.Add("Single With Square");
                CursorItems.Add("Cross Hair");
                CursorItems.Add("Sideband");
                CursorItems.Add("SidebandRatio");
                CursorItems.Add("SideBandTrend");
                CursorItems.Add("PeekCursor");

                AddToCmbCursor(CursorItems);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void DrawOriginalDI(string DestbeforeTrend)
        {
            try
            {
                if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                {
                    ReadCSVfile(DestbeforeTrend);
                }
                else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                {
                    //ReadTXTfile(DestbeforeTrend, true);
                }

                x = xarray;
                y = yarray;
                panel1.Refresh();
                if (lblXunit.Text.Contains('s'))
                {
                    //GraphType = "Time";
                    CurrentGraph = "Time";
                    setCursorCombo("Time");
                }
                else
                {
                    //GraphType = "FFT";
                    CurrentGraph = "Power";
                    setCursorCombo("Power");
                }

                GraphType = "FFT";


                NullCursorBools();
                RefreshZoomParam();
                CallClearDataGridMain();


                deletedataGridRows();
                ResetZoomButton();
                ShowCurrentDate();
                SetIsTrend = false;
                Waterfalbuton = true;
                IsAxisCombo = true;
                IsWaterfall = false;


                if (bWave)
                {
                    bWave = !bWave;
                    trendValCtr = 0;
                    trlPlantMangerComponents.Enabled = true;
                    trlPlantMangerComponents.FocusedNode = tlNode;
                    tlNode = null;
                }


                CreatGPWithVariableForDi();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void DrawWavInitial(TreeListNode treeListNode)
        {
            try
            {
                //lblGrphUnitX.Text = "X Unit : sec";
                //if (label_Ch1 != null)
                //{
                //    lblGraphUnitY.Text = "Y Unit : " + label_Ch1.ToString();
                //}
                //lblXAxis.Text = "Date : " + dateofwav.ToString();
                //int xlength = (TotalDataBytes / SamplePerSec) / channel;

                //double[] xData = new double[xlength];

                //for (int i = 0; i < xlength; i++)
                //{
                //    xData[i] = i * TimeVal;
                //}
                //xarray = xData;
                //FullTime_CH2 = xData;
                if (Channel1GraphToDraw)
                {
                    lblGrphUnitX.Text = "X Unit : sec";
                    if (label_Ch1 != null)
                    {
                        lblGraphUnitY.Text = "Y Unit : " + label_Ch1.ToString();
                    }

                    lblXAxis.Text = "Date : " + dateofwav.ToString();
                    int xlength = (TotalDataBytes / SamplePerSec) / channel;

                    double[] xData = new double[xlength];

                    for (int i = 0; i < xlength; i++)
                    {
                        xData[i] = i * TimeVal;
                    }

                    xarray = xData;
                    FullTime_CH2 = xData;

                    string source = null;
                    string Dest = null;
                    TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                    TreeListNode node1 = null;
                    string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                    string[] ColorCode =
                    {
                        "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                        "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573",
                        "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476",
                        "3318692", "29696", "6737204", "16728065", "744352"
                    };

                    try
                    {


                        Channel1WavX = xData;
                        Channel1WavY = Fulldata_CH1;
                        if (channel == 2)
                        {
                            Channel2WavX = Channel1WavX;
                            Channel2WavY = Fulldata_CH2;
                        }

                        x = xData;
                        y = Fulldata_CH1;
                        NullCursorBools();
                        GphCtr = 0;
                        CreatGPWithVariableForDi();

                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);

                    }
                }
                else
                {
                    lblGrphUnitX.Text = "X Unit : sec";
                    if (label_Ch1 != null)
                    {
                        lblGraphUnitY.Text = "Y Unit : " + label_Ch2.ToString();
                    }

                    lblXAxis.Text = "Date : " + dateofwav.ToString();
                    int xlength = (TotalDataBytes / SamplePerSec) / channel;

                    double[] xData = new double[xlength];

                    for (int i = 0; i < xlength; i++)
                    {
                        xData[i] = i * TimeVal;
                    }

                    xarray = xData;
                    FullTime_CH2 = xData;


                    Channel1WavX = xData;
                    Channel1WavY = Fulldata_CH1;

                    Channel2WavX = Channel1WavX;
                    Channel2WavY = Fulldata_CH2;





                    {
                        string source = null;
                        string Dest = null;
                        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                        TreeListNode node1 = null;
                        string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                        string[] ColorCode =
                        {
                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                            "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944",
                            "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                        };

                        try
                        {
                            x = xData;
                            y = Fulldata_CH2;
                            NullCursorBools();
                            GphCtr = 0;
                            CreatGPWithVariableForDi();

                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }
                }











                ////int[] LOR = { 100, 200, 400, 800, 1600, 3200, 6400, 12800 };
                ////int[] LOR1 = { 256, 512, 1024, 2048, 4096, 8192, 16384, 32738 };
                //int[] LOR = { 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200, 102400, 204800 };
                //int[] LOR1 = { 256, 512, 1024, 2048, 4096, 8192, 16384, 32738, 65536, 131072, 262144, 524288 };
                //try
                //{
                //    string SelectedWavPath = PATH + "\\" + treeListNode.GetDisplayText(0).ToString();

                //    iclick = 1;
                //    //setWaveFirstData();
                //    //if (Directory.Exists("c:\\vvtemp\\"))
                //    //{
                //    //    Directory.Delete("c:\\vvtemp\\", true);
                //    //}
                //    using (FileStream wav = new FileStream(SelectedWavPath, FileMode.Open, FileAccess.Read))
                //    {

                //        Byte[] Parameter = new byte[44];

                //        wav.Read(Parameter, 0, 44);
                //        int channel = Convert.ToInt32(Parameter[22].ToString());
                //        string[] SFbyteD = new string[4];
                //        string SFH = null;
                //        int ctr = 0;




                //        int SamplePerSec = 0;
                //        //if (channel == 1)
                //        {
                //            SamplePerSec = AvgBytesPerSec / SF;
                //        }
                //        //else if (channel == 2)
                //        //{
                //        //    SamplePerSec = AvgBytesPerSec / SF;
                //        //    SamplePerSec = SamplePerSec / 2;
                //        //}
                //        double[] xData = new double[TotalDataBytes / SamplePerSec];

                //        for (int i = 0; i < (TotalDataBytes / SamplePerSec); i++)
                //        {
                //            xData[i] = i * TimeVal;
                //        }
                //        xarray = xData;

                //        bShowOrbit = false;
                //        //if (channel == 2)
                //        //{
                //        //    if (MessageBoxEx.Show("Do you want to Create Orbit" + "\n" + "Click Yes for Orbit" + "\n" + "Click No for Waterfall", "Show Orbit", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                //        //    {
                //        //        bShowOrbit = true;
                //        //    }
                //        //}
                //        if (TotalTime > 0)
                //        {
                //            short sample;
                //            double[] narray = new double[0];
                //            BinaryReader fr = new BinaryReader(wav);


                //            double[] soundBytes = new double[xData.Length];
                //            double[] soundBytes1 = new double[xData.Length];
                //            arlYData = new ArrayList();
                //            ctr = 0;
                //            int abc = 0;

                //            double divider = (double)1 / (double)32767;
                //            string[] splitedspath = SelectedWavPath.Split(new string[] { "\\", ".wav" }, StringSplitOptions.RemoveEmptyEntries);
                //            string pathforCSV = null;
                //            for (int i = 0; i < splitedspath.Length - 1; i++)
                //            {
                //                pathforCSV = pathforCSV + splitedspath[i].ToString() + "\\";
                //            }
                //            pathforCSV = pathforCSV + splitedspath[splitedspath.Length - 1] + "_CHN1.csv";

                //            if (File.Exists(pathforCSV))
                //            {
                //                ReadCSVfileForData(pathforCSV);
                //                divider = divider * Convert.ToDouble(lblFixedRangeValue.Text.ToString());
                //            }

                //            if (channel == 1)
                //            {

                //                while (fr.BaseStream.Position - 44 < TotalDataBytes)//while (fr.BaseStream.Position != fr.BaseStream.Length)
                //                {

                //                    sample = fr.ReadInt16();
                //                    double SampleVal = Convert.ToDouble(sample * divider);
                //                    //SampleVal = SampleVal / 1000;
                //                    if (SampleVal < 100)
                //                    {
                //                        SampleVal = Math.Round(SampleVal, 3);
                //                        soundBytes[ctr] = (SampleVal);
                //                    }
                //                    else
                //                    {
                //                        SampleVal = Math.Round(SampleVal);
                //                        soundBytes[ctr] = (SampleVal);
                //                    }
                //                    ctr++;
                //                    if (ctr == xData.Length)
                //                    {
                //                        double[] tempYdata = null;
                //                        //if (!bShowOrbit)
                //                        {
                //                            //double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                //                            // arlYData.Add(Fmag);
                //                            tempYdata = soundBytes;
                //                        }
                //                        //else
                //                        //{
                //                        //   // arlYData.Add(soundBytes);
                //                        //    tempYdata = soundBytes;
                //                        //}
                //                        //hshDrag.Add(trendValCtr, trendValCtr);
                //                        ctr = 0;
                //                        soundBytes = new double[xData.Length];


                //                        {
                //                            string source = null;
                //                            string Dest = null;
                //                            TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                //                            TreeListNode node1 = null;
                //                            string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                //                            string[] ColorCode = { "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352" };

                //                            try
                //                            {
                //                                x = xData;
                //                                y = tempYdata;
                //                                NullCursorBools();
                //                                GphCtr = 0;
                //                                CreatGPWithVariableForDi();

                //                            }
                //                            catch (Exception ex)
                //                            {

                //                            }
                //                        }
                //                    }
                //                }
                //            }
                //            else
                //            {
                //                int xx = 0;
                //                double[] abcd = new double[TotalDataBytes / 2];
                //                while (fr.BaseStream.Position - 44 < TotalDataBytes)//while (fr.BaseStream.Position != fr.BaseStream.Length)
                //                {

                //                    sample = fr.ReadInt16();
                //                    abcd[xx] = sample;
                //                    double SampleVal = Convert.ToDouble(sample * divider);
                //                    //SampleVal = SampleVal / 1000;
                //                    if (xx % 2 == 0)
                //                    {
                //                        if (SampleVal < 100)
                //                        {
                //                            SampleVal = Math.Round(SampleVal, 3);
                //                            soundBytes[ctr] = (SampleVal);
                //                        }
                //                        else
                //                        {
                //                            SampleVal = Math.Round(SampleVal);
                //                            soundBytes[ctr] = (SampleVal);
                //                        }
                //                        xx++;
                //                    }
                //                    else
                //                    {
                //                        if (SampleVal < 100)
                //                        {
                //                            SampleVal = Math.Round(SampleVal, 3);
                //                            soundBytes1[ctr] = (SampleVal);
                //                        }
                //                        else
                //                        {
                //                            SampleVal = Math.Round(SampleVal);
                //                            soundBytes1[ctr] = (SampleVal);
                //                        }
                //                        ctr++;
                //                        xx++;
                //                    }
                //                    if (ctr == xData.Length)
                //                    {
                //                        double[] tempYdata = null;

                //                        {

                //                            tempYdata = soundBytes;
                //                        }


                //                        Channel1WavX = xData;
                //                        Channel1WavY = tempYdata;

                //                        Channel2WavX = Channel1WavX;
                //                        Channel2WavY = soundBytes1;

                //                        ctr = 0;



                //                        {
                //                            string source = null;
                //                            string Dest = null;
                //                            TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                //                            TreeListNode node1 = null;
                //                            string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                //                            string[] ColorCode = { "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352" };

                //                            try
                //                            {
                //                                x = xData;
                //                                y = tempYdata;
                //                                NullCursorBools();
                //                                GphCtr = 0;
                //                                CreatGPWithVariableForDi();

                //                            }
                //                            catch (Exception ex)
                //                            {

                //                            }
                //                        }
                //                    }
                //                }
                //                double and = findHighestValue(abcd);
                //            }
                //        }

                //    }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private ArrayList GetAllPlotValues(ArrayList arlNewTime)
        {
            arrXYValues = new ArrayList();
            arrSelTime = new ArrayList();
            try
            {
                for (int i = 0; i < arlNewTime.Count; i++)
                {
                    string[] sarrFileName = arlNewTime[i].ToString()
                        .Split(new string[] {"<>"}, StringSplitOptions.RemoveEmptyEntries);
                    if (sarrFileName.Length > 1)
                    {
                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                        {
                            string filepath = (AppDomain.CurrentDomain.BaseDirectory + sarrFileName[1].ToString() +
                                               ".csv");
                            ReadCSVfile(filepath);
                            arrSelTime.Add(lblDate.Text.ToString());
                        }
                        else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                        {
                            string filepath = (AppDomain.CurrentDomain.BaseDirectory + sarrFileName[1].ToString() +
                                               ".TXT");
                            ReadTXTfile(filepath, true);
                            arrSelTime.Add(arlNewTime[i].ToString());
                        }

                        arrXYValues.Add(xarray);
                        arrXYValues.Add(yarray);
                    }
                    else
                    {
                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                        {
                            string filepath = (AppDomain.CurrentDomain.BaseDirectory + "Temp.csv");
                            ReadCSVfile(filepath);
                            arrSelTime.Add(lblDate.Text.ToString());
                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);
                        }
                        else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" ||
                                 trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                        {

                            string filepath = ("c:\\vvtemp\\" + sarrFileName[0] + ".txt");
                            ReadTXTfile(filepath, true);
                            arrSelTime.Add(arlNewTime[i].ToString());
                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);

                            //string[] timectr = sarrFileName[0].ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                            //DateTime _datetime =Convert.ToDateTime( dateofwav);
                            //DateTime newdate = _datetime.AddSeconds(Convert.ToDouble(timectr[0].ToString()));

                            //    {
                            //        lblXAxis.Text = "Date : " + newdate.ToString();
                            //    }

                        }

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return arrXYValues;
        }

        private void DrawBkwd()
        {
            drawPrvs();


            if (GraphType == "FFT")
            {
                if (arlstSColors != null)
                {
                    if (arlstSColors.Count == 0)
                    {
                        CtrSelectedCraph = 0;
                    }
                    else if (CtrSelectedCraph == 0)
                    {
                        CtrSelectedCraph = arlstSColors.Count - 1;
                    }
                    else
                        CtrSelectedCraph--;
                }
                else
                {
                    if (CtrSelectedCraph == 7)
                    {
                        CtrSelectedCraph = 0;
                    }
                    else
                        CtrSelectedCraph++;
                }
            }
            else
            {
                if (arlstSColors != null && arlstSColors.Count != 0)
                {
                    if (CtrSelectedCraph == 0 || CtrSelectedCraph == -1)
                    {
                        CtrSelectedCraph = arlstSColors.Count - 1;
                    }
                    else
                        CtrSelectedCraph--;
                }
                else
                {
                    if (CtrSelectedCraph == 0 || CtrSelectedCraph == -1)
                    {
                        CtrSelectedCraph = 7;
                    }
                    else
                        CtrSelectedCraph--;
                }
            }

            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - (OneSixtyTwo + (Rect.Left + SixtyTwo));
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (FourHundred + TwoHundred);
            double MaxVal = 0;
            Pen PenBlkB = new Pen(Color.Black, 2);
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            try
            {
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                if (GraphType == "FFT")
                {
                    if (Time == true)
                    {
                        pt1 = new Point((int) (Rect.Left + SixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Top + OneFifty)); //FourHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                        pt1 = new Point((int) (Rect.Left + SixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (Rect.Right - OneSixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        ThreDee.DrawLine(BlkDash, pt1, pt2);
                        pt1 = new Point((int) (Rect.Left + SixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Bottom - Fifty)); //FourHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                    }

                    else
                    {
                        pt1 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (Rect.Right - OneSixtyTwo), (int) (Rect.Bottom - Fifty)); //TwoHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                        pt1 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Top + OneFifty)); //FourHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                    }

                    Thread.Sleep(20);
                }

                if (arlstSColors != null && arlstSColors.Count > 0)
                {
                    if (CtrSelectedCraph == 0)
                    {

                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts,
                            (float) 0);
                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 1)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts1,
                            (float) 0);
                        PtsSelected = new PointF[Pts1.Length];
                        PtsSelected = Pts1;
                        XSelected = new double[x1.Length];
                        YSelected = new double[y1.Length];
                        XSelected = x1;
                        YSelected = y1;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 2)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts2,
                            (float) 0);
                        PtsSelected = new PointF[Pts2.Length];
                        PtsSelected = Pts2;
                        XSelected = new double[x2.Length];
                        YSelected = new double[y2.Length];
                        XSelected = x2;
                        YSelected = y2;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }

                    }

                    if (CtrSelectedCraph == 3)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts3,
                            (float) 0);
                        PtsSelected = new PointF[Pts3.Length];
                        PtsSelected = Pts3;
                        XSelected = new double[x3.Length];
                        YSelected = new double[y3.Length];
                        XSelected = x3;
                        YSelected = y3;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 4)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts4,
                            (float) 0);
                        PtsSelected = new PointF[Pts4.Length];
                        PtsSelected = Pts4;
                        XSelected = new double[x4.Length];
                        YSelected = new double[y4.Length];
                        XSelected = x4;
                        YSelected = y4;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 5)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts5,
                            (float) 0);
                        PtsSelected = new PointF[Pts5.Length];
                        PtsSelected = Pts5;
                        XSelected = new double[x5.Length];
                        YSelected = new double[y5.Length];
                        XSelected = x5;
                        YSelected = y5;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 6)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts6,
                            (float) 0);
                        PtsSelected = new PointF[Pts6.Length];
                        PtsSelected = Pts6;
                        XSelected = new double[x6.Length];
                        YSelected = new double[y6.Length];
                        XSelected = x6;
                        YSelected = y6;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 7)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts7,
                            (float) 0);
                        PtsSelected = new PointF[Pts7.Length];
                        PtsSelected = Pts7;
                        XSelected = new double[x7.Length];
                        YSelected = new double[y7.Length];
                        XSelected = x7;
                        YSelected = y7;

                        lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                        lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    CtrSelectedCraphPrvs = CtrSelectedCraph;
                    SelectedGraph = CtrSelectedCraph;
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                    {


                        string[] timectr = arlstSelectedTime[CtrSelectedCraph].ToString()
                            .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                        DateTime _datetime = Convert.ToDateTime(dateofwav);
                        DateTime newdate = _datetime.AddSeconds(Convert.ToDouble(timectr[0].ToString()));

                        {
                            lblXAxis.Text = "Date : " + newdate.ToString();
                        }

                    }
                }
                else
                {
                    if (CtrSelectedCraph == 0)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 1)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                        PtsSelected = new PointF[Pts1.Length];
                        PtsSelected = Pts1;
                        XSelected = new double[x1.Length];
                        YSelected = new double[y1.Length];
                        XSelected = x1;
                        YSelected = y1;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 2)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                        PtsSelected = new PointF[Pts2.Length];
                        PtsSelected = Pts2;
                        XSelected = new double[x2.Length];
                        YSelected = new double[y2.Length];
                        XSelected = x2;
                        YSelected = y2;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 3)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                        PtsSelected = new PointF[Pts3.Length];
                        PtsSelected = Pts3;
                        XSelected = new double[x3.Length];
                        YSelected = new double[y3.Length];
                        XSelected = x3;
                        YSelected = y3;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 4)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                        PtsSelected = new PointF[Pts4.Length];
                        PtsSelected = Pts4;
                        XSelected = new double[x4.Length];
                        YSelected = new double[y4.Length];
                        XSelected = x4;
                        YSelected = y4;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 5)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                        PtsSelected = new PointF[Pts5.Length];
                        PtsSelected = Pts5;
                        XSelected = new double[x5.Length];
                        YSelected = new double[y5.Length];
                        XSelected = x5;
                        YSelected = y5;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 6)
                    {
                        ThreDee.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                        PtsSelected = new PointF[Pts6.Length];
                        PtsSelected = Pts6;
                        XSelected = new double[x6.Length];
                        YSelected = new double[y6.Length];
                        XSelected = x6;
                        YSelected = y6;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 7)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                        PtsSelected = new PointF[Pts7.Length];
                        PtsSelected = Pts7;
                        XSelected = new double[x7.Length];
                        YSelected = new double[y7.Length];
                        XSelected = x7;
                        YSelected = y7;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    CtrSelectedCraphPrvs = CtrSelectedCraph;
                    SelectedGraph = CtrSelectedCraph;
                    //CtrSelectedCraph--;
                }

                try
                {
                    string[] splitedgrid = arlSelectedDataGridValue[CtrSelectedCraph].ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (splitedgrid[0].ToString().Contains("1"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridView2.Rows[RowValue].Selected = true;
                        //dataGridView2.Rows[RowValue].Visible = true;
                    }
                    else if (splitedgrid[0].ToString().Contains("2"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridViewX1.Rows[RowValue].Selected = true;
                    }
                }
                catch (Exception exx)
                {
                    ErrorLog_Class.ErrorLogEntry(exx);
                    DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dvsrc = dataGridViewX1.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dataGridView2.Rows[dataGridView2.RowCount - 1].Selected = true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                tpGraph_Paint(null, null);
            }
        }

        private void FwdBtnClked()
        {
            if (IncrementSelectedGraphCounter == true)
            {
                if (GraphType == "FFT")
                {
                    if (arlstSColors != null)
                    {
                        if (arlstSColors.Count == 0)
                        {
                            CtrSelectedCraph = 0;
                        }
                        else if (CtrSelectedCraph == arlstSColors.Count - 1)
                        {
                            CtrSelectedCraph = 0;
                        }
                        else
                            CtrSelectedCraph++;
                    }
                    else
                    {
                        if (CtrSelectedCraph == 7)
                        {
                            CtrSelectedCraph = 0;
                        }
                        else
                            CtrSelectedCraph++;
                    }
                }
                else
                {
                    if (arlstSColors != null && arlstSColors.Count != 0)
                    {
                        if (CtrSelectedCraph == arlstSColors.Count - 1)
                        {
                            CtrSelectedCraph = 0;
                        }
                        else
                            CtrSelectedCraph++;
                    }
                    else
                    {
                        if (CtrSelectedCraph == 7)
                        {
                            CtrSelectedCraph = 0;
                        }
                        else
                            CtrSelectedCraph++;
                    }
                }
            }

            //CheckSelection = true;
            drawPrvs();
            Region Rgn = new Region(panel1.Bounds);
            Graphics ThreDee = panel1.CreateGraphics();
            //ThreDee = panel1.CreateGraphics();
            ThreDee.Clip = Rgn;
            Pen BlkPen = new Pen(Color.Black, 1);
            RectangleF Rect = ThreDee.ClipBounds;
            PointF pt1 = new PointF();
            PointF pt2 = new PointF();
            float ScreenLenth = Rect.Right;
            float ScreenHeight = Rect.Bottom;
            double TotalXAxis = (Convert.ToDouble(Rect.Right - Rect.Left)) - ((Rect.Left + SixtyTwo) + OneSixtyTwo);
            double TotalYAxis = (Convert.ToDouble(Rect.Bottom - Rect.Top)) - (TwoHundred + FourHundred);
            double MaxVal = 0;
            Pen PenBlkB = new Pen(Color.Black, 2);
            //Pts = new PointF[0];
            PointF Ptsn1 = new PointF();
            Pen BlkDash = new Pen(Color.Black, 2);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            try
            {

                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Top + 400));
                //pt2 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Top + 150));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62 + 100), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Left + 62), (float)(Rect.Bottom - 200));
                //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                //pt1 = new PointF((float)(Rect.Right - 62), (float)(Rect.Bottom - 450));
                //pt2 = new PointF((float)(Rect.Right - 62 - 100), (float)(Rect.Bottom - 200));
                //ThreDee.DrawLine(BlkPen, pt1, pt2);
                if (GraphType == "FFT")
                {
                    if (Time == true)
                    {
                        pt1 = new Point((int) (Rect.Left + SixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Top + OneFifty)); //FourHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                        pt1 = new Point((int) (Rect.Left + SixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (Rect.Right - OneSixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        ThreDee.DrawLine(BlkDash, pt1, pt2);
                        pt1 = new Point((int) (Rect.Left + SixtyTwo),
                            (int) (Rect.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                        pt2 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Bottom - Fifty)); //FourHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                    }

                    else
                    {
                        pt1 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (Rect.Right - OneSixtyTwo), (int) (Rect.Bottom - Fifty)); //TwoHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                        pt1 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Bottom - Fifty)); //TwoHundred
                        pt2 = new Point((int) (Rect.Left + SixtyTwo), (int) (Rect.Top + OneFifty)); //FourHundred
                        ThreDee.DrawLine(PenBlkB, pt1, pt2);
                    }

                    Thread.Sleep(20);
                }

                if (arlstSColors != null && arlstSColors.Count > 0)
                {
                    if (CtrSelectedCraph == 0)
                    {

                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts,
                            (float) 0);
                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 1)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts1,
                            (float) 0);
                        PtsSelected = new PointF[Pts1.Length];
                        PtsSelected = Pts1;
                        XSelected = new double[x1.Length];
                        YSelected = new double[y1.Length];
                        XSelected = x1;
                        YSelected = y1;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];


                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 2)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts2,
                            (float) 0);
                        PtsSelected = new PointF[Pts2.Length];
                        PtsSelected = Pts2;
                        XSelected = new double[x2.Length];
                        YSelected = new double[y2.Length];
                        XSelected = x2;
                        YSelected = y2;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 3)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts3,
                            (float) 0);
                        PtsSelected = new PointF[Pts3.Length];
                        PtsSelected = Pts3;
                        XSelected = new double[x3.Length];
                        YSelected = new double[y3.Length];
                        XSelected = x3;
                        YSelected = y3;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 4)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts4,
                            (float) 0);
                        PtsSelected = new PointF[Pts4.Length];
                        PtsSelected = Pts4;
                        XSelected = new double[x4.Length];
                        YSelected = new double[y4.Length];
                        XSelected = x4;
                        YSelected = y4;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 5)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts5,
                            (float) 0);
                        PtsSelected = new PointF[Pts5.Length];
                        PtsSelected = Pts5;
                        XSelected = new double[x5.Length];
                        YSelected = new double[y5.Length];
                        XSelected = x5;
                        YSelected = y5;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 6)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts6,
                            (float) 0);
                        PtsSelected = new PointF[Pts6.Length];
                        PtsSelected = Pts6;
                        XSelected = new double[x6.Length];
                        YSelected = new double[y6.Length];
                        XSelected = x6;
                        YSelected = y6;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    if (CtrSelectedCraph == 7)
                    {
                        ThreDee.DrawCurve(
                            new Pen(Color.FromArgb(-Convert.ToInt32(arlstSColors[CtrSelectedCraph])), (float) 2), Pts7,
                            (float) 0);
                        PtsSelected = new PointF[Pts7.Length];
                        PtsSelected = Pts7;
                        XSelected = new double[x7.Length];
                        YSelected = new double[y7.Length];
                        XSelected = x7;
                        YSelected = y7;
                        if (GenDiGraph != "XY")
                        {
                            lblXAxis.Text = "Date : " + arlstSelectedTime[CtrSelectedCraph];
                            lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                        }

                        if (RPMtoDisplay != null)
                        {
                            lblYAxis.Text += "\n" + "RPM : " +
                                             RPMtoDisplay[(int) arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
                        }

                        if (PhasetoDisplay != null)
                        {
                            lblYAxis.Text += "   Phase : " + PhasetoDisplay[CtrSelectedCraph].ToString();
                        }
                    }

                    CtrSelectedCraphPrvs = CtrSelectedCraph;
                    SelectedGraph = CtrSelectedCraph;
                    //try
                    //{
                    //    string[] splitedgrid = arlSelectedDataGridValue[CtrSelectedCraph].ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                    //    if (splitedgrid[0].ToString().Contains("1"))
                    //    {
                    //        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                    //        DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                    //        for (int i = 0; i < dvsrc.Count; i++)
                    //        {
                    //            dvsrc[i].Selected = false;
                    //        }
                    //        dataGridView2.Rows[RowValue].Selected = true;
                    //        //dataGridView2.Rows[RowValue].Visible = true;
                    //    }
                    //    else if (splitedgrid[0].ToString().Contains("2"))
                    //    {
                    //        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                    //        DataGridViewSelectedRowCollection dvsrc = dataGridViewX1.SelectedRows;
                    //        for (int i = 0; i < dvsrc.Count; i++)
                    //        {
                    //            dvsrc[i].Selected = false;
                    //        }
                    //        dataGridViewX1.Rows[RowValue].Selected = true;
                    //    }
                    //}
                    //catch (Exception exx)
                    //{
                    //}
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                    {


                        string[] timectr = arlstSelectedTime[CtrSelectedCraph].ToString()
                            .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                        DateTime _datetime = Convert.ToDateTime(dateofwav);
                        DateTime newdate = _datetime.AddSeconds(Convert.ToDouble(timectr[0].ToString()));

                        {
                            lblXAxis.Text = "Date : " + newdate.ToString();
                        }

                    }
                }
                else
                {
                    if (CtrSelectedCraph == 0)
                    {

                        ThreDee.DrawCurve(new Pen(Color.DarkRed, (float) 2), Pts, (float) 0);
                        PtsSelected = new PointF[Pts.Length];
                        PtsSelected = Pts;
                        XSelected = new double[x.Length];
                        YSelected = new double[y.Length];
                        XSelected = x;
                        YSelected = y;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 1)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkGreen, (float) 2), Pts1, (float) 0);
                        PtsSelected = new PointF[Pts1.Length];
                        PtsSelected = Pts1;
                        XSelected = new double[x1.Length];
                        YSelected = new double[y1.Length];
                        XSelected = x1;
                        YSelected = y1;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 2)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkGoldenrod, (float) 2), Pts2, (float) 0);
                        PtsSelected = new PointF[Pts2.Length];
                        PtsSelected = Pts2;
                        XSelected = new double[x2.Length];
                        YSelected = new double[y2.Length];
                        XSelected = x2;
                        YSelected = y2;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 3)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkViolet, (float) 2), Pts3, (float) 0);
                        PtsSelected = new PointF[Pts3.Length];
                        PtsSelected = Pts3;
                        XSelected = new double[x3.Length];
                        YSelected = new double[y3.Length];
                        XSelected = x3;
                        YSelected = y3;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 4)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkBlue, (float) 2), Pts4, (float) 0);
                        PtsSelected = new PointF[Pts4.Length];
                        PtsSelected = Pts4;
                        XSelected = new double[x4.Length];
                        YSelected = new double[y4.Length];
                        XSelected = x4;
                        YSelected = y4;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 5)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DimGray, (float) 2), Pts5, (float) 0);
                        PtsSelected = new PointF[Pts5.Length];
                        PtsSelected = Pts5;
                        XSelected = new double[x5.Length];
                        YSelected = new double[y5.Length];
                        XSelected = x5;
                        YSelected = y5;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 6)
                    {
                        ThreDee.DrawCurve(new Pen(Color.Chocolate, (float) 2), Pts6, (float) 0);
                        PtsSelected = new PointF[Pts6.Length];
                        PtsSelected = Pts6;
                        XSelected = new double[x6.Length];
                        YSelected = new double[y6.Length];
                        XSelected = x6;
                        YSelected = y6;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    if (CtrSelectedCraph == 7)
                    {
                        ThreDee.DrawCurve(new Pen(Color.DarkKhaki, (float) 2), Pts7, (float) 0);
                        PtsSelected = new PointF[Pts7.Length];
                        PtsSelected = Pts7;
                        XSelected = new double[x7.Length];
                        YSelected = new double[y7.Length];
                        XSelected = x7;
                        YSelected = y7;
                        if (SlctedDates != null)
                        {
                            if (SlctedDates.Count != 0)
                            {
                                lblXAxis.Text = "Date : " + SlctedDates[CtrSelectedCraph].ToString();
                                lblYAxis.Text = "Filed as: " + arlselectedFiles[CtrSelectedCraph];
                            }
                        }
                    }

                    CtrSelectedCraphPrvs = CtrSelectedCraph;
                    SelectedGraph = CtrSelectedCraph;
                    //CtrSelectedCraph++;

                }

                try
                {
                    string[] splitedgrid = arlSelectedDataGridValue[CtrSelectedCraph].ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (splitedgrid[0].ToString().Contains("1"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridView2.Rows[RowValue].Selected = true;
                        //dataGridView2.Rows[RowValue].Visible = true;
                    }
                    else if (splitedgrid[0].ToString().Contains("2"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridViewX1.Rows[RowValue].Selected = true;
                    }
                }
                catch (Exception exx)
                {
                    ErrorLog_Class.ErrorLogEntry(exx);
                    DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dvsrc = dataGridViewX1.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dataGridView2.Rows[dataGridView2.RowCount - 1].Selected = true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                CtrSelectedCraphPrvs = CtrSelectedCraph;
                SelectedGraph = CtrSelectedCraph;
                ErrorLogFile(ex);
                tpGraph_Paint(null, null);
            }
        }

        private void CopyValuestoClipBoard(double[] XValsToCopy, double[] YValsToCopy)
        {
            StringBuilder ydata = new StringBuilder();
            try
            {


                {
                    {
                        string sXunit = null;
                        //if (bXunitConvert)
                        {
                            sXunit = lblGrphUnitX.Text.ToString();
                        }
                        //else
                        //{
                        //    sXunit = "X Unit: " + lblXunit.Text.ToString();
                        //}
                        if (IsTrend)
                        {
                            ydata.Append(lblYAxis.Text + "\n");
                            ydata.Append(lblDate.Text.ToString() + "\n");
                            ydata.Append(sXunit + "\t" + lblGraphUnitY.Text.ToString() + "\n");

                        }
                        else
                        {
                            ydata.Append(trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString() + "\n");
                            ydata.Append(lblDate.Text.ToString() + "\n");
                            ydata.Append(sXunit + "\t" + lblGraphUnitY.Text.ToString() + "\n");
                        }

                        //ydata.Append("Direction -> " + comboBoxEdit111.SelectedItem.ToString() + "\n");
                        //ydata.Append(Time + "\n");
                        ydata.Append("X Values" + "\t\t");
                        ydata.Append("Y Values" + "\n");


                        string[] arrXValues = new string[XValsToCopy.Length];
                        string[] arrYValues = new string[YValsToCopy.Length];
                        for (int iCounter = 0; iCounter < XValsToCopy.Length; iCounter++)
                        {
                            //if (bXunitConvert)
                            //{
                            //    //if (IsAlreadyCPM)
                            //    //{
                            //    //    arrXValues[iCounter] = (XValsToCopy[iCounter]).ToString();
                            //    //}
                            //    //else
                            //    {
                            //        arrXValues[iCounter] = Convert.ToString(XValsToCopy[iCounter]);//* 60
                            //    }
                            //}
                            //else
                            {
                                //if (IsAlreadyCPM)
                                //{
                                //    arrXValues[iCounter] = (XValsToCopy[iCounter] / 60).ToString();
                                //}
                                //else
                                {
                                    arrXValues[iCounter] = XValsToCopy[iCounter].ToString();
                                }
                            }
                            arrYValues[iCounter] = YValsToCopy[iCounter].ToString();

                            ydata.Append(arrXValues[iCounter].ToString() + "\t" + "\t" +
                                         arrYValues[iCounter].ToString() + "\n");
                        }

                        //for (int i = 0; i < Xlist.Length; i++)
                        //{
                        //    ydata.Append(Xlist[i].ToString() + "\t" + "\t" + Ylist[i].ToString() + "\n");
                        //}
                        Clipboard.SetText(ydata.ToString());

                        MessageBoxEx.Show("Copied to ClipBoard." + "\n" + "Click Paste in word/excel/notepad etc.");
                    }

                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void PressKeyboardButton(Keys keyCode)
        {
            const int KEYEVENTF_EXTENDEDKEY = 0x1;
            const int KEYEVENTF_KEYUP = 0x2;

            keybd_event((byte) keyCode, 0x45, KEYEVENTF_EXTENDEDKEY, 0);
            keybd_event((byte) keyCode, 0x45, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);
        }

        private void UpdateNUMLock()
        {
            try
            {
                bool NumLock = (GetKeyState((int) Keys.NumLock)) != 0;

                if (NumLock)
                {
                    //lblNUM.Text = "NUM";
                }
                else
                {
                    PressKeyboardButton(Keys.NumLock);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            //this.Refresh();
        }

        private void DrawBandRegion(double[] TargetX, double[] TargetY, string Direction)
        {

            try
            {
                if (GraphType != "Orbit")
                {

                    if (Direction != "J")
                    {
                        //panel1.Refresh();
                    }


                    SetAxis();
                    Pen BlkDash = new Pen(Color.Black, (float) .5);
                    BlkDash.DashCap = DashCap.Triangle;
                    BlkDash.DashStyle = DashStyle.Dash;


                    bool IfTmData = false;
                    Region objRegion = new Region(panel1.Bounds);
                    Graphics objGraphics = panel1.CreateGraphics();
                    objGraphics.Clip = objRegion;
                    RectangleF objPoint = objGraphics.ClipBounds;
                    IfTmData = CheckForTimeDataInAxisLines(TargetY);

                    string[] BndAlrms = null;
                    // string instname = GetInstName();
                    //if (instname == "DI-460")
                    {
                        BandAlarmsPowerHorizontal = new string[0];
                        //BndAlrms = GetBandAlarmForDI();
                        for (int i = 0; i < dgvDiBA.RowCount - 1; i++)
                        {
                            //Array.Resize(ref BandAlarmsPowerHorizontal, BandAlarmsPowerHorizontal.Length + 1);
                            _ResizeArray.IncreaseArrayString(ref BandAlarmsPowerHorizontal, 1);
                            BandAlarmsPowerHorizontal[BandAlarmsPowerHorizontal.Length - 1] =
                                dgvDiBA.Rows[i].Cells[0].Value.ToString() + "!" +
                                dgvDiBA.Rows[i].Cells[1].Value.ToString() + "@" +
                                dgvDiBA.Rows[i].Cells[2].Value.ToString();
                        }

                        BndAlrms = BandAlarmsPowerHorizontal;
                    }
                    //else if (instname == "Card Vibro Neo")
                    //{
                    //    MessageBoxEx.Show("Not Implemented");
                    //}
                    //else
                    //{
                    //    BndAlrms = GetBandAlarmForSpecifiedDirection(comboBoxEdit1.SelectedItem.ToString(), CurrentGraph);
                    //}
                    PointF SpecificPointHeigh = new PointF();
                    PointF SpecificPointLow = new PointF();

                    PointF SpecificPointHeigh1 = new PointF();
                    PointF SpecificPointLow1 = new PointF();

                    PointF[] FinalPoints = new PointF[0];
                    PointF[] RedPoints = new PointF[0];
                    PointF[] FinalPointsForOutLine = new PointF[0];

                    PointF RedLeftLower = new PointF();
                    PointF RedRightLower = new PointF();
                    PointF RedLeftUpper = new PointF();
                    PointF RedRightUpper = new PointF();
                    int MainIndexPrvs = 0;


                    if (Direction == "J")
                    {
                        double TotalYAxis1 = 0.0;
                        double TotalXAxis1 = (Convert.ToDouble(objPoint.Right - objPoint.Left)) -
                                             (objPoint.Left + SixtyTwo + OneSixtyTwo);
                        if (Time == true)
                        {
                            TotalYAxis1 = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) -
                                          (FourHundred + TwoHundred);
                        }
                        else
                        {
                            TotalYAxis1 = (Convert.ToDouble(objPoint.Bottom - objPoint.Top)) - (TwoHundred);
                        }

                        double MaxVal = findHighestValue(y);
                        MaxVal *= 1.25;
                        HighestValYAxis = MaxVal;
                        MainYAxisInterval = (double) (MaxVal / TotalYAxis1);
                        MainXAxisInterval = (TotalXAxis1 / (x.Length - 1));
                    }

                    Pen objPen = new Pen(Color.Black);

                    for (int i = 0; i < BndAlrms.Length; i++)
                    {
                        string[] Band = BndAlrms[i].Split(new string[] {"!", "@"},
                            StringSplitOptions.RemoveEmptyEntries);

                        FinalPoints = new PointF[0];
                        RedPoints = new PointF[0];
                        double Comparator = Convert.ToDouble(Band[0]);
                        if (lblGrphUnitX.Text.Contains("CPM"))
                        {
                            Comparator = Comparator * 60;
                        }

                        int MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                        if (MainIndex == -1)
                        {
                            Comparator = FindNearest(x, Comparator);
                            MainIndex = Array.FindIndex(x, delegate(double item) { return item == Comparator; });
                        }


                        if (MainIndex >= 0)
                        {
                            if (i == 0)
                            {
                                SpecificPointHeigh =
                                    new PointF((float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * 0)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[1]) / MainYAxisInterval)));
                                SpecificPointLow =
                                    new PointF((float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * 0)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[2]) / MainYAxisInterval)));
                                SpecificPointLow1 =
                                    new PointF((float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[2]) / MainYAxisInterval)));
                                SpecificPointHeigh1 =
                                    new PointF((float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[1]) / MainYAxisInterval)));

                                if (SpecificPointLow1.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointLow1.X = objPoint.Right - OneSixtyTwo;
                                }

                                if (SpecificPointHeigh1.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointHeigh1.X = objPoint.Right - OneSixtyTwo;
                                }

                                if (SpecificPointHeigh.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointHeigh.X = objPoint.Right - OneSixtyTwo;
                                }

                                if (SpecificPointLow.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointLow.X = objPoint.Right - OneSixtyTwo;
                                }

                                RedLeftLower = SpecificPointHeigh;
                                RedRightLower = SpecificPointHeigh1;
                                RedLeftUpper =
                                    new PointF(RedLeftLower.X,
                                        (float) (objPoint
                                            .Top)); // SpecificPointLow;// new PointF(RedLeftLower.X, (float)(RedLeftLower.Y + 10));
                                RedRightUpper =
                                    new PointF(RedRightLower.X,
                                        (float) (objPoint
                                            .Top)); // SpecificPointLow1;// new PointF(RedRightLower.X, (float)(RedLeftLower.Y + 10));
                            }
                            else
                            {
                                SpecificPointHeigh =
                                    new PointF(
                                        (float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndexPrvs)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[1]) / MainYAxisInterval)));
                                SpecificPointLow =
                                    new PointF(
                                        (float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndexPrvs)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[2]) / MainYAxisInterval)));
                                SpecificPointLow1 =
                                    new PointF((float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[2]) / MainYAxisInterval)));
                                SpecificPointHeigh1 =
                                    new PointF((float) ((objPoint.Left + SixtyTwo) + (MainXAxisInterval * MainIndex)),
                                        (float) (objPoint.Bottom - Fifty -
                                                 (float) (Convert.ToDouble(Band[1]) / MainYAxisInterval)));
                                if (SpecificPointLow1.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointLow1.X = objPoint.Right - OneSixtyTwo;
                                }

                                if (SpecificPointHeigh1.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointHeigh1.X = objPoint.Right - OneSixtyTwo;
                                }

                                if (SpecificPointHeigh.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointHeigh.X = objPoint.Right - OneSixtyTwo;
                                }

                                if (SpecificPointLow.X > objPoint.Right - OneSixtyTwo)
                                {
                                    SpecificPointLow.X = objPoint.Right - OneSixtyTwo;
                                }

                                RedLeftLower = SpecificPointHeigh;
                                RedRightLower = SpecificPointHeigh1;
                                RedLeftUpper =
                                    new PointF(RedLeftLower.X,
                                        (float) (objPoint
                                            .Top)); // SpecificPointLow;// new PointF(RedLeftLower.X, (float)(RedLeftLower.Y + 10));
                                RedRightUpper =
                                    new PointF(RedRightLower.X,
                                        (float) (objPoint
                                            .Top)); // SpecificPointLow1;// new PointF(RedRightLower.X, (float)(RedLeftLower.Y + 10));
                            }

                            Brush objbr = null;
                            Brush Redbr = null;
                            if (panel1.BackColor == Color.Yellow || panel1.BackColor == Color.Red)
                            {
                                objbr = Brushes.LightBlue;
                                Redbr = Brushes.LightGreen;
                            }
                            else
                            {
                                objbr = Brushes.Yellow;
                                Redbr = Brushes.Red;
                            }


                            //Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPoints, 1);
                            FinalPoints[FinalPoints.Length - 1] = SpecificPointHeigh;

                            //Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPointsForOutLine, 1);
                            FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointLow;

                            //Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPoints, 1);
                            FinalPoints[FinalPoints.Length - 1] = SpecificPointHeigh1;

                            //Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPointsForOutLine, 1);
                            FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointHeigh;

                            //Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPoints, 1);
                            FinalPoints[FinalPoints.Length - 1] = SpecificPointLow1;

                            //Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPointsForOutLine, 1);
                            FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointHeigh1;

                            //Array.Resize(ref FinalPoints, FinalPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPoints, 1);
                            FinalPoints[FinalPoints.Length - 1] = SpecificPointLow;

                            //Array.Resize(ref FinalPointsForOutLine, FinalPointsForOutLine.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref FinalPointsForOutLine, 1);
                            FinalPointsForOutLine[FinalPointsForOutLine.Length - 1] = SpecificPointLow1;


                            //Array.Resize(ref RedPoints, RedPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref RedPoints, 1);
                            RedPoints[RedPoints.Length - 1] = RedLeftLower;

                            //Array.Resize(ref RedPoints, RedPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref RedPoints, 1);
                            RedPoints[RedPoints.Length - 1] = RedRightLower;

                            //Array.Resize(ref RedPoints, RedPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref RedPoints, 1);
                            RedPoints[RedPoints.Length - 1] = RedRightUpper;

                            //Array.Resize(ref RedPoints, RedPoints.Length + 1);
                            _ResizeArray.IncreaseArrayPointF(ref RedPoints, 1);
                            RedPoints[RedPoints.Length - 1] = RedLeftUpper;

                            GraphicsPath objPath = new GraphicsPath();
                            GraphicsPath RedPath = new GraphicsPath();
                            objPath.AddCurve(FinalPoints, 0);
                            RedPath.AddCurve(RedPoints, 0);
                            objGraphics.FillPath(objbr, objPath);
                            objGraphics.FillPath(Redbr, RedPath);

                            MainIndexPrvs = MainIndex;
                        }

                    }

                    //objGraphics.DrawLines(objPen, FinalPointsForOutLine);
                    int iFCtr = 0;
                    for (int i = 0; i < FinalPointsForOutLine.Length; i++)
                    {
                        objGraphics.DrawLine(objPen, FinalPointsForOutLine[i], FinalPointsForOutLine[i + 1]);
                        //if (i%3 == 0)
                        //    i++;
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);

            }
        }

        private void DisableALL()
        {
            try
            {

                PreviousPositions[0] = btnBkwd.Enabled;
                PreviousPositions[1] = btnFwd.Enabled;
                PreviousPositions[2] = btnColors.Enabled;
                PreviousPositions[3] = btnZoom.Enabled;
                PreviousPositions[4] = btnUnZoom.Enabled;
                PreviousPositions[5] = TrendButtonEnabled; // btnTrend.Enabled;
                PreviousPositions[6] = AreaGraphButtonEnabled; // btnAreaGraph.Enabled;
                PreviousPositions[7] = btnCopyGraphToClipBord.Enabled;
                PreviousPositions[8] = cmbCurSors.Enabled;
                PreviousPositions[9] = AreaGraphButtonEnabled; // btnAreaGraph.Enabled;
                PreviousPositions[10] = tsbtnCopyValues.Enabled;
                PreviousPositions[11] = tsBtnHighestFive.Enabled;
                PreviousPositions[12] = tsBtnSideBandRatio.Enabled;
                PreviousPositions[13] = tsBtnSideBandTrend.Enabled;
                PreviousPositions[14] = tsbtnSideBandValue.Enabled;

                btnBkwd.Enabled = false;
                btnFwd.Enabled = false;
                btnColors.Enabled = false;
                //btnZoom.Enabled = false;
                //btnUnZoom.Enabled = false;
                ZommingButton = true;

                TrendButtonEnabled = false; // btnTrend.Enabled = false;

                AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                btnCopyGraphToClipBord.Enabled = false;

                tsBtnHighestFive.Enabled = false;
                cmbCurSors.Enabled = false;


                AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                tsbtnCopyValues.Enabled = false;
                //tsBtnSideBandRatio.Enabled = false;
                //tsBtnSideBandTrend.Enabled = false;
                //tsbtnSideBandValue.Enabled = false;
                sidebandbuttonEnabled = false;



            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void RestoreAll()
        {
            try
            {
                btnBkwd.Enabled = PreviousPositions[0];
                btnFwd.Enabled = PreviousPositions[1];
                btnColors.Enabled = PreviousPositions[2];
                btnZoom.Enabled = PreviousPositions[3];
                btnUnZoom.Enabled = PreviousPositions[4];
                TrendButtonEnabled = PreviousPositions[5]; // btnTrend.Enabled = PreviousPositions[5];
                AreaGraphButtonEnabled = PreviousPositions[6]; // btnAreaGraph.Enabled = PreviousPositions[6];


                btnCopyGraphToClipBord.Enabled = PreviousPositions[7];

                cmbCurSors.Enabled = PreviousPositions[8];


                AreaGraphButtonEnabled = PreviousPositions[9]; // btnAreaGraph.Enabled = PreviousPositions[9];

                tsbtnCopyValues.Enabled = PreviousPositions[10];
                tsBtnHighestFive.Enabled = PreviousPositions[11];
                tsBtnSideBandRatio.Enabled = PreviousPositions[12];
                tsBtnSideBandTrend.Enabled = PreviousPositions[13];
                tsbtnSideBandValue.Enabled = PreviousPositions[14];

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void CopyGraphToClipBord()
        {
            //StringBuilder ydata = new StringBuilder();
            try
            {
                //PrintDocument doc = new PrintDocument();


                //doc.PrintPage += new PrintPageEventHandler(doc_PrintPage);
                //PrintDialog dlgSettings = new PrintDialog();
                //dlgSettings.Document = doc;


                try
                {
                    if (GraphType == "FFT" && GraphZoomedAlready == false)
                    {
                        redrawAsImage();
                    }
                    else if (GraphType == "FFT" && GraphZoomedAlready == true)
                    {
                        DrawZoomedAsImage();
                    }
                    else if (GraphType == "WaterFall")
                    {
                        ThreeDeeRedrawAsImage();
                    }
                    else if (GraphType == "Orbit")
                    {
                        redrawOrbitAsImage();
                    }
                    // DA_7   code related    minor    Amit Jain  30-03-2010
                    else if (GraphType == "Octave")
                    {
                        RedrawOctaveasimage();
                    }
                    //ydata.Append(lblXAxis.Text.ToString() + "\t" + lblYAxis.Text.ToString() + "\n");
                    //if (CopyGraphString != null)
                    //{
                    //    //Clipboard.SetText(CopyGraphString);
                    //    //Clipboard.SetImage(Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg"));
                    //    //Clipboard.SetText(CopyGraphString);
                    //    //Clipboard.SetDataObject(new object[] { Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg"), CopyGraphString });
                    //    //DataObject[] clips = new DataObject[2];

                    //    //clips[0].SetData(DataFormats.Bitmap, (Bitmap)Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg"));
                    //    //clips[1].SetData(DataFormats.StringFormat, CopyGraphString);
                    //    Clipboard.Clear();
                    //    System.Windows.Forms.IDataObject clips = new DataObject();
                    //    clips.SetData(DataFormats.Bitmap,true, (Bitmap)Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg"));
                    //    clips.SetData(DataFormats.StringFormat,true, CopyGraphString);
                    //    Clipboard.SetDataObject(clips, true);




                    //}
                    //else
                    {
                        Clipboard.SetImage(Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg"));
                    }
                    MessageBoxEx.Show("Copied on ClipBoard", "Copy Graph", MessageBoxButtons.OK);
                    //////////////PrintDialog _print = new PrintDialog();
                    //////////////_print.Document = (PrintDocument)Clipboard.GetDataObject();
                    //////////////_print.ShowDialog();
                    //////////////Clipboard.SetText(ydata.ToString());

                    //if (dlgSettings.ShowDialog() == DialogResult.OK)
                    //{
                    //    IsImageDrawn = false;
                    //    ivalctr = 0;
                    //    doc.Print();
                    //}
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
                //objImage.Save("C:\\Test.jpg");


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private ArrayList GetOrbitData(ArrayList TimeOrig)
        {
            arrXYValues = new ArrayList();
            arrSelTime = new ArrayList();
            try
            {
                for (int i = 0; i < TimeOrig.Count; i++)
                {
                    //string[] sarrFileName = TimeOrig[i].ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                    //if (sarrFileName.Length > 1)
                    //{
                    //    try
                    //    {
                    //        int hshval = Convert.ToInt32(sarrFileName[0]);
                    //        yarray = (double[])(arlYData[Convert.ToInt32(hshDrag[hshval])]);
                    //        arrXYValues.Add(xarray);
                    //        arrXYValues.Add(yarray);
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //    }
                    //}
                    //else
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(TimeOrig[i]);
                            yarray = (double[]) (arlYData[Convert.ToInt32(hshDrag[hshval])]);
                            arrXYValues.Add(yarray);
                            hshval += 1;
                            yarray = (double[]) (arlYData[Convert.ToInt32(hshDrag[hshval])]);
                            //arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return arrXYValues;
        }

        private ArrayList GetWaveData(ArrayList TimeOrig)
        {
            arrXYValues = new ArrayList();
            arrSelTime = new ArrayList();
            try
            {
                for (int i = 0; i < TimeOrig.Count; i++)
                {
                    string[] sarrFileName = TimeOrig[i].ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (sarrFileName.Length > 1)
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(sarrFileName[1]);
                            if (hshDrag[hshval] != null)
                            {
                                yarray = (double[]) (arlYData[Convert.ToInt32(hshDrag[hshval])]);
                                arrXYValues.Add(xarray);
                                arrXYValues.Add(yarray);
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }
                    else
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(TimeOrig[i]);
                            yarray = (double[]) (arlYData[Convert.ToInt32(hshDrag[hshval])]);
                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return arrXYValues;
        }

        private ArrayList GetWaveDataPhase(ArrayList TimeOrig)
        {
            arrXYValues = new ArrayList();
            arrSelTime = new ArrayList();
            try
            {
                for (int i = 0; i < TimeOrig.Count; i++)
                {
                    string[] sarrFileName = TimeOrig[i].ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (sarrFileName.Length > 1)
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(sarrFileName[1]);
                            yarray = (double[]) (arlYData[Convert.ToInt32(hshDrag[hshval])]);
                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);

                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }
                    else
                    {
                        try
                        {
                            int hshval = Convert.ToInt32(TimeOrig[i]);

                            if (DisplayType == "FRF image")
                            {
                                yarray = (double[]) (arlFRFImag[Convert.ToInt32(hshDrag[hshval])]);
                            }
                            else if (DisplayType == "FRF Real")
                            {
                                yarray = (double[]) (arlFRFReal[Convert.ToInt32(hshDrag[hshval])]);
                            }
                            else if (DisplayType == "FRF Coherence")
                            {
                                yarray = (double[]) (arlFRFCoherence[Convert.ToInt32(hshDrag[hshval])]);
                            }
                            else
                            {
                                yarray = (double[]) (arlYDataPhase[Convert.ToInt32(hshDrag[hshval])]);
                            }

                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }

                    arrSelTime.Add(lblDate.Text.ToString());
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return arrXYValues;
        }

        private void WaterFallSettings()
        {
            try
            {
                TrendButtonEnabled = false; // btnTrend.Enabled = false;
                btnZoom.Enabled = false;
                // ZommingButton = false;
                //dataGridView2.Visible = false;
                // dataGridView1.Dock = DockStyle.Fill;
                // tsbtnRpm.Enabled = false;
                FFbuttonEnabled = false; // tsBtnFaultFreq.Enabled = false;
                tsBtnHighestFive.Enabled = false;
                ExtraZoomButtonEnabled = false; // tsBtnExtraZoom.Enabled = false;
                //tsBtnSideBandRatio.Enabled = false;
                //tsBtnSideBandTrend.Enabled = false;
                //tsbtnSideBandValue.Enabled = false;
                sidebandbuttonEnabled = false;
                LineCursor = false;
                SqureCrs = false;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void CreatingWave1(string spath)
        {
            int[] LOR = {100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200, 102400, 204800};
            int[] LOR1 = {256, 512, 1024, 2048, 4096, 8192, 16384, 32738, 65536, 131072, 262144, 524288};
            try
            {
                iclick = 1;
                setWaveFirstData();
                if (Directory.Exists("c:\\vvtemp\\"))
                {
                    Directory.Delete("c:\\vvtemp\\", true);
                }

                using (FileStream wav = new FileStream(spath, FileMode.Open, FileAccess.Read))
                {

                    Byte[] Parameter = new byte[44];

                    wav.Read(Parameter, 0, 44);
                    //Byte[] Parameter = new byte[wav.Length/10];
                    int channel = Convert.ToInt32(Parameter[22].ToString());
                    string[] SFbyteD = new string[4];
                    string SFH = null;
                    int ctr = 0;
                    for (int i = 27; i > 23; i--)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        //string sval = DeciamlToHexadeciaml1(val);
                        string sval = Common.DeciamlToHexadeciaml1(val);

                        //if (sval == "0")
                        //    sval = "00";
                        switch (sval)
                        {
                            case "0":
                                sval = "00";
                                break;
                            case "1":
                                sval = "01";
                                break;
                            case "2":
                                sval = "02";
                                break;
                            case "3":
                                sval = "03";
                                break;
                            case "4":
                                sval = "04";
                                break;
                            case "5":
                                sval = "05";
                                break;
                            case "6":
                                sval = "06";
                                break;
                            case "7":
                                sval = "07";
                                break;
                            case "8":
                                sval = "08";
                                break;
                            case "9":
                                sval = "09";
                                break;
                        }

                        SFH += sval;
                    }

                    //int SF = HexadecimaltoDecimal(SFH);
                    int SF = Common.HexadecimaltoDecimal(SFH);




                    SFH = null;

                    for (int i = 31; i > 27; i--)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        //string sval = DeciamlToHexadeciaml1(val);
                        string sval = Common.DeciamlToHexadeciaml1(val);

                        //if (sval == "0")
                        //    sval = "00";
                        switch (sval)
                        {
                            case "0":
                                sval = "00";
                                break;
                            case "1":
                                sval = "01";
                                break;
                            case "2":
                                sval = "02";
                                break;
                            case "3":
                                sval = "03";
                                break;
                            case "4":
                                sval = "04";
                                break;
                            case "5":
                                sval = "05";
                                break;
                            case "6":
                                sval = "06";
                                break;
                            case "7":
                                sval = "07";
                                break;
                            case "8":
                                sval = "08";
                                break;
                            case "9":
                                sval = "09";
                                break;
                        }

                        SFH += sval;
                    }

                    //int AvgBytesPerSec = HexadecimaltoDecimal(SFH);
                    int AvgBytesPerSec = Common.HexadecimaltoDecimal(SFH);


                    SFH = null;

                    for (int i = 27; i > 23; i--)
                    {

                        string sval = Parameter[i].ToString();

                        //if (sval == "0")
                        //    sval = "00";
                        switch (sval)
                        {
                            case "0":
                                sval = "00";
                                break;
                            case "1":
                                sval = "01";
                                break;
                            case "2":
                                sval = "02";
                                break;
                            case "3":
                                sval = "03";
                                break;
                            case "4":
                                sval = "04";
                                break;
                            case "5":
                                sval = "05";
                                break;
                            case "6":
                                sval = "06";
                                break;
                            case "7":
                                sval = "07";
                                break;
                            case "8":
                                sval = "08";
                                break;
                            case "9":
                                sval = "09";
                                break;
                        }

                        SFH += sval;
                    }

                    int iLastFrequency = Convert.ToInt32(SFH);
                    iFinalFrequency = iLastFrequency;
                    int iLOR = 0;
                    for (int i = 0; i < LOR.Length; i++)
                    {
                        double temp = (double) LOR[i] / (double) iLastFrequency;
                        if (temp >= 0.666667)
                        {

                            iLOR = i;

                            break;
                        }
                    }

                    int LineOfResolution = LOR1[iLOR];

                    double ExectTime = (double) LOR[iLOR] / (double) iLastFrequency;

                    int ExectDataByteSample = Convert.ToInt32((double) SF * ExectTime);

                    SFH = null;

                    for (int i = 43; i > 39; i--)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        //string sval = DeciamlToHexadeciaml1(val);
                        string sval = Common.DeciamlToHexadeciaml1(val);

                        //if (sval == "0")
                        //    sval = "00";
                        switch (sval)
                        {
                            case "0":
                                sval = "00";
                                break;
                            case "1":
                                sval = "01";
                                break;
                            case "2":
                                sval = "02";
                                break;
                            case "3":
                                sval = "03";
                                break;
                            case "4":
                                sval = "04";
                                break;
                            case "5":
                                sval = "05";
                                break;
                            case "6":
                                sval = "06";
                                break;
                            case "7":
                                sval = "07";
                                break;
                            case "8":
                                sval = "08";
                                break;
                            case "9":
                                sval = "09";
                                break;
                        }

                        SFH += sval;
                    }

                    //int TotalDataBytes = HexadecimaltoDecimal(SFH);
                    int TotalDataBytes = Common.HexadecimaltoDecimal(SFH);


                    double TimeVal = Convert.ToDouble(1 / Convert.ToDouble(SF));
                    double[] xData = new double[ExectDataByteSample];

                    for (int i = 0; i < ExectDataByteSample; i++)
                    {
                        xData[i] = i * TimeVal;
                    }

                    xarray = xData;
                    int SamplePerSec = 0;
                    if (channel == 1)
                    {
                        SamplePerSec = AvgBytesPerSec / SF;
                    }
                    else if (channel == 2)
                    {
                        SamplePerSec = AvgBytesPerSec / SF;
                        SamplePerSec = SamplePerSec / 2;
                    }
                    else
                    {
                        SamplePerSec = AvgBytesPerSec / SF;
                        SamplePerSec = SamplePerSec / channel;
                    }

                    int TotalTime = TotalDataBytes / AvgBytesPerSec;

                    bShowOrbit = false;
                    //if (channel == 2)
                    //{
                    //    if (MessageBoxEx.Show("Do you want to Create Orbit" + "\n" + "Click Yes for Orbit" + "\n" + "Click No for Waterfall", "Show Orbit", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                    //    {
                    //        bShowOrbit = true;
                    //    }
                    //}
                    if (TotalTime > 0)
                    {
                        short sample;
                        double[] narray = new double[0];
                        BinaryReader fr = new BinaryReader(wav);


                        double[] soundBytes = new double[xData.Length];
                        double[] soundBytes1 = new double[xData.Length];
                        arlYData = new ArrayList();
                        ctr = 0;
                        int abc = 0;
                        double divider = (double) 1 / (double) 32767;
                        string[] splitedspath = spath.Split(new string[] {"\\", ".wav"},
                            StringSplitOptions.RemoveEmptyEntries);
                        string pathforCSV = null;
                        for (int i = 0; i < splitedspath.Length - 1; i++)
                        {
                            pathforCSV = pathforCSV + splitedspath[i].ToString() + "\\";
                        }

                        pathforCSV = pathforCSV + splitedspath[splitedspath.Length - 1] + "_CHN1.csv";

                        if (File.Exists(pathforCSV))
                        {
                            //ReadCSVfileForData(pathforCSV);
                            divider = divider * Convert.ToDouble(lblFixedRangeValue.Text.ToString());
                        }
                        else
                        {
                            SetLabelDefault();
                        }


                        if (channel == 1)
                        {
                            dataGridViewX1.Visible = false;
                            expandableSplitter5.Visible = false;
                            int xx = 0;
                            double[] abcd = new double[TotalDataBytes / 2];
                            while (fr.BaseStream.Position - 44 < TotalDataBytes
                            ) //while (fr.BaseStream.Position != fr.BaseStream.Length)
                            {

                                sample = fr.ReadInt16();
                                abcd[xx] = sample;
                                double SampleVal = Convert.ToDouble(sample * divider); //SampleVal = SampleVal / 1000;
                                if (SampleVal < 100)
                                {
                                    SampleVal = Math.Round(SampleVal, 3);
                                    soundBytes[ctr] = (SampleVal);
                                }
                                else
                                {
                                    SampleVal = Math.Round(SampleVal);
                                    soundBytes[ctr] = (SampleVal);
                                }

                                ctr++;
                                xx++;
                                if (ctr == xData.Length)
                                {
                                    double[] tempYdata = null;
                                    if (!bShowOrbit)
                                    {
                                        double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                                        arlYData.Add(Fmag);
                                        tempYdata = soundBytes;
                                    }
                                    else
                                    {
                                        arlYData.Add(soundBytes);
                                        tempYdata = soundBytes;
                                    }

                                    //hshDrag.Add(trendValCtr, trendValCtr);
                                    ctr = 0;
                                    soundBytes = new double[xData.Length];


                                    {
                                        string source = null;
                                        string Dest = null;
                                        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                        TreeListNode node1 = null;
                                        string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                        string[] ColorCode =
                                        {
                                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951",
                                            "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972",
                                            "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269",
                                            "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                                            "6737204", "16728065", "744352"
                                        };

                                        try
                                        {

                                            dataGridViewImageColumn1.ValuesAreIcons = false;
                                            //if (sTag == "File")
                                            {

                                                //source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
                                                //Dest = AppDomain.CurrentDomain.BaseDirectory + trendValCtr.ToString() + ".csv";

                                                //File.Copy(source, Dest, true);
                                                string s = null;
                                                if (!bShowOrbit)
                                                {
                                                    if (channel == 1)
                                                    {
                                                        s = trendValCtr.ToString();
                                                        s = (ExectTime * (double) trendValCtr).ToString();
                                                    }
                                                    else if (channel == 2 && trendValCtr % 2 == 0)
                                                    {
                                                        abc += 1;
                                                        s = abc.ToString() + " Ch-1";
                                                        s = (ExectTime * (double) trendValCtr).ToString() + " Ch-1";
                                                    }
                                                    else if (channel == 2 && trendValCtr % 2 != 0)
                                                    {
                                                        s = abc.ToString() + " Ch-2";
                                                        s = (ExectTime * (double) (trendValCtr - 1)).ToString() +
                                                            " Ch-2";
                                                    }

                                                    if (!Directory.Exists("c:\\vvtemp\\"))
                                                    {
                                                        Directory.CreateDirectory("c:\\vvtemp\\");
                                                    }

                                                    aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create,
                                                        FileAccess.ReadWrite);

                                                    sw = new StreamWriter(aa);
                                                    for (int i = 0; i < xData.Length; i++)
                                                    {
                                                        sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
                                                    }

                                                    sw.Close();


                                                    //node1 = trlPlantMangerComponents.AppendNode(new object[] { s + ".txt" }, parentNode);
                                                    //node1.Tag = "File";
                                                    //node1.StateImageIndex = 1;






                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridView2.Rows.Add(1);
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value =
                                                        "X";
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                                        objlistimg.Images[iCCtr];
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                        ColorCode[iCCtr].ToString();

                                                    trendValCtr++;
                                                }
                                                else
                                                {
                                                    if (channel == 2 && trendValCtr % 2 == 0)
                                                    {

                                                        s = abc.ToString();

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridView2.Rows.Add(1);
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                            .Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2]
                                                            .Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                            .Value = "X";
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value
                                                            = objlistimg.Images[iCCtr];
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                            ColorCode[iCCtr].ToString();

                                                    }

                                                    abc += 1;
                                                    trendValCtr++;
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ErrorLog_Class.ErrorLogEntry(ex);
                                        }
                                    }
                                }
                            }

                            double and = findHighestValue(abcd);
                        }
                        else
                        {
                            expandableSplitter5.Visible = true;
                            dataGridViewX1.Visible = true;

                            int xx = 0;
                            int yy = 0;
                            double[] abcd = new double[TotalDataBytes / 4];
                            double[] abcd1 = new double[TotalDataBytes / 4];
                            while (fr.BaseStream.Position - 44 < TotalDataBytes
                            ) //while (fr.BaseStream.Position != fr.BaseStream.Length)
                            {

                                sample = fr.ReadInt16();

                                double SampleVal = Convert.ToDouble(sample * divider); //SampleVal = SampleVal / 1000;
                                if (xx % 2 == 0)
                                {
                                    if (SampleVal < 100)
                                    {
                                        SampleVal = Math.Round(SampleVal, 3);
                                        soundBytes[ctr] = (SampleVal);
                                    }
                                    else
                                    {
                                        SampleVal = Math.Round(SampleVal);
                                        soundBytes[ctr] = (SampleVal);
                                    }

                                    abcd[yy] = sample;
                                    xx++;

                                }
                                else
                                {
                                    if (SampleVal < 100)
                                    {
                                        SampleVal = Math.Round(SampleVal, 3);
                                        soundBytes1[ctr] = (SampleVal);
                                    }
                                    else
                                    {
                                        SampleVal = Math.Round(SampleVal);
                                        soundBytes1[ctr] = (SampleVal);
                                    }

                                    abcd1[yy] = sample;
                                    ctr++;
                                    xx++;
                                    yy++;
                                }
                                //while (fr.BaseStream.Position - 44 < TotalDataBytes)//while (fr.BaseStream.Position != fr.BaseStream.Length)
                                //{

                                //    sample = fr.ReadInt16();
                                //    double SampleVal = Convert.ToDouble(sample * divider);
                                //    if (SampleVal < 100)
                                //    {
                                //        SampleVal = Math.Round(SampleVal, 3);
                                //        soundBytes[ctr] = (SampleVal);
                                //    }
                                //    else
                                //    {
                                //        SampleVal = Math.Round(SampleVal);
                                //        soundBytes[ctr] = (SampleVal);
                                //    }
                                //    ctr++;
                                if (ctr == xData.Length)
                                {
                                    double[] tempYdata = null;
                                    if (!bShowOrbit)
                                    {
                                        double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                                        arlYData.Add(Fmag);
                                        tempYdata = soundBytes;
                                    }
                                    else
                                    {
                                        arlYData.Add(soundBytes);
                                        tempYdata = soundBytes;
                                    }

                                    //hshDrag.Add(trendValCtr, trendValCtr);
                                    ctr = 0;
                                    soundBytes = new double[xData.Length];


                                    {
                                        string source = null;
                                        string Dest = null;
                                        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                        TreeListNode node1 = null;
                                        string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                        string[] ColorCode =
                                        {
                                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951",
                                            "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972",
                                            "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269",
                                            "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                                            "6737204", "16728065", "744352"
                                        };

                                        try
                                        {

                                            dataGridViewImageColumn1.ValuesAreIcons = false;
                                            //if (sTag == "File")
                                            {

                                                //source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
                                                //Dest = AppDomain.CurrentDomain.BaseDirectory + trendValCtr.ToString() + ".csv";

                                                //File.Copy(source, Dest, true);
                                                string s = null;
                                                if (!bShowOrbit)
                                                {
                                                    if (channel == 1)
                                                    {
                                                        s = trendValCtr.ToString();
                                                        s = (ExectTime * (double) trendValCtr).ToString();
                                                    }
                                                    else if (channel == 2 && trendValCtr % 2 == 0)
                                                    {
                                                        abc += 1;
                                                        s = abc.ToString() + " Ch-1";
                                                        s = (ExectTime * (double) trendValCtr).ToString() + " Ch-1";

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridView2.Rows.Add(1);
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                            .Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                            .Value = "X";
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value
                                                            = objlistimg.Images[iCCtr];
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                            ColorCode[iCCtr].ToString();

                                                        trendValCtr++;
                                                    }
                                                    else if (channel == 2 && trendValCtr % 2 != 0)
                                                    {
                                                        s = abc.ToString() + " Ch-2";
                                                        s = (ExectTime * (double) (trendValCtr - 1)).ToString() +
                                                            " Ch-2";

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridViewX1.Rows.Add(1);
                                                        dataGridViewX1.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                            .Value = s;
                                                        dataGridViewX1.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                            .Value = "X";
                                                        dataGridViewX1.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value
                                                            = objlistimg.Images[iCCtr];
                                                        dataGridViewX1.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                            ColorCode[iCCtr].ToString();

                                                        trendValCtr++;
                                                    }

                                                    if (!Directory.Exists("c:\\vvtemp\\"))
                                                    {
                                                        Directory.CreateDirectory("c:\\vvtemp\\");
                                                    }

                                                    aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create,
                                                        FileAccess.ReadWrite);

                                                    sw = new StreamWriter(aa);
                                                    for (int i = 0; i < xData.Length; i++)
                                                    {
                                                        sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
                                                    }

                                                    sw.Close();


                                                    //node1 = trlPlantMangerComponents.AppendNode(new object[] { s + ".txt" }, parentNode);
                                                    //node1.Tag = "File";
                                                    //node1.StateImageIndex = 1;






                                                    //int iCCtr = trendValCtr % 30;
                                                    //dataGridView2.Rows.Add(1);
                                                    //dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                                    //dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                                    //dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value = objlistimg.Images[iCCtr];
                                                    //dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = ColorCode[iCCtr].ToString();

                                                    //trendValCtr++;
                                                }
                                                else
                                                {
                                                    if (channel == 2 && trendValCtr % 2 == 0)
                                                    {

                                                        s = abc.ToString();

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridView2.Rows.Add(1);
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                            .Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                            .Value = "X";
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value
                                                            = objlistimg.Images[iCCtr];
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                            ColorCode[iCCtr].ToString();

                                                    }

                                                    abc += 1;
                                                    trendValCtr++;
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ErrorLog_Class.ErrorLogEntry(ex);
                                        }
                                    }
                                }
                            }

                            double and = findHighestValue(abcd);
                        }
                    }
                    else
                    {
                        MessageBoxEx.Show("Not Enough Sample to Draw");
                        bWave = !bWave;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private double[] ConvertToFFT(double[] soundBytes, double[] xData, int ilastFreq)
        {
            double[] Fmag = new double[0];
            try
            {
                double[] mag = fftMag(soundBytes);

                double lastTimevalue = (double) (xData[xData.Length - 1]);
                lastTimevalue = Math.Round(lastTimevalue, 2);
                double HzRate = (double) (1 / lastTimevalue);
                double[] Hz = new double[mag.Length];
                for (int i = 0; i < mag.Length; i++)
                {
                    //Array.Resize(ref Hz, Hz.Length + 1);
                    Hz[i] = HzRate * i;
                    if (Hz[i] >= ilastFreq)
                    {
                        break;
                    }
                }

                xarray = Hz;
                Fmag = new double[Hz.Length];
                for (int i = 0; i < Hz.Length; i++)
                {
                    //Array.Resize(ref Fmag, Fmag.Length + 1);
                    Fmag[i] = mag[i];

                }

                //arlYData.Add(Fmag);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return Fmag;
        }

        private int bitrev(int j)
        {

            int j2;
            int j1 = j;
            int k = 0;
            try
            {
                for (int i = 1; i <= nu; i++)
                {
                    j2 = j1 / 2;
                    k = 2 * k + j1 - 2 * j2;
                    j1 = j2;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return k;
        }

        private void setWaveFirstData()
        {
            ImageList objlistimg = new ImageList();
            try
            {
                objlistimg.Images.Add(Resources.DarkRed);
                dataGridView2.Rows[0].Cells[0].Value = lblDate.Text.ToString();
                dataGridView2.Rows[0].Cells[1].Value = "X";
                dataGridView2.Rows[0].Cells[3].Value = objlistimg.Images[0];
                //lblDate.Text = "Date : " + dataGridView2.Rows[0].Cells[0].Value.ToString();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private ArrayList FunctionForNyquistCSV_old(string sPath)
        {
            Microsoft.Office.Interop.Excel.Sheets objSheets;
            Microsoft.Office.Interop.Excel._Worksheet objSheet;
            Microsoft.Office.Interop.Excel.Range range;
            Microsoft.Office.Interop.Excel.Workbooks objBooks;


            {

                try
                {

                    // Instantiate Excel and start a new workbook.
                    ExcelApp = new Microsoft.Office.Interop.Excel.Application();
                    objBooks = ExcelApp.Workbooks;
                    objBook = objBooks.Add(sPath);
                    arlstData = new ArrayList();
                    try
                    {
                        //Get a reference to the first sheet of the workbook.
                        objSheets = objBook.Worksheets;
                        objSheet = (Microsoft.Office.Interop.Excel._Worksheet) objSheets.get_Item(1);
                    }

                    catch (Exception theException)
                    {
                        ErrorLog_Class.ErrorLogEntry(theException);
                        String errorMessage;
                        errorMessage = "Can't find the Excel workbook.";

                        MessageBoxEx.Show(errorMessage, "Missing Workbook?");

                        //You can't automate Excel if you can't find the data you created, so 
                        //leave the subroutine.
                        return null;
                    }


                    int i = 1;
                    int Row = 1;
                    int Column = 1;
                    string[] strtext = new string[0];
                    string[] strtext1 = new string[0];
                    bool done = false;
                    do
                    {
                        range = objSheet.get_Range(objSheet.Cells[Row, Column], objSheet.Cells[Row, Column + 1]);
                        Object[,] saRet1;
                        saRet1 = (System.Object[,]) range.get_Value(Missing.Value);

                        string val = Convert.ToString(saRet1[1, 1]);
                        string val1 = Convert.ToString(saRet1[1, 2]);
                        if (Row == 8 && !done)
                        {
                            done = true;
                            range = objSheet.get_Range(objSheet.Cells[Row, 4], objSheet.Cells[Row, 5]);
                            // Object[,] saRet1;
                            saRet1 = (System.Object[,]) range.get_Value(Missing.Value);

                            val = Convert.ToString(saRet1[1, 1]);
                            val1 = Convert.ToString(saRet1[1, 2]);
                        }

                        if (!string.IsNullOrEmpty(val) && !string.IsNullOrEmpty(val1))
                        {
                            if (Row > 58 || Row == 8)
                            {
                                //Array.Resize(ref strtext, strtext.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref strtext, 1);
                                strtext[strtext.Length - 1] = val;
                                //Array.Resize(ref strtext1, strtext1.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref strtext1, 1);
                                strtext1[strtext1.Length - 1] = val1;
                            }
                        }

                        Row++;
                        if (Row > 60 && string.IsNullOrEmpty(val) && string.IsNullOrEmpty(val1))
                        {
                            Column += 2;
                            Row = 1;
                            if (strtext.Length == 0 && strtext1.Length == 0)
                            {
                                break;
                            }
                            else
                            {
                                arlstData.Add(strtext);
                                arlstData.Add(strtext1);
                                strtext = new string[0];
                                strtext1 = new string[0];
                            }

                        }
                    } while (true);

                }

                catch (Exception theException)
                {
                    ErrorLog_Class.ErrorLogEntry(theException);
                    String errorMessage;
                    errorMessage = "Error: ";
                    errorMessage = String.Concat(errorMessage, theException.Message);
                    errorMessage = String.Concat(errorMessage, " Line: ");
                    errorMessage = String.Concat(errorMessage, theException.Source);

                    MessageBoxEx.Show(errorMessage, "Error");
                }
                finally
                {
                    ExcelApp = null;
                }

                return arlstData;
            }
        }

        private void SetAllButtontoInitial()
        {
            try
            {

                ExtraZoom = false;
                //CallClearDataGridMain();
                tpData.PageEnabled = true;
                tpOptions.PageEnabled = true;
                FFbuttonEnabled = true;
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
                CtrSelectedCraph = 0;
                trlPlantMangerComponents.Enabled = true;
                Datagrid3visible = false;
                bbConvertToFFT.Enabled = true;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private int FillValue()
        {
            OdbcCommand objCommand = null;
            OdbcDataReader objReader = null;
            int Value = 10;
            //try
            //{
            //    using (OdbcConnection objConnection = new OdbcConnection())
            //    {
            //        objConnection.ConnectionString = "DRIVER= {MySQL ODBC 3.51 Driver}; server= localhost; Database = routedb;User=root;";
            //        objConnection.Open();
            //        objCommand = new OdbcCommand();
            //        objCommand.CommandText = "use routedb";
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();


            //        try
            //        {

            //            objCommand.CommandText = "select * from SideBandVal";
            //            objCommand.Connection = objConnection;
            //            objReader = objCommand.ExecuteReader();
            //            while (objReader.Read())
            //            {
            //                Value = Convert.ToInt32(objReader["Value"]);
            //            } objReader.Close();

            //        }
            //        catch (Exception ex1)
            //        {

            //        }
            //        objCommand.CommandText = "use " + GetCurrentDatabaseName();
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLogFile(ex);
            //}
            return Value;
        }

        private int FillValueFreq()
        {
            OdbcCommand objCommand = null;
            OdbcDataReader objReader = null;

            int Freq = Convert.ToInt32(bbSBTrend.SuperTip.ToString());
            //try
            //{
            //    using (OdbcConnection objConnection = new OdbcConnection())
            //    {
            //        objConnection.ConnectionString = "DRIVER= {MySQL ODBC 3.51 Driver}; server= localhost; Database = routedb;User=root;";
            //        objConnection.Open();

            //        objCommand = new OdbcCommand();
            //        objCommand.CommandText = "use routedb";
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();

            //        try
            //        {

            //            objCommand.CommandText = "select * from SideBandTrend";
            //            objCommand.Connection = objConnection;
            //            objReader = objCommand.ExecuteReader();
            //            while (objReader.Read())
            //            {

            //                Freq = Convert.ToInt32(objReader["Freq"]);

            //            } objReader.Close();

            //        }
            //        catch (Exception ex1)
            //        {

            //        }
            //        objCommand.CommandText = "use " + GetCurrentDatabaseName();
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLogFile(ex);
            //}
            return Freq;
        }

        private int FillValueTrnd()
        {
            OdbcCommand objCommand = null;
            OdbcDataReader objReader = null;
            int Value = 10;
            int Freq = 0;
            //try
            //{
            //    using (OdbcConnection objConnection = new OdbcConnection())
            //    {
            //        objConnection.ConnectionString = "DRIVER= {MySQL ODBC 3.51 Driver}; server= localhost; Database = routedb;User=root;";
            //        objConnection.Open();
            //        objCommand = new OdbcCommand();
            //        objCommand.CommandText = "use routedb";
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();


            //        try
            //        {

            //            objCommand.CommandText = "select * from SideBandTrend";
            //            objCommand.Connection = objConnection;
            //            objReader = objCommand.ExecuteReader();
            //            while (objReader.Read())
            //            {
            //                Value = Convert.ToInt32(objReader["Value"]);

            //            } objReader.Close();

            //        }
            //        catch (Exception ex1)
            //        {

            //        }
            //        objCommand.CommandText = "use " + GetCurrentDatabaseName();
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLogFile(ex);
            //}
            return Value;
        }

        private int FillRatioValue()
        {
            OdbcCommand objCommand = null;
            OdbcDataReader objReader = null;
            int Value = 10;
            //try
            //{
            //    using (OdbcConnection objConnection = new OdbcConnection())
            //    {
            //        objConnection.ConnectionString = "DRIVER= {MySQL ODBC 3.51 Driver}; server= localhost; Database = routedb;User=root;";
            //        objConnection.Open();
            //        objCommand = new OdbcCommand();
            //        objCommand.CommandText = "use routedb";
            //        objCommand.Connection = objConnection;
            //        objCommand.ExecuteNonQuery();


            //        try
            //        {

            //            objCommand.CommandText = "select * from SideBandRatio";
            //            objCommand.Connection = objConnection;
            //            objReader = objCommand.ExecuteReader();
            //            while (objReader.Read())
            //            {
            //                Value = Convert.ToInt32(objReader["Value"]);
            //            } objReader.Close();

            //        }
            //        catch (Exception ex1)
            //        {

            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLogFile(ex);
            //}
            return Value;
        }

        private void RedrawOctaveasimage()
        {

            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);

            //System.Drawing.Graphics der = panel1.CreateGraphics();
            //der.Clip = rgn1;
            Bitmap bmp = new Bitmap(panel1.Width, panel1.Height, PixelFormat.Format24bppRgb);

            System.Drawing.Graphics der = Graphics.FromImage(bmp);
            der.Clear(Color.White);
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 1);
            Pen PenRed = new Pen(Color.Red, 2);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 1);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            //panel1.Refresh();
            PointF Ptsn1 = new PointF();
            try
            {
                //der.SmoothingMode = SmoothingMode.AntiAlias;
                //12-02-2010    Amit Jain
                //Work for the labels of axis
                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);

                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);

                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);


                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);


                }
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                CalCulateGhpDisplayed = GphCtr - 1;
                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                double TotalYAxis = 0.0;
                double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                if (Time == true)
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
                }
                else
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
                }


                if (setAxisCtr == 0 && x != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x, y);
                }
                else if (setAxisCtr == 1 && x1 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x1, y1);
                }
                else if (setAxisCtr == 2 && x2 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x2, y2);
                }
                else if (setAxisCtr == 3 && x3 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x3, y3);
                }
                else if (setAxisCtr == 4 && x4 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x4, y4);
                }
                else if (setAxisCtr == 5 && x5 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x5, y5);
                }
                else if (setAxisCtr == 6 && x6 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x6, y6);
                }
                else if (setAxisCtr == 7 && x7 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x7, y7);
                }

                Font objFont = new Font("Roman", (float) (10 - 1), FontStyle.Bold);
                Brush objBrush = Brushes.Black;
                Brush objBrush1 = Brushes.Red;
                int ixptr = 0;
                for (int i = 0; i < Pts.Length; i++)
                {
                    //int red = i * 10;
                    //if (red > 250)
                    //{
                    //    red = red % 250;
                    //}
                    //int Green = i * 20;
                    //if (Green > 250)
                    //{
                    //    Green = Green % 250;
                    //}
                    //int blue = i * 30;
                    //if (blue > 250)
                    //{
                    //    blue = blue % 250;
                    //}


                    Pen PenRedBAR =
                        new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length) - 2); //.FromArgb(red, Green, blue)
                    Pen PenBlackBAR = new Pen(Color.Black, (float) (TotalXAxis / Pts.Length));
                    PointF OriginPts = new PointF(Pts[i].X, (float) pt.Bottom - Fifty);

                    if (OctaveStyle == "Bars with Border")
                    {

                        der.DrawLine(PenBlackBAR, OriginPts, Pts[i]);
                        if (Pts[i].Y < OriginPts.Y)
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y + 1);
                        }
                        else
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y);
                        }

                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }

                    }
                    else if (OctaveStyle == "Empty Bars")
                    {
                        PenRedBAR = new Pen(panel1.BackColor, (float) (TotalXAxis / Pts.Length) - 2);
                        der.DrawLine(PenBlackBAR, OriginPts, Pts[i]);
                        if (Pts[i].Y < OriginPts.Y)
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y + 1);
                        }
                        else
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y);
                        }

                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }

                    }
                    else if (OctaveStyle == "Filled bars")
                    {
                        PenRedBAR = new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length));
                        der.DrawLine(PenRedBAR, OriginPts, Pts[i]);
                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }
                    }
                    else if (OctaveStyle == "Thick Lines")
                    {
                        PenRedBAR = new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length) / 5);
                        der.DrawLine(PenRedBAR, OriginPts, Pts[i]);
                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }
                    }
                    else
                    {
                        PenRedBAR = new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length) / 20);
                        der.DrawLine(PenRedBAR, OriginPts, Pts[i]);
                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }
                    }
                }

                Brush objBrsh = Brushes.Black;
                StringFormat objVerticle = new StringFormat(StringFormatFlags.DirectionVertical);
                // string[] Text = lblYAxis.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);

                // Font objFnt = new Font("Roman", 12, FontStyle.Bold);
                //der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X - 575, Pts[0].Y , objVerticle);
                //der.DrawString(Text[1], objFnt, objBrsh, PointToDrawVerticle, objVerticle);
                // Text = lblXAxis.Text.ToString().Split(new string[] { ":" }, StringSplitOptions.RemoveEmptyEntries);
                //der.DrawString(Text[1], objFnt, objBrsh, Pts[0].X , Pts[0].Y + 320);
                // der.DrawString(Text[1], objFnt, objBrsh, PointToDrwString);

                //Bitmap bmp = new Bitmap(panel1.Width, panel1.Height, PixelFormat.Format24bppRgb);



                GC.Collect();
                bmp.Save(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg");
                bmp.Dispose();
                GC.Collect();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void RedrawOctave()
        {

            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);

            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 1);
            Pen PenRed = new Pen(Color.Red, 2);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 1);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            //panel1.Refresh();
            PointF Ptsn1 = new PointF();
            try
            {
                //der.SmoothingMode = SmoothingMode.AntiAlias;
                //12-02-2010    Amit Jain
                //Work for the labels of axis
                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);

                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);

                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("X axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt2.X + Three,
                        pt2.Y - 7);


                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    der.DrawString("Y axis", new Font("Roman", 10, FontStyle.Bold), Brushes.Black, pt.Left, pt2.Y);


                }
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    der.DrawLine(BlkDash, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - (TwoHundred + OneFifty)));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}

                //else
                //{
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Right - OneSixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //    pt1 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Bottom - Fifty));//TwoHundred
                //    pt2 = new Point((int)(pt.Left + SixtyTwo), (int)(pt.Top + OneFifty));//FourHundred
                //    der.DrawLine(PenBlkB, pt1, pt2);
                //}
                CalCulateGhpDisplayed = GphCtr - 1;
                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                double TotalYAxis = 0.0;
                double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                if (Time == true)
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
                }
                else
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
                }


                if (setAxisCtr == 0 && x != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    SetAxisMarks(x, y);
                }
                else if (setAxisCtr == 1 && x1 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x1, y1);
                }
                else if (setAxisCtr == 2 && x2 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x2, y2);
                }
                else if (setAxisCtr == 3 && x3 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x3, y3);
                }
                else if (setAxisCtr == 4 && x4 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x4, y4);
                }
                else if (setAxisCtr == 5 && x5 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x5, y5);
                }
                else if (setAxisCtr == 6 && x6 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x6, y6);
                }
                else if (setAxisCtr == 7 && x7 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x7, y7);
                }

                Font objFont = new Font("Roman", (float) (10 - 1), FontStyle.Bold);
                Brush objBrush = Brushes.Black;
                Brush objBrush1 = Brushes.Red;
                int ixptr = 0;
                for (int i = 0; i < Pts.Length; i++)
                {
                    //int red = i * 10;
                    //if (red > 250)
                    //{
                    //    red = red % 250;
                    //}
                    //int Green = i * 20;
                    //if (Green > 250)
                    //{
                    //    Green = Green % 250;
                    //}
                    //int blue = i * 30;
                    //if (blue > 250)
                    //{
                    //    blue = blue % 250;
                    //}


                    Pen PenRedBAR =
                        new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length) - 2); //.FromArgb(red, Green, blue)
                    Pen PenBlackBAR = new Pen(Color.Black, (float) (TotalXAxis / Pts.Length));
                    PointF OriginPts = new PointF(Pts[i].X, (float) pt.Bottom - Fifty);

                    if (OctaveStyle == "Bars with Border")
                    {

                        der.DrawLine(PenBlackBAR, OriginPts, Pts[i]);
                        if (Pts[i].Y < OriginPts.Y)
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y + 1);
                        }
                        else
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y);
                        }

                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }

                    }
                    else if (OctaveStyle == "Empty Bars")
                    {
                        PenRedBAR = new Pen(panel1.BackColor, (float) (TotalXAxis / Pts.Length) - 2);
                        der.DrawLine(PenBlackBAR, OriginPts, Pts[i]);
                        if (Pts[i].Y < OriginPts.Y)
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y + 1);
                        }
                        else
                        {
                            der.DrawLine(PenRedBAR, OriginPts.X, OriginPts.Y, Pts[i].X, Pts[i].Y);
                        }

                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }

                    }
                    else if (OctaveStyle == "Filled bars")
                    {
                        PenRedBAR = new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length));
                        der.DrawLine(PenRedBAR, OriginPts, Pts[i]);
                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }
                    }
                    else if (OctaveStyle == "Thick Lines")
                    {
                        PenRedBAR = new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length) / 5);
                        der.DrawLine(PenRedBAR, OriginPts, Pts[i]);
                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }
                    }
                    else
                    {
                        PenRedBAR = new Pen(Color.LightGreen, (float) (TotalXAxis / Pts.Length) / 20);
                        der.DrawLine(PenRedBAR, OriginPts, Pts[i]);
                        StringFormat sf = new StringFormat();

                        if ((ixptr % OctaveOrder == 0) || ixptr == 0 || ixptr == Pts.Length - 1)
                        {

                            der.DrawString(Math.Round(octaveCenterData[i], 1).ToString(), objFont, objBrush,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), OriginPts.Y);
                        }

                        ixptr++;
                        if (Pts[i].Y < (OriginPts.Y - 10))
                        {


                            der.DrawString(Math.Round(dActXData[i], 1).ToString(), objFont, objBrush1,
                                OriginPts.X - ((float) (TotalXAxis / Pts.Length) / 2), (float) (Pts[i].Y));

                        }
                    }
                }


            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void ExtractDataForOctave()
        {
            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);

            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 1);
            Pen PenRed = new Pen(Color.Red, 2);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, 1);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            //Pts = new PointF[0];
            //panel1.Refresh();
            PointF Ptsn1 = new PointF();
            try
            {
                octaveSettings _octaveSettings = new octaveSettings();
                _octaveSettings.ShowDialog();
                GraphType = "Octave";
                OctaveStyle = _octaveSettings.Bars;
                //der.SmoothingMode = SmoothingMode.AntiAlias;
                if (Time == true)
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    der.DrawLine(BlkDash, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo),
                        (int) (pt.Bottom - (TwoHundred + OneFifty))); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                else
                {
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Right - OneSixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                    pt1 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Bottom - Fifty)); //TwoHundred
                    pt2 = new Point((int) (pt.Left + SixtyTwo), (int) (pt.Top + OneFifty)); //FourHundred
                    der.DrawLine(PenBlkB, pt1, pt2);
                }

                CalCulateGhpDisplayed = GphCtr - 1;
                //der.DrawCurve(new Pen(Color.Red, (float).5), Pts, (float)0);

                double TotalYAxis = 0.0;
                double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                if (Time == true)
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (FourHundred + TwoHundred);
                }
                else
                {
                    TotalYAxis = (Convert.ToDouble(pt.Bottom - pt.Top)) - (TwoHundred);
                }


                if (setAxisCtr == 0 && x != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x, y);
                }
                else if (setAxisCtr == 1 && x1 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x1.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x1, y1);
                }
                else if (setAxisCtr == 2 && x2 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x2.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    // SetAxisMarks(x2, y2);
                }
                else if (setAxisCtr == 3 && x3 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x3.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //   SetAxisMarks(x3, y3);
                }
                else if (setAxisCtr == 4 && x4 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x4.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x4, y4);
                }
                else if (setAxisCtr == 5 && x5 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x5.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x5, y5);
                }
                else if (setAxisCtr == 6 && x6 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x6.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    //  SetAxisMarks(x6, y6);
                }
                else if (setAxisCtr == 7 && x7 != null)
                {
                    if (Panel1Resized)
                    {
                        MainYAxisInterval = (double) (HighestValYAxis / TotalYAxis);
                        MainXAxisInterval = (TotalXAxis / (x7.Length - 1));
                        CursorStartInterval = MainXAxisInterval;
                    }

                    // SetAxisMarks(x7, y7);
                }

                double[] XData = x; // { 0, 1, 2, 3, 4,5,6,7,8,9 };
                double[] YData = y; // { 0, 2.2, 2.3, 2.2, 2.1,3,45,2,3,33 };

                //for (int i = 0; i < 801; i++)
                //{
                //    Array.Resize(ref XData, XData.Length + 1);
                //    XData[XData.Length - 1] = (double)((double)i * (double)1.25);
                //    Array.Resize(ref YData, YData.Length + 1);
                //    YData[YData.Length - 1] = Math.Abs(Math.Sin(i) + Math.Tan(i));
                //}
                double count = 0;
                double power = 0;
                OctaveOrder = Convert.ToDouble(_octaveSettings.Octave);
                //if (orderChanged)
                //{
                //    OctaveOrder = 3;
                //}
                octaveCenterData = new double[0];
                octaveLowerData = new double[0];
                octaveUpperData = new double[0];
                do
                {
                    count = Math.Pow(10, power);
                    if (count >= 1000)
                    {
                        count = count / 1000;
                        count = Math.Round(count);
                        count = count * 1000;
                    }
                    else if (count >= 130)
                    {
                        count = count / 10;
                        count = Math.Round(count);
                        count = count * 10;
                    }
                    else if (count >= 50)
                    {
                        count = Math.Truncate(count);
                    }
                    else
                    {
                        if (OctaveOrder == 1)
                        {
                            count = Math.Round(count);
                        }
                        else
                        {
                            if (count >= 15)
                            {
                                count = Math.Round(count);
                            }
                            else
                            {
                                count = Math.Round(count, 3);
                            }
                        }
                    }

                    //Array.Resize(ref octaveCenterData, octaveCenterData.Length + 1);
                    _ResizeArray.IncreaseArrayDouble(ref octaveCenterData, 1);
                    octaveCenterData[octaveCenterData.Length - 1] = count;
                    ClearCmbCursor();
                    ArrayList CursorItems = new ArrayList();
                    CursorItems.Add("Select Cursor");
                    CursorItems.Add("Single With Square");

                    AddToCmbCursor(CursorItems);
                    string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                    CmbCursorSelectedItem(SelectedCursorItem);
                    double count1 = Math.Pow(10, power - (.15 / OctaveOrder));
                    if (count1 >= 1000)
                    {
                        count1 = count1 / 10;
                        count1 = Math.Round(count1);
                        count1 = count1 * 10;
                    }
                    else if (count1 >= 130)
                    {

                        count1 = Math.Round(count1);

                    }
                    else if (count1 >= 50)
                    {
                        count1 = Math.Truncate(count1);
                    }
                    else
                    {
                        count1 = Math.Round(count1, 3);
                    }

                    //Array.Resize(ref octaveLowerData, octaveLowerData.Length + 1);
                    _ResizeArray.IncreaseArrayDouble(ref octaveLowerData, 1);
                    octaveLowerData[octaveLowerData.Length - 1] = count1;
                    count1 = Math.Pow(10, power + (.15 / OctaveOrder));
                    if (count1 >= 1000)
                    {
                        count1 = count1 / 10;
                        count1 = Math.Round(count1);
                        count1 = count1 * 10;
                    }
                    else if (count1 >= 130)
                    {

                        count1 = Math.Round(count1);

                    }
                    else if (count1 >= 50)
                    {
                        count1 = Math.Truncate(count1);
                    }
                    else
                    {
                        count1 = Math.Round(count1, 3);
                    }

                    //Array.Resize(ref octaveUpperData, octaveUpperData.Length + 1);
                    _ResizeArray.IncreaseArrayDouble(ref octaveUpperData, 1);
                    octaveUpperData[octaveUpperData.Length - 1] = count1;
                    power += Math.Round((double) (.3 / OctaveOrder), 3);
                    power = Math.Round(power, 3);
                } while (count < XData[XData.Length - 1]);

                dActXData = new double[0];
                double temp = 0;
                int ii = 0;

                try
                {
                    for (int j = 0; j < octaveCenterData.Length; j++)
                    {
                        temp = 0;
                        for (int i = 0; (XData[i] <= octaveUpperData[j]) && (i < XData.Length - 2); i++)
                        {
                            if (i > 790)
                            {
                            }

                            try
                            {
                                if ((XData[i] <= octaveUpperData[j]) && (XData[i] >= octaveLowerData[j]))
                                {
                                    if (temp < YData[i])
                                    {
                                        temp = YData[i];
                                    }
                                }
                            }
                            catch
                            {
                                break;
                            }
                        }

                        //Array.Resize(ref dActXData, dActXData.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref dActXData, 1);
                        dActXData[dActXData.Length - 1] = temp;
                        temp = 0;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                double MainYAxisInterval1 = 0;
                double MainYAxisInterval2 = 0;

                float HighestX = findHighestValue(octaveCenterData);
                float HighestY = findHighestValue(dActXData);
                XSelected = octaveCenterData;
                YSelected = dActXData;

                MainYAxisInterval = (double) (HighestY / TotalYAxis);
                MainXAxisInterval = (TotalXAxis / (XSelected.Length - 1));

                float MaxX = HighestX;
                float MaxY = HighestY;

                MainYAxisInterval1 = (double) (MaxX / (TotalXAxis));
                MainYAxisInterval2 = (double) (MaxY / (TotalYAxis));
                Pts = new PointF[0];
                Font objFont = new Font("Roman", 10, FontStyle.Bold);
                Brush objBrush = Brushes.Black;
                for (int i = 0; i < dActXData.Length; i++)
                {


                    //Array.Resize(ref Pts, Pts.Length + 1);
                    _ResizeArray.IncreaseArrayPointF(ref Pts, 1);
                    Pen PenRedBAR = new Pen(Color.Red, (float) (TotalXAxis / octaveCenterData.Length));

                    if ((float) (pt.Bottom - Fifty - (float) (dActXData[i] / MainYAxisInterval2)) >
                        (float) (pt.Top + TwoHundred))
                    {
                        Ptsn1 = new PointF(
                            (float) (pt.Left + SixtyTwo +
                                     (float) (i * ((octaveCenterData[octaveCenterData.Length - 1]) /
                                                   octaveCenterData.Length) / MainYAxisInterval1)) +
                            PenRedBAR.Width / 2,
                            (float) (pt.Bottom - Fifty - (float) (dActXData[i] / MainYAxisInterval2)));
                    }
                    else
                    {
                        Ptsn1 = new PointF(
                            (float) (pt.Left + SixtyTwo +
                                     (float) (i * ((octaveCenterData[octaveCenterData.Length - 1]) /
                                                   octaveCenterData.Length) / MainYAxisInterval1)) +
                            PenRedBAR.Width / 2, (float) (pt.Top + TwoHundred));
                    }

                    PointF OriginPts = new PointF(Ptsn1.X + PenRedBAR.Width / 2, (float) pt.Bottom - Fifty);
                    der.DrawLine(PenRedBAR, OriginPts, Ptsn1);
                    der.DrawString(octaveCenterData[i].ToString(), objFont, objBrush, OriginPts.X, OriginPts.Y - 20);
                    der.DrawString(Math.Round(dActXData[i], 4).ToString(), objFont, objBrush, OriginPts.X,
                        (float) (Ptsn1.Y));

                    Pts[i] = Ptsn1;

                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private double[] CalculateCepstrumfromTime(double[] time)
        {
            double[] ValueToReturn = null;
            try
            {

                Complex[] timedata = new Complex[time.Length];
                for (int i = 0; i < time.Length; i++)
                {

                    timedata[i].real = time[i];
                    timedata[i].imaginary = 0;
                }


                Complex[] data = null;

                try
                {
                    data = FFT.Calculate(timedata, false);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    data = CalculateFFTComplexed(timedata);
                }

                double[] magfft = new double[data.Length / 2];
                for (int i = 0; i < data.Length / 2; i++)
                {
                    magfft[i] = (2 * (Math.Sqrt(Math.Pow(data[i].real, 2) + Math.Pow(data[i].imaginary, 2)))) /
                                data.Length;
                }

                Complex[] magLog = new Complex[data.Length];
                for (int i = 0; i < magfft.Length; i++)
                {
                    if (Math.Round(data[i].imaginary, 6) != 0)
                    {
                        magLog[i].imaginary = Math.Log(Math.Abs(data[i].imaginary));
                    }
                    else
                    {
                        magLog[i].imaginary = 0;
                    }

                    if (Math.Round(data[i].real, 6) != 0)
                    {
                        magLog[i].real = Math.Log(Math.Abs(data[i].real));
                    }
                    else
                    {
                        magLog[i].real = 0;
                    }
                }



                Complex[] invdata = new Complex[magLog.Length];
                for (int i = 0; i < invdata.Length; i++)
                {
                    invdata[i].imaginary = magLog[i].real;
                    invdata[i].real = magLog[i].imaginary;
                }

                Complex[] invdataFFT = FFT.Calculate(invdata, false);

                Complex[] B = new Complex[invdataFFT.Length];
                for (int i = 0; i < invdataFFT.Length; i++)
                {
                    B[i].imaginary = invdataFFT[i].real;
                    B[i].real = invdataFFT[i].imaginary;
                }

                double[] magfftinv = new double[B.Length];
                for (int i = 0; i < B.Length; i++)
                {
                    magfftinv[i] = ((Math.Sqrt(Math.Pow(B[i].real, 2) + Math.Pow(B[i].imaginary, 2)))) / B.Length;
                }


                ValueToReturn = magfftinv;





            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return ValueToReturn;
        }

        private double[] CalculateCepstrumfromFFT(double[] fft)
        {
            //double[] ValueToReturn = null;
            //try
            //{

            //    Complex[] fftdata = new Complex[fft.Length * 2];
            //    for (int i = 0; i < fft.Length; i++)
            //    {
            //        fftdata[i].real = fft[i];
            //        fftdata[i].imaginary = 0;
            //    }
            //    int tempi = fft.Length - 1;
            //    for (int i = fft.Length; i < fftdata.Length; i++)
            //    {
            //        fftdata[i].real = fft[tempi];
            //        fftdata[i].imaginary = 0;
            //        tempi--;
            //    }

            //    //Complex[] data = FFT.Calculate(timedata, false);
            //    //double[] magfft = new double[data.Length / 2];
            //    //for (int i = 0; i < data.Length / 2; i++)
            //    //{
            //    //    magfft[i] = (2 * (Math.Sqrt(Math.Pow(data[i].real, 2) + Math.Pow(data[i].imaginary, 2)))) / data.Length;
            //    //}

            //    Complex[] magLog = new Complex[fftdata.Length];
            //    for (int i = 0; i < fft.Length; i++)
            //    {
            //        if (Math.Round(fftdata[i].imaginary, 6) != 0)
            //        {
            //            magLog[i].imaginary = Math.Log(Math.Abs(fftdata[i].imaginary));
            //        }
            //        else
            //        {
            //            magLog[i].imaginary = 0;
            //        }

            //        if (Math.Round(fftdata[i].real, 6) != 0)
            //        {
            //            magLog[i].real = Math.Log(Math.Abs(fftdata[i].real));
            //        }
            //        else
            //        {
            //            magLog[i].real = 0;
            //        }
            //    }



            //    Complex[] invdata = new Complex[magLog.Length];
            //    for (int i = 0; i < invdata.Length; i++)
            //    {
            //        invdata[i].imaginary = magLog[i].real;
            //        invdata[i].real = magLog[i].imaginary;
            //    }
            //    Complex[] invdataFFT = FFT.Calculate(invdata, false);

            //    Complex[] B = new Complex[invdataFFT.Length];
            //    for (int i = 0; i < invdataFFT.Length; i++)
            //    {
            //        B[i].imaginary = invdataFFT[i].real;
            //        B[i].real = invdataFFT[i].imaginary;
            //    }
            //    double[] magfftinv = new double[B.Length];
            //    for (int i = 0; i < B.Length; i++)
            //    {
            //        magfftinv[i] = ((Math.Sqrt(Math.Pow(B[i].real, 2) + Math.Pow(B[i].imaginary, 2)))) / B.Length;
            //    }


            //    ValueToReturn = magfftinv;





            //}
            //catch (Exception ex)
            //{
            //}
            //return ValueToReturn;
            {
                double[] ValueToReturn = null;
                try
                {

                    Complex[] fftdata = new Complex[fft.Length * 2];
                    for (int i = 0; i < fft.Length; i++)
                    {
                        fftdata[i].real = fft[i];
                        fftdata[i].imaginary = 0;
                    }

                    int tempi = fft.Length - 1;
                    for (int i = fft.Length; i < fftdata.Length; i++)
                    {
                        fftdata[i].real = fft[tempi];
                        fftdata[i].imaginary = 0;
                        tempi--;
                    }

                    //Complex[] data = FFT.Calculate(timedata, false);
                    //double[] magfft = new double[data.Length / 2];
                    //for (int i = 0; i < data.Length / 2; i++)
                    //{
                    //    magfft[i] = (2 * (Math.Sqrt(Math.Pow(data[i].real, 2) + Math.Pow(data[i].imaginary, 2)))) / data.Length;
                    //}

                    Complex[] magLog = new Complex[fftdata.Length];
                    for (int i = 0; i < fft.Length; i++)
                    {
                        if (Math.Round(fftdata[i].imaginary, 6) != 0)
                        {
                            magLog[i].imaginary = Math.Log(Math.Abs(fftdata[i].imaginary));
                        }
                        else
                        {
                            magLog[i].imaginary = 0;
                        }

                        if (Math.Round(fftdata[i].real, 6) != 0)
                        {
                            magLog[i].real = Math.Log(Math.Abs(fftdata[i].real));
                        }
                        else
                        {
                            magLog[i].real = 0;
                        }
                    }



                    Complex[] invdata = new Complex[magLog.Length];
                    for (int i = 0; i < invdata.Length; i++)
                    {
                        invdata[i].imaginary = magLog[i].real;
                        invdata[i].real = magLog[i].imaginary;
                    }

                    Complex[] invdataFFT = null;

                    try
                    {
                        invdataFFT = FFT.Calculate(invdata, false);
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        invdataFFT = CalculateFFTComplexed(invdata);
                    }

                    Complex[] B = new Complex[invdataFFT.Length];
                    for (int i = 0; i < invdataFFT.Length; i++)
                    {
                        B[i].imaginary = invdataFFT[i].real;
                        B[i].real = invdataFFT[i].imaginary;
                    }

                    double[] magfftinv = new double[B.Length];
                    for (int i = 0; i < B.Length; i++)
                    {
                        magfftinv[i] = ((Math.Sqrt(Math.Pow(B[i].real, 2) + Math.Pow(B[i].imaginary, 2)))) / B.Length;
                    }

                    ValueToReturn = new double[magfftinv.Length * 2];
                    for (int i = 0; i < magfftinv.Length; i++)
                    {
                        ValueToReturn[i] = magfftinv[i];
                    }

                    tempi = magfftinv.Length - 1;


                    for (int i = magfftinv.Length; i < magfftinv.Length * 2; i++)
                    {
                        ValueToReturn[i] = magfftinv[tempi];
                        tempi--;
                    }
                    // ValueToReturn = magfftinv;





                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                return ValueToReturn;
            }
        }

        private void DrawBearingFaultFrequency()
        {
            if (!Zoom)
            {
                try
                {
                    double NumberOfBalls = Convert.ToDouble(txtxBNRE.Text.ToString());
                    double BearingPitchDiameter =
                        Convert.ToDouble(((Convert.ToDouble(txtxBDIR.Text.ToString()) +
                                           Convert.ToDouble(txtxBDOR.Text.ToString())) / 2));
                    double RollingElementDiameter = Convert.ToDouble(txtxBDRE.Text.ToString());
                    double ContactAngle = Convert.ToDouble(txtxBCA.Text.ToString());
                    double ShaftSpeed = 0;

                    if (chkBFFOverride.Checked)
                    {
                        ShaftSpeed = OverriddenRPM;
                    }
                    else
                    {
                        ShaftSpeed = Convert.ToDouble(txtxRPM.Text.ToString()) /
                                     Convert.ToDouble(txtxPulse.Text.ToString());
                    }

                    ArrayList BearingFaultFrequencies = new ArrayList();

                    if (rbPhysicalDimensions.Checked)
                    {
                        BearingFaultFrequencies = _BFFInterface.CalculateBearingFaultFrequencies(ShaftSpeed,
                            NumberOfBalls, BearingPitchDiameter, RollingElementDiameter, ContactAngle);
                    }
                    else
                    {
                        BearingFaultFrequencies.Add(
                            "BPFO = " + Convert.ToString(Convert.ToDouble(tbBPFO.Text.ToString()) * ShaftSpeed));
                        BearingFaultFrequencies.Add(
                            "BPFI = " + Convert.ToString(Convert.ToDouble(tbBPFI.Text.ToString()) * ShaftSpeed));
                        BearingFaultFrequencies.Add(
                            "BSF = " + Convert.ToString(Convert.ToDouble(tbBSF.Text.ToString()) * ShaftSpeed));
                        BearingFaultFrequencies.Add(
                            "FTF = " + Convert.ToString(Convert.ToDouble(tbFTF.Text.ToString()) * ShaftSpeed));
                        // BearingFaultFrequencies.Add(
                    }



                    {
                        Region rgn1 = new Region(panel1.Bounds);

                        System.Drawing.Graphics der = panel1.CreateGraphics();
                        der.Clip = rgn1;
                        RectangleF pt = der.ClipBounds;
                        Pen BlkDash = new Pen(Color.BlueViolet, 2);
                        BlkDash.DashCap = DashCap.Triangle;
                        BlkDash.DashStyle = DashStyle.DashDotDot;

                        PointF[] pt1 = new PointF[0];
                        PointF[] pt2 = new PointF[0];
                        PointF[] ptString = new PointF[0];
                        string[] Names = new string[0];
                        Font objFont = new Font("Roman", 7, FontStyle.Regular);
                        Brush objBrush = Brushes.Red;
                        try
                        {
                            if (Pts != null)
                            {

                                dataGridView3.Rows.Clear();
                                for (int i = 0; i < dataGridView3.Rows.Count - 1; i++)
                                {
                                    dataGridView3.Rows.RemoveAt(0);
                                }

                                double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) -
                                                    (pt.Left + SixtyTwo + OneSixtyTwo);
                                double MainInterval = (TotalXAxis / (x.Length - 1));

                                StringFormat sf = new StringFormat(StringFormatFlags.DirectionVertical);

                                //Predicate<
                                //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());

                                string[] Frequencies = new string[0];

                                for (int i = 0; i < BearingFaultFrequencies.Count; i++)
                                {
                                    //Array.Resize(ref Frequencies, Frequencies.Length + 1);
                                    _ResizeArray.IncreaseArrayString(ref Frequencies, 1);

                                    Frequencies[Frequencies.Length - 1] = BearingFaultFrequencies[i].ToString();
                                }





                                ExactBearingFF = new double[4];

                                for (int i = 0; i < Frequencies.Length; i++)
                                {
                                    string[] ExtractFreqSingle = Frequencies[i].Split(new string[] {"="},
                                        StringSplitOptions.RemoveEmptyEntries);
                                    double Comparator = Convert.ToDouble(ExtractFreqSingle[1]);
                                    if (!lblGrphUnitX.Text.Contains("CPM"))
                                    {
                                        Comparator = Comparator / 60;
                                    }

                                    double dcomp = Comparator;
                                    for (int j = 0; j < iBearingHarmonics; j++)
                                    {
                                        Comparator = dcomp * (j + 1);
                                        int MainIndex = Array.FindIndex(x,
                                            delegate(double item) { return item == Comparator; });
                                        if (MainIndex == -1)
                                        {
                                            if (Comparator <= x[x.Length - 1])
                                            {
                                                Comparator = FindNearest(x, Comparator);
                                                MainIndex = Array.FindIndex(x,
                                                    delegate(double item) { return item == Comparator; });
                                            }
                                        }

                                        if (MainIndex != -1)
                                        {

                                            //Array.Resize(ref pt1, pt1.Length + 1);
                                            //Array.Resize(ref pt2, pt2.Length + 1);
                                            //Array.Resize(ref ptString, ptString.Length + 1);
                                            //Array.Resize(ref Names, Names.Length + 1);

                                            _ResizeArray.IncreaseArrayPointF(ref pt1, 1);
                                            _ResizeArray.IncreaseArrayPointF(ref pt2, 1);
                                            _ResizeArray.IncreaseArrayPointF(ref ptString, 1);
                                            _ResizeArray.IncreaseArrayString(ref Names, 1);

                                            pt1[pt1.Length - 1] =
                                                new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                                    (float) (pt.Bottom - Fifty));
                                            pt2[pt2.Length - 1] =
                                                new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                                    (float) (pt.Top + OneFifty));
                                            ptString[ptString.Length - 1] = new PointF(
                                                (float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                                (float) (pt.Top + OneFifty));
                                            Names[Names.Length - 1] =
                                                ExtractFreqSingle[0].ToString() + (j + 1).ToString() + "x   " +
                                                Convert.ToString(Math.Round(y[MainIndex], 5));
                                            dataGridView3.Rows.Add(1);
                                            dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[0].Value =
                                                ExtractFreqSingle[0].ToString() + (j + 1).ToString() + "x";
                                            dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value =
                                                Convert.ToString(Math.Round(x[MainIndex], 5));
                                            dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[2].Value =
                                                Convert.ToString(Math.Round(y[MainIndex], 5));
                                            ExactBearingFF[i] = Convert.ToDouble(dataGridView3
                                                .Rows[dataGridView3.Rows.Count - 2].Cells[1].Value.ToString());
                                        }
                                    }
                                }

                                for (int i = 0; i < pt1.Length; i++)
                                {
                                    der.DrawLine(BlkDash, pt1[i], pt2[i]);
                                    //der.TranslateTransform(150, 0);
                                    //der.RotateTransform(180);
                                    der.DrawString(Names[i], objFont, objBrush, ptString[i], sf);

                                }


                            }
                            else
                            {

                            }

                            //string[] Frequencies = ExtractFaultFrequencies(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                            ErrorLogFile(ex);
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }
            }
        }

        private Complex[] CalculateFFTComplexed(Complex[] invdata)
        {
            Complex[] ValuetoReturn = null;
            // assume n is a power of 2
            if (x.Length % 2 == 0)
            {
                n = x.Length;
            }
            else
            {
                n = x.Length - 1;
            }

            nu = (int) (Math.Log(n) / Math.Log(2));
            int n2 = n / 2;
            int nu1 = nu - 1;
            double[] xre = new double[n];
            double[] xim = new double[n];
            double[] mag = new double[n2];
            double tr, ti, p, arg, c, s;
            try
            {
                for (int i = 0; i < n; i++)
                {
                    xre[i] = x[i];
                    xim[i] = 0.0f;
                }

                int k = 0;

                for (int l = 1; l <= nu; l++)
                {
                    while (k < n)
                    {
                        for (int i = 1; i <= n2; i++)
                        {
                            try
                            {
                                p = bitrev(k >> nu1);
                                arg = 2 * (double) Math.PI * p / n;
                                c = (double) Math.Cos(arg);
                                s = (double) Math.Sin(arg);
                                tr = xre[k + n2] * c + xim[k + n2] * s;
                                ti = xim[k + n2] * c - xre[k + n2] * s;
                                xre[k + n2] = xre[k] - tr;
                                xim[k + n2] = xim[k] - ti;
                                xre[k] += tr;
                                xim[k] += ti;
                                k++;
                            }
                            catch
                            {
                            }
                        }

                        k += n2;
                    }

                    k = 0;
                    nu1--;
                    n2 = n2 / 2;
                }

                k = 0;
                int r;
                while (k < n)
                {
                    r = bitrev(k);
                    if (r > k)
                    {
                        tr = xre[k];
                        ti = xim[k];
                        xre[k] = xre[r];
                        xim[k] = xim[r];
                        xre[r] = tr;
                        xim[r] = ti;
                    }

                    k++;
                }


                ValuetoReturn = new Complex[xre.Length];
                for (int i = 0; i < xre.Length; i++)
                {
                    ValuetoReturn[i].real = xre[i];
                    ValuetoReturn[i].imaginary = xim[i];
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return ValuetoReturn;
        }

        private double findHighestValue(double[] Target, double exceptionalvalue)
        {
            double MaxVal = 0.0;
            double MinVal = 0.0;
            double FinalVal = 0.0;
            position = 0;
            try
            {
                for (int i = 0; i < Target.Length; i++)
                {
                    if (exceptionalvalue != 0)
                    {
                        if ((Target[i] > MaxVal) && Target[i] < exceptionalvalue)
                        {
                            MaxVal = Target[i];
                            position = i;
                        }

                        if (Target[i] < MinVal)
                        {
                            MinVal = Target[i];
                        }
                    }
                    else
                    {
                        if ((Target[i] > MaxVal))
                        {
                            MaxVal = Target[i];
                            position = i;
                        }

                        if (Target[i] < MinVal)
                        {
                            MinVal = Target[i];
                        }
                    }
                }

                MinVal = Math.Abs(MinVal);
                if (MaxVal >= MinVal)
                    FinalVal = MaxVal;
                else if (MinVal > MaxVal)
                    FinalVal = MinVal;



            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);

            }

            return FinalVal;
        }

        private double[] getallpeak(double[] dataset)
        {
            double[] peakvalues = new double[0];
            double highestPeakValue = 0;
            positionarray = new int[0];
            discardedPosition = new int[0];
            bool Valid = true;
            int Invalidctr = 0;
            try
            {
                do
                {
                    Valid = true;
                    highestPeakValue = findHighestValue(dataset, highestPeakValue, true);
                    if (positionarray.Length > 0)
                    {
                        for (int i = 0; i < positionarray.Length; i++)
                        {
                            if ((position > (positionarray[i] - RUCDvariable)) &&
                                (position < (positionarray[i] + RUCDvariable)))
                            {
                                //Array.Resize(ref discardedPosition, discardedPosition.Length + 1);
                                _ResizeArray.IncreaseArrayInt(ref discardedPosition, 1);
                                discardedPosition[discardedPosition.Length - 1] = position;
                                Valid = false;
                                Invalidctr++;
                                break;
                            }
                        }
                    }

                    if (Valid)
                    {
                        Invalidctr = 0;
                        //Array.Resize(ref peakvalues, peakvalues.Length + 1);
                        //Array.Resize(ref positionarray, positionarray.Length + 1);
                        //Array.Resize(ref discardedPosition, discardedPosition.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref peakvalues, 1);
                        _ResizeArray.IncreaseArrayInt(ref positionarray, 1);
                        _ResizeArray.IncreaseArrayInt(ref discardedPosition, 1);

                        discardedPosition[discardedPosition.Length - 1] = position;
                        positionarray[positionarray.Length - 1] = position;
                        peakvalues[peakvalues.Length - 1] = highestPeakValue;
                    }

                    if (Invalidctr > 7)
                    {
                        break;
                    }
                } while (true);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            arlTachoPositionslist.Add(positionarray);
            return peakvalues;
        }

        private double findHighestValue(double[] Target, double exceptionalvalue, bool AllHighest)
        {
            double MaxVal = 0.0;
            double MinVal = 0.0;
            double FinalVal = 0.0;
            position = 0;
            bool valid = true;
            try
            {
                for (int i = 0; i < Target.Length; i++)
                {
                    valid = false;
                    if (exceptionalvalue != 0)
                    {
                        if ((Target[i] > MaxVal) && Target[i] < exceptionalvalue)
                        {

                            MaxVal = Target[i];
                            position = i;
                            valid = true;
                        }
                        else if ((Target[i] > MaxVal) && Target[i] == exceptionalvalue)
                        {
                            for (int j = 0; j < discardedPosition.Length; j++)
                            {
                                if ((i > (discardedPosition[j] - RUCDvariable)) &&
                                    (i < (discardedPosition[j] + RUCDvariable)))
                                    //if (i == positionarray[j])
                                {
                                    valid = false;
                                    break;
                                }
                                else
                                {
                                    valid = true;
                                }
                            }
                        }

                        if (valid)
                        {
                            MaxVal = Target[i];
                            position = i;
                        }

                        if (Target[i] < MinVal)
                        {
                            MinVal = Target[i];
                        }
                    }
                    else
                    {
                        if ((Target[i] > MaxVal))
                        {
                            MaxVal = Target[i];
                            position = i;
                        }

                        if (Target[i] < MinVal)
                        {
                            MinVal = Target[i];
                        }
                    }
                }

                MinVal = Math.Abs(MinVal);
                if (MaxVal >= MinVal)
                    FinalVal = MaxVal;
                else if (MinVal > MaxVal)
                    FinalVal = MinVal;



            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return FinalVal;
        }

        private double findHighestValue(double[] Target, int[] positionarray)
        {
            double MaxVal = 0.0;
            double MinVal = 0.0;
            double FinalVal = 0.0;
            position = 0;
            bool valid = true;
            try
            {
                for (int i = 0; i < Target.Length; i++)
                {

                    {
                        if ((Target[i] > MaxVal))
                        {
                            for (int j = 0; j < positionarray.Length; j++)
                            {
                                if (i == positionarray[j])
                                {
                                    valid = false;
                                    break;
                                }
                            }

                            if (valid)
                            {
                                MaxVal = Target[i];
                                position = i;
                            }
                        }

                        if (Target[i] < MinVal)
                        {
                            MinVal = Target[i];
                        }
                    }

                }

                MinVal = Math.Abs(MinVal);
                if (MaxVal >= MinVal)
                    FinalVal = MaxVal;
                else if (MinVal > MaxVal)
                    FinalVal = MinVal;



            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return FinalVal;
        }

        private void GenerateBalanceGraph(double _Amplitude, double _Angle, string _MeasType, string _Detection)
        {
            SetAxis();
            Region rgn1 = new Region(panel1.Bounds);
            System.Drawing.Graphics der = panel1.CreateGraphics();
            der.Clip = rgn1;
            Pen PenBlkB = new Pen(Color.Black, 1);
            Pen PenRed = new Pen(Color.Red, 2);
            RectangleF pt = der.ClipBounds;
            Pen BlkDash = new Pen(Color.Black, (float) .5);
            BlkDash.DashCap = DashCap.Triangle;
            BlkDash.DashStyle = DashStyle.Dash;
            Point pt1 = new Point();
            Point pt2 = new Point();
            PointF Ptsn1 = new PointF();
            try
            {
                double dYTopX = (double) (((double) panel1.Right) / 2);
                double dYTopY = (double) panel1.Top + OneFifty;

                double dYBottomX = (double) (((double) panel1.Right) / 2);
                double dYBottomY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                double TotalYAxis =
                    Math.Sqrt((double) (((double) (dYTopX - dYBottomX) * (double) (dYTopX - dYBottomX)) +
                                        ((double) (dYTopY - dYBottomY) * (double) (dYTopY - dYBottomY))));

                //////// X axis
                double dXLeftX = (double) (pt.Right - TotalYAxis) / 2; //(double)panel1.Left + dYTopX/2+SixtyTwo;
                double dXLeftY = (double) (((double) panel1.Bottom - ((double) panel1.Bottom / 10) -
                                            (double) panel1.Top + OneFifty) / 2);

                double dXRightX = dXLeftX + TotalYAxis;
                double dXRightY = (double) (((double) panel1.Bottom - ((double) panel1.Bottom / 10) -
                                             (double) panel1.Top + OneFifty) / 2);


                double TotalXAxis =
                    Math.Sqrt((double) (((double) (dXLeftX - dXRightX) * (double) (dXLeftX - dXRightX)) +
                                        ((double) (dXLeftY - dXRightY) * (double) (dXLeftY - dXRightY))));

                ///////// Forward Diagnol
                double dXTopRightX = (double) dXRightX;
                double dXTopRightY = (double) panel1.Top + OneFifty;

                double dXBottomLeftX = (double) dXLeftX;
                double dXBottomLeftY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);

                ////////// backward diagnol
                double dYTopLeftX = (double) dXLeftX;
                double dYTopLeftY = (double) panel1.Top + OneFifty;

                double dYBottomRightX = (double) dXRightX;
                double dYBottomRightY = (double) panel1.Bottom - ((double) panel1.Bottom / 10);



                ////Draw All Axis

                //Y Axis
                pt1 = new Point((int) dYTopX, (int) dYTopY);
                pt2 = new Point((int) dYBottomX, (int) dYBottomY);
                der.DrawLine(PenBlkB, pt1, pt2);

                //X Axis
                pt1 = new Point((int) dXLeftX, (int) dXLeftY);
                pt2 = new Point((int) dXRightX, (int) dXRightY);
                der.DrawLine(PenBlkB, pt1, pt2);
                der.DrawString(_Amplitude.ToString(), new Font("Roman", 10, FontStyle.Italic), Brushes.Black, pt2);
                ////Forward Diagnol
                //pt1 = new Point((int)dXTopRightX, (int)dXTopRightY);
                //pt2 = new Point((int)dXBottomLeftX, (int)dXBottomLeftY);
                //der.DrawLine(BlkDash, pt1, pt2);//BlkDash

                ////backward diagnol
                //pt1 = new Point((int)dYTopLeftX, (int)dYTopLeftY);
                //pt2 = new Point((int)dYBottomRightX, (int)dYBottomRightY);
                //der.DrawLine(BlkDash, pt1, pt2);//BlkDash


                der.DrawArc(PenBlkB, (float) dYTopLeftX, (float) dYTopLeftY, (float) TotalXAxis, (float) TotalYAxis, 0,
                    360);
                double rad = (double) Math.Round((TotalXAxis / 2));
                double X = (double) (rad * Math.Cos(0.0174532925 * (360 - _Angle))) +
                           (double) (dXLeftX + TotalXAxis / 2); // (pt.Right / 2);
                double Y = (double) (rad * Math.Sin(0.0174532925 * (360 - _Angle))) +
                           (double) (dYTopY + TotalYAxis / 2); // ((panel1.Bottom + OneFifty) / 2);
                pt1 = new Point((int) X, (int) Y);
                pt2 = new Point((int) (dXLeftX + TotalXAxis / 2), (int) (dYTopY + TotalYAxis / 2));

                der.DrawLine(PenRed, pt1, pt2);

                lblGrphUnitX.Text = "Detection : " + _Detection;
                lblGraphUnitY.Text = "Measurement type : " + _MeasType;
                lblXAxis.Text = "Angle : " + _Angle + " deg";
                lblYAxis.Text = "Amplitude : " + _Amplitude;


                //der.DrawArc(PenBlkB, pt, 0, 360);
                //der.DrawArc(PenBlkB, (float)pt.X / 2, (float)pt.Y / 2, (float)pt.Width / 2, (float)pt.Height / 2, 0, 360);
                ////double rad = (double)(panel1.Bottom / 4);
                //double rad = (double)(TotalXAxis / 4);


                //Pts = new PointF[0];
                //Font objFont = new Font("Roman", 10, FontStyle.Bold);
                //Brush objBrush = Brushes.Black;
                //for (int i = 0; i < 361; i++)
                //{

                //    Array.Resize(ref Pts, Pts.Length + 1);
                //    //double X = (double)(rad * Math.Cos(0.0174532925 * (360 - i))) + (double)(panel1.Bottom / 2);
                //    //double Y = (double)(rad * Math.Sin(0.0174532925 * (360 - i))) + (double)(panel1.Bottom / 2);
                //    double X = (double)(rad * Math.Cos(0.0174532925 * (360 - i))) + (double)(pt.Right / 2);
                //    double Y = (double)(rad * Math.Sin(0.0174532925 * (360 - i))) + (double)((panel1.Bottom + OneFifty) / 2);

                //    Ptsn1 = new PointF((float)X, (float)Y);

                //    if (i == 0 || i == 45 || i == 90 || i == 135 || i == 180 || i == 225 || i == 270 || i == 315)
                //    {
                //        int degree = i + 90;
                //        if (degree >= 360)
                //        {
                //            degree = degree - 360;
                //        }
                //        der.DrawString(degree.ToString() + "º", objFont, objBrush, Ptsn1);
                //    }

                //    Pts[i] = Ptsn1;
                //}

                //der.DrawCurve(BlkDash, Pts, (float)0);

                //XData = YAxis1;
                //YData = YAxis2;

                ////TotalXAxis = Math.Sqrt((double)(((double)(dXLeftX - dXRightX) * (double)(dXLeftX - dXRightX)) + ((double)(dXLeftY - dXRightY) * (double)(dXLeftY - dXRightY))));
                ////TotalYAxis = Math.Sqrt((double)(((double)(dYTopX - dYBottomX) * (double)(dYTopX - dYBottomX)) + ((double)(dYTopY - dYBottomY) * (double)(dYTopY - dYBottomY))));


                //double MainYAxisInterval1 = 0;
                //double MainYAxisInterval2 = 0;

                //float HighestX = findHighestValue(XData);
                //float HighestY = findHighestValue(YData);

                //float MaxX = HighestX * 3;// *4;
                //float MaxY = HighestY * 3;// *4;

                //MainYAxisInterval1 = (double)(MaxX / (TotalXAxis / 2));
                //MainYAxisInterval2 = (double)(MaxY / (TotalYAxis));
                //Pts = new PointF[0];
                //if (MainYAxisInterval1 != 0 && MainYAxisInterval2 != 0)
                //{
                //    for (int i = 0; i < XData.Length; i++)
                //    {
                //        Array.Resize(ref Pts, Pts.Length + 1);

                //        Ptsn1 = new PointF((float)((dXLeftX + TotalXAxis / 2) + (float)(XData[i] / MainYAxisInterval1)), (float)(dYBottomY - (float)(YData[i] / MainYAxisInterval2)));

                //        Pts[i] = Ptsn1;
                //        der.FillRectangle(objBrush, Pts[i].X - 2, Pts[i].Y - 2, 4, 4);
                //    }
                //    der.DrawCurve(PenRed, Pts, (float)0);

                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        #endregion


        #region Events

        private void openToolStripButton_Click(object sender, EventArgs e)
        {
            TreeListNode node = null;
            TreeListNode node1 = null;
            string PreviousPath = trlPlantMangerComponents.Nodes.FirstNode.GetDisplayText(0).ToString();
            string sPath = null;
            try
            {

                FolderBrowserDialog _Browse = new FolderBrowserDialog();
                //_Browse.RootFolder =   Environment.SpecialFolder.MyComputer;

                if (File.Exists(sErrorLogPath + "\\AnalLog.txt"))
                {
                    aa = new FileStream(sErrorLogPath + "\\AnalLog.txt", FileMode.Open, FileAccess.Read);
                    sr = new StreamReader(aa);
                    sPath = sr.ReadLine();
                    sr.Close();
                    _Browse.SelectedPath = sPath;
                }
                else
                {
                    _Browse.RootFolder = Environment.SpecialFolder.MyComputer;
                }

                _Browse.ShowDialog();
                sPath = _Browse.SelectedPath;

                if (string.IsNullOrEmpty(sPath))
                {
                    sPath = PreviousPath; // Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                }

                PATH = sPath;
                File.Delete(sErrorLogPath + "\\AnalLog.txt");
                trlPlantMangerComponents.Nodes.Clear();

                aa = new FileStream(sErrorLogPath + "\\AnalLog.txt", FileMode.Create, FileAccess.ReadWrite);

                sw = new StreamWriter(aa);
                sw.WriteLine(sPath);
                sw.Close();

                try
                {

                    // �-create the root node�-

                    node = trlPlantMangerComponents.AppendNode(new object[] {sPath}, null);
                    node.Tag = "Folder";
                    node.StateImageIndex = 0;

                    node1 = trlPlantMangerComponents.AppendNode(new object[] {""}, node);


                    trlPlantMangerComponents.FocusedNode = node;
                }
                catch (Exception err)
                {
                    ErrorLog_Class.ErrorLogEntry(err);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openToolStripButton_Click(null, null);
        }

        private void cmbCurSors_KeyUp(object sender, KeyEventArgs e)
        {


            //string sSelectedText = cmbCurSors.SelectedItem.ToString();
            if (SingleCrs)
            {

                cmbCurSors.Text = "Single";
            }
            else if (HarmncCrs)
            {
                cmbCurSors.Text = "Harmonic";
            }
            else if (TwDSingleSqrCrs)
            {
                cmbCurSors.Text = "Single With Square";
            }
            else if (TwoDCrossHairCursor)
            {
                cmbCurSors.Text = "Cross Hair";
            }
            else if (ThrdLn)
            {

                cmbCurSors.Text = "Line";
            }
            else if (ThrdSqr)
            {
                cmbCurSors.Text = "Square";
            }
            else if (SideBndCsr)
            {
                cmbCurSors.Text = "Sideband";
            }
            else if (SideBndCsrRatio)
            {
                cmbCurSors.Text = "SidebandRatio";
            }
            else if (SideBandTrndDrw)
            {
                cmbCurSors.Text = "SideBandTrend";
            }
            else if (PeekCursor)
            {
                cmbCurSors.Text = "PeekCursor";
            }

            else if (MultipleCrsr)
            {
                cmbCurSors.Text = "Multiple";
            }
        }

        private void btnAreaGraph_Click(object sender, EventArgs e)
        {
            try
            {
                if (BtnOk == 0)
                {
                    BtnOk = 1;
                }
                else
                    BtnOk = 0;

                //NullCursorBools();
                //panel1.Refresh();
                //if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
                //{
                //    redraw();
                //}
                //else if (GraphType == "FFT" && GraphZoomedAlready == true)
                //{
                //    redrawZoom();
                //}
                //else if (GraphType == "Orbit")
                //{
                //    redrawOrbit();
                //}
                //else
                //{
                //    ThreeDeeRedraw();
                //}
                AreaPlotSelected();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {
            //try
            //{
            //    pnlForlabel.Height = OneFifty - Fifteen;
            //    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "BALFile")
            //    {
            //        GenerateBalanceGraph(_Amplitude, _Angle, _MeasType, _Detection);
            //    }
            //    else
            //    {
            //        if (GraphType == "FFT" && GraphZoomedAlready == false)
            //        {

            //            if (!ExtraZoom)
            //            {
            //                if (!Zoom)
            //                {
            //                    bRepaint = !bRepaint;
            //                   // redraw();
            //                    bRepaint = false;
            //                }
            //                else if (Zoom)
            //                {

            //                    DrawZoomed();


            //                }
            //            }
            //            else
            //            {
            //                if (bEZ)
            //                {
            //                    DrawExtraZoom();
            //                }
            //                else
            //                {
            //                    bEZ = true;
            //                }
            //            }

            //        }
            //        else if (GraphType == "FFT" && GraphZoomedAlready == true)
            //        {

            //            DrawZoomed();
            //        }
            //        else if (GraphType == "WaterFall")
            //        {
            //            ThreeDeeRedraw();
            //        }
            //        else if (GraphType == "Orbit")
            //        {

            //            redrawOrbit();
            //        }
            //        // DA_7   code related    minor    Amit Jain  30-03-2010
            //        else if (GraphType == "Octave")
            //        {
            //            RedrawOctave();
            //        }
            //    }
            //    //panel1.Focus();
            //    // SetPageForGraphExternally("tpGraph");
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //    ErrorLogFile(ex);
            //}

        }

        private void btnTrend_Click(object sender, EventArgs e)
        {
            {

                try
                {
                    arrSelTime = new ArrayList();
                    deletedataGridRows();
                    hshDrag = new Hashtable();
                    RefreshZoomParam();
                    BtnOk = 1;
                    if (IsTrend)
                    {
                        trlPlantMangerComponents.FocusedNode = tlNode;
                        tlNode = null;
                        //IsTrend = false;
                        btnColors.Enabled = true;
                        SetIsTrend = true;
                        lblXAxis.Text = "";
                        lblYAxis.Text = "";
                        CallClearDataGridMain();
                        ShowCurrentDate();
                        NullAllGphElements();

                        DrawOriginalDI(DestbeforeTrend);

                        if (TrendType == "Time" || TrendType == "Trend")
                        {

                            //tsBtnSideBandRatio.Enabled = false;
                            //tsBtnSideBandTrend.Enabled = false;
                            //tsbtnSideBandValue.Enabled = false;
                            sidebandbuttonEnabled = false;
                        }
                        else if (TrendType == "FFT")
                        {

                            //tsBtnSideBandRatio.Enabled = true;
                            //tsBtnSideBandTrend.Enabled = true;
                            //tsbtnSideBandValue.Enabled = true;
                            sidebandbuttonEnabled = true;
                        }

                        if (TrendType == "Time")
                        {

                            tsBtnHighestFive.Enabled = false;

                            //tsBtnSideBandRatio.Enabled = false;
                            //tsBtnSideBandTrend.Enabled = false;
                            //tsbtnSideBandValue.Enabled = false;
                            sidebandbuttonEnabled = false;

                        }

                        SetGraphFeatures();
                        if (TrendType == "Demodulate")
                        {
                            //btnZoom.Enabled = false;
                            ZommingButton = false;

                            AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                            tsBtnHighestFive.Enabled = false;

                            //tsBtnSideBandRatio.Enabled = false;
                            //tsBtnSideBandTrend.Enabled = false;
                            //tsbtnSideBandValue.Enabled = false;

                            sidebandbuttonEnabled = false;
                        }
                        else
                        {
                            //btnZoom.Enabled = true;
                            ZommingButton = true;
                            AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;
                            tsBtnHighestFive.Enabled = true;
                        }

                        btnFwd.Enabled = false;
                        btnBkwd.Enabled = false;
                        ExtraZoomButtonEnabled = true; // tsBtnExtraZoom.Enabled = true;
                        WaterfallbuttonEnabled = true; // btnWaterFall.Enabled = true;
                        bbConvertToFFT.Enabled = true;

                        bbChangeXUnit.Enabled = true;
                        bbChangeYUnit.Enabled = true;
                    }
                    else
                    {
                        bbChangeXUnit.Enabled = false;
                        bbChangeYUnit.Enabled = false;

                        trendValCtr = 1;
                        tlNode = trlPlantMangerComponents.FocusedNode;
                        panel1.AllowDrop = true;
                        iclick = 1;
                        //IsTrend = true;
                        SetIsTrend = true;
                        btnColors.Enabled = false;
                        WaterfallbuttonEnabled = false; // btnWaterFall.Enabled = false;
                        bbConvertToFFT.Enabled = false;
                        //Amit Jain    DA_40	select demo2.csv and click on trend then after drag the demo2.csv file drag	code related	minor 	12-4-2010
                        //Amit Jain    DA_39	if we choose trend graph and click the privious button then if display only graph that I have drag on it,not display the original graph	code related	minor 	12-4-2010
                        CallClearDataGridMain();
                        FillLastCellWhite();

                        ClearCmbCursor();
                        bbBand.Enabled = false;
                        //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single" });
                        ArrayList CursorItems = new ArrayList();
                        CursorItems.Add("Select Cursor");

                        CursorItems.Add("Single");

                        AddToCmbCursor(CursorItems);

                        //Trending(GenDiGraph);
                        getoriginalCSVvalues();
                        //btnZoom.Enabled = false;
                        //btnUnZoom.Enabled = false;
                        ZommingButton = true;
                        AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                        tsBtnHighestFive.Enabled = false;

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        sidebandbuttonEnabled = false;
                        // tsbtnCopyValues.Enabled = false;
                        //btnAreaGraph.Enabled = false;
                        // btnCopyGraphToClipBord.Enabled = false;
                        panel1_DragDrop(null, null);
                        dataGridView2_CellContentClick(null, farziE);
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
            }

        }

        //Amit Jain DA_45	click the demo1.csv file after that click the waterfall button then after click the click the demo2.csv file demo2 not focus ,ok I click the waterfall again then after click the demo2 graph not display	code related	minor	16/4/2010
        private void panel1_DragDrop(object sender, DragEventArgs e)
        {
            //string source = null;
            //string Dest = null;
            //TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
            //string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
            //string[] ColorCode = { "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352" };

            //try
            //{

            //    dataGridViewImageColumn1.ValuesAreIcons = false;
            //    if (sTag == "CSVFile")
            //    {
            //        //Amit Jain DA_45	click the demo1.csv file after that click the waterfall button then after click the click the demo2.csv file demo2 not focus ,ok I click the waterfall again then after click the demo2 graph not display	code related	minor	16/4/2010        
            //        NODragDropCTR=0;

            //        source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
            //        bool Same = ReadCSVfileForData(source);
            //        if (Same)
            //        {

            //            hshDrag.Add(selectedNode, trendValCtr);
            //            Dest = AppDomain.CurrentDomain.BaseDirectory + trendValCtr.ToString() + ".csv";
            //            if (File.Exists(Dest))
            //            {
            //                File.SetAttributes(Dest, FileAttributes.Normal);
            //            }
            //            File.Copy(source, Dest, true);


            //            string s = trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString() + "<>" + trendValCtr.ToString();

            //            dataGridView2.Rows.Add(1);
            //            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
            //            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
            //            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value = objlistimg.Images[trendValCtr];
            //            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = ColorCode[trendValCtr].ToString();

            //            trendValCtr++;
            //        }
            //        else
            //        {
            //            MessageBoxEx.Show("Selected file does not have the same parameters");
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //    if (ex.Message.Contains("Item has already been added"))
            //    {
            //        MessageBoxEx.Show("Item has already been added");
            //    }
            //}
        }

        private void trlPlantMangerComponents_BeforeDragNode(object sender, BeforeDragNodeEventArgs e)
        {

        }

        private void trlPlantMangerComponents_DragLeave(object sender, EventArgs e)
        {

        }

        private void trlPlantMangerComponents_DragOver(object sender, DragEventArgs e)
        {

        }

        private void panel1_DragEnter(object sender, DragEventArgs e)
        {
            //if (btnTrend.Text.ToString() == "Untrend" || IsWaterfall)
            //{
            //    e.Effect = DragDropEffects.All;
            //}
            //else
            //{
            //    e.Effect = DragDropEffects.None;
            //}



        }

        private void CalculatingPhase(double[] x_data, int counter)
        {
            //RPMtoDisplay[(int)arlSelectedDataGridNumber[CtrSelectedCraph]].ToString();
            //FinalTachoPositions
            try
            {

                double PhaseSum = 0;
                double PhaseAVG = 0;
                double PhaseCount = 0;
                int[] tachopositionforselected = (int[]) FinalTachoPositions[(int) arlSelectedDataGridNumber[counter]];
                for (int i = 0; i < lowerPeak.Count - 1; i++)
                {
                    int start_index = (int) lowerPeak[i];
                    int end_index = (int) lowerPeak[i + 1];
                    double timeofwave = x_data[end_index] - x_data[start_index];
                    int tachopeekfortheselectedwave = 0;
                    for (int j = 0; j < tachopositionforselected.Length; j++)
                    {
                        if ((int) tachopositionforselected[j] >= start_index &&
                            (int) tachopositionforselected[j] <= end_index)
                        {
                            tachopeekfortheselectedwave = (int) tachopositionforselected[j];
                            break;
                        }
                    }

                    if (tachopeekfortheselectedwave != 0)
                    {
                        double timeofTachopeek = x_data[tachopeekfortheselectedwave] - x_data[start_index];
                        double phaseangle = (double) (360 * timeofTachopeek) / timeofwave;
                        while (phaseangle > 360)
                        {
                            phaseangle = phaseangle - 360;
                        }

                        PhaseCount++;
                        PhaseSum += phaseangle;
                    }
                }

                PhaseAVG = PhaseSum / PhaseCount;
                PhaseAVG = Math.Round(PhaseAVG);
                //MessageBoxEx.Show("Phase :" + PhaseAVG.ToString());
                PhasetoDisplay.Add(PhaseAVG);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void btnBkwd_Click(object sender, EventArgs e)
        {
            try
            {
                //panel1.Refresh();
                //if (GraphType == "FFT")
                //{
                //    redraw();
                //    //redraw();
                //}
                //else
                //    ThreeDeeRedraw();


                DeletePreviousAreaOfWaterFall();
                IncrementSelectedGraphCounter = true;
                DrawBkwd();
                if (BtnOk == 0)
                {
                    AreaPlotSelected();
                }
                // SetOverallLabelValue(arlstSelectedTime[CtrSelectedCraph].ToString());

                //string sInstName = GetInstrumentName();
                //if (sInstName == "DI-460")
                //{
                //    TrendingButtonsSet();
                //}
                //    SetGraphFeatures();
                //    comboBoxEdit1.Enabled = false;
                //    comboBoxEdit111.Enabled = false;
                //}
                if (FaultFreq)
                {
                    DrawFaultFreq();
                }

                if (ShowRpmRatio)
                {
                    DrawRpm();
                }

                if (BearingFaultFrequency)
                {
                    DrawBearingFaultFrequency();
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void btnFwd_Click(object sender, EventArgs e)
        {
            try
            {
                //if (GraphType != "FFT")
                //{
                //    ThreeDeeRedraw();
                //}
                //panel1.Refresh();

                //if (GraphType == "FFT")
                //{
                //    redraw();
                //    //redraw();
                //}
                //else
                //    ThreeDeeRedraw();


                DeletePreviousAreaOfWaterFall();
                IncrementSelectedGraphCounter = true;
                FwdBtnClked();
                if (BtnOk == 0)
                {
                    AreaPlotSelected();
                }

                if (FaultFreq)
                {
                    DrawFaultFreq();
                }

                if (ShowRpmRatio)
                {
                    DrawRpm();
                }

                if (BearingFaultFrequency)
                {
                    DrawBearingFaultFrequency();
                }

                //SetOverallLabelValue(arlstSelectedTime[CtrSelectedCraph].ToString());
                //string sInstName = GetInstrumentName();
                //if (sInstName == "DI-460")
                //{
                //    TrendingButtonsSet();
                //}
                //string sInstName = GetInstrumentName();
                //if (sInstName == "DI-460")
                //{
                //    SetGraphFeatures();
                //    comboBoxEdit1.Enabled = false;
                //    comboBoxEdit111.Enabled = false;
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void tsbtnCopyValues_Click(object sender, EventArgs e)
        {
            try
            {
                if (!IsTrend)
                {
                    CopyValuestoClipBoard(x, y);
                }
                else if (IsTrend)
                {
                    switch (CtrSelectedCraph)
                    {
                        case 0:
                            CopyValuestoClipBoard(x, y);
                            break;
                        case 1:
                            CopyValuestoClipBoard(x1, y1);
                            break;
                        case 2:
                            CopyValuestoClipBoard(x2, y2);
                            break;
                        case 3:
                            CopyValuestoClipBoard(x3, y3);
                            break;
                        case 4:
                            CopyValuestoClipBoard(x4, y4);
                            break;
                        case 5:
                            CopyValuestoClipBoard(x5, y5);
                            break;
                        case 6:
                            CopyValuestoClipBoard(x6, y6);
                            break;
                        case 7:
                            CopyValuestoClipBoard(x7, y7);
                            break;
                        default:
                            CopyValuestoClipBoard(x, y);
                            break;

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void tsBtnExtraZoom_Click(object sender, EventArgs e)
        {

            try
            {
                //KeyEventArgs objkey = new KeyEventArgs(Keys.NumLock);
                //PressKeyboardButton(Keys.NumLock);
                bEZ = false;
                //Amit Jain    DA_48	click the fault frequency ,fault frequency display in graph if click band alarm then fault frequcncy also display in graph when we press key then it visble false	code related	minor	19/4/2010
                FaultFreq = false;
                BearingFaultFrequency = false;
                ShowRpmRatio = false;
                panel1.Refresh();
                Thread.Sleep(20);
                if (GraphType == "FFT" && GraphZoomedAlready == false) //if (GraphType == "FFT")
                {
                    redraw();
                }
                else if (GraphType == "FFT" && GraphZoomedAlready == true)
                {
                    redrawZoom();
                }
                else if (GraphType == "Orbit")
                {
                    redrawOrbit();
                }
                // DA_7   code related    minor    Amit Jain  30-03-2010
                else if (GraphType == "Octave")
                {
                    RedrawOctave();
                }
                else
                {
                    ThreeDeeRedraw();
                }

                PtsExtraZoomed = null;
                LastYAxis = 0.0;
                PointLenth = 0;
                LastXAxis = 0.0;
                ExtraZoom = !ExtraZoom;
                // DA_11    Code Related    minor   Amit Jain  30-03-2010
                if (ExtraZoom && GraphType == "FFT")
                {
                    toolStripComboBox1.Enabled = false;
                    trlPlantMangerComponents.Enabled = false;
                    StoreCursorStartInterval = CursorStartInterval;
                    StoreMainYAxisInterval = MainYAxisInterval;
                    string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                    CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
                    WaterfallbuttonEnabled = false; // btnWaterFall.Enabled = false;
                    //dataGridView2.Focus();

                    panel1.Focus();
                    SetValZero = false;
                    NullCursorBools();
                    AreaPlot = false;
                    BtnOk = 1;
                    UpdateNUMLock();
                    DisableALL();
                    DrawBandRegion(x, y, "J");
                    if (GraphType == "FFT" && GraphZoomedAlready == false) //if (GraphType == "FFT")
                    {
                        redraw();
                    }
                    else if (GraphType == "FFT" && GraphZoomedAlready == true)
                    {
                        redrawZoom();
                    }
                    else if (GraphType == "Orbit")
                    {
                        redrawOrbit();
                    }
                    // DA_7   code related    minor    Amit Jain  30-03-2010
                    else if (GraphType == "Octave")
                    {
                        RedrawOctave();
                    }
                    else
                    {
                        ThreeDeeRedraw();
                    }

                    btnXUnitConverter.Enabled = false;



                    string HighAlValue = null;
                    string LowAlValue = null;
                    string Freq = null;
                    string prevFreq = null;
                    string displayed = null;
                    double HighestPeakinArea = 0;
                    double HighestPeakinAreaAt = 0;
                    double TempPeakinArea = 0;

                    string[] BndAlrmsHigh = null;
                    string[] BndAlrmsLow = null;
                    string[] BndAlrmsFreq = null;
                    ArrayList BandValuetoDisplay = new ArrayList();
                    dataGridView1.Rows.Clear();

                    for (int i = 0; i < dataGridView1.Rows.Count - 1;)
                    {
                        dataGridView1.Rows.RemoveAt(0);
                    }

                    for (int i = 0; i < dataGridView1.Columns.Count;)
                    {
                        dataGridView1.Columns.RemoveAt(0);
                    }

                    for (int i = 0; i < 5; i++)
                    {
                        switch (i)
                        {
                            case 0:
                            {
                                dataGridView1.Columns.Add("ColXValue", "X Value(Highest Peak)");
                                break;
                            }
                            case 1:
                            {
                                dataGridView1.Columns.Add("ColYValue", "Y Value(Highest Peak)");
                                break;
                            }
                            case 2:
                            {
                                dataGridView1.Columns.Add("ColBandHighValue", "HighValue");

                                break;
                            }
                            case 3:
                            {
                                dataGridView1.Columns.Add("ColBandLowerValue", "LowValue");
                                break;
                            }
                            case 4:
                            {
                                dataGridView1.Columns.Add("ColBandValue", "BandValue(Hz)");
                                break;
                            }
                        }

                    }

                    // string instname = GetInstName();
                    //if (instname == "DI-460")
                    {
                        BndAlrmsHigh = new string[0];
                        BndAlrmsLow = new string[0];
                        BndAlrmsFreq = new string[0];
                        //BndAlrms = GetBandAlarmForDI();
                        for (int i = 0; i < dgvDiBA.RowCount - 1; i++)
                        {
                            //Array.Resize(ref BndAlrmsLow, BndAlrmsLow.Length + 1);
                            //Array.Resize(ref BndAlrmsHigh, BndAlrmsHigh.Length + 1);
                            //Array.Resize(ref BndAlrmsFreq, BndAlrmsFreq.Length + 1);

                            _ResizeArray.IncreaseArrayString(ref BndAlrmsLow, 1);
                            _ResizeArray.IncreaseArrayString(ref BndAlrmsHigh, 1);
                            _ResizeArray.IncreaseArrayString(ref BndAlrmsFreq, 1);


                            BndAlrmsFreq[BndAlrmsFreq.Length - 1] = dgvDiBA.Rows[i].Cells[0].Value.ToString();
                            BndAlrmsHigh[BndAlrmsHigh.Length - 1] = dgvDiBA.Rows[i].Cells[1].Value.ToString();
                            BndAlrmsLow[BndAlrmsLow.Length - 1] = dgvDiBA.Rows[i].Cells[2].Value.ToString();
                        }

                        if (BndAlrmsFreq.Length > 0)
                        {
                            dataGridView1.Rows.Add(BndAlrmsFreq.Length);

                            for (int i = 0; i < BndAlrmsFreq.Length; i++)
                            {
                                BandValuetoDisplay = new ArrayList();
                                Freq = BndAlrmsFreq[i].ToString();
                                if (lblGrphUnitX.Text.ToString().Contains("CPM"))
                                {
                                    Freq = (Convert.ToDouble(Freq) * 60).ToString();
                                }

                                HighAlValue = BndAlrmsHigh[i].ToString();
                                LowAlValue = BndAlrmsLow[i].ToString();
                                if (i == 0)
                                {
                                    prevFreq = "0";
                                }
                                else
                                {
                                    prevFreq = BndAlrmsFreq[i - 1].ToString();
                                    if (lblGrphUnitX.Text.ToString().Contains("CPM"))
                                    {
                                        prevFreq = (Convert.ToDouble(prevFreq) * 60).ToString();
                                    }
                                }

                                TempPeakinArea = 0;
                                HighestPeakinArea = 0;
                                HighestPeakinAreaAt = 0;

                                for (int j = 0; j < YSelected.Length; j++)
                                {

                                    if (Convert.ToDouble(XSelected[j]) >= Convert.ToDouble(prevFreq))
                                    {
                                        if (Convert.ToDouble(XSelected[j]) <= Convert.ToDouble(Freq) &&
                                            Convert.ToDouble(XSelected[j]) <=
                                            Convert.ToDouble(XSelected[XSelected.Length - 2]))
                                        {
                                            if (Convert.ToDouble(YSelected[j]) > Convert.ToDouble(LowAlValue))
                                            {


                                                TempPeakinArea = Convert.ToDouble(YSelected[j]);
                                                if (j < YSelected.Length - 1)
                                                    if (TempPeakinArea > Convert.ToDouble(YSelected[j - 1]) &&
                                                        TempPeakinArea > Convert.ToDouble(YSelected[j + 1]))

                                                        if (TempPeakinArea > HighestPeakinArea)
                                                        {
                                                            HighestPeakinArea = TempPeakinArea;
                                                            //if (bXunitConvert)
                                                            //{
                                                            //    //if (IsAlreadyCPM)
                                                            //    //{
                                                            //    //    HighestPeakinAreaAt = Convert.ToDouble(XSelected[j]);
                                                            //    //}
                                                            //    //else
                                                            //    {
                                                            //        HighestPeakinAreaAt = Convert.ToDouble((XSelected[j]));//* 60
                                                            //    }
                                                            //}
                                                            //else
                                                            {
                                                                //if (IsAlreadyCPM)
                                                                //{
                                                                //    HighestPeakinAreaAt = Convert.ToDouble(XSelected[j] / 60);
                                                                //}
                                                                //else
                                                                {
                                                                    HighestPeakinAreaAt =
                                                                        Convert.ToDouble(XSelected[j]);
                                                                }
                                                            }
                                                        }

                                                if (i == 0)
                                                {
                                                    prevFreq = "0";
                                                }
                                                else
                                                {
                                                    prevFreq = BndAlrmsFreq[i - 1].ToString();
                                                }

                                                //Calculated = displayed.ToString() + "//" + arlstFreqsPA[k] + "//" + HighestPeakinAreaAt.ToString() + "///" + HighestPeakinArea.ToString() + "//" + prevFreq + "|||";
                                            }
                                        }
                                        else
                                        {
                                            if (HighestPeakinAreaAt != 0.0)
                                            {
                                                BandValuetoDisplay.Add(
                                                    HighestPeakinAreaAt.ToString() + "//" +
                                                    HighestPeakinArea.ToString());
                                            }

                                            break;
                                        }
                                    }

                                }
                                //if (Calculated != null)
                                //{
                                //    Notice.Append(Calculated);
                                //}


                                //for (int j = 0; j < BandValuetoDisplay.Count; j++)
                                if (BandValuetoDisplay.Count > 0)
                                {
                                    string[] bandxy = BandValuetoDisplay[0].ToString().Split(new string[] {"//"},
                                        StringSplitOptions.RemoveEmptyEntries);

                                    dataGridView1.Rows[i].Cells[0].Value = bandxy[0];
                                    dataGridView1.Rows[i].Cells[1].Value = bandxy[1];
                                }

                                dataGridView1.Rows[i].Cells[2].Value = BndAlrmsHigh[i].ToString();
                                dataGridView1.Rows[i].Cells[3].Value = BndAlrmsLow[i].ToString();
                                dataGridView1.Rows[i].Cells[4].Value = BndAlrmsFreq[i].ToString();


                            }
                        }
                    }









                    tpData.PageEnabled = false;
                    tpOptions.PageEnabled = false;
                    //Amit Jain    DA_18	open analyser then click the bandalarm after that take any cursor ,cursor is not moving. 	code related	minor 	2-4-2010
                    //Amit Jain    DA_19	open analyser then take cursor, cursor is moving after that click the bandalarm then  take any cursor ,cursor is not moving. 	code related	minor 	2-4-2010
                    //Amit Jain    DA_27	if you click Demo2.csv then click the band alarm after that click the zoom and create zoom ,zoom will not create. 	code related	minor 	2-4-2010

                    bbZoom.Enabled = false;
                    bcmCursors.Enabled = false;
                    bbOctave.Enabled = false;
                    bbConvertToFFT.Enabled = false;
                    bbOriginal.Enabled = false;
                    bbCepstrum.Enabled = false;
                    //bbRPM.Enabled = false;
                    FFbuttonEnabled = false;
                }
                else
                {
                    //Amit Jain    DA_18	open analyser then click the bandalarm after that take any cursor ,cursor is not moving. 	code related	minor 	2-4-2010
                    //Amit Jain    DA_19	open analyser then take cursor, cursor is moving after that click the bandalarm then  take any cursor ,cursor is not moving. 	code related	minor 	2-4-2010
                    //Amit Jain    DA_27	if you click Demo2.csv then click the band alarm after that click the zoom and create zoom ,zoom will not create. 	code related	minor 	2-4-2010

                    //bbRPM.Enabled = true;
                    FFbuttonEnabled = true;
                    bbCepstrum.Enabled = true;
                    bbOriginal.Enabled = true;
                    bbZoom.Enabled = true;
                    bcmCursors.Enabled = true;
                    bbOctave.Enabled = true;
                    bbConvertToFFT.Enabled = true;
                    ExtraZoom = false;


                    tpData.PageEnabled = true;
                    tpOptions.PageEnabled = true;
                    dataGridView1.Rows.Clear();
                    WaterfallbuttonEnabled = true; // btnWaterFall.Enabled = true;
                    for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                    {
                        dataGridView1.Rows.RemoveAt(0);
                    }

                    for (int i = 0; i < dataGridView1.Columns.Count;)
                    {
                        dataGridView1.Columns.RemoveAt(0);
                    }

                    for (int i = 0; i < 2; i++)
                    {
                        switch (i)
                        {
                            case 0:
                            {
                                dataGridView1.Columns.Add("ColXValue", "X Value");
                                break;
                            }
                            case 1:
                            {
                                dataGridView1.Columns.Add("ColYValue", "Y Value");
                                break;
                            }
                        }
                    }

                    trlPlantMangerComponents.Enabled = true;
                    toolStripComboBox1.Enabled = true;
                    RestoreAll();
                    btnXUnitConverter.Enabled = true;
                    ThrDCurCtr = 0;
                    CursorStartInterval = StoreCursorStartInterval;
                    MainXAxisInterval = StoreCursorStartInterval;
                    MainYAxisInterval = StoreMainYAxisInterval;
                    PtsSelected = new PointF[Pts.Length];
                    PtsSelected = Pts;
                    //panel1.Refresh();
                    //if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
                    //{
                    //    redraw();
                    //}
                    //else if (GraphType == "FFT" && GraphZoomedAlready == true)
                    //{
                    //    redrawZoom();
                    //}
                    //else if (GraphType == "Orbit")
                    //{
                    //    redrawOrbit();
                    //}
                    //else
                    //{
                    //    ThreeDeeRedraw();
                    //}
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void tsBtnSideBandRatio_Click(object sender, EventArgs e)
        {
            try
            {
                SideBandRatio objRatio = new SideBandRatio();

                objRatio.ShowDialog();
                iConstSBRatio = objRatio._Value;
                //if (ExtraZoom)
                {

                    TrendRatio =
                        "1/" + Convert.ToString(
                            iConstSBRatio); //tbSideBandRatio.Text = "1/" + Convert.ToString(iConstSBRatio);
                }
                //else
                //{
                //    if (Pts != null)
                //    {
                //        //splitContainerControl1.Visible = true;
                //        panel1.Visible = true;

                //        if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
                //        {
                //            redraw();
                //        }
                //        else if (GraphType == "FFT" && GraphZoomedAlready == true)
                //        {
                //            redrawZoom();
                //        }
                //        else if (GraphType == "Orbit")
                //        {
                //            redrawOrbit();
                //        }
                //        // DA_7   code related    minor    Amit Jain  30-03-2010
                //        else if (GraphType == "Octave")
                //        {
                //            RedrawOctave();
                //        }
                //        else
                //        {
                //            ThreeDeeRedraw();
                //        }
                //        TrendRatio = "1/" + Convert.ToString(iConstSBRatio); //tbSideBandRatio.Text = "1/" + Convert.ToString(iConstSBRatio);
                //    }
                //    else
                //    {
                //        //splitContainerControl1.Visible = false;
                //        panel1.Visible = true;
                //    }
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                frmAboutus aboutus = new frmAboutus();
                aboutus.ShowDialog();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void tsbtnSideBandValue_Click(object sender, EventArgs e)
        {
            SideBandValue objSideBand = new SideBandValue();

            objSideBand.ShowDialog();
            iConstSBValue = objSideBand._Value;
            if (ExtraZoom)
            {
                SBValue = Convert.ToString(iConstSBValue);
            }
            else
            {
                //if (Pts != null)
                {
                    ////splitContainerControl1.Visible = true;
                    //panel1.Visible = true;

                    //if (GraphType == "FFT" && GraphZoomedAlready == false)//if (GraphType == "FFT")
                    //{
                    //    redraw();
                    //}
                    //else if (GraphType == "FFT" && GraphZoomedAlready == true)
                    //{
                    //    redrawZoom();
                    //}
                    //else if (GraphType == "Orbit")
                    //{
                    //    redrawOrbit();
                    //}
                    //// DA_7   code related    minor    Amit Jain  30-03-2010
                    //else if (GraphType == "Octave")
                    //{
                    //    RedrawOctave();
                    //}
                    //else
                    //{
                    //    ThreeDeeRedraw();
                    //}
                    SBValue = Convert.ToString(
                        iConstSBValue); //tbSideBandPercentage.Text = Convert.ToString(iConstSBValue);
                }
                //else
                //{
                //    //splitContainerControl1.Visible = false;
                //    panel1.Visible = true;
                //}
            }

        }

        private void btnXUnitConverter_Click(object sender, EventArgs e)
        {
            // bXunitConvert = !bXunitConvert;
            if (lblGrphUnitX.Text.ToString() == "X Unit : Hz")
            {
                lblGrphUnitX.Text = "X Unit : CPM";
                //bXunitConvert = true;
            }
            else
            {
                lblGrphUnitX.Text = "X Unit : Hz";
                //bXunitConvert = false;
            }

            panel1.Refresh();

            redraw();
        }

        void doc_PrintPage(object sender, PrintPageEventArgs e)
        {
            try
            {
                float fx = e.MarginBounds.Left;
                float fy = e.MarginBounds.Top;
                float linesPerPage = 0;



                int iCount = dataGridView1.RowCount;


                if (!IsImageDrawn)
                {
                    string[] strlabelX = lblGrphUnitX.Text.ToString()
                        .Split(new string[] {":"}, StringSplitOptions.RemoveEmptyEntries);
                    string[] strlabelY = lblGraphUnitY.Text.ToString()
                        .Split(new string[] {":"}, StringSplitOptions.RemoveEmptyEntries);

                    arlstXY = new ArrayList();
                    if (iCount > 0)
                    {
                        for (int i = 0; i < dataGridView1.RowCount; i++)
                        {
                            arlstXY.Add("X : " + dataGridView1.Rows[i].Cells[0].Value.ToString() +
                                        strlabelX[1].ToString() + "\t" + " Y : " +
                                        dataGridView1.Rows[i].Cells[1].Value.ToString() +
                                        lblUnitstring.Text.ToString());
                        }

                        //linesPerPage = e.MarginBounds.Height / bmpheight;
                        e.HasMorePages = true;
                    }

                    IsImageDrawn = true;
                    e.Graphics.DrawImage(Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "IadeptClip.jpg"), fx,
                        fy, (float) e.PageSettings.PaperSize.Width - fx, (float) bmpheight);
                    e.Graphics.DrawString(strlabelX[1].ToString(), new Font("Arial", 12, FontStyle.Bold), Brushes.Black,
                        (float) (e.PageBounds.Width / 2), fy + bmpheight + 20);

                    if ((SingleCrs || TwoDCrossHairCursor || TwDSingleSqrCrs) && iCount > 0)
                    {
                        e.Graphics.DrawString("Single Cursor Value", new Font("Times New Roman", 12), Brushes.Black, fx,
                            fy + bmpheight + 40);
                        e.Graphics.DrawString(arlstXY[0].ToString(), new Font("Times New Roman", 10), Brushes.Black, fx,
                            fy + bmpheight + 60);
                        e.HasMorePages = false;
                    }
                }
                else
                {

                    // e.HasMorePages = false;
                    if (HarmncCrs)
                    {
                        e.Graphics.DrawString("Harmonic Cursor Values", new Font("Times New Roman", 12), Brushes.Black,
                            fx, fy);

                    }


                    int idist = 0;
                    for (int i = ivalctr; i < arlstXY.Count; i++)
                    {
                        e.Graphics.DrawString((i + 1).ToString() + "\t" + arlstXY[i].ToString(),
                            new Font("Times New Roman", 10), Brushes.Black, fx, fy + ((idist + 2) * 20));
                        ivalctr++;
                        idist++;
                        if (ivalctr >= (PageCtr * 45))
                        {
                            PageCtr++;
                            e.HasMorePages = true;
                            break;
                        }
                        else
                        {
                            e.HasMorePages = false;
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void btnCopyGraphToClipBord_Click(object sender, EventArgs e)
        {
            try
            {
                CopyGraphToClipBord();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                //if (m_objHaspCheck.ThreadState == System.Threading.ThreadState.Stopped)
                //{
                //    m_objHaspCheck = new Thread(new ThreadStart(CheckHasp));
                //    m_objHaspCheck.Start();
                //}



                if (GraphType == "FFT" && GraphZoomedAlready == false)
                {
                    if (!ExtraZoom)
                    {
                        //if (!Zoom)
                        //{
                        //    redraw();
                        //}
                        //else if (Zoom)
                        //{
                        //    DrawZoomed();
                        //}
                    }
                    else
                    {
                        DrawExtraZoom();
                    }


                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void dgvDiBA_Leave(object sender, EventArgs e)
        {
            XmlAttribute xaFreq = null;
            XmlAttribute xaValueH = null;
            XmlAttribute xaValueL = null;
            XmlAttribute xaFile = null;
            string sOldFreq = null;
            string sNewFreq = null;
            XmlNodeList xnlValueNodes = null;
            string[] sarrFreq = new string[0];
            string[] sarrValue = new string[0];
            bool bError = false;
            int iRowCount = 0;
            int rownumber = 0;
            try
            {

                iRowCount = dgvDiBA.Rows.Count;

                if (iRowCount > 2)
                {
                    for (int i = 0; i < iRowCount - 1; i++)
                    {
                        if (i < iRowCount - 2)
                        {
                            sOldFreq = "0";
                            sNewFreq = "0";
                            try
                            {
                                sOldFreq = dgvDiBA.Rows[i].Cells[0].Value.ToString();
                                sNewFreq = dgvDiBA.Rows[i + 1].Cells[0].Value.ToString();
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                            }

                            if (Convert.ToDouble(sNewFreq) - Convert.ToDouble(sOldFreq) <= 0)
                            {

                                MessageBoxEx.Show("Enter Freq in Ascending order", "Error");
                                bError = true;
                                dgvDiBA.Focus();
                                break;
                            }
                            else
                            {

                                bError = false;
                            }
                        }

                        if (Convert.ToDouble(dgvDiBA.Rows[i].Cells[2].Value) -
                            Convert.ToDouble(dgvDiBA.Rows[i].Cells[1].Value) >= 0)
                        {

                            MessageBoxEx.Show("Enter high value in alarm1 and low value in alarm2");
                            bError = true;
                            dgvDiBA.Focus();
                        }
                        else
                        {
                            bError = false;
                        }

                    }

                }
                else if (iRowCount > 1)
                {
                    if (Convert.ToDouble(dgvDiBA.Rows[0].Cells[2].Value) -
                        Convert.ToDouble(dgvDiBA.Rows[0].Cells[1].Value) >= 0)
                    {

                        MessageBoxEx.Show("Enter high value in alarm1 and low value in alarm2");
                        bError = true;
                        dgvDiBA.Focus();
                    }
                    else
                    {
                        bError = false;
                    }
                }

                if (!bError)
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    xnlValueNodes = null;
                    if (!File.Exists(sErrorLogPath + "\\BA.XML"))
                    {

                        m_xdDocument = new XmlDocument();
                        XmlNode xnBand = m_xdDocument.CreateElement("Band");

                        m_xdDocument.AppendChild(xnBand);
                        m_xdDocument.Save(sErrorLogPath + "\\BA.XML");


                    }

                    {
                        m_xdDocument.Load(sErrorLogPath + "\\BA.XML");
                        string sXPath = "//Band/File";
                        string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                        XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                        if (xnFile != null)
                        {
                            xnFile.ParentNode.RemoveChild(xnFile);

                        }

                        {
                            XmlNode xnBand = m_xdDocument.SelectSingleNode("//Band");
                            XmlNode xnFilePath = m_xdDocument.CreateElement("File");
                            xaFile = m_xdDocument.CreateAttribute("Path");
                            xaFile.Value =
                                GetPath(trlPlantMangerComponents
                                    .FocusedNode); //trlPlantMangerComponents.FocusedNode.ParentNode.GetDisplayText(0).ToString()+"\\"+trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                            xnFilePath.Attributes.Append(xaFile);

                            for (int i = 0; i < iRowCount - 1; i++)
                            {
                                XmlNode xnValues = m_xdDocument.CreateElement("Values");
                                xaFreq = m_xdDocument.CreateAttribute("Freq");
                                xaFreq.Value = dgvDiBA.Rows[i].Cells[0].Value.ToString();
                                xaValueH = m_xdDocument.CreateAttribute("ValueHigh");
                                xaValueH.Value = dgvDiBA.Rows[i].Cells[1].Value.ToString();
                                xaValueL = m_xdDocument.CreateAttribute("ValueLow");
                                xaValueL.Value = dgvDiBA.Rows[i].Cells[2].Value.ToString();
                                xnValues.Attributes.Append(xaFreq);
                                xnValues.Attributes.Append(xaValueH);
                                xnValues.Attributes.Append(xaValueL);
                                xnFilePath.AppendChild(xnValues);
                            }

                            xnBand.AppendChild(xnFilePath);
                            //m_xdDocument.AppendChild(xnBand);
                        }
                        m_xdDocument.Save(sErrorLogPath + "\\BA.XML");
                    }

                    //XmlDocument m_xdDocument = new XmlDocument();


                }
                else
                {
                    GetBandData();
                    //dgvDiBA.Rows.Clear();

                    //for (int i = 0; i < dgvDiBA.Rows.Count - 1; i++)
                    //{
                    //    dgvDiBA.Rows.RemoveAt(0);
                    //}

                    //xnlValueNodes = null;
                    //sarrFreq = new string[0];
                    //string[] sarrValueH = new string[0];
                    //string[] sarrValueL = new string[0];
                    //if (File.Exists(sErrorLogPath + "\\BA.XML"))
                    //{
                    //    XmlDocument m_xdDocument = new XmlDocument();
                    //    m_xdDocument.Load(sErrorLogPath + "\\BA.XML");
                    //    string sXPath = "//Band/Values";
                    //    xnlValueNodes = m_xdDocument.SelectNodes(sXPath);

                    //    foreach (XmlNode xnValueNode in xnlValueNodes)
                    //    {
                    //        Array.Resize(ref sarrFreq, sarrFreq.Length + 1);
                    //        Array.Resize(ref sarrValueH, sarrValueH.Length + 1);
                    //        Array.Resize(ref sarrValueL, sarrValueL.Length + 1);
                    //        sarrFreq[sarrFreq.Length - 1] = xnValueNode.Attributes["Freq"].Value;
                    //        sarrValueH[sarrValueH.Length - 1] = xnValueNode.Attributes["ValueHigh"].Value;
                    //        sarrValueL[sarrValueL.Length - 1] = xnValueNode.Attributes["ValueLow"].Value;
                    //    }

                    //    if (sarrFreq.Length > 0)
                    //    {
                    //        dgvDiBA.Rows.Add(sarrFreq.Length);
                    //        for (int i = 0; i < sarrFreq.Length; i++)
                    //        {
                    //            dgvDiBA.Rows[i].Cells[0].Value = sarrFreq[i];
                    //            dgvDiBA.Rows[i].Cells[1].Value = sarrValueH[i];
                    //            dgvDiBA.Rows[i].Cells[2].Value = sarrValueL[i];
                    //        }
                    //    }
                    //}
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                MessageBoxEx.Show("Error in Entry");
            }

        }

        private void btnWaterFall_Click(object sender, EventArgs e)
        {





            try
            {
                arrSelTime = new ArrayList();
                deletedataGridRows();
                hshDrag = new Hashtable();
                RefreshZoomParam();
                BtnOk = 1;
                if (IsWaterfall)
                {
                    trlPlantMangerComponents.FocusedNode = tlNode;
                    tlNode = null;
                    IsWaterfall = false;
                    btnColors.Enabled = true;
                    //btnTrend.Text = "Trend";
                    lblXAxis.Text = "";
                    lblYAxis.Text = "";
                    CallClearDataGridMain();
                    ShowCurrentDate();
                    NullAllGphElements();

                    DrawOriginalDI(DestbeforeTrend);

                    if (TrendType == "Time" || TrendType == "Trend")
                    {

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        sidebandbuttonEnabled = false;
                    }
                    else if (TrendType == "FFT" || TrendType == "Power")
                    {

                        //tsBtnSideBandRatio.Enabled = true;
                        //tsBtnSideBandTrend.Enabled = true;
                        //tsbtnSideBandValue.Enabled = true;
                        //bbFaultFreq.Enabled = true;
                        //bbRPM.Enabled = true;
                        FFbuttonEnabled = true;
                        sidebandbuttonEnabled = true;
                    }

                    if (TrendType == "Time")
                    {

                        tsBtnHighestFive.Enabled = false;

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        sidebandbuttonEnabled = false;

                    }

                    SetGraphFeatures();
                    if (TrendType == "Demodulate")
                    {
                        //btnZoom.Enabled = false;
                        ZommingButton = false;

                        AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                        tsBtnHighestFive.Enabled = false;

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;

                        sidebandbuttonEnabled = false;
                    }
                    else
                    {
                        //btnZoom.Enabled = true;
                        ZommingButton = true;
                        AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;
                        tsBtnHighestFive.Enabled = true;
                    }

                    btnFwd.Enabled = false;
                    btnBkwd.Enabled = false;
                    ExtraZoomButtonEnabled = true; // tsBtnExtraZoom.Enabled = true;
                    TrendButtonEnabled = true; // btnTrend.Enabled = true;
                    btnXUnitConverter.Enabled = true;
                    bbConvertToFFT.Enabled = true;
                    FFbuttonEnabled = true;

                    bbChangeXUnit.Enabled = true;
                    bbChangeYUnit.Enabled = true;
                }
                else
                {
                    bbChangeXUnit.Enabled = false;
                    bbChangeYUnit.Enabled = false;

                    TrendButtonEnabled = false; // btnTrend.Enabled = false;
                    btnXUnitConverter.Enabled = false;
                    bbConvertToFFT.Enabled = false;
                    trendValCtr = 1;
                    FFbuttonEnabled = false;
                    tlNode = trlPlantMangerComponents.FocusedNode;
                    panel1.AllowDrop = true;
                    iclick = 1;
                    IsWaterfall = true;
                    //btnTrend.Text = "Untrend";
                    btnColors.Enabled = false;

                    ClearCmbCursor();
                    //Amit Jain DA_41 	water fall also create for demo2.csv	code related	minor 	12-4-2010

                    CallClearDataGridMain();
                    FillLastCellWhite();

                    cmbCurSors.Items.AddRange(new object[] {"Select Cursor", "Single"});
                    ArrayList CursorItems = new ArrayList();
                    CursorItems.Add("Select Cursor");
                    CursorItems.Add("Single");
                    AddToCmbCursor(CursorItems);

                    //Trending(GenDiGraph);

                    //btnZoom.Enabled = false;
                    //btnUnZoom.Enabled = false;
                    getoriginalCSVvalues();
                    ZommingButton = true;
                    AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                    tsBtnHighestFive.Enabled = false;

                    //tsBtnSideBandRatio.Enabled = false;
                    //tsBtnSideBandTrend.Enabled = false;
                    //tsbtnSideBandValue.Enabled = false;
                    sidebandbuttonEnabled = false;
                    // tsbtnCopyValues.Enabled = false;
                    //btnAreaGraph.Enabled = false;
                    // btnCopyGraphToClipBord.Enabled = false;
                    panel1_DragDrop(null, null);
                    dataGridView2_CellContentClick(null, farziE);
                    bbOctave.Enabled = false;
                    bbCepstrum.Enabled = false;
                    bbZoom.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

        }

        private void tsbtnWav_Click(object sender, EventArgs e)
        {
            try
            {
                hshDrag = new Hashtable();
                trendValCtr = 0;
                bWave = !bWave;

                if (!bWave)
                {
                    trendValCtr = 0;
                    trlPlantMangerComponents.Enabled = true;
                    trlPlantMangerComponents.FocusedNode = tlNode;
                    tlNode = null;
                    IsWaterfall = false;
                    btnColors.Enabled = true;
                    //btnTrend.Text = "Trend";
                    lblXAxis.Text = "";
                    lblYAxis.Text = "";
                    CallClearDataGridMain();
                    ShowCurrentDate();
                    NullAllGphElements();

                    DrawOriginalDI(DestbeforeTrend);

                    if (TrendType == "Time" || TrendType == "Trend")
                    {

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        sidebandbuttonEnabled = false;
                    }
                    else if (TrendType == "FFT")
                    {

                        //tsBtnSideBandRatio.Enabled = true;
                        //tsBtnSideBandTrend.Enabled = true;
                        //tsbtnSideBandValue.Enabled = true;
                        sidebandbuttonEnabled = true;
                    }

                    if (TrendType == "Time")
                    {

                        tsBtnHighestFive.Enabled = false;

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        sidebandbuttonEnabled = false;

                    }

                    SetGraphFeatures();
                    if (TrendType == "Demodulate")
                    {
                        //btnZoom.Enabled = false;
                        ZommingButton = false;

                        AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                        tsBtnHighestFive.Enabled = false;

                        //tsBtnSideBandRatio.Enabled = false;
                        //tsBtnSideBandTrend.Enabled = false;
                        //tsbtnSideBandValue.Enabled = false;
                        sidebandbuttonEnabled = false;
                    }
                    else
                    {
                        //btnZoom.Enabled = true;
                        ZommingButton = true;
                        AreaGraphButtonEnabled = true; // btnAreaGraph.Enabled = true;
                        tsBtnHighestFive.Enabled = true;
                    }

                    btnFwd.Enabled = false;
                    btnBkwd.Enabled = false;
                    ExtraZoomButtonEnabled = true; // tsBtnExtraZoom.Enabled = true;
                    TrendButtonEnabled = true; // btnTrend.Enabled = true;
                    btnXUnitConverter.Enabled = true;
                    tsbtnRuCD.Enabled = true;
                    WaterfallbuttonEnabled = true; // btnWaterFall.Enabled = true;
                }
                else
                {

                    tlNode = trlPlantMangerComponents.FocusedNode;
                    trlPlantMangerComponents.Enabled = false;
                    //tcMain.SelectedTabPage = tpGraph;
                    try
                    {
                        spath = null;
                        OpenFileDialog saveFileDialog = new OpenFileDialog();

                        saveFileDialog.InitialDirectory = "c:\\";
                        saveFileDialog.Filter = "WAV File (.wav)|*.wav";
                        saveFileDialog.FilterIndex = 1;
                        saveFileDialog.DefaultExt = ".wav";
                        saveFileDialog.RestoreDirectory = true;


                        saveFileDialog.ShowDialog();
                        spath = saveFileDialog.FileName.ToString();
                        if (!string.IsNullOrEmpty(spath))
                        {
                            PATH = spath;

                            try
                            {
                                //this.Enabled = false;
                                this.Refresh();
                                BusyImageProcess =
                                    Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                                this.Cursor = Cursors.WaitCursor;
                            }
                            catch (Exception ep)
                            {
                                ErrorLog_Class.ErrorLogEntry(ep);
                                ErrorLogFile(ep);
                            }

                            TrendButtonEnabled = false; // btnTrend.Enabled = false;
                            tsbtnRuCD.Enabled = false;
                            WaterfallbuttonEnabled = false; // btnWaterFall.Enabled = false;
                            btnXUnitConverter.Enabled = false;
                            //btnZoom.Enabled = false;
                            //btnUnZoom.Enabled = false;
                            ZommingButton = true;
                            AreaGraphButtonEnabled = false; // btnAreaGraph.Enabled = false;

                            tsBtnHighestFive.Enabled = false;

                            //tsBtnSideBandRatio.Enabled = false;
                            //tsBtnSideBandTrend.Enabled = false;
                            //tsbtnSideBandValue.Enabled = false;
                            sidebandbuttonEnabled = false;
                            CreatingWave1(PATH);
                            //NullAllGphElements();
                            //dataGridView2_CellContentClick(null, farziE);
                            //this.Refresh();
                            try
                            {
                                //this.Enabled = true;
                                BusyImageProcess.Kill();
                                this.Cursor = Cursors.Default;
                            }
                            catch
                            {
                            }


                        }
                        else
                        {

                            bWave = !bWave;
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void tsbtnRuCD_Click(object sender, EventArgs e)
        {
            try
            {
                hshDrag = new Hashtable();
                trendValCtr = 0;
                bRucd = true;
                iclick = 1;

                //if (!bRucd)
                //{
                //    trendValCtr = 0;
                //    trlPlantMangerComponents.FocusedNode = tlNode;
                //    IsWaterfall = false;
                //    btnColors.Enabled = true;
                //    //btnTrend.Text = "Trend";
                //    lblXAxis.Text = "";
                //    lblYAxis.Text = "";
                //    CallClearDataGridMain();
                //    FillLastCellWhite();//ShowCurrentDate();
                //    NullAllGphElements();

                //    DrawOriginalDI(DestbeforeTrend);

                //    if (TrendType == "Time" || TrendType == "Trend")
                //    {

                //        //tsBtnSideBandRatio.Enabled = false;
                //        //tsBtnSideBandTrend.Enabled = false;
                //        //tsbtnSideBandValue.Enabled = false;
                //        sidebandbuttonEnabled = false;
                //    }
                //    else if (TrendType == "FFT")
                //    {

                //        //tsBtnSideBandRatio.Enabled = true;
                //        //tsBtnSideBandTrend.Enabled = true;
                //        //tsbtnSideBandValue.Enabled = true;
                //        sidebandbuttonEnabled = true;
                //    }
                //    if (TrendType == "Time")
                //    {

                //        tsBtnHighestFive.Enabled = false;

                //        //tsBtnSideBandRatio.Enabled = false;
                //        //tsBtnSideBandTrend.Enabled = false;
                //        //tsbtnSideBandValue.Enabled = false;
                //        sidebandbuttonEnabled = false;

                //    }
                //    SetGraphFeatures();
                //    if (TrendType == "Demodulate")
                //    {
                //        //btnZoom.Enabled = false;
                //        ZommingButton = false;

                //        AreaGraphButtonEnabled = false;// btnAreaGraph.Enabled = false;

                //        tsBtnHighestFive.Enabled = false;

                //        //tsBtnSideBandRatio.Enabled = false;
                //        //tsBtnSideBandTrend.Enabled = false;
                //        //tsbtnSideBandValue.Enabled = false;
                //        sidebandbuttonEnabled = false;
                //    }
                //    else
                //    {
                //        //btnZoom.Enabled = true;
                //        ZommingButton = true;

                //        AreaGraphButtonEnabled = true;// btnAreaGraph.Enabled = true;
                //        tsBtnHighestFive.Enabled = true;
                //    }
                //    btnFwd.Enabled = false;
                //    btnBkwd.Enabled = false;
                //    ExtraZoomButtonEnabled = true;// tsBtnExtraZoom.Enabled = true;
                //    TrendButtonEnabled = true;// btnTrend.Enabled = true;
                //    btnXUnitConverter.Enabled = true;
                //    tsbtnWav.Enabled = true;
                //    WaterfallbuttonEnabled = true;// btnWaterFall.Enabled = true;
                //}
                //else
                if (bRucd)
                {
                    TrendButtonEnabled = false; // btnTrend.Enabled = false;
                    btnXUnitConverter.Enabled = false;
                    tsbtnWav.Enabled = false;
                    WaterfallbuttonEnabled = false; // btnWaterFall.Enabled = false;
                    tlNode = trlPlantMangerComponents.FocusedNode;
                    try
                    {
                        //OpenFileDialog saveFileDialog = new OpenFileDialog();

                        //saveFileDialog.InitialDirectory = "c:\\";
                        //saveFileDialog.Filter = "CSV File (.csv)|*.csv";
                        //saveFileDialog.FilterIndex = 1;
                        //saveFileDialog.DefaultExt = ".csv";
                        //saveFileDialog.RestoreDirectory = true;


                        //saveFileDialog.ShowDialog();
                        string spath = AppDomain.CurrentDomain.BaseDirectory +
                                       "Temp.csv"; //saveFileDialog.FileName.ToString();
                        if (!string.IsNullOrEmpty(spath))
                        {
                            iclick = 1;
                            setWaveFirstData();
                            double[] actualXdata = new double[0];
                            double[] actualYdata = new double[0];
                            double[] Orderdata = new double[0];
                            double[] RPMdata = new double[0];
                            double[] TSdata = new double[0];
                            arrXYValues = new ArrayList();

                            try
                            {
                                // this.Enabled = false;
                                this.Refresh();
                                BusyImageProcess =
                                    Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                                this.Cursor = Cursors.WaitCursor;
                            }
                            catch (Exception ep)
                            {
                                ErrorLog_Class.ErrorLogEntry(ep);
                                ErrorLogFile(ep);
                            }

                            ArrayList data = FunctionForNyquistCSV(spath);

                            try
                            {
                                // this.Enabled = true;
                                BusyImageProcess.Kill();
                                this.Cursor = Cursors.Default;
                            }
                            catch
                            {
                            }


                            //ArrayList data= FunctionForNyquistCSV(spath);
                            bool IsOrder = false;
                            bool IsRPM = false;
                            bool IsTS = false;
                            bool IsMag = false;
                            bool IsPhase = false;
                            int orderColumn = 0;
                            int RPMColumn = 0;
                            int DisplayColumn = 0;
                            int TS = 0;
                            arlYData = new ArrayList();
                            arlYDataPhase = new ArrayList();
                            arlFRFCoherence = new ArrayList();
                            arlFRFImag = new ArrayList();
                            arlFRFReal = new ArrayList();
                            for (int i = 0; i < data.Count; i++)
                            {
                                actualYdata = new double[0];
                                string[] sdata = (string[]) data[i];
                                double dValue = 0;
                                string sValue = null;

                                for (int j = 0; j < sdata.Length; j++)
                                {

                                    try
                                    {
                                        dValue = Convert.ToDouble(sdata[j]); //.ToString();
                                        if (i == 0)
                                        {

                                            //Array.Resize(ref actualXdata, actualXdata.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref actualXdata, 1);
                                            //if (lblXunit.Text.ToString() == "CPM")
                                            //{
                                            //    dValue = dValue / 60;
                                            //}
                                            actualXdata[actualXdata.Length - 1] = dValue;

                                        }
                                        else
                                        {

                                            if (j != orderColumn && j != RPMColumn && j != TS && j != DisplayColumn)
                                            {
                                                //Array.Resize(ref actualYdata, actualYdata.Length + 1);
                                                _ResizeArray.IncreaseArrayDouble(ref actualYdata, 1);
                                                if (DisplayType == "Bode" && sValue.Contains("Phase"))
                                                {
                                                    if (dValue < 100 && dValue > 0)
                                                    {
                                                        dValue += 360;
                                                    }
                                                }

                                                actualYdata[actualYdata.Length - 1] = dValue;
                                            }
                                            else if (j == orderColumn)
                                            {
                                                //Array.Resize(ref Orderdata, Orderdata.Length + 1);
                                                _ResizeArray.IncreaseArrayDouble(ref Orderdata, 1);
                                                Orderdata[Orderdata.Length - 1] = dValue;
                                            }
                                            else if (j == RPMColumn)
                                            {
                                                //Array.Resize(ref RPMdata, RPMdata.Length + 1);
                                                _ResizeArray.IncreaseArrayDouble(ref RPMdata, 1);
                                                RPMdata[RPMdata.Length - 1] = dValue;
                                            }
                                            else if (j == TS)
                                            {
                                                //Array.Resize(ref TSdata, TSdata.Length + 1);
                                                _ResizeArray.IncreaseArrayDouble(ref TSdata, 1);
                                                TSdata[TSdata.Length - 1] = dValue;
                                            }

                                        }
                                    }
                                    catch (Exception es)
                                    {
                                        //ErrorLog_Class.ErrorLogEntry(es);
                                        sValue = sdata[j].ToString();
                                        if (j == DisplayColumn)
                                        {
                                            DisplayType = sValue;
                                        }
                                    }

                                    if (sValue != null)
                                    {
                                        if (sValue.Contains("FRF"))
                                        {
                                            IsOrder = true;
                                            if (sValue.Contains("Mag"))
                                            {
                                                sValue = "Y-Axis Mag";
                                            }

                                            if (sValue.Contains("Phase"))
                                            {
                                                sValue = "Y-Axis Phase";
                                            }
                                        }
                                        else
                                        {
                                            if (sValue == "Disp Type")
                                            {
                                                DisplayColumn = j;
                                                //DisplayType=
                                            }
                                            else if (sValue == "Order" || sValue == "Overall")
                                            {
                                                if (sValue == "Order")
                                                {
                                                    IsOrder = true;
                                                }
                                                else if (sValue == "Overall")
                                                {
                                                    IsOrder = false;
                                                }

                                                orderColumn = j;
                                            }
                                            else if (sValue == "RPM Stamp")
                                            {
                                                IsRPM = true;
                                                RPMColumn = j;
                                            }
                                            else if (sValue == "Time Stamp")
                                            {
                                                IsTS = true;
                                                TS = j;
                                            }
                                        }
                                    }

                                }

                                if (sValue != null)
                                    if (sValue.Contains("Y-Axis"))
                                    {
                                        if (actualYdata.Length > 1)
                                        {
                                            if (IsOrder && sValue.Contains("Mag"))
                                            {
                                                xarray = actualXdata;
                                                arlYData.Add(actualYdata);
                                            }
                                            else if (IsOrder && sValue.Contains("Phase"))
                                            {
                                                xarray = actualXdata;
                                                arlYDataPhase.Add(actualYdata);
                                            }
                                            else if (!IsOrder)
                                            {
                                                xarray = actualXdata;
                                                arlYData.Add(actualYdata);
                                            }

                                            //arrXYValues.Add(actualXdata);
                                            //arrXYValues.Add(actualYdata);
                                            if (i == 1)
                                            {
                                                RPMColumn -= 1;
                                                TS -= 1;
                                            }
                                        }
                                    }
                                    else if (sValue == "FRF Coherence")
                                    {
                                        xarray = actualXdata;
                                        arlFRFCoherence.Add(actualYdata);
                                    }
                                    else if (sValue == "FRF Real")
                                    {
                                        xarray = actualXdata;
                                        arlFRFReal.Add(actualYdata);
                                    }
                                    else if (sValue == "FRF Imag")
                                    {
                                        xarray = actualXdata;
                                        arlFRFImag.Add(actualYdata);
                                    }
                            }


                            int ctr = 0;
                            //soundBytes = new double[xData.Length];


                            {
                                string source = null;
                                string Dest = null;
                                TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                string[] ColorCode =
                                {
                                    "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746",
                                    "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961",
                                    "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017",
                                    "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204",
                                    "16728065", "744352"
                                };

                                try
                                {
                                    lblXAxis.Text = "";
                                    lblYAxis.Text = "";
                                    CallClearDataGridMain();
                                    FillLastCellWhite(); //ShowCurrentDate();
                                    dataGridViewImageColumn1.ValuesAreIcons = false;
                                    if (sTag == "CSVFile")
                                    {

                                        //source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
                                        //Dest = AppDomain.CurrentDomain.BaseDirectory + trendValCtr.ToString() + ".csv";

                                        //File.Copy(source, Dest, true);
                                        if (DisplayType != "Overall")
                                        {
                                            if (DisplayType != "Nyquist")
                                            {
                                                for (int i = 0; i < arlYData.Count; i++)
                                                {
                                                    hshDrag.Add(trendValCtr, trendValCtr);
                                                    string s = null;

                                                    s = trendValCtr.ToString();



                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridView2.Rows.Add(1);
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value =
                                                        "Mag " + s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value =
                                                        "X";
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                                        objlistimg.Images[iCCtr];
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                        ColorCode[iCCtr].ToString();

                                                    trendValCtr++;
                                                }

                                                dataGridView2_CellContentClick(null, farziE);
                                                if (DisplayType == "Table")
                                                {
                                                    frmTable _TableFrom = new frmTable();
                                                    _TableFrom._RPMCtr = arlYData.Count;
                                                    _TableFrom._RPM = actualXdata;
                                                    _TableFrom._YMag = arlYData;
                                                    _TableFrom._YPhase = arlYDataPhase;

                                                    _TableFrom.ShowDialog();
                                                }
                                            }
                                            else
                                            {


                                                double[] arrXYValsNYQ = (double[]) arlYData[arlYData.Count - 1];
                                                double[] arrXYValsNYQ1 =
                                                    (double[]) arlYDataPhase[arlYDataPhase.Count - 1];
                                                GenerateOrbit(arrXYValsNYQ, arrXYValsNYQ1, true);

                                                lblGrphUnitX.Text = "X Unit: " + lblDisplayunit.Text.ToString();
                                                lblGraphUnitY.Text = "Y Unit: Degree";
                                                panel1.Refresh();






                                                //MessageBoxEx.Show("Nyquist Data option not available Right Now");
                                                //tsbtnRuCD_Click(null, null);
                                            }
                                        }
                                        else
                                        {
                                            MessageBoxEx.Show("Not an RuCd Data");
                                            tsbtnRuCD_Click(null, null);
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog_Class.ErrorLogEntry(ex);
                                }
                            }


                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            try
            {
                // this.Enabled = true;
                BusyImageProcess.Kill();
                this.Cursor = Cursors.Default;
            }
            catch
            {
            }
        }

        private void tsbtnPhase_Click(object sender, EventArgs e)
        {
            try
            {
                string[] ColorCode =
                {
                    "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                    "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573",
                    "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692",
                    "29696", "6737204", "16728065", "744352"
                };
                iclick = 0;
                trendValCtr = 0;
                hshDrag = new Hashtable();
                CallClearDataGridMain();
                FillLastCellWhite(); //ShowCurrentDate();
                NullAllGphElements();
                if (lblApplication.Text.ToString() == "FRF")
                {
                    bbphaseCtr++;
                    if (bbphaseCtr > 5)
                    {
                        bbphaseCtr = 1;
                    }

                    try
                    {
                        switch (bbphaseCtr)
                        {
                            case 1:
                            {
                                //Phase
                                DisplayType = "FRF Phase";
                                bbPhase.Caption = "View Coherence";
                                tpGraph.Text = "Graph (Phase)";
                                for (int i = 0; i < arlYDataPhase.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlYDataPhase[arlYDataPhase.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 2:
                            {
                                //Coherence
                                tpGraph.Text = "Graph (Coherence)";
                                bbPhase.Caption = "View Real";
                                DisplayType = "FRF Coherence";
                                for (int i = 0; i < arlFRFCoherence.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlFRFCoherence[arlFRFCoherence.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 3:
                            {
                                //Real
                                tpGraph.Text = "Graph (Real)";
                                DisplayType = "FRF Real";
                                bbPhase.Caption = "View image";
                                for (int i = 0; i < arlFRFReal.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlFRFReal[arlFRFReal.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 4:
                            {
                                //image
                                tpGraph.Text = "Graph (Imaginary)";
                                DisplayType = "FRF image";
                                bbPhase.Caption = "View Phase";
                                for (int i = 0; i < arlFRFImag.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlFRFImag[arlFRFImag.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 5:
                            {
                                tpGraph.Text = "Graph (Mag)";
                                bbPhase.Caption = "View Phase";
                                for (int i = 0; i < arlYData.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = "Mag " + s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                break;
                            }
                        }

                        dataGridView2_CellContentClick(null, farziE);
                    }
                    catch
                    {
                    }
                }
                else
                {
                    bbphaseCtr++;
                    if (bbphaseCtr > 2)
                    {
                        bbphaseCtr = 1;
                    }

                    try
                    {
                        switch (bbphaseCtr)
                        {
                            case 1:
                            {
                                //Phase
                                tpGraph.Text = "Graph (Phase)";
                                bbPhase.Caption = "View Mag";
                                for (int i = 0; i < arlYDataPhase.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                dataGridView2_CellContentClick(null, farziE);
                                break;
                            }
                            case 2:
                            {
                                tpGraph.Text = "Graph (Mag)";
                                bbPhase.Caption = "View Phase";
                                for (int i = 0; i < arlYData.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = "Mag " + s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                dataGridView2_CellContentClick(null, farziE);
                                break;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            catch
            {
            }
        }
        //private void FolderSelection()
        //{
        //    try
        //    {
        //        panel1.Refresh();
        //        tcMain.SelectedTabPage = tpData;
        //        tcMain.Enabled = false;
        //        WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
        //        AreaGraphButtonEnabled = false;// btnAreaGraph.Enabled = false;
        //        btnBkwd.Enabled = false;
        //        btnColors.Enabled = false;
        //        btnCopyGraphToClipBord.Enabled = false;
        //        btnFwd.Enabled = false; tlNode = null;
        //        TrendButtonEnabled = false;// btnTrend.Enabled = false;
        //        ZommingButton = true;
        //        tsbtnComparePoints.Enabled = false;
        //        tsbtnCopyValues.Enabled = false;
        //        tsBtnHighestFive.Enabled = false;

        //        sidebandbuttonEnabled = false;
        //        tsbtnRuCD.Enabled = false;
        //        WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
        //        tsbtnWav.Enabled = false;
        //        cmbCurSors.Enabled = false;
        //        ExtraZoomButtonEnabled = false;// tsBtnExtraZoom.Enabled = false;
        //        btnXUnitConverter.Enabled = false;
        //        SetLabelDefault();

        //        GetBandData();
        //        GetFaultFreq();
        //        GetRPMData();
        //        GetBFFData();
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        //private void bbSBTrend_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        //{
        //    try
        //    {
        //        string SelectedCursorItem = cmbCurSors.Items[0].ToString();
        //        CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
        //        tsBtnSideBandTrend_Click(null, null);
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}        
        private void bcmCursors_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                deletedataGridRows();
                BarEditItem comboBox = sender as BarEditItem;
                string Edittext = comboBox.EditValue.ToString();
                cmbCurSors.SelectedItem = Edittext.ToString();


                //cmbCurSors_SelectedIndexChanged(null, null);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }
        //private void bbOriginal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        //{
        //    try
        //    {
        //        if (tlNode != null)
        //        {
        //            trlPlantMangerComponents.FocusedNode = tlNode;
        //            tlNode = null;
        //        }
        //        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
        //        if (selectedNode.Tag.ToString() == "CSVFile")
        //        {
        //            if (DestbeforeTrend == null)
        //            {
        //                string source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
        //                string Dest = AppDomain.CurrentDomain.BaseDirectory + "Temp.csv";
        //                if (File.Exists(Dest))
        //                {
        //                    File.SetAttributes(Dest, FileAttributes.Normal);
        //                }
        //                File.Copy(source, Dest, true);
        //                DestbeforeTrend = Dest;
        //            }

        //            NullCursorBools();
        //            NullAllGphElements();
        //            panel1.Refresh();
        //            SetAllButtontoInitial();
        //            DrawOriginalDI(DestbeforeTrend);

        //        }
        //        else
        //        {
        //            //if (DestbeforeTrend.ToString().Contains(".txt"))
        //            //{

        //            //    SetAllButtontoInitial();
        //            //    ReadTXTfile(DestbeforeTrend, true);
        //            //    x = xarray;
        //            //    y = yarray;
        //            //    panel1.Refresh();

        //            //    if (lblXunit.Text.Contains('s'))
        //            //    {
        //            //        CurrentGraph = "Time";
        //            //        setCursorCombo("Time");
        //            //    }
        //            //    else
        //            //    {
        //            //        CurrentGraph = "Power";
        //            //        setCursorCombo("Power");
        //            //    }
        //            //    GraphType = "FFT";


        //            //    NullCursorBools();
        //            //    RefreshZoomParam();

        //            //    deletedataGridRows();
        //            //    ResetZoomButton();

        //            //    CreatGPWithVariableForDi();

        //            //    panel1.Refresh();

        //            //}
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        private void bbOpen_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                FolderSelection();
                openToolStripButton_Click(null, null);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void barEditItem2_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                BarEditItem comboBox = sender as BarEditItem;
                string colortext = comboBox.EditValue.ToString();
                sARGB = colortext;







                string[] RGBValue = colortext.Split(new string[] {",", "[", "]", "A=", "R=", "G=", "B=", "=", " "},
                    StringSplitOptions.RemoveEmptyEntries);
                if (RGBValue.Length > 4)
                {
                    int A = Convert.ToInt32(RGBValue[1].ToString());
                    int R = Convert.ToInt32(RGBValue[2].ToString());
                    int G = Convert.ToInt32(RGBValue[3].ToString());
                    int B = Convert.ToInt32(RGBValue[4].ToString());
                    _UI_Interface._Form1 = this;
                    _UI_Interface.ChangeColorStyle(A, R, G, B);

                    rpcGraph.Color = Color.FromArgb(A, R, G, B);
                    panel1.BackColor = Color.FromArgb(A, R, G, B);
                    dgvDiBA.BackgroundColor = Color.FromArgb(A, R, G, B);
                    dgvDiFF.BackgroundColor = Color.FromArgb(A, R, G, B);

                    dataGridView1.BackgroundColor = Color.FromArgb(A, R, G, B);
                    dataGridView2.BackgroundColor = Color.FromArgb(A, R, G, B);
                    //dataGridView3.BackgroundColor = Color.FromArgb(A, R, G, B);
                }
                else if (RGBValue.Length > 1)
                {
                    string Name = RGBValue[1].ToString();
                    _UI_Interface._Form1 = this;
                    _UI_Interface.ChangeColorStyle(Name);
                    rpcGraph.Color = Color.FromName(Name);
                    panel1.BackColor = Color.FromName(Name);
                    dgvDiBA.BackgroundColor = Color.FromName(Name);
                    dgvDiFF.BackgroundColor = Color.FromName(Name);

                    dataGridView1.BackgroundColor = Color.FromName(Name);
                    dataGridView2.BackgroundColor = Color.FromName(Name);
                    //dataGridView3.BackgroundColor = Color.FromName(Name);
                }

                // ChangeStyle(skinName);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void barEditItem1_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                BarEditItem comboBox = sender as BarEditItem;
                string skinName = comboBox.EditValue.ToString();

                DevExpress.LookAndFeel.UserLookAndFeel.Default.SkinName = skinName;
                //DevExpress.LookAndFeel.UserLookAndFeel.Default.Style = DevExpress.LookAndFeel.LookAndFeelStyle.Skin;
                DevExpress.Skins.SkinManager.EnableFormSkins();
                _UI_Interface._Form1 = this;
                _UI_Interface.ChangeStyle(skinName);
                // ChangeStyle(skinName);
                rpcGraph.Color = Color.FromKnownColor(KnownColor.Transparent);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void bbWav_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                //tsbtnWav_Click(null, null);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void RPM_Generation()
        {
            string RPMValues = null;
            bool bConstantMode = false;
            try
            {
                FinalTachoPositions = new ArrayList();
                arlTachoPositionslist = new ArrayList();
                ArrayList arrXYVals = GetAllPlotValues(arlTachoData);
                int[] ActualRPM = new int[arrXYVals.Count / 2];
                RPMtoDisplay = new int[ActualRPM.Length];
                for (int i = 1, j = 0; i < arrXYVals.Count; i++, j++)
                {
                    double[] tachoY = (double[]) arrXYVals[i];
                    double[] tachoX = (double[]) arrXYVals[i - 1];
                    i++;
                    if (tachoY != null && tachoY.Length > 0)
                    {

                        double[] allPeak = getallpeak(tachoY);
                        int peakCount = allPeak.Length;
                        ActualRPM[j] = (int) (((double) peakCount * 60) / tachoX[tachoX.Length - 1]);
                        //MessageBoxEx.Show("RPM Value " + Math.Round(CalculatedRPM).ToString());
                    }
                }

                int lastlimt = 5;
                if (ActualRPM.Length - 1 <= 5)
                {
                    lastlimt = ActualRPM.Length - 1;
                }

                for (int i = 0, ji = 0, jd = 0; i < lastlimt; i++)
                {
                    if (ActualRPM[i] > ActualRPM[i + 1])
                    {
                        jd++;
                    }
                    else if (ActualRPM[i] < ActualRPM[i + 1])
                    {
                        ji++;
                    }
                    else
                    {
                        bConstantMode = true;
                    }

                    if (jd > 4 || ji > 4)
                    {
                        break;
                    }
                }

                for (int i = 0; i < arlTachoPositionslist.Count; i++)
                {
                    Array.Sort((int[]) arlTachoPositionslist[i]);
                }

                FinalTachoPositions = arlTachoPositionslist;
                if (!bConstantMode)
                {
                    RPMtoDisplay = ActualRPM;
                }
                else
                {

                    if (Fulldata_CH2 != null && Fulldata_CH2.Length > 0)
                    {
                        double Timeinterval = (double) (Math.Round(FullTime_CH2[FullTime_CH2.Length - 1], 2)) /
                                              FullTime_CH2.Length;
                        int NoOfValuesfor2Sec = Convert.ToInt32(2 / Timeinterval);
                        _2secYdata = new ArrayList();
                        _2secXdata = new ArrayList();
                        _2secRPMdata = new ArrayList();
                        int j = 0;
                        double[] tempX = new double[NoOfValuesfor2Sec];
                        double[] tempY = new double[NoOfValuesfor2Sec];
                        double dtotalRepetitions = (double) Fulldata_CH2.Length / (double) NoOfValuesfor2Sec;
                        int totalRepetitions = (int) Math.Ceiling(dtotalRepetitions);

                        int l = 0;
                        double catchtime = 0;
                        arlTachoPositionslist = new ArrayList();
                        for (int k = 0; k < totalRepetitions; k++)
                        {
                            catchtime = 0;

                            tempX = new double[NoOfValuesfor2Sec];
                            tempY = new double[NoOfValuesfor2Sec];
                            for (int i = 0; i < NoOfValuesfor2Sec; i++)
                            {
                                try
                                {
                                    tempX[i] = i * Timeinterval;
                                    tempY[i] = Fulldata_CH2[j];
                                    j++;
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog_Class.ErrorLogEntry(ex);
                                    catchtime = i * Timeinterval;
                                    break;
                                }
                            }

                            _2secXdata.Add(tempX);
                            _2secYdata.Add(tempY);

                            double[] allPeak = getallpeak(tempY);
                            int peakCount = allPeak.Length;
                            int CalculatedRPM = (int) (((double) peakCount * 60) / tempX[tempX.Length - 1]);

                            if (catchtime != 0)
                            {
                                CalculatedRPM = (int) (((double) peakCount * 60) / catchtime);
                            }

                            while (ExectTime * (l + 1) <= 2 * (k + 1))
                            {
                                _2secRPMdata.Add(CalculatedRPM);
                                l++;
                            }

                            //_2secRPMdata.Add(CalculatedRPM);
                            RPMValues += "\n" + CalculatedRPM.ToString();

                        }
                    }

                    //MessageBoxEx.Show("RPM Value per 2 sec " + "\n" + RPMValues);
                    for (int i = 0; i < RPMtoDisplay.Length; i++)
                    {
                        RPMtoDisplay[i] = (int) _2secRPMdata[i];
                    }
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void FindAllWaves1(double[] tachoY)
        {
            bool increasing = false;
            bool decreasing = false;
            lowerPeak = new ArrayList();
            UpperPeak = new ArrayList();
            try
            {
                for (int i = 0; i < tachoY.Length - 3; i++)
                {
                    if (tachoY[i] < tachoY[i + 1])
                    {

                        if (tachoY[i + 1] < tachoY[i + 2])
                        {
                            if (tachoY[i + 2] < tachoY[i + 3])
                            {
                                if (decreasing == true)
                                {
                                    lowerPeak.Add(i);
                                }

                                increasing = true;
                                decreasing = false;
                            }
                        }
                    }
                    else if (tachoY[i] > tachoY[i + 1])
                    {

                        if (tachoY[i + 1] > tachoY[i + 2])
                        {
                            if (tachoY[i + 2] > tachoY[i + 3])
                            {
                                if (increasing == true)
                                {
                                    UpperPeak.Add(i);
                                }

                                decreasing = true;
                                increasing = false;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void FindAllWaves(double[] tachoY)
        {
            bool increasing = false;
            bool decreasing = false;
            lowerPeak = new ArrayList();
            UpperPeak = new ArrayList();

            try
            {
                for (int i = 0; i < tachoY.Length - 3; i++)
                {
                    if (tachoY[i] < 0)
                    {
                        if (tachoY[i + 1] < 0)
                        {
                            if (increasing == true)
                            {
                                UpperPeak.Add(i);
                            }

                            decreasing = true;
                            increasing = false;
                        }
                        //if (tachoY[i + 1] < 0)
                        //{
                        //    if (tachoY[i + 2] < 0)
                        //    {
                        //        if (decreasing == true)
                        //        {
                        //            lowerPeak.Add(i);
                        //        }

                        //    }
                        //    else
                        //    {
                        //        increasing = true;
                        //        decreasing = false;
                        //    }

                        //}
                    }
                    else if (tachoY[i] >= 0)
                    {
                        if (tachoY[i + 1] >= 0)
                        {
                            if (decreasing == true)
                            {
                                lowerPeak.Add(i);
                            }

                            increasing = true;
                            decreasing = false;
                        }

                        //if (tachoY[i + 1] >= 0)
                        //{
                        //    if (tachoY[i + 2] >= 0)
                        //    {
                        //        if (increasing == true)
                        //        {
                        //            UpperPeak.Add(i);
                        //        }
                        //        decreasing = true;
                        //        increasing = false;
                        //    }
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public int _RPMCount
        {
            get { return RPMCount; }
            set { RPMCount = value; }
        }

        public void DrawRpm()
        {
            if (!Zoom)
            {
                Region rgn1 = new Region(panel1.Bounds);

                System.Drawing.Graphics der = panel1.CreateGraphics();
                der.Clip = rgn1;

                RectangleF pt = der.ClipBounds;
                PointF[] pt1 = new PointF[0];
                PointF[] pt2 = new PointF[0];
                PointF[] ptString = new PointF[0];
                string[] Names = new string[0];
                int PrvsMainIndex = 0;

                Font objFont = new Font("Roman", 7, FontStyle.Regular);
                Brush objBrush = Brushes.Red;
                Pen BlkDash = new Pen(Color.Olive, 2);
                BlkDash.DashCap = DashCap.Triangle;
                BlkDash.DashStyle = DashStyle.DashDotDot;
                try
                {
                    if (!CheckForTimeData(YSelected))
                    {
                        int iRPM = Convert.ToInt32(txtxRPM.Text.ToString());
                        int iPulse = Convert.ToInt32(txtxPulse.Text.ToString());
                        double FinalFreq = (double) ((double) iRPM / (double) (iPulse * 60));
                        int CountForRpm = _RPMCount;
                        double TotalXAxis = (Convert.ToDouble(pt.Right - pt.Left)) - (pt.Left + SixtyTwo + OneSixtyTwo);
                        double MainInterval = (TotalXAxis / (x.Length - 1));

                        StringFormat sf = new StringFormat(StringFormatFlags.DirectionVertical);
                        dataGridView3.Rows.Clear();
                        for (int i = 0; i < dataGridView3.Rows.Count - 1; i++)
                        {
                            dataGridView3.Rows.RemoveAt(0);
                        }

                        for (int i = 0; i < CountForRpm; i++)
                        {
                            double FreqToCalc = FinalFreq * (1 + i);
                            if (lblGrphUnitX.Text.Contains("CPM"))
                            {
                                FreqToCalc = FreqToCalc * 60;
                            }

                            if (FreqToCalc > (double) XSelected[XSelected.Length - 1])
                            {
                                break;
                            }

                            int MainIndex = Array.FindIndex(XSelected,
                                delegate(double item) { return item == FreqToCalc; });
                            if (MainIndex == -1)
                            {
                                FreqToCalc = FindNearest(XSelected, FreqToCalc);
                                MainIndex = Array.FindIndex(XSelected,
                                    delegate(double item) { return item == FreqToCalc; });
                            }

                            if (PrvsMainIndex != MainIndex)
                            {
                                //Array.Resize(ref pt1, pt1.Length + 1);
                                //Array.Resize(ref pt2, pt2.Length + 1);
                                //Array.Resize(ref ptString, ptString.Length + 1);
                                //Array.Resize(ref Names, Names.Length + 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt1, 1);
                                _ResizeArray.IncreaseArrayPointF(ref pt2, 1);
                                _ResizeArray.IncreaseArrayPointF(ref ptString, 1);
                                _ResizeArray.IncreaseArrayString(ref Names, 1);
                                pt1[pt1.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Bottom - Fifty));
                                pt2[pt2.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                ptString[ptString.Length - 1] =
                                    new PointF((float) ((pt.Left + SixtyTwo) + (MainInterval * MainIndex)),
                                        (float) (pt.Top + OneFifty));
                                Names[Names.Length - 1] =
                                    Convert.ToString(i + 1) + "x RPM   " +
                                    Convert.ToString(Math.Round(YSelected[MainIndex], 5));
                                dataGridView3.Rows.Add(1);
                                dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[0].Value =
                                    Convert.ToString(i + 1) + "x RPM";
                                dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[1].Value =
                                    Convert.ToString(Math.Round(XSelected[MainIndex], 5));
                                dataGridView3.Rows[dataGridView3.Rows.Count - 2].Cells[2].Value =
                                    Convert.ToString(Math.Round(YSelected[MainIndex], 5));
                                PrvsMainIndex = MainIndex;
                            }
                            else
                                break;

                        }

                        for (int i = 0; i < pt1.Length; i++)
                        {
                            der.DrawLine(BlkDash, pt1[i], pt2[i]);
                            //der.TranslateTransform(150, 0);
                            //der.RotateTransform(180);
                            der.DrawString(Names[i], objFont, objBrush, ptString[i], sf);

                        }
                    }

                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }
            }
        }

        private void toolStripComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

            try
            {
                ToolStripComboBox comboBox = sender as ToolStripComboBox;
                string skinName = comboBox.Text;

                DevExpress.LookAndFeel.UserLookAndFeel.Default.SkinName = skinName;
                //DevExpress.Skins.SkinManager.EnableFormSkinsIfNotVista();
                //m_objMainControl.ChangeStyle(skinName);
                _UI_Interface._Form1 = this;
                _UI_Interface.ChangeStyle(skinName);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void dgvDiFF_Leave(object sender, EventArgs e)
        {
            XmlAttribute xaFile = null;
            XmlAttribute xaFreq = null;
            XmlAttribute xaValue = null;
            XmlAttribute xaValueH = null;
            string sOldFreq = null;
            string sNewFreq = null;
            XmlNodeList xnlValueNodes = null;
            string[] sarrFreq = new string[0];
            string[] sarrValue = new string[0];
            bool bError = false;
            int iRowCount = 0;
            int rownumber = 0;
            bool bNoError = true;
            try
            {

                iRowCount = dgvDiFF.Rows.Count;

                for (int i = 0; i < iRowCount - 1; i++)
                {
                    try
                    {
                        double test = Convert.ToDouble(dgvDiFF[1, i].Value.ToString());
                    }
                    catch
                    {
                        bNoError = false;
                        break;
                    }
                }

                if (bNoError)
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    //                if (!bError)
                    {
                        if (!File.Exists(sErrorLogPath + "\\FF.XML"))
                        {

                            m_xdDocument = new XmlDocument();
                            XmlNode xnBand = m_xdDocument.CreateElement("Band");
                            //XmlNode xnValues = m_xdDocument.CreateElement("Values");
                            //xnBand.AppendChild(xnValues);
                            m_xdDocument.AppendChild(xnBand);
                            m_xdDocument.Save(sErrorLogPath + "\\FF.XML");


                        }

                        {

                            m_xdDocument.Load(sErrorLogPath + "\\FF.XML");
                            string sXPath = "//Band/File";
                            string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                            XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                            if (xnFile != null)
                            {
                                xnFile.ParentNode.RemoveChild(xnFile);

                            }

                            {
                                XmlNode xnBand = m_xdDocument.SelectSingleNode("//Band");
                                XmlNode xnFilePath = m_xdDocument.CreateElement("File");
                                xaFile = m_xdDocument.CreateAttribute("Path");
                                xaFile.Value =
                                    GetPath(trlPlantMangerComponents
                                        .FocusedNode); //trlPlantMangerComponents.FocusedNode.ParentNode.GetDisplayText(0).ToString()+"\\"+trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                                xnFilePath.Attributes.Append(xaFile);

                                for (int i = 0; i < iRowCount - 1; i++)
                                {
                                    if (dgvDiFF.Rows[i].Cells[0].Value != null &&
                                        dgvDiFF.Rows[i].Cells[1].Value != null)
                                    {
                                        XmlNode xnValues = m_xdDocument.CreateElement("Values");
                                        xaFreq = m_xdDocument.CreateAttribute("Freq");
                                        xaFreq.Value = dgvDiFF.Rows[i].Cells[0].Value.ToString();
                                        xaValueH = m_xdDocument.CreateAttribute("Value");
                                        xaValueH.Value = dgvDiFF.Rows[i].Cells[1].Value.ToString();

                                        xnValues.Attributes.Append(xaFreq);
                                        xnValues.Attributes.Append(xaValueH);

                                        xnFilePath.AppendChild(xnValues);
                                    }
                                }

                                xnBand.AppendChild(xnFilePath);
                                //m_xdDocument.AppendChild(xnBand);
                                m_xdDocument.Save(sErrorLogPath + "\\FF.XML");
                            }
                            //XmlDocument m_xdDocument = new XmlDocument();
                            //XmlNode xnBand = m_xdDocument.CreateElement("Band");



                            //for (int i = 0; i < iRowCount - 1; i++)
                            //{
                            //    XmlNode xnValues = m_xdDocument.CreateElement("Values");
                            //    xaFreq = m_xdDocument.CreateAttribute("Freq");
                            //    xaFreq.Value = dgvDiFF.Rows[i].Cells[0].Value.ToString();
                            //    xaValueH = m_xdDocument.CreateAttribute("Value");
                            //    xaValueH.Value = dgvDiFF.Rows[i].Cells[1].Value.ToString();

                            //    xnValues.Attributes.Append(xaFreq);
                            //    xnValues.Attributes.Append(xaValueH);

                            //    xnBand.AppendChild(xnValues);
                            //}
                            //m_xdDocument.AppendChild(xnBand);
                            //m_xdDocument.Save(sErrorLogPath + "\\FF.XML");
                        }

                    }
                }
                else
                {
                    MessageBoxEx.Show("Error in Data Entry");
                    dgvDiFF.Focus();
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        /// <summary>
        /// Amit Jain   11-Feb-2010
        /// This Function Starts the procedure of Generating Report
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bbReport_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                _Report = new Report();
                string sPType = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                if (sPType == "CSVFile")
                {
                    string sAppType = lblApplication.Text.ToString();


                    if (sAppType == "Analyser" || sAppType == "Recorder" || sAppType == "FRF")
                    {

                        if (sParameter != null)
                        {
                            _Report._Form1 = this;
                            if (CheckForTimeData(yarrayNew))
                            {
                                _Report._ListItems =
                                    "With all parameter values % with all Parameters and graph % with User selected Parameters";
                            }
                            else
                            {
                                _Report._ListItems =
                                    "With all parameter values % with all Parameters and graph % with User selected Parameters % With Band Alarm % With Fault Frequencies % With RPM Values ";
                            }

                            _Report._ReportDataCSV = sParameter;
                            _Report._XData = xarrayNew;
                            _Report._YData = yarrayNew;
                            _Report._Xunit =
                                CurrentXLabel; // lblGrphUnitX.Text.ToString().Replace("X Unit :", " ").Trim();
                            _Report._Yunit =
                                CurrentYLabel; // lblGraphUnitY.Text.ToString().Replace("Y Unit :", " ").Trim();
                            _Report._SelectedFile = GetPath(trlPlantMangerComponents.FocusedNode);
                            _Report.ShowDialog();
                        }
                    }
                }
                else if (sPType == "WAVFile")
                {
                    if (arrWAVReportXYVals.Count > 0)
                    {
                        ArrayList WAVDataValues = new ArrayList();

                        WAVDataValues.Add(SF);
                        WAVDataValues.Add(iLastFrequency);
                        WAVDataValues.Add(LineOfResolution);
                        WAVDataValues.Add(ExectTime);

                        _Report._Form1 = this;
                        _Report._ListItems =
                            "Selected Wave"; //"With all parameter values % with all Parameters and graph % With Band Alarm % With Fault Frequencies % With RPM Values";
                        _Report._DATA = arrWAVReportXYVals;
                        _Report._WAVDataGridValue = arlSelectedDataGridValue;
                        _Report._WAVDataValues = WAVDataValues;
                        _Report._Xunit = CurrentXLabel;
                        _Report._Yunit = CurrentYLabel;
                        _Report.ShowDialog();
                    }
                    else
                    {
                        MessageBoxEx.Show("Select a wave from the graph tab then try again", "No wave selected",
                            MessageBoxButtons.OK);
                    }
                }
                else if (sPType == "OTDFile" || sPType == "FDTFile" || sPType == "DRDFile" || sPType == "FFTFile")
                {
                    {
                        _Report._Form1 = this;
                        _Report._ListItems = "Selected OTD/FDT/DRD/FFT Graph";
                        _Report._XData = xarrayNew;
                        _Report._YData = yarrayNew;
                        _Report._Xunit = CurrentXLabel; // lblGrphUnitX.Text.ToString().Replace("X Unit :", " ").Trim();
                        _Report._Yunit =
                            CurrentYLabel; // lblGraphUnitY.Text.ToString().Replace("Y Unit :", " ").Trim();
                        _Report._SelectedFile = GetPath(trlPlantMangerComponents.FocusedNode);
                        _Report._SelectedCaption = selectedFDTcaption;
                        _Report.ShowDialog();
                    }
                }
                else if (sPType == "BenstoneBALFile")
                {
                    _Report._Form1 = this;
                    _Report._ListItems = "Selected BA2/BAL Graph";
                    _Report._XData = xarray;
                    _Report._YData = Anyarray;
                    _Report._Xunit = CurrentXLabel; // lblGrphUnitX.Text.ToString().Replace("X Unit :", " ").Trim();
                    _Report._Yunit = CurrentYLabel; // lblGraphUnitY.Text.ToString().Replace("Y Unit :", " ").Trim();
                    _Report._SelectedFile = GetPath(trlPlantMangerComponents.FocusedNode);
                    _Report._SelectedCaption = selectedFDTcaption;
                    _Report.ShowDialog();
                }
                //else if (sPType == "FDTFile")
                //{
                //    //if (IsWaterfall || IsTrend)
                //    //{
                //    //}
                //    //else
                //    {
                //        _Report._Form1 = this;
                //        _Report._ListItems = "Selected FDT Graph";
                //        _Report._XData = xarrayNew;
                //        _Report._YData = yarrayNew;
                //        _Report._Xunit = CurrentXLabel;// lblGrphUnitX.Text.ToString().Replace("X Unit :", " ").Trim();
                //        _Report._Yunit = CurrentYLabel;// lblGraphUnitY.Text.ToString().Replace("Y Unit :", " ").Trim();
                //        _Report._SelectedFile = GetPath(trlPlantMangerComponents.FocusedNode);
                //        _Report._SelectedCaption = selectedFDTcaption;
                //        _Report.ShowDialog();
                //    }                    
                //}
                else
                {
                    _Report._Form1 = this;
                    _Report._ListItems = "Selected Files";
                    _Report.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbOpenInst_ItemClick(object sender, ItemClickEventArgs e)
        {
            TreeListNode node = null;
            TreeListNode node1 = null;
            string PreviousPath = trlPlantMangerComponents.Nodes.FirstNode.GetDisplayText(0).ToString();
            try
            {

                string strinsName = ExtractInstrumentName();
                if (strinsName == null)
                {
                    strinsName = " ";
                }

                string[] insName = strinsName.Split(new string[] {"|"}, StringSplitOptions.None);
                bool CheckIns = false;
                try
                {
                    if (insName[0].Contains("Benstone"))
                    {
                        CheckIns = true;
                        if (!bbOpen.Enabled)
                        {
                            bbOpenInst.Enabled = true;
                            bbOpen.Enabled = true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    CheckIns = false;
                }

                if (CheckIns == false)
                {
                    MessageBoxEx.Show("You can not use other key! Please contact the Vendor", "Wrong Key Detected",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    Environment.Exit(1);
                }
                else
                {
                    InstrumentConnection _instrument = new InstrumentConnection();
                    _instrument.Key_serial = "00000"; //insName[1].ToString();
                    //if (_instrument._AccessGranted())
                    {
                        FolderSelection();
                        _instrument.ShowDialog();
                        if (!string.IsNullOrEmpty(_instrument._LastAccessedFolder.ToString()))
                        {
                            string sPath = _instrument._LastAccessedFolder.ToString();
                            if (string.IsNullOrEmpty(sPath))
                            {
                                sPath =
                                    PreviousPath; // Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                            }

                            PATH = sPath;
                            File.Delete(sErrorLogPath + "\\AnalLog.txt");
                            trlPlantMangerComponents.Nodes.Clear();

                            aa = new FileStream(sErrorLogPath + "\\AnalLog.txt", FileMode.Create, FileAccess.ReadWrite);

                            sw = new StreamWriter(aa);
                            sw.WriteLine(sPath);
                            sw.Close();

                            try
                            {

                                // �-create the root node�-

                                node = trlPlantMangerComponents.AppendNode(new object[] {sPath}, null);
                                node.Tag = "Folder";
                                node.StateImageIndex = 0;

                                node1 = trlPlantMangerComponents.AppendNode(new object[] {""}, node);


                                trlPlantMangerComponents.FocusedNode = node;
                            }
                            catch (Exception err)
                            {
                                ErrorLog_Class.ErrorLogEntry(err);
                            }

                        }
                    }
                    //else
                    //{
                    //    MessageBoxEx.Show("Either Instrument not accessible or Key Mismatch with the Instrument", "Instrument Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //}
                }
                //For Different type of Instrument Connection
                //{
                //    InstrumentConnectionForm _Instrument = new InstrumentConnectionForm();
                //    _Instrument.Key_serial = insName[1].ToString();
                //    _Instrument.ShowDialog();
                //    string sPath = _Instrument._sPath;

                //    if (string.IsNullOrEmpty(sPath))
                //    {
                //        sPath = PreviousPath;// Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                //    }
                //    PATH = sPath;
                //    File.Delete(sErrorLogPath + "\\AnalLog.txt");
                //    trlPlantMangerComponents.Nodes.Clear();

                //    aa = new FileStream(sErrorLogPath + "\\AnalLog.txt", FileMode.Create, FileAccess.ReadWrite);

                //    sw = new StreamWriter(aa);
                //    sw.WriteLine(sPath);
                //    sw.Close();

                //    try
                //    {

                //        // �-create the root node�-

                //        node = trlPlantMangerComponents.AppendNode(new object[] { sPath }, null);
                //        node.Tag = "Folder";
                //        node.StateImageIndex = 0;

                //        node1 = trlPlantMangerComponents.AppendNode(new object[] { "" }, node);


                //        trlPlantMangerComponents.FocusedNode = node;
                //    }
                //    catch (Exception err)
                //    {

                //    }
                //}
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void gbRPM_Leave(object sender, EventArgs e)
        {
            XmlAttribute xaFile = null;
            XmlAttribute xaRPM = null;
            XmlAttribute xaPulseRev = null;
            XmlNodeList xnlValueNodes = null;
            string sRPM = "1"; // new string[0];
            string sPulse = "1"; // new string[0];
            bool bError = false;

            try
            {

                try
                {
                    int iRPM = Convert.ToInt32(txtxRPM.Text.ToString());
                    int iPulse = Convert.ToInt32(txtxPulse.Text.ToString());
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    MessageBoxEx.Show("Entered value not correct" + "\n" + "Only Numeric Values Accepted");
                    txtxRPM.Focus();
                    bError = true;
                }

                if (bError == false)
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    XmlNode xnBand = m_xdDocument.CreateElement("Band");
                    if (!File.Exists(sErrorLogPath + "\\RPM.XML"))
                    {

                        m_xdDocument.AppendChild(xnBand);
                        m_xdDocument.Save(sErrorLogPath + "\\RPM.XML");

                    }

                    {
                        m_xdDocument.Load(sErrorLogPath + "\\RPM.XML");
                        string sXPath = "//Band/File";
                        string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                        XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                        if (xnFile != null)
                        {
                            xnFile.ParentNode.RemoveChild(xnFile);

                        }

                        {
                            xnBand = m_xdDocument.SelectSingleNode("//Band");
                            XmlNode xnFilePath = m_xdDocument.CreateElement("File");
                            xaFile = m_xdDocument.CreateAttribute("Path");
                            xaFile.Value =
                                GetPath(trlPlantMangerComponents
                                    .FocusedNode); //trlPlantMangerComponents.FocusedNode.ParentNode.GetDisplayText(0).ToString()+"\\"+trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                            xnFilePath.Attributes.Append(xaFile);

                            //for (int i = 0; i < iRowCount - 1; i++)
                            {
                                XmlNode xnValues = m_xdDocument.CreateElement("Values");
                                xaRPM = m_xdDocument.CreateAttribute("Freq");
                                xaRPM.Value = txtxRPM.Text.ToString();
                                xaPulseRev = m_xdDocument.CreateAttribute("Value");
                                xaPulseRev.Value = txtxPulse.Text.ToString();

                                xnValues.Attributes.Append(xaRPM);
                                xnValues.Attributes.Append(xaPulseRev);

                                xnFilePath.AppendChild(xnValues);
                            }
                            xnBand.AppendChild(xnFilePath);
                            //m_xdDocument.AppendChild(xnBand);
                        }
                        m_xdDocument.Save(sErrorLogPath + "\\RPM.XML");
                    }

                    //XmlNode xnValues = m_xdDocument.CreateElement("Values");
                    //xaRPM = m_xdDocument.CreateAttribute("RPM");
                    //xaRPM.Value = txtxRPM.Text.ToString();
                    //xaPulseRev = m_xdDocument.CreateAttribute("Pulse");
                    //xaPulseRev.Value = txtxPulse.Text.ToString();

                    //xnValues.Attributes.Append(xaRPM);
                    //xnValues.Attributes.Append(xaPulseRev);

                    //xnBand.AppendChild(xnValues);

                    //m_xdDocument.AppendChild(xnBand);
                    //m_xdDocument.Save(sErrorLogPath + "\\RPM.XML");
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        //Amit Jain     DA_30	click the demo then click the next ,graph will bold. And it also happened for previous button	code related	minor 	8-4-2010
        private void dataGridView2_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            //try
            //{
            //    int count = dataGridView2.Rows.Count;
            //    if (count > 2)
            //    {
            //        bbZoom.Enabled = false;
            //        AreaGraphButtonEnabled = false;
            //        bbOctave.Enabled = false;
            //        bbCepstrum.Enabled = false;
            //        bbGraphBack.Enabled = true;
            //        bbGraphNext.Enabled = true;
            //        ExtraZoomButtonEnabled = false;
            //        bbChangeXUnit.Enabled = false;
            //        bbChangeYUnit.Enabled = false;
            //    }
            //    else
            //    {
            //        bbGraphBack.Enabled = false;
            //        bbGraphNext.Enabled = false;
            //        ExtraZoomButtonEnabled = true;
            //        if (IsWaterfall || IsTrend)
            //        {
            //        }
            //        else
            //        {
            //            bbChangeXUnit.Enabled = true;
            //            bbChangeYUnit.Enabled = true;
            //        }
            //    }
            //    if (lblApplication.Text.ToString() == "FRF")
            //    {
            //        bbOctave.Enabled = false;
            //        bbCepstrum.Enabled = false;
            //        bbGraphBack.Enabled = false;
            //        bbGraphNext.Enabled = false;
            //        ExtraZoomButtonEnabled = false;
            //        bbChangeXUnit.Enabled = false;
            //        bbChangeYUnit.Enabled = false;
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //}

        }

        //Amit Jain     DA_30	click the demo then click the next ,graph will bold. And it also happened for previous button	code related	minor 	8-4-2010
        private void dataGridView2_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            //try
            //{
            //    int count = dataGridView2.Rows.Count;
            //    if (count < 2)
            //    {
            //        bbZoom.Enabled = true;
            //        AreaGraphButtonEnabled = true;
            //        bbOctave.Enabled = true;
            //        bbCepstrum.Enabled = true;
            //        bbGraphBack.Enabled = true;
            //        bbGraphNext.Enabled = true;
            //        ExtraZoomButtonEnabled = true;
            //        if (IsWaterfall||IsTrend)
            //        {
            //        }
            //        else
            //        {
            //            bbChangeXUnit.Enabled = true;
            //            bbChangeYUnit.Enabled = true;
            //        }
            //    }
            //    else
            //    {
            //        bbGraphBack.Enabled = false;
            //        bbGraphNext.Enabled = false;
            //        ExtraZoomButtonEnabled = false;
            //        bbChangeXUnit.Enabled = false;
            //        bbChangeYUnit.Enabled = false;
            //    }
            //    if (lblApplication.Text.ToString() == "FRF")
            //    {
            //        bbOctave.Enabled = false;
            //        bbCepstrum.Enabled = false;
            //        bbGraphBack.Enabled = false;
            //        bbGraphNext.Enabled = false;
            //        ExtraZoomButtonEnabled = false;
            //        bbChangeXUnit.Enabled = false;
            //        bbChangeYUnit.Enabled = false;
            //    }
            //}
            //catch (Exception ex)
            //{
            //    ErrorLog_Class.ErrorLogEntry(ex);
            //}
        }

        //private void bbPhase_ItemClick(object sender, ItemClickEventArgs e)
        //{
        //    try
        //    {
        //        bPhase = true;
        //        tsbtnPhase_Click(sender, null);
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        //private void Form1_Resize(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        gpDisplacement.Height = tpConfCheck.Height / 3;
        //        gpVelocity.Height = gpDisplacement.Height;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        private void gbBearingFF_Leave(object sender, EventArgs e)
        {
            XmlAttribute xaFile = null;
            XmlAttribute xaBRF = null;
            XmlAttribute xaBDIR = null;
            XmlAttribute xaBDOR = null;
            XmlAttribute xaBCA = null;
            XmlAttribute xaBDRE = null;
            XmlAttribute xaBNRE = null;
            XmlAttribute xaSelected = null;
            XmlAttribute xaManufacturar = null;
            XmlAttribute xaBearingNumber = null;
            XmlNodeList xnlValueNodes = null;
            //string sRPM = "1";// new string[0];
            //string sPulse = "1";// new string[0];
            bool bError = false;
            int selection = 0;
            int iBRF = 0;
            int iBDIR = 0;
            int iBDOR = 0;
            int iBCA = 0;
            int iBDRE = 0;
            int iBNRE = 0;
            int Manufacturar = 0;
            int BearingNumber = 0;
            try
            {



                if (rbPhysicalDimensions.Checked)
                {
                    selection = 0;
                    try
                    {
                        iBRF = Convert.ToInt32(txtxBRF.Text.ToString());
                        iBDIR = Convert.ToInt32(txtxBDIR.Text.ToString());
                        iBDOR = Convert.ToInt32(txtxBDOR.Text.ToString());
                        iBCA = Convert.ToInt32(txtxBCA.Text.ToString());
                        iBDRE = Convert.ToInt32(txtxBDRE.Text.ToString());
                        iBNRE = Convert.ToInt32(txtxBNRE.Text.ToString());





                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        MessageBoxEx.Show("Entered value not correct" + "\n" + "Only Numeric Values Accepted");
                        txtxBRF.Focus();
                        bError = true;
                    }
                }
                else
                {
                    selection = 1;
                    try
                    {
                        if (!string.IsNullOrEmpty(cmbbxManufacturer.SelectedItem.ToString()) &&
                            !string.IsNullOrEmpty(cmbbxBearingNumber.SelectedItem.ToString()))
                        {
                            Manufacturar = Convert.ToInt32(cmbbxManufacturer.SelectedIndex.ToString());
                            BearingNumber = Convert.ToInt32(cmbbxBearingNumber.SelectedIndex.ToString());
                        }
                        else
                        {
                            MessageBoxEx.Show("Manufacturer Name or Bearing Number can not be blank",
                                "Selection Error");
                            cmbbxManufacturer.Focus();
                            bError = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);
                        cmbbxManufacturer.Focus();
                        MessageBoxEx.Show("Manufacturer Name or Bearing Number can not be blank", "Selection Error");
                        bError = true;
                    }
                }

                if (bError == false)
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    XmlNode xnBand = m_xdDocument.CreateElement("Band");
                    if (!File.Exists(sErrorLogPath + "\\BFF.XML"))
                    {

                        m_xdDocument.AppendChild(xnBand);
                        m_xdDocument.Save(sErrorLogPath + "\\BFF.XML");

                    }

                    {
                        m_xdDocument.Load(sErrorLogPath + "\\BFF.XML");
                        string sXPath = "//Band/File";
                        string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                        XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                        if (xnFile != null)
                        {
                            xnFile.ParentNode.RemoveChild(xnFile);

                        }

                        {
                            xnBand = m_xdDocument.SelectSingleNode("//Band");
                            XmlNode xnFilePath = m_xdDocument.CreateElement("File");
                            xaFile = m_xdDocument.CreateAttribute("Path");
                            xaFile.Value =
                                GetPath(trlPlantMangerComponents
                                    .FocusedNode); //trlPlantMangerComponents.FocusedNode.ParentNode.GetDisplayText(0).ToString()+"\\"+trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                            xnFilePath.Attributes.Append(xaFile);

                            //for (int i = 0; i < iRowCount - 1; i++)
                            {
                                XmlNode xnValues = m_xdDocument.CreateElement("Values");

                                xaSelected = m_xdDocument.CreateAttribute("Selected");
                                xaSelected.Value = selection.ToString();

                                xaBRF = m_xdDocument.CreateAttribute("BRF");
                                xaBRF.Value = iBRF.ToString();

                                xaBDIR = m_xdDocument.CreateAttribute("BDIR");
                                xaBDIR.Value = iBDIR.ToString();

                                xaBDOR = m_xdDocument.CreateAttribute("BDOR");
                                xaBDOR.Value = iBDOR.ToString();

                                xaBCA = m_xdDocument.CreateAttribute("BCA");
                                xaBCA.Value = iBCA.ToString();

                                xaBDRE = m_xdDocument.CreateAttribute("BDRE");
                                xaBDRE.Value = iBDRE.ToString();

                                xaBNRE = m_xdDocument.CreateAttribute("BNRE");
                                xaBNRE.Value = iBNRE.ToString();

                                xaManufacturar = m_xdDocument.CreateAttribute("Manufacturar");
                                xaManufacturar.Value = Manufacturar.ToString();

                                xaBearingNumber = m_xdDocument.CreateAttribute("BearingNumber");
                                xaBearingNumber.Value = BearingNumber.ToString();

                                xnValues.Attributes.Append(xaSelected);
                                xnValues.Attributes.Append(xaBRF);
                                xnValues.Attributes.Append(xaBDIR);
                                xnValues.Attributes.Append(xaBDOR);
                                xnValues.Attributes.Append(xaBCA);
                                xnValues.Attributes.Append(xaBDRE);
                                xnValues.Attributes.Append(xaBNRE);
                                xnValues.Attributes.Append(xaManufacturar);
                                xnValues.Attributes.Append(xaBearingNumber);
                                xnFilePath.AppendChild(xnValues);
                            }
                            xnBand.AppendChild(xnFilePath);
                            //m_xdDocument.AppendChild(xnBand);
                        }
                        m_xdDocument.Save(sErrorLogPath + "\\BFF.XML");
                    }

                    //XmlNode xnValues = m_xdDocument.CreateElement("Values");
                    //xaRPM = m_xdDocument.CreateAttribute("RPM");
                    //xaRPM.Value = txtxRPM.Text.ToString();
                    //xaPulseRev = m_xdDocument.CreateAttribute("Pulse");
                    //xaPulseRev.Value = txtxPulse.Text.ToString();

                    //xnValues.Attributes.Append(xaRPM);
                    //xnValues.Attributes.Append(xaPulseRev);

                    //xnBand.AppendChild(xnValues);

                    //m_xdDocument.AppendChild(xnBand);
                    //m_xdDocument.Save(sErrorLogPath + "\\RPM.XML");
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        private void bbReportSetting_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                SelectedReport _selectedReport = new SelectedReport();
                _selectedReport.ShowDialog();
                SelectedHash = _selectedReport._HashTable;
            }
            catch (Exception ex)
            {
            }

        }

        private void rbBearingNumber_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rbBearingNumber.Checked)
                {
                    cmbbxManufacturer.Enabled = true;
                    cmbbxBearingNumber.Enabled = true;
                    //CheckRockey();
                }
                else
                {
                    cmbbxManufacturer.Enabled = false;
                    cmbbxBearingNumber.Enabled = false;
                }

                cmbbxManufacturer.Text = "";
                cmbbxBearingNumber.Text = "";
                tbBalls.Text = "0";
                tbBPFI.Text = "0";
                tbBPFO.Text = "0";
                tbBSF.Text = "0";
                tbFTF.Text = "0";
            }
            catch (Exception ex)
            {
            }
        }

        private void rbPhysicalDimensions_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rbPhysicalDimensions.Checked)
                {
                    txtxBCA.Enabled = true;
                    txtxBDIR.Enabled = true;
                    txtxBDOR.Enabled = true;
                    txtxBDRE.Enabled = true;
                    txtxBNRE.Enabled = true;
                    txtxBRF.Enabled = true;
                    btnxCalculateFreq.Enabled = true;
                }
                else
                {
                    txtxBCA.Enabled = false;
                    txtxBDIR.Enabled = false;
                    txtxBDOR.Enabled = false;
                    txtxBDRE.Enabled = false;
                    txtxBNRE.Enabled = false;
                    txtxBRF.Enabled = false;
                    btnxCalculateFreq.Enabled = false;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void cmbbxManufacturer_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (rbBearingNumber.Checked)
                {

                    if (cmbbxManufacturer.SelectedItem.ToString() != PreviousManufacturer)
                    {
                        cmbbxBearingNumber.Items.Clear();
                        cmbbxBearingNumber.Text = "";
                        tbBalls.Text = "0";
                        tbBPFI.Text = "0";
                        tbBPFO.Text = "0";
                        tbBSF.Text = "0";
                        tbFTF.Text = "0";

                        _BLC.GetBearings(cmbbxManufacturer.SelectedItem.ToString());
                        PreviousManufacturer = cmbbxManufacturer.SelectedItem.ToString();
                        if (cmbbxBearingNumber.Enabled == false)
                        {
                            cmbbxBearingNumber.Enabled = true;
                        }

                        cmbbxBearingNumber.Items.AddRange(_BLC._SelectedBearings);
                    }

                    //CheckRockey();
                }
                else
                {
                    cmbbxManufacturer.Text = "";
                    cmbbxBearingNumber.Items.Clear();
                    cmbbxBearingNumber.Text = "";
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void cmbbxBearingNumber_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                _BLC.GetBearingData(cmbbxBearingNumber.SelectedItem.ToString());
                tbBalls.Text = _BLC._Balls.ToString();
                tbBPFI.Text = _BLC._BPFI.ToString();
                tbBPFO.Text = _BLC._BPFO.ToString();
                tbBSF.Text = _BLC._BSF.ToString();
                tbFTF.Text = _BLC._FTF.ToString();
            }
            catch (Exception ex)
            {
            }
        }

        private void btnxCalculateFreq_Click(object sender, EventArgs e)
        {
            bool bError = false;
            try
            {
                double NumberOfBalls = Convert.ToDouble(txtxBNRE.Text.ToString());
                double BearingPitchDiameter =
                    Convert.ToDouble(((Convert.ToDouble(txtxBDIR.Text.ToString()) +
                                       Convert.ToDouble(txtxBDOR.Text.ToString())) / 2));
                double RollingElementDiameter = Convert.ToDouble(txtxBDRE.Text.ToString());
                double ContactAngle = Convert.ToDouble(txtxBCA.Text.ToString());
                double
                    ShaftSpeed =
                        1; //Convert.ToDouble(txtxRPM.Text.ToString()) / Convert.ToDouble(txtxPulse.Text.ToString());



                if (NumberOfBalls <= 0)
                {
                    MessageBoxEx.Show("Number of Balls/Rolling Elements must be greater than 0", "Ball Error");
                    bError = true;
                    txtxBNRE.Focus();
                }
                else if (BearingPitchDiameter <= 0)
                {
                    MessageBoxEx.Show(
                        "Outer race and Inner race should be greater than 0 " + "\n" + "and" + "\n" +
                        "Outer race should be greater than Inner Race", "Bearing Pitch Error");
                    txtxBDIR.Focus();
                    bError = true;
                }
                else if (RollingElementDiameter <= 0)
                {
                    MessageBoxEx.Show("Balls/Rolling Element diameter should be greater than 0", "Ball Error");
                    txtxBDRE.Focus();
                    bError = true;
                }
                else if (RollingElementDiameter >= BearingPitchDiameter)
                {
                    MessageBoxEx.Show("Ball Diameter should be less than Bearing Pitch Diameter", "Ball Error");
                    txtxBDRE.Focus();
                    bError = true;
                }



                if (!bError)
                {

                    ArrayList BearingFaultFrequencies = _BFFInterface.CalculateBearingFaultFrequencies(ShaftSpeed,
                        NumberOfBalls, BearingPitchDiameter, RollingElementDiameter, ContactAngle);
                    tbBalls.Text = NumberOfBalls.ToString();
                    tbBPFI.Text = _BFFInterface._BPFI.ToString();
                    tbBPFO.Text = _BFFInterface._BPFO.ToString();
                    tbBSF.Text = _BFFInterface._BSF.ToString();
                    tbFTF.Text = _BFFInterface._FTF.ToString();
                }
            }
            catch (Exception ex)
            {
                txtxBNRE.Focus();
                MessageBoxEx.Show("Please Enter Correct data", "Wrong Data");
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void repositoryItemComboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                //iBearingHarmonics = Convert.ToInt32(());
                //panel1.Refresh();
                //DrawBearingFaultFrequency();
            }
            catch (Exception ex)
            {
            }
        }

        #endregion




















        #region Coding for new graphs


        //PInvoke DLL's
        [DllImport("user32.dll")]
        static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, int dwExtraInfo);

        [DllImport("user32.dll")]
        internal static extern short GetKeyState(int keyCode);


        //Variables
        Dat_Interface _DAT_Interface = new Dat_Control();

        //Elite_Interface _FD2_Interface = new Elite_Class();
        Elite_Interface _FD2_Interface = new DummyEliteClass();
        BearingFF_Interface _BFFInterface = new BearingFF_Control();
        Color MainCursor = Color.Black;
        Color GraphBG1 = Color.White;
        Color GraphBG2 = Color.White;
        Color ChartBG1 = Color.White;
        Color ChartBG2 = Color.White;
        Color AxisColor = Color.Black;
        int GraphBGDir = 0;
        int ChartBGDir = 0;
        Hashtable DroppedTable = new Hashtable();
        Hashtable DroppedWaterFallTable = new Hashtable();
        ArrayList _arlstPath = new ArrayList();
        ArrayList _arlstPath1 = new ArrayList();
        LineGraphControl _LineGraph = null;
        _3DGraphControl _3DGraph = null;
        BarChart _BarGraph = null;
        PolarPlot _OrbitGraph = null;

        string CurrentXLabel = null;
        string CurrentYLabel = null;
        double[] PreviousxarrayNew = null;
        double[] PreviousyarrayNew = null;
        string PreviousXLabel = null;
        string PreviousYLabel = null;
        double[] PreviousxarrayNewCep = null;
        double[] PreviousyarrayNewCep = null;
        string PreviousXLabelCep = null;
        string PreviousYLabelCep = null;
        bool bConvertToFFT = false;
        ArrayList PreviousDatasets = new ArrayList();
        bool _AreaPlot = false;
        bool IsBandAreaPlot = false;
        double[] xarrayNew = new double[0];
        double[] yarrayNew = new double[0];
        int iBearingHarmonics = 1;
        string[] BandAlarmsValues = null;
        bool _BearingFaultFrequency = false;
        bool FaultFreq = false;
        bool ShowRpmRatio = false;
        bool HeighestFive = false;
        double[] Peeks1 = new double[0];
        int[] Peeks = new int[0];
        string[] BndAlrmsHigh = null;
        string[] BndAlrmsLow = null;
        string[] BndAlrmsFreq = null;
        int selectGraphNumber = 0;
        ArrayList DataSelected = new ArrayList();
        double[] Top5points = new double[5];
        double[] Top5pointsX = new double[5];
        double[] ExactBearingFF = new double[0];
        string sDatagridCaption = null;
        private Microsoft.Office.Interop.Excel.Application ExcelApp;
        private Microsoft.Office.Interop.Excel.Workbook objBook;
        private Microsoft.Office.Interop.Excel.Worksheet objSheet;
        private Microsoft.Office.Interop.Excel.Range range;
        double OctaveOrder = 0;
        string OctaveStyle = null;
        double[] octaveCenterData = new double[0];
        double[] octaveLowerData = new double[0];
        double[] octaveUpperData = new double[0];
        double[] dActXData = new double[0];
        string ChartFooter = null;
        int SelectedRowIndex = 0;
        bool bOrderTracking = false;

        string[] ColorCode =
        {
            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
            "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869",
            "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065",
            "744352"
        };

        bool bFarzi = false;
        string selectedFDTcaption = null;

        //Properties
        public Color _AxisColor
        {
            get { return AxisColor; }
            set { AxisColor = value; }
        }

        public Color _MainCursorColor
        {
            get { return MainCursor; }
            set { MainCursor = value; }
        }

        public Color _GraphBG1
        {
            get { return GraphBG1; }
            set { GraphBG1 = value; }
        }

        public Color _GraphBG2
        {
            get { return GraphBG2; }
            set { GraphBG2 = value; }
        }

        public int _GraphBGDir
        {
            get { return GraphBGDir; }
            set { GraphBGDir = value; }
        }

        public Color _ChartBG1
        {
            get { return ChartBG1; }
            set { ChartBG1 = value; }
        }

        public Color _ChartBG2
        {
            get { return ChartBG2; }
            set { ChartBG2 = value; }
        }

        public int _ChartBGDir
        {
            get { return ChartBGDir; }
            set { ChartBGDir = value; }
        }

        public Hashtable _DroppedTable
        {
            set { DroppedTable = value; }
        }

        public Hashtable _DroppedWaterfallTable
        {
            set { DroppedWaterFallTable = value; }
        }

        public bool SetIsTrend
        {
            get { return IsTrend; }
            set
            {
                IsTrend = value;
                if (IsTrend)
                {
                    bbTrend.Caption = "Untrend";
                }
                else
                {
                    bbTrend.Caption = "Trend";
                }

                TrendingButtons(value);
            }
        }

        public bool BearingFaultFrequency
        {
            get { return _BearingFaultFrequency; }
            set
            {
                _BearingFaultFrequency = value;
                if (_BearingFaultFrequency)
                {
                    chkBFFOverride.Visibility = BarItemVisibility.Always;
                    barEditBearingHarmonics.Visibility = BarItemVisibility.Always;
                    chkBFFOverride.Checked = false;
                    if (_LineGraph != null)
                    {
                        _LineGraph._IsBearingFF = chkBFFOverride.Checked;
                    }
                }
                else
                {
                    chkBFFOverride.Visibility = BarItemVisibility.Never;
                    barEditBearingHarmonics.Visibility = BarItemVisibility.Never;
                    chkBFFOverride.Checked = false;
                    if (_LineGraph != null)
                    {
                        _LineGraph._IsBearingFF = chkBFFOverride.Checked;
                    }
                }
            }
        }

        public double[] _ExactBearingFF
        {
            get { return ExactBearingFF; }
            set { ExactBearingFF = value; }
        }

        public BarChart _BarChartControl
        {
            get { return _BarGraph; }
            set { _BarGraph = value; }
        }

        public string _ChartFooter
        {
            get { return ChartFooter; }
            set { ChartFooter = value; }
        }

        public bool IsAreaPlot
        {
            get { return _AreaPlot; }
            set
            {
                _AreaPlot = value;
                if (_LineGraph != null)
                {
                    _LineGraph._AreaFill = value;
                }
            }
        }

        public bool ribbonControl1Enabled
        {
            set
            {
                bbArea.Enabled = value;

                bbBand.Enabled = value;
                bbBearingFF.Enabled = value;
                bbCepstrum.Enabled = value;
                bbChangeXUnit.Enabled = value;
                bbChangeYUnit.Enabled = value;

                bbConvertToFFT.Enabled = value;
                bbCopyData.Enabled = value;

                bbFaultFreq.Enabled = value;
                bbGraphBack.Enabled = value;
                bbGraphNext.Enabled = value;
                bbOctave.Enabled = value;
                bbOrbit.Enabled = value;
                bbOriginal.Enabled = value;
                bbPhase.Enabled = value;
                bbRPM.Enabled = value;
                bbSBRatio.Enabled = value;
                bbSBTrend.Enabled = value;
                bbSBValue.Enabled = value;
                bbSCL.Enabled = value;
                bbTrend.Enabled = value;
                bbWaterfall.Enabled = value;
                bbWav.Enabled = value;
                bcmCursors.Enabled = value;
            }
        }

        public int _SelectedRowIndex
        {
            get { return SelectedRowIndex; }
            set { SelectedRowIndex = value; }
        }


        //Public functions
        public void DragTrendArrayList()
        {
            try
            {
                _arlstPath = new ArrayList();
            }
            catch (Exception ex)
            {
            }
        }

        public ArrayList ReadDroppedWaterfallCSVFile()
        {
            TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
            string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
            string[] ColorCode =
            {
                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
                "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                "6737204", "16728065", "744352"
            };
            string source = null;
            try
            {
                source = GetPath(selectedNode).TrimEnd(new char[] {'\\'});
                bool Same = ReadCSVfileForData(source);
                if (Same)
                {
                    try
                    {
                        DroppedWaterFallTable.Add(source, Same);
                        ReadCSVfile(source);
                        _arlstPath1.Add(xarrayNew);
                        _arlstPath1.Add(yarrayNew);
                        arlstSColors.Add(ColorCode[(_arlstPath1.Count / 2) - 1].ToString());
                        arlSelectedDataGridValue.Add("ch1 " + (DroppedWaterFallTable.Count - 1).ToString());
                        return _arlstPath1;
                    }
                    catch (Exception ex)
                    {
                        MessageBoxEx.Show("File Already Dropped");
                        return null;
                    }
                }
                else
                {
                    MessageBoxEx.Show("Selected file does not have the same parameters");
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ArrayList ReadDroppedCSVFile()
        {
            TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
            string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
            string[] ColorCode =
            {
                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
                "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                "6737204", "16728065", "744352"
            };
            string source = null;
            try
            {
                source = GetPath(selectedNode).TrimEnd(new char[] {'\\'});
                bool Same = ReadCSVfileForData(source);
                if (Same)
                {
                    try
                    {
                        bbUnzoom_ItemClick(null, null);
                        DroppedTable.Add(source, Same);
                        ReadCSVfile(source);
                        _arlstPath.Add(xarrayNew);
                        _arlstPath.Add(yarrayNew);
                        arlstSColors.Add(ColorCode[(_arlstPath.Count / 2) - 1].ToString());
                        arlSelectedDataGridValue.Add("ch1 " + (DroppedTable.Count - 1).ToString());
                        sDatagridCaption = source;
                        return _arlstPath;
                    }
                    catch (Exception ex)
                    {
                        MessageBoxEx.Show("File Already Dropped");
                        return null;
                    }
                }
                else
                {
                    MessageBoxEx.Show("Selected file does not have the same parameters");
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public string ReadDroppedCSVFilePath()
        {
            TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
            string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
            string[] ColorCode =
            {
                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
                "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                "6737204", "16728065", "744352"
            };
            string source = null;
            try
            {
                source = GetPath(selectedNode).TrimEnd(new char[] {'\\'});
                bool Same = ReadCSVfileForData(source);
                if (!Same)
                {
                    MessageBoxEx.Show("Selected file does not have the same parameters");
                    source = null;
                }
            }
            catch (Exception ex)
            {
            }

            return source;
        }


        public void Set_iClick(Function function)
        {
            try
            {
                switch (function)
                {
                    case Function.Add:
                    {
                        iclick++;
                        break;
                    }
                    case Function.Subtract:
                    {
                        iclick--;
                        break;
                    }
                    case Function.Clear:
                    {
                        iclick = 1;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        public void Set_jClick(Function function)
        {
            try
            {
                switch (function)
                {
                    case Function.Add:
                    {
                        jclick++;
                        break;
                    }
                    case Function.Subtract:
                    {
                        jclick--;
                        break;
                    }
                    case Function.Clear:
                    {
                        jclick = 1;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        public void NewItemClick()
        {
            try
            {
                PreviousDatasets = new ArrayList();
                PreviousxarrayNew = new double[0];
                PreviousyarrayNew = new double[0];
                PreviousXLabel = "X axis";
                PreviousYLabel = "Y axis";

                bConvertToFFT = false;


                SingleCrs = false;
                HarmncCrs = false;
                SideBndCsr = false;
                SideBndCsrRatio = false;
                PeekCursor = false;
                SideBandTrndDrw = false;
                LineCursor = false;
                SqureCrs = false;
                HarmncCrs = false;
                SingleCrs = false;
                TwDSingleSqrCrs = false;
                TwoDCrossHairCursor = false;

                IsAreaPlot = false;
                cepstrum = false;
                FaultFreq = false;
                ShowRpmRatio = false;
                //AreaPlot = false;
                //BtnOk = 1;
                //MultipleCrsr = false;
                //cepstrum = false;
                //Datagrid3visible = false;
                //Zoom = false;
                //XZoom = null;
                //YZoom = null;
                //ZoomedY = null;
                //ZommedX = null;
                //PtsForZoom = null;
                //PtsZoomedVals = null;
                //ZommArrCtr = 0;
                //BearingFaultFrequency = false;
            }
            catch (Exception ex)
            {
            }
        }

        public void FillLastCellWhite()
        {
            ImageList objlistimg1 = new ImageList();
            try
            {
                objlistimg1.Images.Add(Resources.White);
                dataGridView2.Rows[0].Cells[0].Value = "";
                dataGridView2.Rows[0].Cells[1].Value = "";
                dataGridView2.Rows[0].Cells[3].Value = objlistimg1.Images[0];
                //lblDate.Text = "Date : " + dataGridView2.Rows[0].Cells[0].Value.ToString();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        public void NullMarkerBools()
        {
            try
            {
                FaultFreq = false;
                ShowRpmRatio = false;
                BearingFaultFrequency = false;
                Datagrid3visible = false;
                IsBandAreaPlot = false;
                DataGridSettingForBandAlarm(IsBandAreaPlot);
            }
            catch (Exception ex)
            {
            }
        }

        public void NullCursorBools()
        {
            try
            {

                SingleCrs = false;
                HarmncCrs = false;
                SideBndCsr = false;
                SideBndCsrRatio = false;
                PeekCursor = false;
                SideBandTrndDrw = false;
                LineCursor = false;
                SqureCrs = false;
                HarmncCrs = false;
                SingleCrs = false;
                TwDSingleSqrCrs = false;
                TwoDCrossHairCursor = false;
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        public void callBFF()
        {
            ArrayList BearingFF = GetBearingFaultFrequencies();
            string[] Frequencies = new string[BearingFF.Count];
            for (int i = 0; i < BearingFF.Count; i++)
            {
                Frequencies[i] = BearingFF[i].ToString();
            }

            bool bReturned = _LineGraph.DrawFaultFrequencies(BearingFaultFrequency, Frequencies, dataGridView3);
        }

        public void CmbCursorSelectedItem(string SelectedEditValue)
        {
            try
            {
                cmbCurSors.SelectedItem = SelectedEditValue;
                bcmCursors.EditValue = SelectedEditValue;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }


        //Enum
        public enum Function
        {
            Add,
            Subtract,
            Clear
        };


        //Events
        private void trlPlantMangerComponents_FocusedNodeChanged(object sender,
            DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {
            try
            {
                // SetAxis();
                TreeListNode SelectedNode = e.Node;
                if ((!SetIsTrend && !IsWaterfall) || previousnode == "WAVFile" || previousnode == "DATFile"
                ) // if (!SetIsTrend && !IsWaterfall)
                {
                    ClearAllGraphs();
                    GetBandData();
                    GetFaultFreq();
                    GetRPMData();
                    GetBFFData();
                    Set_iClick(Function.Clear);
                    Set_jClick(Function.Clear);
                    ribbonControl1Enabled = true;
                    NullMarkerBools();
                }

                string SelectedNodePath = GetPath(SelectedNode).TrimEnd(new char[] {'\\'});
                NullCursorBools();
                // NullMarkerBools();

                tpGraph.Text = "Graph";
                bbPhase.Visibility = BarItemVisibility.Never;
                dataGridViewX1.Visible = false;
                expandableSplitter5.Visible = false;
                DataSelected = new ArrayList();
                sDatagridCaption = null;
                bRucd = false;
                SetLabelDefault();
                SetDatagridtoOriginal();
                ChartFooter = null;
                switch (SelectedNode.Tag.ToString())
                {
                    case "FFTFile":
                    {
                        SetIsTrend = false;
                        IsWaterfall = false;
                        selectGraphNumber = 0;
                        ClickFFTFile(SelectedNodePath);
                        break;
                    }
                    case "DRDFile":
                    {
                        SetIsTrend = false;
                        IsWaterfall = false;
                        selectGraphNumber = 0;
                        ClickDRDFile(SelectedNodePath);
                        break;
                    }
                    case "OTDFile":
                    {
                        SetIsTrend = false;
                        IsWaterfall = false;
                        selectGraphNumber = 0;
                        ClickODTFile(SelectedNodePath);

                        break;
                    }
                    case "FDTFile":
                    {
                        selectGraphNumber = 0;
                        SetIsTrend = false;
                        IsWaterfall = false;
                        ClickFDTFile(SelectedNodePath);

                        break;
                    }
                    case "CSVFile":
                    {
                        tcMain.Enabled = true;
                        if (previousnode == "WAVFile" || previousnode == "DATFile")
                        {
                            SetButtons(trlPlantMangerComponents.FocusedNode.Tag.ToString());
                            //BandAlarmButtons(false);
                        }

                        //BandAlarmButtons(false);
                        if (SetIsTrend || IsWaterfall)
                        {
                        }
                        else
                        {
                            BandAlarmButtons(false);
                            selectGraphNumber = 0;
                            previousnode = "CSVFile";
                            NewItemClickSettings();
                            RemovePreviousGraphControl();
                            arlstSColors = new ArrayList();
                            tlnNodeBeforeTrend = SelectedNode;
                            _arlstPath = new ArrayList();
                            int DeleteCtr = 0;
                            bool DeleteError = false;
                            string Dest = AppDomain.CurrentDomain.BaseDirectory + "Temp.csv";

                            while (File.Exists(Dest))
                            {
                                File.SetAttributes(Dest, FileAttributes.Normal);
                                File.Delete(Dest);
                                DeleteCtr++;
                                if (DeleteCtr > 10)
                                {
                                    MessageBoxEx.Show("Error. Restart the System");
                                    DeleteError = true;
                                    break;
                                }
                            }

                            if (DeleteError)
                            {
                                this.Close();
                            }

                            File.Copy(SelectedNodePath, Dest, true);

                            string AppType = ReadCSVfile(Dest, true);
                            switch (AppType)
                            {
                                case "Analyser":
                                case "Recorder":
                                {
                                    _arlstPath.Add(xarrayNew);
                                    _arlstPath.Add(yarrayNew);
                                    SetButtons(0);
                                    bool IsTimeGraph = CheckForTimeData(yarrayNew);
                                    if (IsTimeGraph)
                                    {
                                        CurrentGraph = "Time";
                                        setCursorCombo("Time");
                                    }
                                    else
                                    {
                                        CurrentGraph = "FFT";
                                        setCursorCombo("FFT");
                                    }

                                    dataGridView2.Rows.Clear();
                                    FillLastCellWhite();
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value =
                                        trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "√";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[0];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = "7667712";
                                    DrawLineGraphs((int) _arlstPath.Count / 2, _arlstPath);
                                    break;
                                }
                                case "CtC":
                                {
                                    SetButtons(1);
                                    GetConfCheckImages(Dest);
                                    lblApplication.Text = "Conformance Check";
                                    break;
                                }
                                case "FRF":
                                case "RuCd":
                                {
                                    SetButtons(2);
                                    bbphaseCtr = 0;

                                    RuCdFunction();
                                    break;
                                    // else if (sApp == "RuCd" || sApp == "FRF")
                                    //{
                                    //    bbphaseCtr = 0;
                                    //    bbPhase.Caption = "View Phase";
                                    //    bbPhase.Visibility = BarItemVisibility.Always;
                                    //    tsbtnRuCD_Click(null, null);
                                    //    //sParameter = null;
                                    //}
                                }
                            }
                        }

                        break;
                    }
                    case "WAVFile":
                    {
                        previousnode = "WAVFile";
                        SetButtons(trlPlantMangerComponents.FocusedNode.Tag.ToString());
                        NewItemClickSettings();
                        tcMain.Enabled = true;
                        RemovePreviousGraphControl();
                        dataGridView2.Rows.Clear();
                        FillLastCellWhite();
                        arrWAVReportXYVals = new ArrayList();
                        selectGraphNumber = 0;
                        dataGridViewX1.Rows.Clear();
                        TreeListNode _TLN = SelectedNode;
                        string[] ACTPath = new string[0];
                        while (_TLN.ParentNode != null)
                        {
                            _TLN = _TLN.ParentNode;
                            //Array.Resize(ref ACTPath, ACTPath.Length + 1);
                            _ResizeArray.IncreaseArrayString(ref ACTPath, 1);
                            ACTPath[ACTPath.Length - 1] = _TLN.GetDisplayText(0).ToString();
                        }

                        PATH = null;
                        for (int i = ACTPath.Length - 1; i >= 0; i--)
                        {
                            PATH += ACTPath[i].ToString() + "\\";
                        }

                        string SelectedWavPath =
                            PATH + SelectedNode.GetDisplayText(0)
                                .ToString(); // PATH + "\\" + selectedNode.GetDisplayText(0).ToString();

                        dateofwav = getdatetimeoffile(SelectedWavPath);
                        trendValCtr = 0;
                        CreateWav(SelectedWavPath);
                        CurrentGraph = "Time";
                        setCursorCombo("Time");
                        DrawWavInitial(trlPlantMangerComponents.FocusedNode, true);
                        BandAlarmButtons(false);
                        break;
                    }
                    case "DATFile":
                    {
                        tcMain.Enabled = true;
                        RemovePreviousGraphControl();
                        SetButtons(trlPlantMangerComponents.FocusedNode.Tag.ToString());
                        iclick = 1;
                        sourceDAT = GetPath(SelectedNode).TrimEnd(new char[] {'\\'});
                        string Dest = AppDomain.CurrentDomain.BaseDirectory + "TempB.dat";
                        previousnode = "DATFile";
                        if (File.Exists(Dest))
                        {
                            File.SetAttributes(Dest, FileAttributes.Normal);
                            File.Delete(Dest);
                        }

                        File.Copy(sourceDAT, Dest, true);

                        btnTrend.Text = "Trend";
                        bbTrend.Caption = "Trend";
                        ClearCmbCursor();
                        ArrayList CursorItems = new ArrayList();
                        CursorItems.Add("Select Cursor");
                        CursorItems.Add("Single");
                        CursorItems.Add("Single With Square");
                        CursorItems.Add("Cross Hair");
                        AddToCmbCursor(CursorItems);

                        dataGridView2.Rows.Clear();
                        FillLastCellWhite();
                        _DAT_Interface._dataGridView2 = dataGridView2;
                        _DAT_Interface._Form1 = this;
                        _DAT_Interface.GetDIfromDatabase(Dest);

                        break;
                    }
                    case "BALFile":
                    {
                        {
                            //IsWaterfall = false;
                            //IsTrend = false; tlNode = null;
                            tcMain.SelectedTabPage = tpGraph;
                            tcMain.Enabled = true;
                            //WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
                            //AreaGraphButtonEnabled = false;// btnAreaGraph.Enabled = false;
                            //TrendButtonEnabled = false;// btnTrend.Enabled = false;
                            //ZommingButton = true;
                            //SetIsTrend = false;
                            //sidebandbuttonEnabled = false;
                            //WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
                            //cmbCurSors.Enabled = false;
                            //ExtraZoomButtonEnabled = false;// tsBtnExtraZoom.Enabled = false;
                            SetLabelDefault();

                            sourceBAL = GetPath(SelectedNode).TrimEnd(new char[] {'\\'});
                            string Dest = AppDomain.CurrentDomain.BaseDirectory + "Bal.bal";
                            ribbonControl1Enabled = false;
                            if (File.Exists(Dest))
                            {
                                File.SetAttributes(Dest, FileAttributes.Normal);
                            }

                            File.Copy(sourceBAL, Dest, true);
                            BalDataForm _BALForm = new BalDataForm();
                            _BAL._BALForm = _BALForm;
                            _BAL.ReadBalFile(Dest);

                            _Detection = _BAL.Detection;
                            _MeasType = _BAL.MeasType;
                            _Amplitude = _BAL.Amplitude;
                            _Angle = _BAL.angle;
                            NullCursorBools();
                            NullAllGphElements();
                            CallClearDataGridMain();
                            deletedataGridRows();
                            FillLastCellWhite();


                            //GenerateBalanceGraph(_Amplitude, _Angle, _MeasType, _Detection);
                            _OrbitGraph = new PolarPlot();
                            _OrbitGraph.Name = "OrbitGraph";
                            _OrbitGraph.Dock = DockStyle.Fill;
                            _OrbitGraph._ChartFooter = "Measurement Type: " + _MeasType + "  Detection: " + _Detection;
                            panel1.Controls.Add(_OrbitGraph);
                            _OrbitGraph.DrawPolarPlot(_Amplitude, _Angle);
                            _BALForm.ShowDialog();
                            panel1.Refresh();

                        }
                        break;
                    }
                    case "Folder":
                    {
                        FolderSelection();
                        break;
                    }
                    case "BenstoneBALFile":
                    {
                        SetIsTrend = false;
                        IsWaterfall = false;
                        selectGraphNumber = 0;
                        ClickBALFile(SelectedNodePath);
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        bool checkBA = false;

        private void ClickBALFile(string SelectedNodePath)
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = false;


            DataSelected = new ArrayList();
            tcMain.Enabled = true;
            previousnode = "FDTFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.ba2";

            while (File.Exists(Dest))
            {
                File.SetAttributes(Dest, FileAttributes.Normal);
                File.Delete(Dest);
                DeleteCtr++;
                if (DeleteCtr > 10)
                {
                    MessageBoxEx.Show("Error. Restart the System");
                    DeleteError = true;
                    break;
                }
            }

            if (DeleteError)
            {
                this.Close();
            }

            File.Copy(SelectedNodePath, Dest, true);
            dataGridView2.Rows.Clear();
            FillLastCellWhite();
            _FD2_Interface._Form1 = this;
            _FD2_Interface._dataGridView2 = dataGridView2;
            checkBA = true;
            DataGridSettingForDifferenceCursor(true);

            _FD2_Interface.ReadBA2File(Dest); //"temp.fd2"

            DateTime d1 = File.GetLastWriteTime(Dest);


            lblDate.Text = d1.ToString();

            dataGridView2_CellContentClick(null, farziE);
            checkBA = false;
        }


        private void bbFaultFreq_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string[] Frequencies = new string[dgvDiFF.RowCount - 1];
            try
            {
                FaultFreq = !FaultFreq;

                ShowRpmRatio = false;
                BearingFaultFrequency = false;
                if (_LineGraph._XLabel == "Sec" || _LineGraph._XLabel == "S" || _LineGraph._XLabel == "s"
                ) //if (CurrentXLabel == "Sec" || CurrentXLabel == "S" || CurrentXLabel == "s")
                {
                    FaultFreq = false;
                }

                if (FaultFreq)
                {
                    for (int i = 0; i < dgvDiFF.RowCount - 1; i++)
                    {
                        Frequencies[i] = dgvDiFF.Rows[i].Cells[0].Value.ToString() + "=" +
                                         dgvDiFF.Rows[i].Cells[1].Value.ToString();
                    }
                }

                bool bReturned = _LineGraph.DrawFaultFrequencies(FaultFreq, Frequencies, dataGridView3);
                if (!bReturned)
                {
                    FaultFreq = false;
                    Datagrid3visible = false;
                }
                else
                {
                    Datagrid3visible = true;

                }
            }
            catch (Exception ex)
            {
                FaultFreq = false;
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbWaterfall_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                NullComparisionVariables();
                string[] ColorCode =
                {
                    "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                    "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573",
                    "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692",
                    "29696", "6737204", "16728065", "744352"
                };
                arlSelectedDataGridValue = new ArrayList();
                IsWaterfall = !IsWaterfall;
                WaterFallButtons(IsWaterfall);
                if (trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("FDTFile") ||
                    trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("OTDFile"))
                {
                    if (IsWaterfall)
                    {
                        _LineGraph.Dock = DockStyle.Top;
                        _LineGraph.Height = panel1.Height / 2;
                        _3DGraph = new _3DGraphControl();
                        _3DGraph._MainForm = this;
                        _3DGraph._XLabel = lblXunit.Text.ToString();
                        _3DGraph._YLabel = lblDisplayunit.Text.ToString();
                        _3DGraph.Dock = DockStyle.Top;
                        _3DGraph.DGVTrendNodes = dataGridView2;
                        DrawWaterFallGraphs(arrXYValues.Count / 2, arrXYValues);
                    }
                    else
                    {
                        //panel1.Controls.Remove(_3DGraph);
                        //_LineGraph.Dock = DockStyle.Fill;
                        //Set_iClick(Function.Clear);

                        //_3DGraph = null;
                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("FDTFile"))
                        {
                            ClickFDTFile();
                        }
                        else
                        {
                            ClickODTFile();
                        }
                    }
                }
                else
                {
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                    {
                        if (IsWaterfall)
                        {
                            getoriginalCSVvalues();
                            dataGridView2.Rows.Clear();
                            FillLastCellWhite();
                            //_LineGraph.AllowDrop = true;
                            _LineGraph.DGVTrendNodes = dataGridView2;
                            _LineGraph.Dock = DockStyle.Top;
                            _LineGraph.Height = panel1.Height / 2;
                            _3DGraph = new _3DGraphControl();
                            _3DGraph._MainForm = this;
                            _3DGraph._XLabel = lblXunit.Text.ToString();
                            _3DGraph._YLabel = lblDisplayunit.Text.ToString();
                            _3DGraph.Dock = DockStyle.Top;
                            _3DGraph.AllowDrop = true;
                            _3DGraph.DGVTrendNodes = dataGridView2;
                            DroppedWaterFallTable = new Hashtable();
                            string source = GetPath(trlPlantMangerComponents.FocusedNode).TrimEnd(new char[] {'\\'});
                            DroppedWaterFallTable.Add(source, true);
                            //string[] ColorCode = { "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352" };

                            try
                            {
                                int trendValCtr = (dataGridView2.Rows.Count - 1) % 30;
                                dataGridView2.Rows.Add(1);
                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value =
                                    MainTreelist.FocusedNode.GetDisplayText(0)
                                        .ToString(); // GetPath(MainTreelist.FocusedNode).ToString().TrimEnd(new char[] { '\\' }).ToString();
                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "√";
                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value =
                                    GetPath(MainTreelist.FocusedNode);
                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                    objlistimg.Images[trendValCtr];
                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                    ColorCode[trendValCtr].ToString();
                                arlstSColors.Add(ColorCode[trendValCtr].ToString());
                                arlSelectedDataGridValue.Add("ch1 " + (DroppedWaterFallTable.Count - 1).ToString());
                            }
                            catch (Exception ex)
                            {
                            }

                            Set_iClick(Function.Add);
                            _arlstPath1 = new ArrayList();
                            for (int i = 0; i < _arlstPath.Count; i++)
                            {
                                _arlstPath1.Add(_arlstPath[i]);
                            }

                            //string source = GetPath(trlPlantMangerComponents.FocusedNode).TrimEnd(new char[] { '\\' });
                            //DroppedWaterFallTable.Add(source, true);
                            DrawWaterFallGraphs((int) _arlstPath.Count / 2, _arlstPath);
                        }
                        else
                        {
                            DroppedWaterFallTable = new Hashtable();
                            panel1.Controls.Remove(_3DGraph);
                            _LineGraph.Dock = DockStyle.Fill;
                            Set_iClick(Function.Clear);
                            if (trlPlantMangerComponents.FocusedNode != tlnNodeBeforeTrend)
                            {
                                dataGridView2.Rows.Clear();
                                FillLastCellWhite();
                            }

                            _arlstPath1 = new ArrayList();
                            _3DGraph = null;
                            trlPlantMangerComponents.FocusedNode = tlnNodeBeforeTrend;
                        }
                    }
                    else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" ||
                             trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                    {
                        if (IsWaterfall)
                        {
                            try
                            {
                                IsTrend = false;
                                _LineGraph.DGVTrendNodes = dataGridView2;
                                _LineGraph.Dock = DockStyle.Top;
                                _LineGraph.Height = panel1.Height / 2;
                                _3DGraph = new _3DGraphControl();
                                _3DGraph._MainForm = this;
                                _3DGraph._XLabel = lblXunit.Text.ToString();
                                _3DGraph._YLabel = lblDisplayunit.Text.ToString();
                                _3DGraph.Dock = DockStyle.Top;
                                _3DGraph.AllowDrop = true;
                                _3DGraph.DGVTrendNodes = dataGridView2;
                                _arlstPath1 = new ArrayList();
                                double[] dtmp = new double[5];
                                _arlstPath1.Add(dtmp);
                                _arlstPath1.Add(dtmp);
                                DrawWaterFallGraphs((int) _arlstPath1.Count / 2, _arlstPath1);
                                farziE = new DataGridViewCellEventArgs(3, 0);
                                dataGridView2_CellContentClick(null, farziE);
                            }
                            catch
                            {
                            }
                        }
                        else
                        {
                            IsTrend = true;
                            for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                            {
                                if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                {
                                    dataGridView2.Rows[i].Cells[1].Value = "X";
                                }
                            }

                            for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                            {
                                if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                {
                                    dataGridViewX1.Rows[i].Cells[1].Value = "X";
                                }
                            }

                            Set_iClick(Function.Clear);
                            Set_jClick(Function.Clear);
                            if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                            {
                                DrawWavInitial(trlPlantMangerComponents.FocusedNode, true);
                            }
                            else
                            {
                                dataGridView2_CellContentClick(null, farziE);
                            }

                            panel1.Controls.Remove(_3DGraph);
                            _LineGraph.Dock = DockStyle.Fill;
                            _3DGraph = null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        private void bbTrend_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                NullComparisionVariables();

                SetIsTrend = !SetIsTrend;
                if (SetIsTrend)
                {
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("FDTFile") ||
                        trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("OTDFile"))
                    {
                    }
                    else
                    {
                        getoriginalCSVvalues();
                        dataGridView2.Rows.Clear();
                        FillLastCellWhite();
                        arlSelectedDataGridValue = new ArrayList();
                        _LineGraph.AllowDrop = true;
                        _LineGraph.DGVTrendNodes = dataGridView2;
                        DroppedTable = new Hashtable();
                        string source = GetPath(trlPlantMangerComponents.FocusedNode).TrimEnd(new char[] {'\\'});
                        DroppedTable.Add(source, true);
                        string[] ColorCode =
                        {
                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                            "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944",
                            "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                        };

                        try
                        {
                            int trendValCtr = (dataGridView2.Rows.Count - 1) % 30;
                            dataGridView2.Rows.Add(1);
                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value =
                                MainTreelist.FocusedNode.GetDisplayText(0)
                                    .ToString(); // GetPath(MainTreelist.FocusedNode).ToString().TrimEnd(new char[] { '\\' }).ToString();
                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "√";
                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value =
                                GetPath(MainTreelist.FocusedNode);
                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                objlistimg.Images[trendValCtr];
                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                ColorCode[trendValCtr].ToString();
                            arlstSColors.Add(ColorCode[trendValCtr].ToString());
                            arlSelectedDataGridValue.Add("ch1 " + (DroppedTable.Count - 1).ToString());
                            sDatagridCaption = source;
                        }
                        catch (Exception ex)
                        {
                        }

                        Set_iClick(Function.Add);
                    }
                }
                else
                {
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("FDTFile"))
                    {
                        ClickFDTFile();
                    }
                    else if (trlPlantMangerComponents.FocusedNode.Tag.ToString().Contains("OTDFile"))
                    {
                        ClickODTFile();
                    }
                    else
                    {
                        Set_iClick(Function.Clear);
                        DroppedTable = new Hashtable();
                        arlstSColors = new ArrayList();
                        if (tlnNodeBeforeTrend != trlPlantMangerComponents.FocusedNode)
                        {
                            dataGridView2.Rows.Clear();
                            FillLastCellWhite();
                            trlPlantMangerComponents.FocusedNode = tlnNodeBeforeTrend;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            ArrayList arlNewTime = new ArrayList();
            ArrayList arlColorTag = new ArrayList();
            arlSelectedDataGridValue = new ArrayList();
            string[] starColor = {"Red", "Green", "Orange"};
            int color = 0;
            bool bDoNotCreate = false;
            int ColorValue = 0;
            string DatagridCaption = null;
            //bXunitConvert = false;
            BtnOk = 1;
            arlSelectedDataGridNumber = new ArrayList();
            ArrayList CursorItems = new ArrayList();
            NullCursorBools();
            {
                try
                {
                    if (Zoom)
                    {
                        bbUnzoom_ItemClick(null, null);
                    }

                    //MessageBox.Show(trlPlantMangerComponents.FocusedNode.Tag.ToString());
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "FFTFile" ||
                        trlPlantMangerComponents.FocusedNode.Tag.ToString() == "FDTFile" ||
                        trlPlantMangerComponents.FocusedNode.Tag.ToString() == "OTDFile" ||
                        trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DRDFile")
                    {
                        DataSelected = new ArrayList();

                        if (SetIsTrend || IsWaterfall)
                        {
                            //MessageBox.Show("setistrend enter");
                            ArrayList arlTimeList = new ArrayList();
                            if (trlPlantMangerComponents.FocusedNode.Tag.ToString() != "DRDFile")
                            {
                                string[] sarrColorTag = new string[0];
                                arrXYValues = new ArrayList();
                                if (!bFarzi)
                                {
                                    if (dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                    {
                                        if (iclick > 1)
                                        {
                                            dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                            Set_iClick(Function.Subtract);
                                        }
                                        else
                                        {
                                            bDoNotCreate = true;
                                        }
                                    }
                                    else
                                    {
                                        dataGridView2.Rows[e.RowIndex].Cells[1].Value = "√";
                                        Set_iClick(Function.Add);
                                    }
                                }

                                try
                                {

                                    for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                                    {
                                        if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                            if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                            {
                                                _ResizeArray.IncreaseArrayString(ref sarrColorTag, 1);
                                                sarrColorTag[sarrColorTag.Length - 1] =
                                                    dataGridView2.Rows[i].Cells[3].Tag.ToString();
                                                arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                                arlSelectedDataGridValue.Add("ch1 " + i);
                                                arlSelectedDataGridNumber.Add(i);
                                                DatagridCaption = "ch1 " + i;
                                                ColorValue =
                                                    Convert.ToInt32(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                                arlTimeList.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                            }
                                            else
                                            {
                                                DatagridCaption = "ch1 " + i;
                                                ColorValue = Convert.ToInt32("7667712");
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                        }
                                        else
                                        {
                                            try
                                            {
                                                _arlstPath[2 * i] = new double[5];
                                                _arlstPath[(2 * i) + 1] = new double[5];
                                            }
                                            catch
                                            {
                                            }

                                        }
                                    }

                                    //for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                    //{
                                    //    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                    //    {
                                    //        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                    //        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                    //        {
                                    //            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                    //            arlSelectedDataGridValue.Add("ch2 " + i);
                                    //        }
                                    //        else
                                    //        {
                                    //            arlColorTag.Add("7667712");
                                    //        }
                                    //        color++;
                                    //    }
                                    //}
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog_Class.ErrorLogEntry(ex);
                                }

                                if (arlstSColors.Count > 1)
                                {
                                    bbChangeYUnit.Enabled = false;
                                }
                                else
                                {
                                    bbChangeYUnit.Enabled = true;
                                }

                                ArrayList xdta = new ArrayList();
                                ArrayList ydta = new ArrayList();
                                if (!bDoNotCreate)
                                {
                                    arlstSColors = new ArrayList();
                                    arlstSColors = arlColorTag;

                                    for (int i = 0; i < arlNewTime.Count; i++)
                                    {
                                        string filename = (string) arlNewTime[i];
                                        string filepath = ("c:\\vvtemp\\" + filename + ".txt");
                                        ReadTXTfile(filepath, true);
                                        arrXYValues.Add(xarray);
                                        arrXYValues.Add(yarray);

                                        xdta.Add(xarray);
                                        ydta.Add(yarray);
                                    }

                                    if (SetIsTrend)
                                    {
                                        DrawLineGraphs(arrXYValues, sarrColorTag);
                                    }
                                    else
                                    {
                                        _3DGraph.DrawWaterfallGraph(xdta, ydta, sarrColorTag);
                                        panel1.Refresh();
                                    }
                                }

                                if (IsCrestTrend)
                                {
                                    bbConvertToFFT.Enabled = false;
                                    bbCepstrum.Enabled = false;
                                    if (arrXYValues.Count > 2)
                                    {
                                        int j = 0;
                                        double[] CrestFactor = new double[arrXYValues.Count / 2];
                                        for (int i = 1; i < arrXYValues.Count; i++)
                                        {
                                            CrestFactor[j] = CalculateCrestFactor((double[]) arrXYValues[i]);
                                            j++;
                                            i++;
                                        }

                                        bFarzi = false;
                                        //if (IsCrestTrend)
                                        {
                                            panel1.Controls.Remove(_BarGraph);
                                            _BarGraph = null;
                                            _LineGraph.Dock = DockStyle.Fill;
                                            //trlPlantMangerComponents.Enabled = false;
                                            //NullCursorBools();
                                            ////FFbuttonEnabled = false;
                                            //_LineGraph.DGVTrendNodes = dataGridView2;
                                            _BarGraph = new BarChart();
                                            _BarGraph._XLabel = "Hz";
                                            _BarGraph._YLabel = lblDisplayunit.Text.ToString();
                                            _BarGraph.Dock = DockStyle.Top;
                                            _BarGraph.AllowDrop = true;
                                            DrawBarGraphs(CrestFactor, arlTimeList);

                                        }
                                        //else
                                        //{
                                        //    trlPlantMangerComponents.Enabled = true;
                                        //    //panel1.Controls.Remove(_BarGraph);
                                        //    //_BarGraph = null;
                                        //    _LineGraph.Dock = DockStyle.Fill;
                                        //}

                                        //if (IsCrestTrend)
                                        //{                                               
                                        //    DrawBarGraphs(CrestFactor);

                                        //}

                                    }
                                    else
                                    {
                                        MessageBoxEx.Show("Please ensure atleast 2 data sets for cepstrum trend");
                                        panel1.Controls.Remove(_BarGraph);
                                        _BarGraph = null;
                                        _LineGraph.Dock = DockStyle.Fill;
                                    }
                                }
                            }
                        }
                        else
                        {
                            // MessageBox.Show("else setistrend");
                            NewItemClickSettings();
                            arrXYValues = new ArrayList();
                            string[] sarrColorTag = new string[1];

                            if (dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() == "X")
                            {
                                for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                                {
                                    if (i == e.RowIndex)
                                    {
                                        dataGridView2.Rows[e.RowIndex].Cells[1].Value = "√";
                                        sarrColorTag[0] =
                                            dataGridView2.Rows[e.RowIndex].Cells[3].Tag
                                                .ToString(); // ColorCode[e.RowIndex];
                                    }
                                    else
                                    {
                                        dataGridView2.Rows[i].Cells[1].Value = "X";
                                    }
                                }
                            }

                            string filename = dataGridView2.Rows[e.RowIndex].Cells[0].Value.ToString();
                            string filepath = ("c:\\vvtemp\\" + filename + ".txt");
                            ReadTXTfile(filepath, true);
                            //arrSelTime.Add(arlNewTime[i].ToString());
                            arrXYValues.Add(xarray);
                            arrXYValues.Add(yarray);
                            xarrayNew = xarray;
                            yarrayNew = yarray;

                            // MessageBox.Show("else setistrend");
                            if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "FFTFile")
                            {
                                ChartFooter = "Overall: " + lblOverall.Text.ToString() +
                                              lblDisplayunit.Text.ToString() + "   " + "Resolution: " +
                                              lbllines.Text.ToString() + "   " + "Date/Time: " +
                                              lblDate.Text.ToString() + "\n" + "File Name: " +
                                              trlPlantMangerComponents.FocusedNode.GetDisplayText(0) + "Selected : " +
                                              filename;
                                //TimeFunction, FFT
                                if (lblViewSignal.Text.ToString() == "FFT")
                                {
                                    lblXunit.Text = "Hz";
                                    //Mode_A, Mode_V, Mode_S, Mode_E                                    
                                }
                                else if (lblViewSignal.Text.ToString() == "TimeFunction")
                                {
                                    lblXunit.Text = "sec";
                                }

                                if (filename.Contains("Mode_A"))
                                {
                                    lblDisplayunit.Text = "m/s2";
                                }
                                else if (filename.Contains("Mode_V"))
                                {
                                    lblDisplayunit.Text = "m/s";
                                }
                                else if (filename.Contains("Mode_S"))
                                {
                                    lblDisplayunit.Text = "um";
                                }
                                else if (filename.Contains("Mode_E"))
                                {
                                    lblDisplayunit.Text = "env";
                                }

                            }
                            else
                            {
                                try
                                {
                                    lblXunit.Text = _FD2_Interface._Xunit[e.RowIndex].ToString();
                                    lblDisplayunit.Text = _FD2_Interface._Yunit[e.RowIndex].ToString();
                                }
                                catch
                                {
                                }
                            }

                            ClearAllGraphs();
                            NullMarkerBools();
                            NullCursorBools();

                            NewItemClick();
                            selectedFDTcaption = filename;
                            if (sarrColorTag[0] == null)
                            {
                                sarrColorTag[0] =
                                    dataGridView2.Rows[e.RowIndex].Cells[3].Tag.ToString(); // ColorCode[e.RowIndex];;
                            }

                            if (filename.Contains("Spectrum"))
                            {
                                ChartFooter = "Overall: " + lblOverall.Text.ToString() +
                                              lblDisplayunit.Text.ToString() + "   " + "Resolution: " +
                                              _FD2_Interface._LineofResolution + "   " + "Date/Time: " +
                                              lblDate.Text.ToString() + "\n" + "File Name: " +
                                              trlPlantMangerComponents.FocusedNode.GetDisplayText(0);
                            }

                            DrawLineGraphs(arrXYValues, sarrColorTag);

                            ChartFooter = null;
                        }

                    }
                    else
                    {
                        if (SetIsTrend)
                        {
                            if (bConvertToFFT)
                            {
                                bbConvertToFFT_ItemClick(null, null);
                            }

                            if (e.RowIndex < dataGridView2.RowCount - 1)
                            {
                                if (!bFarzi)
                                {
                                    if (dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                    {


                                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile" ||
                                            trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                                        {
                                            if (iclick > 2)
                                            {
                                                dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                                Set_iClick(Function.Subtract);
                                            }
                                            else
                                            {
                                                bDoNotCreate = true;
                                            }
                                        }
                                        else
                                        {
                                            if (iclick > 1)
                                            {
                                                dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                                Set_iClick(Function.Subtract);
                                            }
                                            else
                                            {
                                                bDoNotCreate = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dataGridView2.Rows[e.RowIndex].Cells[1].Value = "√";
                                        Set_iClick(Function.Add);
                                    }
                                }

                                try
                                {
                                    for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                                    {
                                        if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridView2.Rows[i].Cells[2].Value.ToString());
                                            if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                                arlSelectedDataGridValue.Add("ch1 " + i);
                                                arlSelectedDataGridNumber.Add(i);
                                                DatagridCaption = "ch1 " + i;
                                                ColorValue =
                                                    Convert.ToInt32(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                DatagridCaption = "ch1 " + i;
                                                ColorValue = Convert.ToInt32("7667712");
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                        }
                                        else
                                        {
                                            try
                                            {
                                                _arlstPath[2 * i] = new double[5];
                                                _arlstPath[(2 * i) + 1] = new double[5];
                                            }
                                            catch
                                            {
                                            }

                                        }
                                    }

                                    for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                    {
                                        if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                            if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                                arlSelectedDataGridValue.Add("ch2 " + i);
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog_Class.ErrorLogEntry(ex);
                                }

                                arlstSColors = new ArrayList();
                                arlstSColors = arlColorTag;
                                //if (arlstSColors.Count > 1)
                                //{
                                //    ClearCmbCursor();
                                //    CursorItems = new ArrayList();
                                //    CursorItems.Add("Select Cursor");
                                //    CursorItems.Add("Single");
                                //    AddToCmbCursor(CursorItems);
                                //}
                                //else
                                {
                                    if (CurrentGraph != null)
                                    {
                                        setCursorCombo(CurrentGraph.ToString());
                                    }
                                    else
                                    {
                                        ClearCmbCursor();
                                        CursorItems = new ArrayList();
                                        CursorItems.Add("Select Cursor");
                                        CursorItems.Add("Single");
                                        CursorItems.Add("Single With Square");
                                        CursorItems.Add("Cross Hair");
                                        AddToCmbCursor(CursorItems);
                                    }
                                }
                                if (arlstSColors.Count > 1)
                                {
                                    bbChangeYUnit.Enabled = false;
                                }
                                else
                                {
                                    bbChangeYUnit.Enabled = true;
                                }

                                if (!bDoNotCreate)
                                {
                                    // GraphType = "FFT";
                                    arlstSelectedTime = new ArrayList();
                                    lblXAxis.Text = "";
                                    lblYAxis.Text = "";
                                    Thread.Sleep(20);
                                    if (arlNewTime.Count > 0)
                                    {
                                        ArrayList arrXYVals = GetAllPlotValuesNewGraph(arlNewTime);
                                        // _arlstPath
                                        arrWAVReportXYVals = arrXYVals;
                                        try
                                        {
                                            if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" &&
                                                (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho")))
                                            {
                                                PhasetoDisplay = new ArrayList();
                                                for (int i = 0; i < arrXYVals.Count; i++)
                                                {
                                                    i++;
                                                    FindAllWaves((double[]) arrXYVals[i]);
                                                    CalculatingPhase((double[]) arrXYVals[i - 1], (i - 1) / 2);
                                                }
                                            }
                                            else
                                            {
                                                PhasetoDisplay = null;
                                            }
                                        }
                                        catch
                                        {
                                        }

                                        bbConvertToFFT.Enabled = true;
                                        if (arlNewTime.Count == 1)
                                        {
                                            bbCepstrum.Enabled = true;
                                        }
                                        else
                                        {
                                            bbCepstrum.Enabled = false;
                                        }

                                        //_arlstPath = new ArrayList();
                                        arlstSelectedTime = arrSelTime;
                                        arlselectedFiles = arlNewTime;
                                        arlSelectedColorTag = arlColorTag;
                                        string[] sarrColorTag = new string[arlSelectedColorTag.Count];
                                        ArrayList xdta = new ArrayList();
                                        ArrayList ydta = new ArrayList();
                                        for (int i = 0; i < arrXYVals.Count / 2; i++)
                                        {
                                            xdta.Add((double[]) arrXYVals[2 * i]);
                                            ydta.Add((double[]) arrXYVals[(2 * i) + 1]);
                                            sarrColorTag[i] = arlSelectedColorTag[i].ToString();
                                            try
                                            {
                                                _arlstPath[2 * (int) arlSelectedDataGridNumber[i]] =
                                                    (double[]) arrXYVals[2 * i];
                                                _arlstPath[(2 * (int) arlSelectedDataGridNumber[i]) + 1] =
                                                    (double[]) arrXYVals[(2 * i) + 1];
                                            }
                                            catch
                                            {
                                            }

                                            //_arlstPath.Add((double[])arrXYVals[2 * i]);
                                            //_arlstPath.Add((double[])arrXYVals[(2 * i) + 1]);
                                        }

                                        DrawLineGraphs(arrXYVals, sarrColorTag);
                                        //_LineGraph.DrawLineGraph(xdta, ydta, sarrColorTag);
                                        NavigateGraphs(ColorValue, DatagridCaption);
                                        //bbConvertToFFT.Enabled = true;


                                        if (IsCrestTrend)
                                        {
                                            bbConvertToFFT.Enabled = false;
                                            bbCepstrum.Enabled = false;
                                            if (arrXYVals.Count > 2)
                                            {
                                                int j = 0;
                                                double[] CrestFactor = new double[arrXYVals.Count / 2];
                                                for (int i = 1; i < arrXYVals.Count; i++)
                                                {
                                                    CrestFactor[j] = CalculateCrestFactor((double[]) arrXYVals[i]);
                                                    j++;
                                                    i++;
                                                }

                                                bFarzi = false;
                                                //if (IsCrestTrend)
                                                {
                                                    panel1.Controls.Remove(_BarGraph);
                                                    _BarGraph = null;
                                                    _LineGraph.Dock = DockStyle.Fill;
                                                    //trlPlantMangerComponents.Enabled = false;
                                                    //NullCursorBools();
                                                    ////FFbuttonEnabled = false;
                                                    //_LineGraph.DGVTrendNodes = dataGridView2;
                                                    _BarGraph = new BarChart();
                                                    _BarGraph._XLabel = "Hz";
                                                    _BarGraph._YLabel = lblDisplayunit.Text.ToString();
                                                    _BarGraph.Dock = DockStyle.Top;
                                                    _BarGraph.AllowDrop = true;
                                                    DrawBarGraphs(CrestFactor, arlstSelectedTime);

                                                }
                                                //else
                                                //{
                                                //    trlPlantMangerComponents.Enabled = true;
                                                //    //panel1.Controls.Remove(_BarGraph);
                                                //    //_BarGraph = null;
                                                //    _LineGraph.Dock = DockStyle.Fill;
                                                //}

                                                //if (IsCrestTrend)
                                                //{                                               
                                                //    DrawBarGraphs(CrestFactor);

                                                //}

                                            }
                                            else
                                            {
                                                MessageBoxEx.Show(
                                                    "Please ensure atleast 2 data sets for cepstrum trend");
                                                panel1.Controls.Remove(_BarGraph);
                                                _BarGraph = null;
                                                _LineGraph.Dock = DockStyle.Fill;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        bbConvertToFFT.Enabled = false;
                                        bbCepstrum.Enabled = false;
                                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" &&
                                            jclick < 2)
                                        {
                                            DrawWavInitial(trlPlantMangerComponents.FocusedNode, true);
                                            //bbConvertToFFT.Enabled = false;
                                        }
                                        else
                                        {
                                            NullAllGphElements();
                                        }
                                    }

                                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                                    {
                                        lblGrphUnitX.Text = "";
                                        lblGraphUnitY.Text = "";
                                    }

                                    panel1.Refresh();
                                }
                            }

                        }
                        else if (IsWaterfall)
                        {
                            NullCursorBools();
                            ArrayList Time = new ArrayList();
                            ArrayList FullTime = new ArrayList();
                            ImageList objlistimg = new ImageList();
                            string[] ColorCode =
                            {
                                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746",
                                "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014",
                                "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374",
                                "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352"
                            };
                            arlNewTime = new ArrayList();
                            color = 0;
                            try
                            {
                                //ClearCmbCursor();
                                //ArrayList CursorItems = new ArrayList();
                                //CursorItems.Add("Select Cursor");
                                //CursorItems.Add("Line");
                                //CursorItems.Add("Square");
                                //AddToCmbCursor(CursorItems);
                                if (e.RowIndex < dataGridView2.RowCount - 1)
                                {
                                    if (dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                    {
                                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile" ||
                                            trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                                        {
                                            if (iclick > 2)
                                            {
                                                dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                                Set_iClick(Function.Subtract);
                                            }
                                            else
                                            {
                                                bDoNotCreate = true;
                                            }
                                        }
                                        else
                                        {
                                            if (iclick > 2)
                                            {
                                                dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                                Set_iClick(Function.Subtract);
                                            }
                                            else
                                            {
                                                bDoNotCreate = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dataGridView2.Rows[e.RowIndex].Cells[1].Value = "√";
                                        Set_iClick(Function.Add);
                                    }

                                    if (iclick > 2)
                                    {
                                        btnFwd.Enabled = true;
                                        btnBkwd.Enabled = true;
                                    }
                                    else
                                    {
                                        btnFwd.Enabled = false;
                                        btnBkwd.Enabled = false;
                                    }

                                    for (int i = 0; i < dataGridView2.Rows.Count; i++)
                                    {
                                        if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridView2.Rows[i].Cells[2].Value.ToString());
                                            if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                            arlSelectedDataGridValue.Add("ch1 " + i);
                                            arlSelectedDataGridNumber.Add(i);
                                        }
                                        else
                                        {
                                            try
                                            {
                                                _arlstPath1[2 * i] = new double[5];
                                                _arlstPath1[(2 * i) + 1] = new double[5];
                                            }
                                            catch
                                            {
                                            }

                                        }
                                    }

                                    for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                    {
                                        if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                            if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                            arlSelectedDataGridValue.Add("ch2 " + i);
                                        }
                                    }

                                    dataGridView1.Rows.Clear();
                                    for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                                    {
                                        dataGridView1.Rows.RemoveAt(0);
                                    }

                                    FullTime = arlNewTime;
                                    {
                                        arlstSColors = arlColorTag;
                                    }
                                    ArrayList arrXYVals = GetAllPlotValuesNewGraph(FullTime);
                                    string[] sarrColorTag = new string[arlColorTag.Count];

                                    ArrayList xdta = new ArrayList();
                                    ArrayList ydta = new ArrayList();
                                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                                    {
                                        //iFinalFrequency = 1000;
                                        if (iFinalFrequency == 0)
                                        {
                                            iFinalFrequency = 1000;
                                        }

                                        if (!string.IsNullOrEmpty(lblOrder.Text.ToString().Replace(" ", "")))
                                        {

                                            iFinalFrequency = Convert.ToInt32(lblOrder.Text.ToString());
                                        }

                                        for (int ii = 0; ii < arrXYVals.Count / 2; ii++)
                                        {

                                            double[] testX = (double[]) arrXYVals[2 * ii];
                                            double[] testY = (double[]) arrXYVals[(2 * ii) + 1];
                                            {
                                                double[] mag = fftMag(testY);
                                                double lastTimevalue = (double) (testX[testX.Length - 1]);
                                                lastTimevalue = Math.Round(lastTimevalue, 2);
                                                double HzRate = (double) (1 / lastTimevalue);
                                                double[] Hz = new double[0];
                                                for (int i = 0; i < mag.Length; i++)
                                                {
                                                    //Array.Resize(ref Hz, Hz.Length + 1);
                                                    _ResizeArray.IncreaseArrayDouble(ref Hz, 1);
                                                    Hz[i] = HzRate * i;
                                                    if (Hz[i] >= iFinalFrequency)
                                                    {
                                                        break;
                                                    }
                                                }

                                                testX = Hz;
                                                testY = new double[testX.Length];
                                                for (int i = 0; i < testY.Length; i++)
                                                {
                                                    testY[i] = mag[i];
                                                }

                                                xdta.Add(testX);
                                                ydta.Add(testY);
                                            }
                                            sarrColorTag[ii] = arlColorTag[ii].ToString();
                                            try
                                            {
                                                _3DGraph._XLabel = "Hz";
                                                _arlstPath1[2 * (int) arlSelectedDataGridNumber[ii]] =
                                                    (double[]) arrXYVals[2 * ii];
                                                _arlstPath1[(2 * (int) arlSelectedDataGridNumber[ii]) + 1] =
                                                    (double[]) arrXYVals[(2 * ii) + 1];
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }
                                    else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                                    {
                                        if (!string.IsNullOrEmpty(lblOrder.Text.ToString().Replace(" ", "")))
                                        {
                                            iFinalFrequency = Convert.ToInt32(lblOrder.Text.ToString());
                                        }
                                        else
                                        {
                                            iFinalFrequency = 1000;
                                        }

                                        for (int ii = 0; ii < arrXYVals.Count / 2; ii++)
                                        {

                                            double[] testX = (double[]) arrXYVals[2 * ii];
                                            double[] testY = (double[]) arrXYVals[(2 * ii) + 1];
                                            if (CheckForTimeData(testY))
                                            {
                                                double[] mag = fftMag(testY);
                                                double lastTimevalue = (double) (testX[testX.Length - 1]);
                                                lastTimevalue = Math.Round(lastTimevalue, 2);
                                                double HzRate = (double) (1 / lastTimevalue);
                                                double[] Hz = new double[0];
                                                for (int i = 0; i < mag.Length; i++)
                                                {
                                                    //Array.Resize(ref Hz, Hz.Length + 1);
                                                    _ResizeArray.IncreaseArrayDouble(ref Hz, 1);
                                                    Hz[i] = HzRate * i;
                                                    if (Hz[i] >= iFinalFrequency)
                                                    {
                                                        break;
                                                    }
                                                }

                                                testX = Hz;
                                                testY = new double[testX.Length];
                                                for (int i = 0; i < testY.Length; i++)
                                                {
                                                    testY[i] = mag[i];
                                                }
                                            }

                                            xdta.Add(testX);
                                            ydta.Add(testY);
                                            sarrColorTag[ii] = arlColorTag[ii].ToString();
                                            try
                                            {
                                                _arlstPath1[2 * (int) arlSelectedDataGridNumber[ii]] =
                                                    (double[]) arrXYVals[2 * ii];
                                                _arlstPath1[(2 * (int) arlSelectedDataGridNumber[ii]) + 1] =
                                                    (double[]) arrXYVals[(2 * ii) + 1];
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }
                                    else
                                    {
                                        for (int i = 0; i < arrXYVals.Count / 2; i++)
                                        {
                                            xdta.Add((double[]) arrXYVals[2 * i]);
                                            ydta.Add((double[]) arrXYVals[(2 * i) + 1]);
                                            sarrColorTag[i] = arlColorTag[i].ToString();
                                            try
                                            {
                                                _arlstPath1[2 * (int) arlSelectedDataGridNumber[i]] =
                                                    (double[]) arrXYVals[2 * i];
                                                _arlstPath1[(2 * (int) arlSelectedDataGridNumber[i]) + 1] =
                                                    (double[]) arrXYVals[(2 * i) + 1];
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    _3DGraph.DrawWaterfallGraph(xdta, ydta, sarrColorTag);
                                    arlstSelectedTime = arrSelTime;
                                    arlselectedFiles = FullTime;

                                    panel1.Refresh();
                                    //ThreeDeeRedraw();
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                                ErrorLogFile(ex);
                            }
                        }
                        else if (bRucd)
                        {
                            //ClearCmbCursor();

                            //ArrayList CursorItems = new ArrayList();
                            //CursorItems.Add("Select Cursor");
                            //CursorItems.Add("Line");
                            //CursorItems.Add("Square");

                            //AddToCmbCursor(CursorItems);
                            ArrayList Time = new ArrayList();
                            ArrayList FullTime = new ArrayList();
                            if (e.RowIndex < dataGridView2.RowCount - 1)
                            {
                                if (dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                {
                                    if (iclick > 2)
                                    {
                                        dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                        Set_iClick(Function.Subtract); //iclick -= 1;
                                    }
                                    else
                                    {
                                        bDoNotCreate = true;
                                    }
                                }
                                else
                                {
                                    //if ((iclick) < 9)

                                    dataGridView2.Rows[e.RowIndex].Cells[1].Value = "√";
                                    Set_iClick(Function.Add); //iclick += 1;


                                }

                                if (iclick > 2)
                                {
                                    btnFwd.Enabled = true;
                                    btnBkwd.Enabled = true;
                                }
                                else
                                {
                                    btnFwd.Enabled = false;
                                    btnBkwd.Enabled = false;
                                }

                                for (int i = 0; i < dataGridView2.Rows.Count; i++)
                                {
                                    if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                    {
                                        arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                        if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                        {
                                            arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                        }
                                        else
                                        {
                                            arlColorTag.Add("7667712");
                                        }

                                        color++;
                                        arlSelectedDataGridValue.Add("ch1 " + i);
                                    }
                                }

                                for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                {
                                    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                    {
                                        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                        {
                                            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                        }
                                        else
                                        {
                                            arlColorTag.Add("7667712");
                                        }

                                        color++;
                                        arlSelectedDataGridValue.Add("ch2 " + i);
                                    }
                                }

                                arlstSColors = new ArrayList();
                                arlstSColors = arlColorTag;

                                if (arlstSColors.Count > 1)
                                {
                                    ClearCmbCursor();
                                    CursorItems = new ArrayList();
                                    CursorItems.Add("Select Cursor");
                                    CursorItems.Add("Single");
                                    AddToCmbCursor(CursorItems);
                                }
                                else
                                {
                                    if (CurrentGraph != null)
                                    {
                                        setCursorCombo(CurrentGraph.ToString());
                                    }
                                    else
                                    {
                                        ClearCmbCursor();
                                        CursorItems = new ArrayList();
                                        CursorItems.Add("Select Cursor");
                                        CursorItems.Add("Single");
                                        AddToCmbCursor(CursorItems);
                                    }
                                }

                                if (!bDoNotCreate)
                                {
                                    arlstSelectedTime = new ArrayList();
                                    lblXAxis.Text = "Date : --";
                                    lblYAxis.Text = "";
                                    panel1.Refresh();
                                    Thread.Sleep(20);
                                    ArrayList arrXYVals = GetWaveDataPhase(arlNewTime);
                                    arlstSelectedTime = arrSelTime;
                                    arlselectedFiles = arlNewTime;
                                    string[] colortag = new string[arlColorTag.Count];
                                    for (int i = 0; i < arlColorTag.Count; i++)
                                    {
                                        colortag[i] = arlColorTag[i].ToString();
                                    }

                                    if (DisplayType == "Table" || DisplayType == "Bode" || DisplayType.Contains("FRF"))
                                    {
                                        DrawLineGraphs(arrXYVals, colortag);
                                        //panel1.Refresh();
                                        //Thread.Sleep(20);
                                        //redraw();
                                    }

                                    if (DisplayType == "Waterfall" || DisplayType == "Spectrogram")
                                    {
                                        FullTime = arlNewTime;
                                        RuCdWaterFall(arrXYVals, colortag);
                                        //{
                                        //    WaterFallSettings();
                                        //    DrawWaveFallForDi(GenDiGraph, FullTime, arlstSColors);
                                        //    arlstSelectedTime = arrSelTime;
                                        //    arlselectedFiles = FullTime;
                                        //}
                                        //panel1.Refresh();
                                        //ThreeDeeRedraw();
                                    }
                                }

                                if (DisplayType == "Overall")
                                {
                                    MessageBoxEx.Show("Not an RuCd Data");
                                }
                            }
                        }
                        else if (bWave)
                        {
                            NullCursorBools();
                            ArrayList Time = new ArrayList();
                            ArrayList FullTime = new ArrayList();
                            ImageList objlistimg = new ImageList();
                            string[] ColorCode =
                            {
                                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746",
                                "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014",
                                "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374",
                                "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352"
                            };
                            arlNewTime = new ArrayList();
                            color = 0;
                            try
                            {
                                //ClearCmbCursor();
                                //ArrayList CursorItems = new ArrayList();
                                //CursorItems.Add("Select Cursor");
                                //CursorItems.Add("Line");
                                //CursorItems.Add("Square");

                                //AddToCmbCursor(CursorItems);

                                if (e.RowIndex < dataGridView2.RowCount - 1)
                                {
                                    if (dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                    {
                                        if (iclick > 2)
                                        {
                                            dataGridView2.Rows[e.RowIndex].Cells[1].Value = "X";
                                            Set_iClick(Function.Subtract);
                                        }
                                        else
                                        {
                                            bDoNotCreate = true;
                                        }
                                    }
                                    else
                                    {
                                        dataGridView2.Rows[e.RowIndex].Cells[1].Value = "√";
                                        if (bShowOrbit)
                                        {
                                            for (int i = 0; i < dataGridView2.RowCount - 1; i++)
                                            {
                                                if (i != e.RowIndex)
                                                {
                                                    if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                                    {
                                                        dataGridView2.Rows[i].Cells[1].Value = "X";
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Set_iClick(Function.Add);
                                        }
                                    }

                                    if (iclick > 2)
                                    {
                                        btnFwd.Enabled = true;
                                        btnBkwd.Enabled = true;
                                    }
                                    else
                                    {
                                        btnFwd.Enabled = false;
                                        btnBkwd.Enabled = false;
                                    }


                                    for (int i = 0; i < dataGridView2.Rows.Count; i++)
                                    {
                                        if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                            if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                            arlSelectedDataGridValue.Add("ch1 " + i);
                                        }
                                    }

                                    for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                    {
                                        if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                            if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                            arlSelectedDataGridValue.Add("ch2 " + i);
                                        }
                                    }

                                    dataGridView1.Rows.Clear();
                                    for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                                    {
                                        dataGridView1.Rows.RemoveAt(0);
                                    }

                                    FullTime =
                                        arlNewTime; // m_objMainControl.GetTimeForDIData(m_objMainControl._PointID, GenDiGraph);
                                    {
                                        arlstSColors = arlColorTag;
                                    }
                                    WaterFallSettings();
                                    if (!bShowOrbit)
                                    {
                                        ArrayList arrXYVals = GetWaveData(FullTime);
                                        if (GenDiGraph == "Phase")
                                        {
                                            arrXYVals = GetPhaseData(FullTime);
                                        }

                                        arlstSelectedTime = arrSelTime;
                                        arlselectedFiles = FullTime;
                                        panel1.Refresh();
                                        ThreeDeeRedraw();
                                    }
                                    else
                                    {
                                        ArrayList arrXYVals = GetOrbitData(FullTime);
                                        panel1.Refresh();
                                        ClearCmbCursor();
                                        CursorItems = new ArrayList();
                                        CursorItems.Add("Select Cursor");
                                        CursorItems.Add("Single With Square");
                                        AddToCmbCursor(CursorItems);

                                        GenerateOrbit((double[]) arrXYVals[arrXYVals.Count - 2],
                                            (double[]) arrXYVals[arrXYVals.Count - 1],
                                            arlstSColors[arlstSColors.Count - 1].ToString());
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                                ErrorLogFile(ex);
                            }
                        }

                        //if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                        //{
                        //    TrendButtonEnabled = false;
                        //    WaterfallbuttonEnabled = false;
                        //    bbOrbit.Enabled = false;
                        //    AreaGraphButtonEnabled = false;
                        //    bbSCL.Enabled = false;
                        //}
                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "BenstoneBALFile")
                        {
                            for (int i = 0; i < dataGridView2.Rows.Count; i++)
                            {
                                if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√" ||
                                    dataGridView2.Rows[i].Cells[1].Value.ToString() == "X")
                                {
                                    arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                    if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                    {
                                        arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                    }
                                    else
                                    {
                                        arlColorTag.Add("7667712");
                                    }

                                    color++;
                                    arlSelectedDataGridValue.Add("ch1 " + i);
                                }
                            }

                            for (int i = 0; i < arlNewTime.Count; i++)
                            {
                                string filename = (string) arlNewTime[i];
                                string filepath = ("c:\\vvtemp\\" + filename + ".txt");
                                ReadTXTfile(filepath, true);
                                //arrXYValues.Add(xarray);
                                //arrXYValues.Add(yarray);

                                //xdta.Add(xarray);
                                //ydta.Add(yarray);
                            }

                            //ArrayList arrXYVals = GetOrbitData(arlNewTime);
                            panel1.Refresh();
                            ClearCmbCursor();
                            CursorItems = new ArrayList();
                            CursorItems.Add("Select Cursor");
                            CursorItems.Add("Single With Square");
                            AddToCmbCursor(CursorItems);

                            // GenerateOrbit((double[])arrXYVals[arrXYVals.Count - 2], (double[])arrXYVals[arrXYVals.Count - 1], arlstSColors[arlstSColors.Count - 1].ToString());
                            //test(xarray, yarray);
                            //panel1.Refresh();

                            _OrbitGraph = new PolarPlot();
                            _OrbitGraph.Name = "OrbitGraph";
                            _OrbitGraph.Dock = DockStyle.Fill;
                            _OrbitGraph._ChartFooter = "Measurement Type: " + _MeasType + "  Detection: " + _Detection;
                            panel1.Controls.Add(_OrbitGraph);
                            // Anyarray = _FD2_Interface;
                            _OrbitGraph.DrawPolarPlotnoLine(xarray, yarray);

                            panel1.Refresh();
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
            }
        }

        //public void test(double[] Phasevalue, List<double> magnitude)
        //{
        //    ChartControl RadarPointChart = new ChartControl();

        //    // Add a radar series to it.
        //    Series series1 = new Series("Series 1", ViewType.PolarArea);

        //    // Populate the series with points.

        //    for (int i = 0; i < magnitude.Count; i++)
        //    {
        //        if (Phasevalue[i] >= 0 && Phasevalue[i] < 90)
        //        {
        //            someInt = 0;
        //            someInt = Convert.ToInt32(Phasevalue[i]);
        //            series1.Points.Add(new SeriesPoint(someInt, magnitude[i]));
        //        }
        //        if (Phasevalue[i] >= 90 && Phasevalue[i] < 180)
        //        {
        //            someInt = 0;
        //            someInt = Convert.ToInt32(Phasevalue[i]);
        //            series1.Points.Add(new SeriesPoint(someInt, magnitude[i]));
        //        }
        //        if (Phasevalue[i] >= 180 && Phasevalue[i] < 270)
        //        {
        //            someInt = 0;
        //            someInt = Convert.ToInt32(Phasevalue[i]);
        //            series1.Points.Add(new SeriesPoint(someInt, magnitude[i]));
        //        }
        //        if (Phasevalue[i] >= 270 && Phasevalue[i] < 360)
        //        {
        //            someInt = 0;
        //            someInt = Convert.ToInt32(Phasevalue[i]);
        //            series1.Points.Add(new SeriesPoint(someInt, magnitude[i]));
        //        }
        //    }
        //    // Add the series to the chart.
        //    if (PublicClass.checkphase == "true")
        //    {
        //        RadarPointChart.Series.Add(series1);
        //        // Flip the diagram (if necessary).
        //        ((RadarDiagram)RadarPointChart.Diagram).DrawingStyle = RadarDiagramDrawingStyle.Circle;
        //        ((PolarDiagram)RadarPointChart.Diagram).StartAngleInDegrees = 0;
        //        ((PolarDiagram)RadarPointChart.Diagram).RotationDirection =
        //            RadarDiagramRotationDirection.Counterclockwise;

        //        //foreach (Series series in WebChartControl1.Series)
        //        //    series.LabelsVisibility = cbShowLabels.Checked ? DefaultBoolean.True : DefaultBoolean.False;
        //        //WebChartControl1.ToolTipEnabled = cbShowLabels.Checked ? DefaultBoolean.False : DefaultBoolean.True;
        //    }
        //    else
        //    {
        //        RadarPointChart.Series.Add(series1);
        //        // Flip the diagram (if necessary).
        //        ((RadarDiagram)RadarPointChart.Diagram).DrawingStyle = RadarDiagramDrawingStyle.Circle;
        //        ((PolarDiagram)RadarPointChart.Diagram).StartAngleInDegrees = 270;
        //        ((PolarDiagram)RadarPointChart.Diagram).RotationDirection =
        //            RadarDiagramRotationDirection.Counterclockwise;
        //    }

        //    // Add a title to the chart and hide the legend.
        //    RadarPointChart.Legend.Visible = false;

        //    // Add the chart to the form.
        //    RadarPointChart.Dock = DockStyle.Fill;

        //    panel1.Controls.Clear();
        //    panel1.Controls.Add(RadarPointChart);
        //    //ribbonControl1.SelectedPage = rpGraph;

        //}




        private void DrawBarGraphs(double[] CrestFactor, ArrayList arlstSelectedTime)
        {
            string[] sxData = new string[arlstSelectedTime.Count];
            double[] dyData = new double[arlstSelectedTime.Count];
            try
            {
                for (int i = 0; i < arlstSelectedTime.Count; i++)
                {
                    sxData[i] = (string) arlstSelectedTime[i];
                    dyData[i] = CrestFactor[i];
                }

                _BarGraph = new BarChart();
                _BarGraph.Name = "BarGraph 1";
                _BarGraph.AllowDrop = false;
                _BarGraph._MainForm = this;
                _BarGraph._XLabel = " ";
                _BarGraph._YLabel = " ";
                _BarGraph._DataGridView = dataGridView1;
                _BarGraph._GraphBG1 = _GraphBG1;
                _BarGraph._GraphBG2 = _GraphBG2;
                _BarGraph._GraphBGDir = _GraphBGDir;
                _BarGraph._ChartBG1 = _ChartBG1;
                _BarGraph._ChartBG2 = _ChartBG2;
                _BarGraph._ChartBGDir = _ChartBGDir;
                _BarGraph._AxisColor = _AxisColor;
                _BarGraph._MainCursorColor = _MainCursorColor;
                _BarGraph.Height = panel1.Height / 2;
                _BarGraph.Dock = DockStyle.Top;
                _BarGraph._AreaFill = true;
                _BarGraph._BarWidth = .8;
                _BarGraph.DrawBarGraph(sxData, dyData, "7667712", true);
                panel1.Controls.Add(_BarGraph);
            }
            catch (Exception ex)
            {
            }
        }

        private void dataGridViewX1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            ArrayList arlNewTime = new ArrayList();
            ArrayList arlColorTag = new ArrayList();
            string[] starColor = {"Red", "Green", "Orange"};
            int color = 0;
            bool bDoNotCreate = false;
            //bXunitConvert = false;
            int ColorValue = 0;
            string DatagridCaption = null;
            BtnOk = 1;
            arlSelectedDataGridValue = new ArrayList();
            NullCursorBools();
            ArrayList CursorItems = new ArrayList();
            {
                try
                {
                    if (SetIsTrend)
                    {
                        if (bConvertToFFT)
                        {
                            bbConvertToFFT_ItemClick(null, null);
                        }

                        if (e.RowIndex < dataGridViewX1.RowCount - 1)
                        {
                            if (dataGridViewX1.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                            {
                                if (jclick > 1)
                                {
                                    dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "X";
                                    Set_jClick(Function.Subtract);
                                }
                                else
                                {
                                    bDoNotCreate = true;
                                }
                            }
                            else
                            {
                                dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "√";
                                Set_jClick(Function.Add);
                            }

                            if (jclick > 1)
                            {
                                btnFwd.Enabled = true;
                                btnBkwd.Enabled = true;
                            }
                            else
                            {
                                btnFwd.Enabled = false;
                                btnBkwd.Enabled = false;
                            }

                            try
                            {
                                for (int i = 0; i < dataGridView2.Rows.Count - 1; i++)
                                {
                                    if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                    {
                                        arlNewTime.Add(dataGridView2.Rows[i].Cells[2].Value.ToString());
                                        if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                        {
                                            arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                            arlSelectedDataGridValue.Add("ch1 " + i);
                                            arlSelectedDataGridNumber.Add(i);
                                        }
                                        else
                                        {
                                            arlColorTag.Add("7667712");
                                        }

                                        color++;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            _arlstPath[2 * i] = new double[5];
                                            _arlstPath[(2 * i) + 1] = new double[5];
                                        }
                                        catch
                                        {
                                        }

                                    }
                                }

                                for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                {
                                    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                    {
                                        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[2].Value.ToString());
                                        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                        {
                                            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                            arlSelectedDataGridValue.Add("ch2 " + i);
                                            DatagridCaption = "ch2 " + i;
                                            ColorValue =
                                                Convert.ToInt32(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                        }
                                        else
                                        {
                                            arlColorTag.Add("7667712");
                                        }

                                        color++;
                                    }
                                }
                            }
                            //{
                            //    for (int i = 0; i < dataGridView2.Rows.Count; i++)
                            //    {
                            //        if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                            //        {
                            //            arlNewTime.Add(dataGridView2.Rows[i].Cells[2].Value.ToString());
                            //            if (dataGridView2.Rows[i].Cells[3].Tag != null)
                            //            {
                            //                arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                            //                arlSelectedDataGridValue.Add("ch1 " + i);
                            //            }
                            //            else
                            //            {
                            //                arlColorTag.Add("7667712");
                            //            }
                            //            color++;
                            //        }
                            //    }
                            //    for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                            //    {
                            //        if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                            //        {
                            //            arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                            //            //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                            //            if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                            //            {
                            //                arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                            //                arlSelectedDataGridValue.Add("ch2 " + i);
                            //            }
                            //            else
                            //            {
                            //                arlColorTag.Add("7667712");
                            //            }
                            //            color++;
                            //        }
                            //    }
                            //}
                            catch
                            {
                            }

                            arlstSColors = new ArrayList();
                            arlstSColors = arlColorTag;
                            //if (arlstSColors.Count > 1)
                            //{
                            //    ClearCmbCursor();
                            //     CursorItems = new ArrayList();
                            //    CursorItems.Add("Select Cursor");
                            //    CursorItems.Add("Single");
                            //    AddToCmbCursor(CursorItems);
                            //}
                            //else
                            {
                                if (CurrentGraph != null)
                                {
                                    setCursorCombo(CurrentGraph.ToString());
                                }
                                else
                                {
                                    ClearCmbCursor();
                                    CursorItems = new ArrayList();
                                    CursorItems.Add("Select Cursor");
                                    CursorItems.Add("Single");
                                    AddToCmbCursor(CursorItems);
                                }
                            }
                            if (arlstSColors.Count > 1)
                            {
                                bbChangeYUnit.Enabled = false;
                            }
                            else
                            {
                                bbChangeYUnit.Enabled = true;
                            }

                            if (!bDoNotCreate)
                            {
                                GraphType = "FFT";
                                arlstSelectedTime = new ArrayList();

                                if (arlNewTime.Count > 0)
                                {
                                    ArrayList arrXYVals = GetAllPlotValues(arlNewTime);
                                    arrWAVReportXYVals = arrXYVals;
                                    //DrawDiTrend(arrXYVals, arlNewTime, arlstSColors);
                                    arlstSelectedTime = arrSelTime;
                                    arlselectedFiles = arlNewTime;
                                    arlSelectedColorTag = arlColorTag;
                                    string[] sarrColorTag = new string[arlSelectedColorTag.Count];

                                    ArrayList xdta = new ArrayList();
                                    ArrayList ydta = new ArrayList();
                                    for (int i = 0; i < arrXYVals.Count / 2; i++)
                                    {
                                        xdta.Add((double[]) arrXYVals[2 * i]);
                                        ydta.Add((double[]) arrXYVals[(2 * i) + 1]);
                                        sarrColorTag[i] = arlSelectedColorTag[i].ToString();
                                        try
                                        {
                                            _arlstPath[2 * (int) arlSelectedDataGridNumber[i]] =
                                                (double[]) arrXYVals[2 * i];
                                            _arlstPath[(2 * (int) arlSelectedDataGridNumber[i]) + 1] =
                                                (double[]) arrXYVals[(2 * i) + 1];
                                        }
                                        catch
                                        {
                                        }

                                        //_arlstPath.Add((double[])arrXYVals[2 * i]);
                                        //_arlstPath.Add((double[])arrXYVals[(2 * i) + 1]);
                                    }

                                    //DrawGraph(arrXYVals, arlNewTime, arlColorTag);
                                    _LineGraph.DrawLineGraph(xdta, ydta, sarrColorTag); //bbConvertToFFT.Enabled = true;
                                    NavigateGraphs(ColorValue, DatagridCaption);
                                }
                                else
                                {
                                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" && iclick < 2)
                                    {
                                        DrawWavInitial(trlPlantMangerComponents.FocusedNode, true);
                                        //bbConvertToFFT.Enabled = false;
                                    }
                                }

                                panel1.Refresh();
                            }
                        }
                    }

                    else if (IsWaterfall)
                    {
                        NullCursorBools();

                        ArrayList Time = new ArrayList();
                        ArrayList FullTime = new ArrayList();
                        ImageList objlistimg = new ImageList();
                        string[] ColorCode =
                        {
                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                            "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944",
                            "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                        };
                        arlNewTime = new ArrayList();
                        color = 0;
                        try
                        {
                            //ClearCmbCursor();
                            //ArrayList CursorItems = new ArrayList();
                            //CursorItems.Add("Select Cursor");
                            //CursorItems.Add("Line");
                            //CursorItems.Add("Square");
                            //AddToCmbCursor(CursorItems);

                            if (e.RowIndex < dataGridViewX1.RowCount - 1)
                            {
                                if (dataGridViewX1.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                {
                                    if (jclick > 1)
                                    {
                                        dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "X";
                                        Set_jClick(Function.Subtract);
                                    }
                                    else
                                    {
                                        bDoNotCreate = true;
                                    }
                                }
                                else
                                {
                                    dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "√";
                                    Set_jClick(Function.Add);
                                }

                                try
                                {
                                    for (int i = 0; i < dataGridView2.Rows.Count; i++)
                                    {
                                        if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridView2.Rows[i].Cells[2].Value.ToString());
                                            if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                            arlSelectedDataGridValue.Add("ch1 " + i);
                                            arlSelectedDataGridNumber.Add(i);
                                        }
                                        else
                                        {
                                            try
                                            {
                                                _arlstPath1[2 * i] = new double[5];
                                                _arlstPath1[(2 * i) + 1] = new double[5];
                                            }
                                            catch
                                            {
                                            }

                                        }
                                    }

                                    for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                    {
                                        if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                        {
                                            arlNewTime.Add(dataGridViewX1.Rows[i].Cells[2].Value.ToString());
                                            if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                            {
                                                arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                            }
                                            else
                                            {
                                                arlColorTag.Add("7667712");
                                            }

                                            color++;
                                            arlSelectedDataGridValue.Add("ch2 " + i);
                                        }
                                    }
                                }
                                catch
                                {
                                }
                                //for (int i = 0; i < dataGridView2.Rows.Count; i++)
                                //{
                                //    if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                //    {
                                //        arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                //        //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                //        if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                //        {
                                //            arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                //        }
                                //        else
                                //        {
                                //            arlColorTag.Add("7667712");
                                //        }
                                //        color++;
                                //    }
                                //}
                                //for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                //{
                                //    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                //    {
                                //        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                //        //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                //        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                //        {
                                //            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                //        }
                                //        else
                                //        {
                                //            arlColorTag.Add("7667712");
                                //        }
                                //        color++;
                                //    }
                                //}




                                FullTime =
                                    arlNewTime; // m_objMainControl.GetTimeForDIData(m_objMainControl._PointID, GenDiGraph);
                                {
                                    arlstSColors = arlColorTag;
                                }
                                ArrayList arrXYVals = GetAllPlotValuesNewGraph(FullTime);
                                string[] sarrColorTag = new string[arlColorTag.Count];

                                ArrayList xdta = new ArrayList();
                                ArrayList ydta = new ArrayList();
                                if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                                {
                                    iFinalFrequency = 1000;
                                    for (int ii = 0; ii < arrXYVals.Count / 2; ii++)
                                    {

                                        double[] testX = (double[]) arrXYVals[2 * ii];
                                        double[] testY = (double[]) arrXYVals[(2 * ii) + 1];
                                        {
                                            double[] mag = fftMag(testY);
                                            double lastTimevalue = (double) (testX[testX.Length - 1]);
                                            lastTimevalue = Math.Round(lastTimevalue, 2);
                                            double HzRate = (double) (1 / lastTimevalue);
                                            double[] Hz = new double[0];
                                            for (int i = 0; i < mag.Length; i++)
                                            {
                                                //Array.Resize(ref Hz, Hz.Length + 1);
                                                _ResizeArray.IncreaseArrayDouble(ref Hz, 1);
                                                Hz[i] = HzRate * i;
                                                if (Hz[i] >= iFinalFrequency)
                                                {
                                                    break;
                                                }
                                            }

                                            testX = Hz;
                                            testY = new double[testX.Length];
                                            for (int i = 0; i < testY.Length; i++)
                                            {
                                                testY[i] = mag[i];
                                            }

                                            xdta.Add(testX);
                                            ydta.Add(testY);
                                        }
                                        sarrColorTag[ii] = arlColorTag[ii].ToString();
                                        try
                                        {
                                            _arlstPath1[2 * (int) arlSelectedDataGridNumber[ii]] =
                                                (double[]) arrXYVals[2 * ii];
                                            _arlstPath1[(2 * (int) arlSelectedDataGridNumber[ii]) + 1] =
                                                (double[]) arrXYVals[(2 * ii) + 1];
                                        }
                                        catch
                                        {
                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < arrXYVals.Count / 2; i++)
                                    {
                                        xdta.Add((double[]) arrXYVals[2 * i]);
                                        ydta.Add((double[]) arrXYVals[(2 * i) + 1]);
                                        sarrColorTag[i] = arlColorTag[i].ToString();
                                        try
                                        {
                                            _arlstPath1[2 * (int) arlSelectedDataGridNumber[i]] =
                                                (double[]) arrXYVals[2 * i];
                                            _arlstPath1[(2 * (int) arlSelectedDataGridNumber[i]) + 1] =
                                                (double[]) arrXYVals[(2 * i) + 1];
                                        }
                                        catch
                                        {
                                        }
                                    }
                                }

                                _3DGraph.DrawWaterfallGraph(xdta, ydta, sarrColorTag);
                                arlstSelectedTime = arrSelTime;
                                arlselectedFiles = FullTime;

                                panel1.Refresh();
                                ThreeDeeRedraw();
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                            ErrorLogFile(ex);
                        }
                    }
                    else if (bRucd)
                    {
                        //ClearCmbCursor();
                        ////cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Line", "Squre" });
                        //ArrayList CursorItems = new ArrayList();
                        //CursorItems.Add("Select Cursor");
                        //CursorItems.Add("Line");
                        //CursorItems.Add("Square");

                        //AddToCmbCursor(CursorItems);
                        ArrayList Time = new ArrayList();
                        ArrayList FullTime = new ArrayList();
                        if (e.RowIndex < dataGridViewX1.RowCount - 1)
                        {
                            if (dataGridViewX1.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                            {
                                if (jclick > 1)
                                {
                                    dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "X";
                                    //dataGridView1.Rows[e.RowIndex].Cells[2].Value = "";
                                    Set_jClick(Function.Subtract);
                                    //jclick -= 1;


                                }
                                else
                                {
                                    bDoNotCreate = true;

                                }
                            }
                            else
                            {
                                //if ((iclick + jclick) < 8)
                                {
                                    dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "√";
                                    Set_jClick(Function.Add);
                                    //jclick += 1;
                                }
                                //else
                                //{
                                //    bDoNotCreate = true;
                                //}
                            }

                            if (jclick > 1)
                            {
                                btnFwd.Enabled = true;
                                btnBkwd.Enabled = true;
                            }
                            else
                            {
                                btnFwd.Enabled = false;
                                btnBkwd.Enabled = false;
                            }

                            //for (int i = 0; i < dataGridViewX1.Rows.Count; i++)
                            //{
                            //    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                            //    {
                            //        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                            //        //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                            //        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                            //        {
                            //            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                            //        }
                            //        else
                            //        {
                            //            arlColorTag.Add("7667712");
                            //        }
                            //        color++;
                            //    }
                            //}
                            for (int i = 0; i < dataGridView2.Rows.Count; i++)
                            {
                                if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                {
                                    arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                    //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                    if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                    {
                                        arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                    }
                                    else
                                    {
                                        arlColorTag.Add("7667712");
                                    }

                                    color++;
                                }
                            }

                            for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                            {
                                if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                {
                                    arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                    //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                    if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                    {
                                        arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                    }
                                    else
                                    {
                                        arlColorTag.Add("7667712");
                                    }

                                    color++;
                                }
                            }

                            arlstSColors = new ArrayList();
                            arlstSColors = arlColorTag;
                            if (DisplayType == "Table" || DisplayType == "Bode")
                            {
                                if (arlstSColors.Count > 1)
                                {
                                    ClearCmbCursor();
                                    //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single" });
                                    CursorItems = new ArrayList();
                                    CursorItems.Add("Select Cursor");
                                    CursorItems.Add("Single");


                                    AddToCmbCursor(CursorItems);

                                }
                                else
                                {
                                    setCursorCombo(CurrentGraph.ToString());


                                    //ResetZoomButton();
                                }

                                //cmbCurSors.SelectedIndex = 0;
                                if (!bDoNotCreate)
                                {
                                    arlstSelectedTime = new ArrayList();

                                    lblXAxis.Text = "Date : --";
                                    lblYAxis.Text = "";
                                    panel1.Refresh();
                                    Thread.Sleep(20);

                                    ArrayList arrXYVals = GetWaveDataPhase(arlNewTime);
                                    //DrawDiTrend(arrXYVals, arlNewTime, arlstSColors);
                                    arlstSelectedTime = arrSelTime;
                                    arlselectedFiles = arlNewTime;
                                    DrawGraph(arrXYVals, arlNewTime, arlColorTag);

                                    panel1.Refresh();
                                    Thread.Sleep(20);
                                    redraw();
                                }
                            }

                            if (DisplayType == "Waterfall" || DisplayType == "Spectrogram")
                            {
                                FullTime = arlNewTime;
                                {
                                    WaterFallSettings();
                                    DrawWaveFallForDi(GenDiGraph, FullTime, arlstSColors);
                                    arlstSelectedTime = arrSelTime;
                                    arlselectedFiles = FullTime;
                                }

                                //else
                                //{
                                //    MessageBoxEx.Show("Minimum 8 Datasets Are Required to see Water Fall Display", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                //    //tpManagers.SelectedTabPageIndex = 0;
                                //}
                                panel1.Refresh();
                                ThreeDeeRedraw();
                            }

                            if (DisplayType == "Overall")
                            {
                                MessageBoxEx.Show("Not an RuCd Data");
                            }
                        }
                    }
                    else if (bWave)
                    {
                        NullCursorBools();

                        ArrayList Time = new ArrayList();
                        ArrayList FullTime = new ArrayList();

                        ImageList objlistimg = new ImageList();
                        string[] ColorCode =
                        {
                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                            "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944",
                            "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                        };
                        arlNewTime = new ArrayList();
                        color = 0;
                        try
                        {
                            //ClearCmbCursor();
                            ////cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Line", "Squre" });
                            //ArrayList CursorItems = new ArrayList();
                            //CursorItems.Add("Select Cursor");
                            //CursorItems.Add("Line");
                            //CursorItems.Add("Square");

                            //AddToCmbCursor(CursorItems);

                            if (e.RowIndex < dataGridViewX1.RowCount - 1)
                            {
                                if (dataGridViewX1.Rows[e.RowIndex].Cells[1].Value.ToString() == "√")
                                {
                                    if (jclick > 1)
                                    {
                                        dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "X";
                                        //dataGridView1.Rows[e.RowIndex].Cells[2].Value = "";
                                        jclick -= 1;


                                    }
                                    else
                                    {
                                        bDoNotCreate = true;

                                    }
                                }
                                else
                                {
                                    if (jclick < 9)
                                    {
                                        dataGridViewX1.Rows[e.RowIndex].Cells[1].Value = "√";
                                        if (bShowOrbit)
                                        {
                                            for (int i = 0; i < dataGridViewX1.RowCount - 1; i++)
                                            {
                                                if (i != e.RowIndex)
                                                {
                                                    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                                    {
                                                        dataGridViewX1.Rows[i].Cells[1].Value = "X";
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            jclick += 1;
                                        }
                                    }
                                    else
                                    {
                                        bDoNotCreate = true;
                                    }
                                }

                                if (jclick > 1)
                                {
                                    btnFwd.Enabled = true;
                                    btnBkwd.Enabled = true;
                                }
                                else
                                {
                                    btnFwd.Enabled = false;
                                    btnBkwd.Enabled = false;
                                }

                                //for (int i = 0; i < dataGridViewX1.Rows.Count; i++)
                                //{
                                //    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                //    {
                                //        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                //        //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                //        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                //        {
                                //            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                //        }
                                //        else
                                //        {
                                //            arlColorTag.Add("7667712");
                                //        }
                                //        //color++;
                                //    }
                                //}
                                for (int i = 0; i < dataGridView2.Rows.Count; i++)
                                {
                                    if (dataGridView2.Rows[i].Cells[1].Value.ToString() == "√")
                                    {
                                        arlNewTime.Add(dataGridView2.Rows[i].Cells[0].Value.ToString());
                                        //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                        if (dataGridView2.Rows[i].Cells[3].Tag != null)
                                        {
                                            arlColorTag.Add(dataGridView2.Rows[i].Cells[3].Tag.ToString());
                                        }
                                        else
                                        {
                                            arlColorTag.Add("7667712");
                                        }

                                        color++;
                                    }
                                }

                                for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                {
                                    if (dataGridViewX1.Rows[i].Cells[1].Value.ToString() == "√")
                                    {
                                        arlNewTime.Add(dataGridViewX1.Rows[i].Cells[0].Value.ToString());
                                        //dataGridView1.Rows[i].Cells[2].Value = starColor[color];
                                        if (dataGridViewX1.Rows[i].Cells[3].Tag != null)
                                        {
                                            arlColorTag.Add(dataGridViewX1.Rows[i].Cells[3].Tag.ToString());
                                        }
                                        else
                                        {
                                            arlColorTag.Add("7667712");
                                        }

                                        color++;
                                    }
                                }


                                dataGridViewX1.Rows.Clear();
                                for (int i = 0; i < dataGridViewX1.Rows.Count - 1; i++)
                                {
                                    dataGridViewX1.Rows.RemoveAt(0);
                                }














                                FullTime =
                                    arlNewTime; // m_objMainControl.GetTimeForDIData(m_objMainControl._PointID, GenDiGraph);
                                {
                                    arlstSColors = arlColorTag;
                                    //CallClearDataGridMain();

                                }
                                //dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 1].Cells[3].Value = Resources.White;
                                //if (FullTime.Count >= 8)
                                WaterFallSettings();
                                if (!bShowOrbit)
                                {

                                    DrawWaveFallForDi(GenDiGraph, FullTime, arlstSColors);
                                    arlstSelectedTime = arrSelTime;
                                    arlselectedFiles = FullTime;
                                    panel1.Refresh();
                                    ThreeDeeRedraw();
                                }
                                else
                                {
                                    ArrayList arrXYVals = GetOrbitData(FullTime);
                                    panel1.Refresh();
                                    ClearCmbCursor();
                                    //cmbCurSors.Items.AddRange(new object[] { "Select Cursor", "Single With Square" });
                                    CursorItems = new ArrayList();
                                    CursorItems.Add("Select Cursor");
                                    CursorItems.Add("Single With Square");
                                    AddToCmbCursor(CursorItems);

                                    GenerateOrbit((double[]) arrXYVals[arrXYVals.Count - 2],
                                        (double[]) arrXYVals[arrXYVals.Count - 1],
                                        arlstSColors[arlstSColors.Count - 1].ToString());
                                }
                                //else
                                //{
                                //    MessageBoxEx.Show("Minimum 8 Datasets Are Required to see Water Fall Display", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                //    //tpManagers.SelectedTabPageIndex = 0;
                                //}


                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                            ErrorLogFile(ex);
                        }
                    }

                    //if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                    //{
                    //    TrendButtonEnabled = false;
                    //    WaterfallbuttonEnabled = false;
                    //    bbOrbit.Enabled = false;
                    //    AreaGraphButtonEnabled = false;
                    //    bbSCL.Enabled = false;
                    //}
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
            }
        }

        private void cmbCurSors_SelectedIndexChanged(object sender, EventArgs e)
        {
            //ThrDCurCtr = SixtyTwo;
            //Zoom = false;
            PrvsValX = 0;
            try
            {
                DataGridSettingForDifferenceCursor(false);
                if (_LineGraph != null)
                {
                    _LineGraph._DataGridView = dataGridView1;
                }

                if (_3DGraph != null)
                {
                    _3DGraph._DataGridView = dataGridView1;
                }

                if (_BarGraph != null)
                {
                    _BarGraph._DataGridView = dataGridView1;
                }

                string SlctedCursor = cmbCurSors.SelectedItem.ToString();
                switch (SlctedCursor)
                {
                    case "Single":
                        //if (SlctedCursor == "Single")
                    {
                        SingleCrs = true;
                        HarmncCrs = false;
                        SideBndCsr = false;
                        SideBndCsrRatio = false;
                        SideBandTrndDrw = false;
                        PeekCursor = false;
                        TwDSingleSqrCrs = false;
                        TwoDCrossHairCursor = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Single");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Single");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Single");
                        }

                        break;
                    }
                    case "Harmonic":
                        //else if (SlctedCursor == "Harmonic")
                    {
                        HarmncCrs = true;
                        SideBndCsr = false;
                        SideBndCsrRatio = false;
                        SideBandTrndDrw = false;
                        PeekCursor = false;
                        SingleCrs = false;
                        TwDSingleSqrCrs = false;
                        TwoDCrossHairCursor = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Harmonic");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Select Cursor");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "Single With Square":
                        // else if (SlctedCursor == "Single With Square")
                    {
                        TwDSingleSqrCrs = true;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        SideBandTrndDrw = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        TwoDCrossHairCursor = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Single With Square");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Single With Square");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Single With Square");
                        }

                        break;
                    }
                    case "Cross Hair":
                        //else if (SlctedCursor == "Cross Hair")
                    {
                        TwoDCrossHairCursor = true;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        SideBandTrndDrw = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Cross Hair");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Cross Hair");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Cross Hair");
                        }

                        break;
                    }
                    case "Sideband":
                        //else if (SlctedCursor == "Sideband")
                    {
                        SideBndCsr = true;
                        SideBndCsrRatio = false;
                        PeekCursor = false;
                        SideBandTrndDrw = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Sideband");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Select Cursor");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "SidebandRatio":
                        // else if (SlctedCursor == "SidebandRatio")
                    {
                        SideBndCsr = false;
                        SideBndCsrRatio = true;
                        SideBandTrndDrw = false;
                        PeekCursor = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("SidebandRatio");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Select Cursor");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "SideBandTrend":
                        //else if (SlctedCursor == "SideBandTrend")
                    {
                        KillCrs = false;
                        SideBandTrndDrw = true;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        SelectBandTrend = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("SideBandTrend");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("SideBandTrend");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "PeekCursor":
                        //else if (SlctedCursor == "PeekCursor")
                    {
                        SideBandTrndDrw = false;
                        SideBndCsr = false;
                        PeekCursor = true;
                        SideBndCsrRatio = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        FindAllPeaks();
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("PeekCursor");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("PeekCursor");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "Difference Cursors":
                        //else if (SlctedCursor == "Difference Cursors")//
                    {

                        BearingFaultFrequency = false;
                        FaultFreq = false;
                        ShowRpmRatio = false;

                        DataGridSettingForDifferenceCursor(true);
                        SelectedRowIndex = 0;

                        KillCrs = false;
                        MultipleCrsr = true;

                        SideBandTrndDrw = false;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;

                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Difference Cursors");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Difference Cursors");
                        }

                        frmRpmCount _CursorCount = new frmRpmCount();
                        _CursorCount._HeaderText = "No. of Cursors";
                        _CursorCount._LabelText = "Cursor Count";
                        _CursorCount.ShowDialog();
                        int Cursorcount = _CursorCount._RPMCount;
                        DrawMultipleCursors(Cursorcount);
                        break;
                    }
                    case "Line":
                        //else if (SlctedCursor == "Line")
                    {
                        KillCrs = false;
                        SideBandTrndDrw = false;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Select Cursor");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Select Cursor");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Line");
                        }



                        //ClearDatagrid();
                        //dataGridView1.Rows.Add(8);
                        //LineCursorWaterFallClicked();
                        //ThrdSqr = false;
                        //ThrdLn = true;

                        //MultipleCrsr = false;
                        //if (_LineGraph != null)
                        //{
                        //    _LineGraph.SetCursorType("Line");
                        //}
                        //if (_BarGraph != null)
                        //{
                        //    _BarGraph.SetCursorType("Line");
                        //}
                        //if (_3DGraph != null)
                        //{
                        //    _3DGraph.SetCursorType("Select Cursor");
                        //}
                        break;
                    }
                    case "Square":
                        //else if (SlctedCursor == "Square")
                    {
                        ClearDatagrid();
                        dataGridView1.Rows.Add(1);
                        SqureWaterFallCursorClicked();
                        ThrdSqr = true;
                        ThrdLn = false;
                        KillCrs = false;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Square");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Square");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "Multiple":
                        //else if (SlctedCursor == "Multiple")
                    {
                        MultipleCrsr = true;
                        KillCrs = false;
                        SideBandTrndDrw = false;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Multiple");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Multiple");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                    case "Kill Cursor":
                    {
                        SingleCrs = false;
                        HarmncCrs = false;
                        SideBndCsr = false;
                        SideBndCsrRatio = false;
                        SideBandTrndDrw = false;
                        PeekCursor = false;
                        TwDSingleSqrCrs = false;
                        TwoDCrossHairCursor = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        KillCrs = true;
                        MultipleCrsr = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Single");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Single");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Single");
                        }

                        break;
                    }
                    default:
                        // else
                    {
                        //if (bbUnzoom.Enabled)
                        //{
                        //    Zoom = false;
                        //}
                        MultipleCrsr = false;
                        KillCrs = false;
                        SideBandTrndDrw = false;
                        SideBndCsr = false;
                        PeekCursor = false;
                        SideBndCsrRatio = false;
                        TwoDCrossHairCursor = false;
                        TwDSingleSqrCrs = false;
                        HarmncCrs = false;
                        SingleCrs = false;
                        ThrdSqr = false;
                        ThrdLn = false;
                        if (_LineGraph != null)
                        {
                            _LineGraph.SetCursorType("Select Cursor");
                        }

                        if (_BarGraph != null)
                        {
                            _BarGraph.SetCursorType("Select Cursor");
                        }

                        if (_3DGraph != null)
                        {
                            _3DGraph.SetCursorType("Select Cursor");
                        }

                        break;
                    }
                }

                if (KillCrs)
                {
                    bbKillCursor.Visibility = BarItemVisibility.Always;
                }
                else
                {
                    bbKillCursor.Visibility = BarItemVisibility.Never;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private void bbOctave_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                if (!CheckForTimeData(yarrayNew) && !cepstrum)
                {
                    IsOctave = !IsOctave;
                    OctaveButtons(IsOctave);
                    if (IsOctave)
                    {
                        NullCursorBools();
                        //FFbuttonEnabled = false;
                        _LineGraph.DGVTrendNodes = dataGridView2;
                        _BarGraph = new BarChart();
                        _BarGraph._XLabel = "Hz";
                        _BarGraph._YLabel = lblDisplayunit.Text.ToString();
                        _BarGraph.Dock = DockStyle.Top;
                        _BarGraph.AllowDrop = true;
                        ExtractDataForOctaveNewControl();
                    }
                    else
                    {
                        panel1.Controls.Remove(_BarGraph);
                        _BarGraph = null;
                        _LineGraph.Dock = DockStyle.Fill;
                    }
                }
                else
                {
                    MessageBoxEx.Show("Octave not possible for cepstrum or TimeWave");
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbChangeXUnit_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ChangeDataUnitforIMXANew(CurrentXLabel, "X");
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbChangeYUnit_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ChangeDataUnitforIMXANew(CurrentYLabel, "Y");
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbArea_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                if (IsAreaPlot == false)
                {
                    IsAreaPlot = true;
                    _LineGraph._AreaFill = true;
                }
                else
                {
                    IsAreaPlot = false;
                    _LineGraph._AreaFill = false;
                }

                bool bReturned = _LineGraph.AreaGraph();
                if (!bReturned)
                {
                    IsAreaPlot = false;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbRPM_ItemClick(object sender, ItemClickEventArgs e)
        {
            string[] Frequencies = new string[dgvDiFF.RowCount - 1];
            try
            {
                ShowRpmRatio = !ShowRpmRatio;
                FaultFreq = false;
                BearingFaultFrequency = false;
                double FinalFreq = 0;
                if (_LineGraph._XLabel == "Sec" || _LineGraph._XLabel == "S" || _LineGraph._XLabel == "s"
                ) //if (CurrentXLabel == "Sec" || CurrentXLabel == "S" || CurrentXLabel == "s")
                {
                    ShowRpmRatio = false;
                }

                if (ShowRpmRatio)
                {
                    frmRpmCount objCount = new frmRpmCount();
                    objCount.ShowDialog();
                    _RPMCount = objCount._RPMCount;

                    int iRPM = Convert.ToInt32(txtxRPM.Text.ToString());
                    int iPulse = Convert.ToInt32(txtxPulse.Text.ToString());
                    FinalFreq = (double) ((double) iRPM / (double) (iPulse * 60));
                }

                bool bReturned = _LineGraph.DrawRPMmarkers(ShowRpmRatio, FinalFreq, dataGridView3, _RPMCount);
                if (!bReturned)
                {
                    ShowRpmRatio = false;
                    Datagrid3visible = false;
                }
                else
                {
                    Datagrid3visible = true;
                }

                panel1.Refresh();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbZoom_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                if (_LineGraph != null)
                {
                    Zoom = true;
                    _LineGraph.StartZoom();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph.StartZoom();
                }

                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);

            }
            catch (Exception ex)
            {
            }
        }

        private void bbUnzoom_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {

                if (_LineGraph != null)
                {
                    Zoom = false;
                    _LineGraph.Unzoom();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph.Unzoom();
                }

                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbCopyGraph_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool bbreak = false;
            try
            {
                if (_LineGraph != null)
                {
                    if (_LineGraph.Size == panel1.Size)
                    {
                        _LineGraph.CopyGraph();
                    }
                    else
                    {
                        if (_BarGraph != null)
                        {
                            if (_BarGraph.Size == _LineGraph.Size)
                            {
                                _BarGraph.CopyGraph();
                                bbreak = true;
                            }
                        }

                        if (_3DGraph != null)
                        {
                            if (_3DGraph.Size == _LineGraph.Size)
                            {
                                _3DGraph.CopyGraph();
                                bbreak = true;
                            }
                        }
                    }
                }

                if (!bbreak)
                {
                    if (_BarGraph != null)
                    {
                        _BarGraph.CopyGraph();
                    }

                    if (_3DGraph != null)
                    {
                        _3DGraph.CopyGraph();
                    }

                    if (_OrbitGraph != null)
                    {
                        _OrbitGraph.CopyGraph();
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbCopyData_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                double[] XValsToCopy = null;
                double[] YValsToCopy = null;
                if (DataSelected.Count <= 0)
                {
                    DataSelected = _LineGraph.GetAllPlotDataSet();
                }

                for (int i = 0; i < DataSelected.Count; i++)
                {
                    XValsToCopy = (double[]) DataSelected[i];
                    i += 1;
                    YValsToCopy = (double[]) DataSelected[i];
                }


                CopyValues(XValsToCopy, YValsToCopy);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbmainCursor_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ColorDialog _Color = new ColorDialog();
                _Color.ShowDialog();

                byte ColorA = _Color.Color.A;
                byte ColorR = _Color.Color.R;
                byte ColorG = _Color.Color.G;
                byte ColorB = _Color.Color.B;
                _MainCursorColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                if (_LineGraph != null)
                {
                    _LineGraph._MainCursorColor =
                        Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                }

                if (_BarGraph != null)
                {
                    _BarGraph._MainCursorColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                }

                //if (_3DGraph != null)
                //{
                //    _3DGraph._MainCursorColor = Color.FromArgb((int)ColorA, (int)ColorR, (int)ColorG, (int)ColorB);
                //}
                if (_OrbitGraph != null)
                {
                    _OrbitGraph._MainCursorColor =
                        Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbAxisColor_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ColorDialog _Color = new ColorDialog();
                _Color.ShowDialog();
                byte ColorA = _Color.Color.A;
                byte ColorR = _Color.Color.R;
                byte ColorG = _Color.Color.G;
                byte ColorB = _Color.Color.B;
                _AxisColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                if (_LineGraph != null)
                {
                    _LineGraph._AxisColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._AxisColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._AxisColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._AxisColor = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbGraphBG1_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ColorDialog _Color = new ColorDialog();
                _Color.ShowDialog();
                byte ColorA = _Color.Color.A;
                byte ColorR = _Color.Color.R;
                byte ColorG = _Color.Color.G;
                byte ColorB = _Color.Color.B;
                _GraphBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                if (_LineGraph != null)
                {
                    _LineGraph._GraphBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._GraphBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._GraphBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._GraphBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbGraphBG2_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ColorDialog _Color = new ColorDialog();
                _Color.ShowDialog();
                byte ColorA = _Color.Color.A;
                byte ColorR = _Color.Color.R;
                byte ColorG = _Color.Color.G;
                byte ColorB = _Color.Color.B;
                _GraphBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                if (_LineGraph != null)
                {
                    _LineGraph._GraphBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._GraphBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._GraphBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._GraphBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbGraphDirHor_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                _GraphBGDir = 0;
                if (_LineGraph != null)
                {
                    _LineGraph._GraphBGDir = 0;
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._GraphBGDir = 0;
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._GraphBGDir = 0;
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._GraphBGDir = 0;
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbGraphDirVer_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                _GraphBGDir = 1;
                if (_LineGraph != null)
                {
                    _LineGraph._GraphBGDir = 1;
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._GraphBGDir = 1;
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._GraphBGDir = 1;
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._GraphBGDir = 1;
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbChartBG1_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ColorDialog _Color = new ColorDialog();
                _Color.ShowDialog();
                byte ColorA = _Color.Color.A;
                byte ColorR = _Color.Color.R;
                byte ColorG = _Color.Color.G;
                byte ColorB = _Color.Color.B;
                _ChartBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                if (_LineGraph != null)
                {
                    _LineGraph._ChartBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._ChartBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._ChartBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._ChartBG1 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbChartBG2_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ColorDialog _Color = new ColorDialog();
                _Color.ShowDialog();
                byte ColorA = _Color.Color.A;
                byte ColorR = _Color.Color.R;
                byte ColorG = _Color.Color.G;
                byte ColorB = _Color.Color.B;
                _ChartBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                if (_LineGraph != null)
                {
                    _LineGraph._ChartBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._ChartBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._ChartBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._ChartBG2 = Color.FromArgb((int) ColorA, (int) ColorR, (int) ColorG, (int) ColorB);
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbChartDirHor_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                _ChartBGDir = 0;
                if (_LineGraph != null)
                {
                    _LineGraph._ChartBGDir = 0;
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._ChartBGDir = 0;
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._ChartBGDir = 0;
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._ChartBGDir = 0;
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbChartDirVer_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                _ChartBGDir = 1;
                if (_LineGraph != null)
                {
                    _LineGraph._ChartBGDir = 1;
                    BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph._ChartBGDir = 1;
                    BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph._ChartBGDir = 1;
                    BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph._ChartBGDir = 1;
                    BackGroundChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbCepstrum_ItemClick(object sender, ItemClickEventArgs e)
        {
            double[] Cepstrumdata = null;
            try
            {
                cepstrum = !cepstrum;
                CepstrumButtons(cepstrum);
                if (cepstrum)
                {
                    PreviousxarrayNewCep = xarrayNew;
                    PreviousXLabelCep = CurrentXLabel;
                    PreviousyarrayNewCep = yarrayNew;
                    PreviousYLabelCep = CurrentYLabel;
                    //Amit Jain    DA_22	if I take cepatrum then application also hang for some time, add progress form 	code related	minor 	2-4-2010
                    try
                    {
                        BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                        this.Cursor = Cursors.WaitCursor;
                    }
                    catch (Exception ep)
                    {
                        ErrorLog_Class.ErrorLogEntry(ep);
                        ErrorLogFile(ep);
                    }

                    if (yarrayNew.Length > 0)
                    {
                        bool IsTimeData = CheckForTimeData(yarrayNew);
                        double[] data = null;
                        double[] tempX = null;
                        if (yarrayNew.Length % 2 != 0)
                        {
                            data = new double[yarrayNew.Length - 1];
                            tempX = new double[yarrayNew.Length - 1];
                            for (int i = 0; i < yarrayNew.Length - 1; i++)
                            {
                                data[i] = yarrayNew[i];
                                tempX[i] = xarrayNew[i];
                            }
                        }
                        else
                        {
                            data = yarrayNew;
                            tempX = xarrayNew;
                        }

                        int tempxlength = tempX.Length;
                        if (IsTimeData)
                        {
                            Cepstrumdata = CalculateCepstrumfromTime(data, xarrayNew);
                        }
                        else
                        {
                            if (CurrentXLabel == "Hz")
                            {
                                double finalSec = 1 / xarrayNew[1];
                                double secdiff = (1 / xarrayNew[tempxlength - 1]) / 2;
                                tempX = new double[tempxlength * 2];
                                for (int i = 1; i < tempxlength * 2; i++)
                                {
                                    tempX[i] = tempX[i - 1] + secdiff;
                                }

                                Cepstrumdata = CalculateCepstrumfromFFT(data, xarrayNew);
                            }

                        }

                        if (Cepstrumdata != null)
                        {
                            xarrayNew = tempX;
                            yarrayNew = Cepstrumdata;
                            CurrentXLabel = "Sec";
                            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                        }
                        else
                        {
                            BusyImageProcess.Kill();
                            this.Cursor = Cursors.Default;
                            MessageBoxEx.Show("Please convert X Data to Hz");
                            cepstrum = !cepstrum;
                            CepstrumButtons(cepstrum);
                        }
                    }

                    try
                    {
                        BusyImageProcess.Kill();
                        this.Cursor = Cursors.Default;
                    }
                    catch
                    {
                    }
                }
                else
                {
                    xarrayNew = PreviousxarrayNewCep;
                    yarrayNew = PreviousyarrayNewCep;
                    CurrentXLabel = PreviousXLabelCep;
                    DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                try
                {
                    BusyImageProcess.Kill();
                    this.Cursor = Cursors.Default;
                }
                catch
                {
                }
            }
        }

        private void bbConvertToFFT_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {

                try
                {
                    //Amit Jain    DA_21	open analyser then click the Demo1.wav after that click the Convert to FFT then application hang (for some time) - Add the progress form.	code related	minor 	2-4-2010
                    try
                    {
                        BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                        this.Cursor = Cursors.WaitCursor;
                    }
                    catch (Exception ep)
                    {
                        ErrorLogFile(ep);
                    }

                    if (!SetIsTrend)
                    {
                        bConvertToFFT = !bConvertToFFT;
                        if (bConvertToFFT)
                        {
                            PreviousxarrayNew = new double[0];
                            PreviousyarrayNew = new double[0];
                            double[] Hz = new double[0];
                            double[] mag = new double[0];
                            PreviousxarrayNew = xarrayNew;
                            PreviousyarrayNew = yarrayNew;
                            PreviousXLabel = CurrentXLabel;
                            PreviousYLabel = CurrentYLabel;
                            if (CheckForTimeData(yarrayNew))
                            {
                                mag = fftMag(yarrayNew);
                                double lastTimevalue = (double) (xarrayNew[xarrayNew.Length - 1]);
                                lastTimevalue = Math.Round(lastTimevalue, 2);
                                double HzRate = (double) (1 / lastTimevalue);

                                for (int i = 0; i < mag.Length; i++)
                                {
                                    //Array.Resize(ref Hz, Hz.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref Hz, 1);
                                    Hz[i] = HzRate * i;
                                }

                                CurrentGraph = "Power";
                                setCursorCombo("Power");

                                trendValCtr = 1;
                                xarrayNew = Hz;
                                yarrayNew = mag;
                                CurrentXLabel = "Hz";
                                if (Hz.Length > 1)
                                {
                                    DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                                }
                            }
                            else
                            {
                                bConvertToFFT = !bConvertToFFT;
                            }
                        }
                        else
                        {
                            xarrayNew = PreviousxarrayNew;
                            yarrayNew = PreviousyarrayNew;
                            CurrentXLabel = PreviousXLabel;
                            CurrentYLabel = PreviousYLabel;
                            if (xarrayNew != null || yarrayNew != null)
                            {
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                    }
                    else if (SetIsTrend)
                    {
                        if (CurrentXLabel == "Sec" || CurrentXLabel == "s" ||
                            trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" ||
                            trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                        {
                            bConvertToFFT = !bConvertToFFT;
                            if (bConvertToFFT)
                            {
                                bool Karo = true;
                                PreviousDatasets = new ArrayList();
                                ArrayList ConvertedArrXYVals = new ArrayList();
                                ArrayList arrXYVals = _LineGraph.GetAllPlotDataSet(); // new ArrayList();
                                PreviousDatasets = arrXYVals;
                                if (iFinalFrequency == 0)
                                {
                                    iFinalFrequency = 1000;
                                }

                                if (!string.IsNullOrEmpty(lblOrder.Text.ToString().Replace(" ", "")))
                                {

                                    iFinalFrequency = Convert.ToInt32(lblOrder.Text.ToString());
                                }

                                for (int ii = 0; ii < arrXYVals.Count / 2; ii++)
                                {
                                    Karo = true;
                                    DataSelected = new ArrayList();
                                    double[] testX = (double[]) arrXYVals[2 * ii];
                                    double[] testY = (double[]) arrXYVals[(2 * ii) + 1];
                                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                                    {
                                        if (!CheckForTimeData(testY))
                                        {
                                            Karo = false;
                                        }
                                    }

                                    if (Karo)
                                    {
                                        double[] mag = fftMag(testY);
                                        double lastTimevalue = (double) (testX[testX.Length - 1]);
                                        lastTimevalue = Math.Round(lastTimevalue, 2);
                                        double HzRate = (double) (1 / lastTimevalue);
                                        double[] Hz = new double[0];
                                        for (int i = 0; i < mag.Length; i++)
                                        {
                                            //Array.Resize(ref Hz, Hz.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref Hz, 1);
                                            Hz[i] = HzRate * i;
                                            if (Hz[i] >= iFinalFrequency)
                                            {
                                                break;
                                            }
                                        }

                                        testX = Hz;
                                        testY = new double[testX.Length];
                                        for (int i = 0; i < testY.Length; i++)
                                        {
                                            testY[i] = mag[i];
                                        }

                                        ConvertedArrXYVals.Add(testX);
                                        ConvertedArrXYVals.Add(testY);
                                        DataSelected.Add(testX);
                                        DataSelected.Add(testY);
                                        //draw = true;
                                        if (arlSelectedColorTag == null)
                                        {
                                            arlSelectedColorTag = new ArrayList();
                                            arlSelectedColorTag.Add("7667712");
                                        }
                                    }
                                    else
                                    {
                                        //bConvertToFFT = false;
                                        ConvertedArrXYVals.Add(testX);
                                        ConvertedArrXYVals.Add(testY);
                                    }
                                }

                                if (ConvertedArrXYVals.Count > 0)
                                {
                                    //CurrentGraph = "Power";
                                    setCursorCombo("Power");
                                    // GraphType = "FFT";
                                    //lblGrphUnitX.Text = "X Unit : Hz";
                                    //DrawGraph(arrXYVals, arlselectedFiles, arlSelectedColorTag);
                                    //panel1.Refresh();
                                    if (arlstSColors == null || arlstSColors.Count == 0)
                                    {
                                        arlstSColors = new ArrayList();
                                        arlstSColors.Add("7667712");
                                    }

                                    string[] ColorTag = new string[arlstSColors.Count];
                                    for (int i = 0; i < arlstSColors.Count; i++)
                                    {
                                        ColorTag[i] = arlstSColors[i].ToString();
                                    }

                                    PreviousXLabel = CurrentXLabel;
                                    //if (arlstSColors.Count < 2)
                                    //{
                                    //    CurrentXLabel = "Hz";
                                    //    PreviousxarrayNew = new double[0];
                                    //    PreviousyarrayNew = new double[0];

                                    //    PreviousxarrayNew = xarrayNew;
                                    //    PreviousyarrayNew = yarrayNew;

                                    //    xarrayNew = (double[])ConvertedArrXYVals[0];
                                    //    yarrayNew = (double[])ConvertedArrXYVals[1];
                                    //}
                                    _LineGraph._XLabel = "Hz"; // CurrentXLabel;

                                    DrawLineGraphs(ConvertedArrXYVals, ColorTag);
                                }
                            }
                            else
                            {
                                string[] ColorTag = new string[arlstSColors.Count];
                                for (int i = 0; i < arlstSColors.Count; i++)
                                {
                                    ColorTag[i] = arlstSColors[i].ToString();
                                }

                                CurrentXLabel = PreviousXLabel;
                                _LineGraph._XLabel = CurrentXLabel;
                                //if (PreviousDatasets.Count < 3)
                                //{
                                //    xarrayNew = PreviousxarrayNew;
                                //    yarrayNew = PreviousyarrayNew;
                                //}
                                DrawLineGraphs(PreviousDatasets, ColorTag);
                            }
                        }
                    }

                    FFTConversionButtons(bConvertToFFT);
                }
                catch (Exception ex)
                {
                    try
                    {
                        // this.Enabled = true;
                        BusyImageProcess.Kill();
                        this.Cursor = Cursors.Default;
                    }
                    catch
                    {
                    }

                    bConvertToFFT = false;
                    FFTConversionButtons(false);
                    ErrorLog_Class.ErrorLogEntry(ex);
                    ErrorLogFile(ex);
                }
            }
            catch (Exception ex)
            {
                try
                {
                    // this.Enabled = true;
                    BusyImageProcess.Kill();
                    this.Cursor = Cursors.Default;
                }
                catch
                {
                }

                ErrorLog_Class.ErrorLogEntry(ex);
            }

            try
            {
                // this.Enabled = true;
                BusyImageProcess.Kill();
                this.Cursor = Cursors.Default;
            }
            catch
            {
            }
        }

        private void bbBand_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                //if (CurrentXLabel == "Sec" || CurrentXLabel == "s" )// 
                if (CurrentXLabel == "Sec" || CurrentXLabel == "s" ||
                    trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                {
                }
                else
                {
                    IsBandAreaPlot = !IsBandAreaPlot;
                    FaultFreq = false;
                    ShowRpmRatio = false;
                    BearingFaultFrequency = false;
                    string[] BandData = GetBandAlarmData();
                    bool bReturned = _LineGraph.DrawBandRegion(BandData, dataGridView1, IsBandAreaPlot);
                    if (!bReturned)
                    {
                        IsBandAreaPlot = false;
                    }

                    DataGridSettingForBandAlarm(IsBandAreaPlot);
                    BandAlarmButtons(IsBandAreaPlot);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbBearingFF_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                BearingFaultFrequency = !BearingFaultFrequency;
                chkBFFOverride.Checked = false;
                FaultFreq = false;
                ShowRpmRatio = false;
                if (CurrentXLabel == "Sec" || CurrentXLabel == "S" || CurrentXLabel == "s")
                {
                    BearingFaultFrequency = false;
                }

                ExactBearingFF = new double[4];
                ArrayList BearingFF = GetBearingFaultFrequencies();
                string[] Frequencies = new string[BearingFF.Count];
                for (int i = 0; i < BearingFF.Count; i++)
                {
                    Frequencies[i] = BearingFF[i].ToString();
                }

                bool bReturned = _LineGraph.DrawFaultFrequencies(BearingFaultFrequency, Frequencies, dataGridView3);
                if (!bReturned)
                {
                    BearingFaultFrequency = false;
                    Datagrid3visible = false;
                }
                else
                {
                    Datagrid3visible = true;

                    Top5Values();
                    bool BearingFault = false;
                    string sBearingFault = null;
                    for (int i = 0; i < 5; i++)
                    {
                        if ((double) ExactBearingFF[0] == (double) Top5pointsX[i])
                        {
                            BearingFault = true;
                            sBearingFault += "\n" + " Ball Passing Frequency Defect";
                        }

                        if ((double) ExactBearingFF[1] == (double) Top5pointsX[i])
                        {
                            BearingFault = true;
                            sBearingFault += "\n" + " Ball Passing Inner Race Defect";
                        }

                        if ((double) ExactBearingFF[2] == (double) Top5pointsX[i])
                        {
                            BearingFault = true;
                            sBearingFault += "\n" + " Ball Spin Frequency Defect";
                        }

                        if ((double) ExactBearingFF[3] == (double) Top5pointsX[i])
                        {
                            BearingFault = true;
                            sBearingFault += "\n" + " Fundamental Train Frequency Defect";
                        }
                    }

                    if (BearingFault)
                    {
                        MessageBoxEx.Show("Current Graph shows following fault(s) in the Bearing " + sBearingFault,
                            "Bearing Fault", MessageBoxButtons.OK);
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbGraphBack_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                selectGraphNumber--;
                if (selectGraphNumber < 0)
                {
                    selectGraphNumber = arlstSColors.Count - 1;
                }

                NavigateGraphs(selectGraphNumber);
                //int colorvalue = Convert.ToInt32(arlstSColors[selectGraphNumber]);
                //DataSelected = _LineGraph.SelectNextPlot(colorvalue);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbGraphNext_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                selectGraphNumber++;
                if (selectGraphNumber >= arlstSColors.Count)
                {
                    selectGraphNumber = 0;
                }

                NavigateGraphs(selectGraphNumber);
            }
            catch (Exception ex)
            {
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                CloseAppLication();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void trlPlantMangerComponents_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down)
                {
                    e.Handled = true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        private void tcMain_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Right)
                {
                    e.Handled = true;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

        }

        private void bbExit_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {


                if (MessageBoxEx.Show("Do You Really want to Shut Down the Application", "Exit",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) ==
                    DialogResult.Yes)
                {
                    Application.Exit();
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                //System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void ribbonControl1_MouseEnter(object sender, EventArgs e)
        {
            try
            {
                timer1.Start();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void ribbonControl1_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                timer1.Stop();

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                ribbonControl1.ApplicationIcon.RotateFlip(RotateFlipType.RotateNoneFlipX);
                ribbonControl1.Refresh();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void trlPlantMangerComponents_BeforeExpand(object sender,
            DevExpress.XtraTreeList.BeforeExpandEventArgs e)
        {
            try
            {
                if (m_bDemoButtonClicked)
                {
                    if (Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "Demo"))
                    {
                        bool DemoOK = true;
                        DirectoryInfo di = new DirectoryInfo(AppDomain.CurrentDomain.BaseDirectory + "Demo");
                        FileInfo[] rgFiles = di.GetFiles("*.csv");
                        foreach (FileInfo fi in rgFiles)
                        {
                            string FileName = fi.Name.ToString();
                            switch (FileName)
                            {
                                case "Demo1.csv":
                                {
                                    if (fi.LastWriteTimeUtc.Ticks.ToString() == "633856642800000000" ||
                                        fi.LastWriteTimeUtc.Ticks.ToString() == "633856660800000000")
                                    {
                                    }
                                    else
                                    {
                                        fi.Delete();
                                        DemoOK = false;
                                    }

                                    break;
                                }
                                case "Demo2.csv":
                                {
                                    if (fi.LastWriteTimeUtc.Ticks.ToString() == "633851156400000000" ||
                                        fi.LastWriteTimeUtc.Ticks.ToString() == "633851174400000000")
                                    {
                                    }
                                    else
                                    {
                                        fi.Delete();
                                        DemoOK = false;
                                    }

                                    break;
                                }
                                default:
                                {
                                    fi.Delete();
                                    break;
                                }
                            }
                        }

                        rgFiles = di.GetFiles("*.wav");
                        foreach (FileInfo fi in rgFiles)
                        {
                            string FileName = fi.Name.ToString();
                            switch (FileName)
                            {
                                case "Demo1.wav":
                                {
                                    if (fi.LastWriteTimeUtc.Ticks.ToString() == "633675346740000000" ||
                                        fi.LastWriteTimeUtc.Ticks.ToString() == "633675364740000000")
                                    {
                                    }
                                    else
                                    {
                                        fi.Delete();
                                        DemoOK = false;
                                    }

                                    break;
                                }
                                default:
                                {
                                    fi.Delete();
                                    break;
                                }
                            }
                        }
                    }
                }

                if (e.Node.Tag.ToString() == "CSVFile" || e.Node.Tag.ToString() == "WAVFile") return;
                // �-remove the dummy node and display 
                // the subdirectories and files�-
                try
                {
                    e.Node.Nodes.Clear(); // clears all the nodes and...
                    displayChildNodes(e.Node); //  create the nodes again
                }
                catch (Exception err)
                {
                    ErrorLog_Class.ErrorLogEntry(err);
                    MessageBoxEx.Show(err.Message);
                }

                // �-change the icon for this node to open�-
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            TreeListNode node = null;
            TreeListNode node1 = null;
            string sPath = null;

            try
            {
                if (m_bDemoButtonClicked)
                {
                    if (Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "Demo"))
                    {
                        sPath = AppDomain.CurrentDomain.BaseDirectory + "Demo";
                    }
                }
                else if (!File.Exists(sErrorLogPath + "\\AnalLog.txt"))
                {

                    FolderBrowserDialog _Browse = new FolderBrowserDialog();
                    _Browse.RootFolder = Environment.SpecialFolder.MyComputer;
                    _Browse.ShowDialog();
                    sPath = _Browse.SelectedPath;

                    if (string.IsNullOrEmpty(sPath))
                    {
                        sPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                    }

                    PATH = sPath;

                    aa = new FileStream(sErrorLogPath + "\\AnalLog.txt", FileMode.Create, FileAccess.ReadWrite);

                    sw = new StreamWriter(aa);
                    sw.WriteLine(sPath);
                    sw.Close();
                }
                else
                {
                    aa = new FileStream(sErrorLogPath + "\\AnalLog.txt", FileMode.Open, FileAccess.Read);

                    sr = new StreamReader(aa);
                    sPath = sr.ReadLine();
                    sr.Close();
                }

                try
                {
                    // �-create the root node�-
                    PATH = sPath;
                    node = trlPlantMangerComponents.AppendNode(new object[] {sPath}, null);
                    node.Tag = "Folder";
                    node.StateImageIndex = 0;
                    node1 = trlPlantMangerComponents.AppendNode(new object[] {""}, node);
                    trlPlantMangerComponents.FocusedNode = node;
                }
                catch (Exception err)
                {
                    ErrorLog_Class.ErrorLogEntry(err);
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private void tcMain_Selected(object sender, DevExpress.XtraTab.TabPageEventArgs e)
        {
            string sSelectedTabPage = e.Page.Name.ToString(); // e.TabPage.Name.ToString();
            try
            {
                if (sSelectedTabPage == "tpGraph")
                {
                    rpGraphTools.Visible = true;
                    rpMain.Visible = false;
                    bbOpen.Enabled = false;
                    bbOpenInst.Enabled = false;
                }
                else
                {
                    rpGraphTools.Visible = false;
                    rpMain.Visible = true;
                    if (!m_bDemoButtonClicked)
                    {
                        bbOpen.Enabled = true;
                        bbOpenInst.Enabled = true;
                    }

                    //if (sSelectedTabPage == "tpConfCheck")
                    //{
                    //    gpDisplacement.Height = tpConfCheck.Height / 3;
                    //    gpVelocity.Height = gpDisplacement.Height;
                    //}
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbSBValue_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);
                SideBandValue objSideBand = new SideBandValue();
                objSideBand.ShowDialog();
                iConstSBValue = objSideBand._Value;
                SBValue = Convert.ToString(iConstSBValue);
                SelectedCursorItem = "Sideband";
                CmbCursorSelectedItem(SelectedCursorItem);

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbSBRatio_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);
                SideBandRatio objRatio = new SideBandRatio();
                objRatio.ShowDialog();
                iConstSBRatio = objRatio._Value;
                TrendRatio = "1/" + Convert.ToString(iConstSBRatio);
                SelectedCursorItem = "SidebandRatio";
                CmbCursorSelectedItem(SelectedCursorItem);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void dataGridView2_Click(object sender, EventArgs e)
        {
            try
            {
                Channel1GraphToDraw = true;
                if (((iclick + jclick) < 3) && trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                {
                    if (label_Ch1 == null)
                    {
                        label_Ch1 = "CH1";
                    }

                    x = Channel1WavX;
                    y = Channel1WavY;
                    NullCursorBools();
                    CurrentXLabel = "Sec";
                    CurrentYLabel = label_Ch1.ToString();
                    xarrayNew = x;
                    yarrayNew = y;
                    DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                    panel1.Refresh();
                }
            }
            catch
            {
            }
        }

        private void dataGridViewX1_Click(object sender, EventArgs e)
        {
            try
            {
                Channel1GraphToDraw = false;
                if (label_Ch2 == null)
                {
                    label_Ch2 = "CH2";
                }

                if (((iclick + jclick) < 3) && trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                {
                    lblXAxis.Text = "Date : " + dateofwav.ToString();
                    x = Channel2WavX;
                    y = Channel2WavY;
                    GphCtr = 0;
                    NullCursorBools();
                    CurrentXLabel = "Sec";
                    CurrentYLabel = label_Ch2.ToString();
                    xarrayNew = x;
                    yarrayNew = y;
                    DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                    panel1.Refresh();
                }
            }
            catch
            {
            }
        }

        private void chkBFFOverride_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            try
            {
                if (BearingFaultFrequency)
                {
                    _LineGraph._IsBearingFF = chkBFFOverride.Checked;
                    if (chkBFFOverride.Checked == false)
                    {
                        callBFF();
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void barEditBearingHarmonics_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                iBearingHarmonics = Convert.ToInt32(barEditBearingHarmonics.EditValue.ToString());
                if (BearingFaultFrequency)
                {
                    callBFF();
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbPhase_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                bPhase = true;
                PhaseClicked();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbSBTrend_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem); //cmbCurSors.SelectedIndex = 0;
                //tsBtnSideBandTrend_Click(null, null);
                SideBandTrendFunction();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void dataGridView1_RowHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                int RowIndex = e.RowIndex;
                if (RowIndex < dataGridView1.Rows.Count)
                {
                    SelectedRowIndex = RowIndex;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void bbOriginal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                bOrderTracking = !bOrderTracking;
                if (tlNode != null)
                {
                    trlPlantMangerComponents.FocusedNode = tlNode;
                    tlNode = null;
                }

                TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                if (selectedNode.Tag.ToString() == "CSVFile" || selectedNode.Tag.ToString() == "FDTFile")
                {
                    if (bOrderTracking)
                    {
                        int iRPM = Convert.ToInt32(txtxRPM.Text.ToString());
                        int iPulse = Convert.ToInt32(txtxPulse.Text.ToString());
                        double FinalFreq = (double) ((double) iRPM / (double) (iPulse * 60));

                        double ExactX = 0;
                        if (CurrentXLabel == "Hz")
                        {
                            ExactX = (double) iRPM / (double) iPulse;
                            ExactX = ExactX / 60;
                        }
                        else if (CurrentXLabel == "CPM")
                        {
                            ExactX = (double) iRPM / (double) iPulse;
                        }

                        com.iAM.chart2dnet.SimpleLinePlot[] linePlt = _LineGraph.GetAllPlots();

                        com.iAM.chart2dnet.SimpleDataset Dataset1 = linePlt[0].DisplayDataset;
                        double[] X_Data = new double[1];
                        double[] Y_Data = new double[1];

                        for (int iOT = 0; iOT < 99; iOT++)
                        {
                            double FreqToCalc = ExactX * iOT;
                            if (FreqToCalc > (double) Dataset1.XData[Dataset1.XData.Length - 1])
                            {
                                break;
                            }

                            int MainIndex = Array.FindIndex(Dataset1.XData.GetDataBuffer(),
                                delegate(double item) { return item == FreqToCalc; });

                            if (MainIndex == -1)
                            {
                                if (FreqToCalc <= Dataset1.XData[Dataset1.XData.Length - 1])
                                {
                                    FreqToCalc = FindNearest(Dataset1.XData.GetDataBuffer(), FreqToCalc);
                                    MainIndex = Array.FindIndex(Dataset1.XData.GetDataBuffer(),
                                        delegate(double item) { return item == FreqToCalc; });
                                }
                            }

                            //Array.Resize(ref X_Data, X_Data.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref X_Data, 1);
                            X_Data[X_Data.Length - 1] = Dataset1.XData[MainIndex];
                            //Array.Resize(ref Y_Data, Y_Data.Length + 1);
                            _ResizeArray.IncreaseArrayDouble(ref Y_Data, 1);
                            Y_Data[Y_Data.Length - 1] = Dataset1.YData[MainIndex];
                        }

                        DrawLineGraphs(X_Data, Y_Data, CurrentXLabel, CurrentYLabel);
                    }
                    else
                    {
                        FocusedNodeChangedEventArgs _e = new FocusedNodeChangedEventArgs(null, selectedNode);
                        //trlPlantMangerComponents.FocusedNode = selectedNode;
                        trlPlantMangerComponents_FocusedNodeChanged(null, _e);

                        //NullCursorBools();
                        //NullAllGphElements();
                        //panel1.Refresh();
                        //SetAllButtontoInitial();
                        //DrawOriginalDI(AppDomain.CurrentDomain.BaseDirectory + "Temp.csv");
                    }
                    //if (DestbeforeTrend == null)
                    //{
                    //    string source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
                    //    string Dest = AppDomain.CurrentDomain.BaseDirectory + "Temp.csv";
                    //    if (File.Exists(Dest))
                    //    {
                    //        File.SetAttributes(Dest, FileAttributes.Normal);
                    //    }
                    //    File.Copy(source, Dest, true);
                    //    DestbeforeTrend = Dest;
                    //}

                    //NullCursorBools();
                    //NullAllGphElements();
                    //panel1.Refresh();
                    //SetAllButtontoInitial();
                    //DrawOriginalDI(DestbeforeTrend);

                }
                else
                {
                    //if (DestbeforeTrend.ToString().Contains(".txt"))
                    //{

                    //    SetAllButtontoInitial();
                    //    ReadTXTfile(DestbeforeTrend, true);
                    //    x = xarray;
                    //    y = yarray;
                    //    panel1.Refresh();

                    //    if (lblXunit.Text.Contains('s'))
                    //    {
                    //        CurrentGraph = "Time";
                    //        setCursorCombo("Time");
                    //    }
                    //    else
                    //    {
                    //        CurrentGraph = "Power";
                    //        setCursorCombo("Power");
                    //    }
                    //    GraphType = "FFT";


                    //    NullCursorBools();
                    //    RefreshZoomParam();

                    //    deletedataGridRows();
                    //    ResetZoomButton();

                    //    CreatGPWithVariableForDi();

                    //    panel1.Refresh();

                    //}
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void bbCrestFactorTrend_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                ArrayList arrXYVals = _LineGraph.GetAllPlotDataSet();
                int j = 0;
                double[] CrestFactor = new double[arrXYVals.Count / 2];
                if (CrestFactor.Length > 1)
                {
                    for (int i = 1; i < arrXYVals.Count; i++)
                    {
                        CrestFactor[j] = CalculateCrestFactor((double[]) arrXYVals[i]);
                        j++;
                        i++;
                    }

                    IsCrestTrend = !IsCrestTrend;
                    if (IsCrestTrend)
                    {
                        trlPlantMangerComponents.Enabled = false;
                        bbTrend.Enabled = false;
                        bbConvertToFFT.Enabled = false;
                        //NullCursorBools();
                        ////FFbuttonEnabled = false;
                        //_LineGraph.DGVTrendNodes = dataGridView2;
                        //_BarGraph = new BarChart();
                        //_BarGraph._XLabel = "Hz";
                        //_BarGraph._YLabel = lblDisplayunit.Text.ToString();
                        //_BarGraph.Dock = DockStyle.Top;
                        //_BarGraph.AllowDrop = true;
                        //DrawBarGraphs(CrestFactor);//,arlstSelectedTime);
                        bFarzi = true;
                        dataGridView2_CellContentClick(null, farziE);

                    }
                    else
                    {
                        bbTrend.Enabled = true;
                        bbConvertToFFT.Enabled = true;
                        trlPlantMangerComponents.Enabled = true;
                        panel1.Controls.Remove(_BarGraph);
                        _BarGraph = null;
                        _LineGraph.Dock = DockStyle.Fill;
                    }
                }
                else
                {
                    MessageBoxEx.Show("You must have more than one graph for the Trend of Crest Factor");
                }
            }
            catch (Exception ex)
            {
            }
        }

        bool IsOrbitPlot = false;
        ArrayList arrXYVals = null;
        ArrayList arrXYVals1 = null;

        private void bbOrbit_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                IsOrbitPlot = !IsOrbitPlot;
                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);
                if (IsOrbitPlot)
                {
                    ExtractTestDataForOrbit();
                }
                else
                {
                    Set_iClick(Function.Clear);
                    // StopTrending();
                }

                OrbitButtons(IsOrbitPlot);
            }
            catch (Exception ex)
            {
            }
        }

        private void bbKillCursor_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                //double Sigma = CalculateSigma(yarrayNew);
                //MessageBox.Show(Sigma.ToString());
                _LineGraph.KillPoint(true);
            }
            catch (Exception ex)
            {
            }
        }

        private void bbInterpret_ItemClick(object sender, ItemClickEventArgs e)
        {
            FFT_Interpretation.Interprator _interprator = new FFT_Interpretation.Interprator();
            double[] XValsToCopy = null;
            double[] YValsToCopy = null;
            if (DataSelected.Count <= 0)
            {
                DataSelected = _LineGraph.GetAllPlotDataSet();
            }

            for (int i = 0; i < 2; i++) // DataSelected.Count; i++)
            {
                XValsToCopy = (double[]) DataSelected[i];
                i += 1;
                YValsToCopy = (double[]) DataSelected[i];
            }
            //Calculate RPM

            int iRPM = Convert.ToInt32(txtxRPM.Text.ToString());
            int iPulse = Convert.ToInt32(txtxPulse.Text.ToString());
            double FinalFreq = (double) ((double) iRPM / (double) (iPulse * 60));
            if (iRPM > 60)
            {
                string interpretation =
                    _interprator.Interpret_FFT(XValsToCopy, YValsToCopy, FinalFreq, _LineGraph._XLabel);

                MessageBoxEx.Show("With the Values of the RPM entered we found" + "\n\n" + interpretation,
                    "Interpretation of Graph");
            }
            else
                MessageBoxEx.Show("Either RPM Value Incorrect or contact administrator");

            DiagnosisClass diagnosis = new DiagnosisClass();
            var newInterpretation = diagnosis.BasicDiagnosis(new ArrayList {XValsToCopy, YValsToCopy}, iRPM, 0);
            if (newInterpretation.Count > 0)
            {
                StringBuilder sbNewInterpretation = new StringBuilder();
                sbNewInterpretation.Append("More precisely found fault are mention below " + "\n");
                foreach (var intepret in newInterpretation)
                {
                    sbNewInterpretation.Append(intepret + "\n");
                }

                MessageBox.Show(sbNewInterpretation.ToString());
            }

        }

        int initialorbitctr = 1;

        private void ExtractTestDataForOrbit()
        {
            initialorbitctr = 1;
            ArrayList Time_Mag = new ArrayList();
            ArrayList Time_Ang = new ArrayList();
            ArrayList Time_selected = new ArrayList();
            ImageList objlistimg = new ImageList();
            arrXYVals = null;
            arrXYVals1 = null;
            string[] colors = null;
            string[] ColorCode =
            {
                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216",
                "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696",
                "6737204", "16728065", "744352"
            };
            int color = 0;
            iclick = 0;
            objlistimg.Images.Add(Resources.DarkRed);
            objlistimg.Images.Add(Resources.DarkGreen);
            objlistimg.Images.Add(Resources.DarkGoldenRod);
            objlistimg.Images.Add(Resources.DarkseaGreen);
            objlistimg.Images.Add(Resources.DarkBlue);
            objlistimg.Images.Add(Resources.DimGrey);
            objlistimg.Images.Add(Resources.Chocolate);
            objlistimg.Images.Add(Resources.DarkKhaki);
            objlistimg.Images.Add(Resources.Black);
            objlistimg.Images.Add(Resources.Orange);
            objlistimg.Images.Add(Resources.Cyan);
            objlistimg.Images.Add(Resources.AquaMarine);
            objlistimg.Images.Add(Resources.Bisque);
            objlistimg.Images.Add(Resources.Blue);
            objlistimg.Images.Add(Resources.BlueViolet);
            objlistimg.Images.Add(Resources.Coral);
            objlistimg.Images.Add(Resources.Darkmagenta);
            objlistimg.Images.Add(Resources.DarkSlateBlue);
            objlistimg.Images.Add(Resources.DarkVoilet);
            objlistimg.Images.Add(Resources.Deeppink);
            objlistimg.Images.Add(Resources.DodgerBlue);
            objlistimg.Images.Add(Resources.FireBrick);
            objlistimg.Images.Add(Resources.ForestGreen);
            objlistimg.Images.Add(Resources.GreenYellow);
            objlistimg.Images.Add(Resources.HotPink);
            objlistimg.Images.Add(Resources.IndianRed);
            objlistimg.Images.Add(Resources.Darkorange);
            objlistimg.Images.Add(Resources.Darkorchid);
            objlistimg.Images.Add(Resources.DeepSkyBlue);
            objlistimg.Images.Add(Resources.SandyBrown);
            // string sInstrumentName = PublicClass.currentInstrument;
            // if (sInstrumentName == "Impaq-Benstone")
            {
                try
                {
                    // if (_objUserControl != null)
                    {
                        arlstSColors = new ArrayList();
                        CallClearDataGridMain();
                        colors = new string[1];
                        if (Time_Mag.Count > 0)
                        {
                            dataGridView2.Rows.Add(Time_Mag.Count);
                        }

                        int icc = 0;
                        for (int i = 0; i < Time_Mag.Count; i++)
                        {
                            dataGridView2.Rows[i].Cells[1].Value = "X";
                            dataGridView2.Rows[i].Cells[0].Value = Time_Mag[i].ToString();
                            dataGridView2.Rows[i].Cells[3].Value = objlistimg.Images[icc];
                            dataGridView2.Rows[i].Cells[3].Tag = ColorCode[icc].ToString();
                            color++;
                            icc++;
                            if (icc >= 30)
                            {
                                icc = 0;
                            }
                        }
                    }
                    dataGridView2.Rows[0].Cells[1].Value = "√";
                    Time_selected.Add(Time_Mag[0].ToString());
                    arlstSColors.Add(ColorCode[0]);
                    colors[0] = ColorCode[0].ToString();
                    dataGridView2.Rows[dataGridView2.Rows.Count - 1].Cells[3].Value = Resources.White;
                    //arrXYVals = objIHand.GetAllPlotValues(PublicClass.SPointID, null, Time_selected, "Time", "Vertical");
                    //arrXYVals1 = objIHand.GetAllPlotValues(PublicClass.SPointID, null, Time_selected, "Time", "Horizontal");
                    //if (arrXYVals.Count > 1 && arrXYVals1.Count > 1)
                    //{
                    //    ArrayList arlOrbitData = new ArrayList();
                    //    arlOrbitData.Add((double[])arrXYVals1[1]);
                    //    arlOrbitData.Add((double[])arrXYVals[1]);
                    //    DrawLineOrbitGraphs(arlOrbitData, colors);
                    //}
                }
                catch
                {
                }
            }
        }

        public void DrawLineOrbitGraphs(ArrayList XYData, string[] ColorTag)
        {
            try
            {
                RemovePreviousGraphControl();
                if (_LineGraph == null)
                {
                    _LineGraph.Dock = DockStyle.Fill;

                    //_LineGraph._YLabel = m_PointGeneral1._DisplacementUnit;

                    //_LineGraph._XLabel = m_PointGeneral1._DisplacementUnit;
                    //objGcontrol.panel1.Controls.Add(_LineGraph);
                    //_LineGraph._MainForm = this;
                }

                _LineGraph._ChartFooter = ChartFooter;
                _LineGraph._GraphBG1 = _GraphBG1;
                _LineGraph._GraphBG2 = _GraphBG2;
                _LineGraph._GraphBGDir = _GraphBGDir;
                _LineGraph._ChartBG1 = _ChartBG1;
                _LineGraph._ChartBG2 = _ChartBG2;
                _LineGraph._ChartBGDir = _ChartBGDir;
                _LineGraph._AxisColor = _AxisColor;
                _LineGraph._MainCursorColor = _MainCursorColor;
                _LineGraph._AreaFill = false;
                _LineGraph.DrawLineOrbitGraph(XYData, ColorTag);
            }
            catch (Exception ex)
            {
            }
        }


        private void OrbitButtons(bool ON)
        {
            try
            {
                bbArea.Enabled = !ON;
                bbTrend.Enabled = !ON;
                bbCepstrum.Enabled = !ON;
                bbChangeXUnit.Enabled = !ON;
                bbChangeYUnit.Enabled = !ON;
                bbGraphBack.Enabled = !ON;
                bbGraphNext.Enabled = !ON;
                bcmDirection.Enabled = !ON;
                // bbShaftCenterLine.Enabled = !ON;
                bbOriginal.Enabled = !ON;
                bbCrestFactorTrend.Enabled = !ON;
            }
            catch (Exception ex)
            {
            }
        }

        //Private Functions
        private void SideBandTrendFunction()
        {
            try
            {
                //objTrend = new SideBandTrend();

                SingleCrs = false;
                HarmncCrs = false;
                SideBndCsr = false;
                SideBndCsrRatio = false;
                SideBandTrndDrw = false;
                TwDSingleSqrCrs = false;
                TwoDCrossHairCursor = false;
                ThrdSqr = false;
                ThrdLn = false;



                SelectBandTrend = true;

                //objTrend.Show();
                _LineGraph.SideBandTrendClicked();
                string SelectedCursorItem = "SideBandTrend";
                CmbCursorSelectedItem(SelectedCursorItem);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }
        }

        private string ReadCSVfile(string path, bool bIfTrue)
        {
            sParameter = " $ Path % " + sourceCSV;
            xarrayNew = new double[0];
            yarrayNew = new double[0];
            sApp = null;
            DispType = null;
            string[] sarrpath = path.Split(new string[] {"\\"}, StringSplitOptions.RemoveEmptyEntries);

            string newpath = null;
            for (int i = 0; i < sarrpath.Length - 1; i++)
            {
                newpath += sarrpath[i].ToString() + "\\";
            }

            OleDbConnection myConnection = null;
            try
            {
                //Amit Jain     DA_49	click the file(recorder) in list,display after some time ,add progress form	code related	minor	19/4/2010
                try
                {
                    BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                    this.Cursor = Cursors.WaitCursor;
                }
                catch (Exception ep)
                {
                    ErrorLogFile(ep);
                }

                string connectionString = "Provider=Microsoft.Jet.OleDb.4.0;Data Source=" + newpath +
                                          ";Extended Properties='Text;HDR=NO;IMEX=1;FMT=Delimited';"; //\"Excel 8.0;HDR=NO;IMEX=1\"";
                //Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Documents and Settings\rajesh.yadava\Desktop\orcad;Extended Properties="Text;HDR=YES;IMEX=1;FMT=Delimited"

                //connectionString += "Extended Properties=Excel 8.0;";

                // always read from the sheet1.
                myConnection = new OleDbConnection(connectionString);
                // string a1s = trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString();

                OleDbCommand myCommand =
                    new OleDbCommand("Select * from [" + sarrpath[sarrpath.Length - 1].ToString() + "]", myConnection);
                totalValues = 1;
                IsFoundValues = false;






                //OleDbDataAdapter da = new OleDbDataAdapter("Select * from [" + sarrpath[sarrpath.Length - 1].ToString() + "]", myConnection);
                //DataTable dt = new DataTable();
                //da.Fill(dt);
                //DataTableReader dtr = new DataTableReader(dt);
                //foreach (DataRow dr in dt.Rows)
                //{

                //}

                //while (dtr.Read())
                //{
                //    string aa = dtr.GetValue(0).ToString();
                //    string aa1 = dtr.GetValue(1).ToString();
                //    string aa2 = dtr.GetValue(2).ToString();
                //    string aa3 = dtr.GetValue(3).ToString();
                //    string aa4 = dtr.GetValue(4).ToString();
                //    string aa5 = dtr.GetValue(5).ToString();
                //} dtr.Close();




                myConnection.Open();



                myCommand.Connection = myConnection;

                OleDbDataReader myReader = myCommand.ExecuteReader();
                //dataGridView3.DataSource = myCommand.ExecuteReader(CommandBehavior.CloseConnection);

                while (myReader.Read())
                {
                    string first = myReader[0].ToString();
                    string second = myReader[1].ToString();

                    if (!string.IsNullOrEmpty(first))
                    {
                        switch (first)
                        {
                            case "Application":
                            {
                                sApp = second;
                                sParameter += " $ Application % " + second;
                                lblApplication.Text = second.ToString();


                                break;
                            }
                            case "User ID":
                            {
                                //lblDate.Text = second.ToString();
                                break;
                            }
                            case "Unit ID":
                            {
                                // lblDate.Text = second.ToString();
                                break;
                            }
                            case "Date/Time":
                            {
                                lblDate.Text = second.ToString();

                                sParameter += " $ Date % " + second;
                                break;
                            }
                            case "Trigger Type":
                            {
                                lblTriggerType.Text = second.ToString();

                                sParameter += " $ Trigger Type % " + second;
                                break;
                            }
                            case "Trigger Level":
                            {
                                lblTriggerlevel.Text = second.ToString();

                                sParameter += " $ Trigger Level % " + second;
                                break;
                            }
                            case "Slope":
                            {
                                lblSlope.Text = second.ToString();

                                sParameter += " $ Slope % " + second;
                                break;
                            }
                            case "Transducer Units":
                            {
                                lblTransducerUnit.Text = second.ToString();

                                sParameter += " $ Transducer Units % " + second;
                                break;
                            }
                            case "Sensitivity":
                            {
                                lblSensitivity.Text = second.ToString();

                                sParameter += " $ Sensitivity % " + second;
                                break;
                            }
                            case "Transducer Offset":
                            {
                                lblTransduceroffset.Text = second.ToString();

                                sParameter += " $ Transducer Offset % " + second;
                                break;
                            }
                            case "Display Units":
                            {
                                lblDisplayunit.Text = second.ToString();

                                lblGraphUnitY.Text = "Y Unit : " + second.ToString();
                                sParameter += " $ Display Units % " + second;

                                break;
                            }
                            case "High Pass Filter":
                            {
                                lblhpf.Text = second.ToString();

                                sParameter += " $ High Pass Filter % " + second;
                                break;
                            }
                            case "Coupling Type":
                            {
                                lblCouplingtype.Text = second.ToString();

                                sParameter += " $ Coupling Type % " + second;
                                break;
                            }
                            case "Channel Input":
                            {
                                lblChannelInput.Text = second.ToString();

                                sParameter += " $ Channel Input % " + second;
                                break;
                            }
                            case "Freq Type":
                            {
                                lblFreqType.Text = second.ToString();

                                sParameter += " $ Freq Type % " + second;
                                break;
                            }
                            case "Max Freq / Orders":
                            {
                                lblOrder.Text = second.ToString();

                                sParameter += " $ Orders % " + second;
                                break;
                            }
                            case "No. of Averages":
                            {
                                lblAvg.Text = second.ToString();

                                sParameter += " $ No. of Averages % " + second;
                                break;
                            }
                            case "Average Type":
                            {
                                lblAveragetype.Text = second.ToString();

                                sParameter += " $ Average Type % " + second;
                                break;
                            }
                            case "Overlap (%)":
                            {
                                lbloverlap.Text = second.ToString();

                                sParameter += " $ Overlap % " + second;
                                break;
                            }
                            case "Detection":
                            {
                                lblDetection.Text = second.ToString();

                                sParameter += " $ Detection % " + second;
                                break;
                            }
                            case "No. of Lines":
                            {
                                lbllines.Text = second.ToString();

                                sParameter += " $ No. of Lines % " + second;
                                break;
                            }
                            case "No. of Samples":
                            {
                                lbllines.Text = second.ToString();

                                sParameter += " $ No. of Lines % " + second;
                                break;
                            }
                            case "Window Type":
                            {
                                lblWindowtype.Text = second.ToString();

                                sParameter += " $ Window Type % " + second;
                                break;
                            }
                            case "Input Range Mode":
                            {
                                lblInputRange.Text = second.ToString();

                                sParameter += " $ Input Range Mode % " + second;
                                break;
                            }
                            case "Fixed Range Value":
                            {
                                lblFixedRangeValue.Text = second.ToString();

                                sParameter += " $ Fixed Range Value % " + second;
                                break;
                            }
                            case "Auto Mode":
                            {
                                lblAutoMode.Text = second.ToString();

                                sParameter += " $ Auto Mode % " + second;
                                break;
                            }
                            case "Meas. Type":
                            {
                                lblMeastype.Text = second.ToString();

                                sParameter += " $ Meas. Type % " + second;
                                break;
                            }
                            case "Meas. Domain":
                            {
                                lblMeasDomain.Text = second.ToString();

                                sParameter += " $ Meas. Domain % " + second;
                                break;
                            }
                            case "Trigger Hysteresis":
                            {
                                lblTriggerH.Text = second.ToString();

                                sParameter += " $ Trigger Hysteresis % " + second;
                                break;
                            }
                            case "Trigger Pullup":
                            {
                                lblTriggerPullup.Text = second.ToString();

                                sParameter += " $ Trigger Pullup % " + second;
                                break;
                            }
                            case "Bin Zeroing":
                            {
                                lblBinZero.Text = second.ToString();

                                sParameter += " $ Bin Zeroing % " + second;
                                break;
                            }
                            case "Units String":
                            {
                                lblUnitstring.Text = second.ToString();


                                sParameter += " $ Units String % " + second;
                                break;
                            }
                            case "Y-axis Units":
                            {
                                lblYunit.Text = second.ToString();

                                sParameter += " $ Y-axis Units % " + second;

                                //lblGraphUnitY.Text = "Y Unit : " + second.ToString();

                                break;
                            }
                            case "X-axis Units":
                            {
                                lblXunit.Text = second.ToString();

                                sParameter += " $ X-axis Units % " + second;
                                //if (lblXunit.Text.ToString() == "CPM")
                                //{
                                //    //IsAlreadyCPM = true;
                                //    bXunitConvert = true;
                                //}
                                //else
                                //{
                                //    //IsAlreadyCPM = false;
                                //    bXunitConvert = false;
                                //}
                                if (lblYunit.Text.ToString() == "Time")
                                {
                                    lblGrphUnitX.Text = "X Unit : sec";

                                    //lineGraphControl1._XLabel = "sec";
                                }
                                else
                                {
                                    lblGrphUnitX.Text = "X Unit : " + second;

                                    //lineGraphControl1._XLabel = second;
                                }

                                break;
                            }
                            case "View Signal":
                            {
                                lblViewSignal.Text = second.ToString();

                                sParameter += " $ View Signal % " + second;
                                break;
                            }
                            case "Y-axis Display":
                            {
                                lblYaxisDisplay.Text = second.ToString();

                                sParameter += " $ Y-axis Display % " + second;
                                break;
                            }
                            case "Sensor Type":
                            {
                                lblSensorType.Text = second.ToString();

                                sParameter += " $ Sensor Type % " + second;
                                break;
                            }
                            case "Overall":
                            {
                                lblOverall.Text = second.ToString();

                                sParameter += " $ Overall % " + second;
                                break;
                            }
                            case "X-Axis":
                            {
                                //lblOverall.Text = second.ToString();
                                break;
                            }
                            case "Rec Start Mode":
                            {
                                break;
                            }
                            case "Rec Trig Level":
                            {
                                break;
                            }
                            case "Acq. Errors":
                            {
                                break;
                            }
                            case "Order":
                            {
                                break;
                            }
                            case "RPM Stamp":
                            {
                                break;
                            }
                            case "Time Stamp":
                            {
                                break;
                            }
                            default:
                            {
                                try
                                {
                                    double test = Convert.ToDouble(first);
                                    //Array.Resize(ref xarrayNew, xarrayNew.Length + 1);
                                    //Array.Resize(ref yarrayNew, yarrayNew.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref xarrayNew, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref yarrayNew, 1);
                                    //if (lblXunit.Text.ToString() == "CPM")
                                    //{
                                    //    first = Convert.ToString(Convert.ToDouble(first) / 60);
                                    //}
                                    xarrayNew[xarrayNew.Length - 1] = Convert.ToDouble(first);
                                    yarrayNew[yarrayNew.Length - 1] = Convert.ToDouble(second);
                                }
                                catch
                                {
                                }

                                break;
                            }
                            //{
                            //    if (!IsFoundValues)
                            //    {
                            //        string CheckVal = "test";// myReader[totalValues].ToString();
                            //        while (!string.IsNullOrEmpty(CheckVal))
                            //        {
                            //            try
                            //            {
                            //                CheckVal = myReader[totalValues].ToString();
                            //                totalValues++;
                            //            }
                            //            catch
                            //            {
                            //                CheckVal = null;
                            //                totalValues--;
                            //            }
                            //        }
                            //        IsFoundValues = true;
                            //    }
                            //    if (sApp == "Analyser" || sApp == "Recorder")
                            //    {
                            //        //Array.Resize(ref xarrayNew, xarrayNew.Length + 1);
                            //        //Array.Resize(ref yarrayNew, yarrayNew.Length + 1);
                            //        _ResizeArray.IncreaseArrayDouble(ref xarrayNew, 1);
                            //        _ResizeArray.IncreaseArrayDouble(ref yarrayNew, 1);
                            //        //if (lblXunit.Text.ToString() == "CPM")
                            //        //{
                            //        //    first = Convert.ToString(Convert.ToDouble(first) / 60);
                            //        //}
                            //        xarrayNew[xarrayNew.Length - 1] = Convert.ToDouble(first);
                            //        yarrayNew[yarrayNew.Length - 1] = Convert.ToDouble(second);
                            //    }
                            //    break;
                            //}
                        }
                    }
                }

                myReader.Close();
                myConnection.Close();
                if (!string.IsNullOrEmpty(lblOverall.Text.ToString()))
                {
                    ChartFooter = "Overall: " + lblOverall.Text.ToString() + lblDisplayunit.Text.ToString() + "   " +
                                  "Resolution: " + lbllines.Text.ToString() + "   " + "Date/Time: " +
                                  lblDate.Text.ToString() + "\n" + "File Name: " +
                                  trlPlantMangerComponents.FocusedNode.GetDisplayText(0);
                }

                //Amit Jain     DA_49	click the file(recorder) in list,display after some time ,add progress form	code related	minor	19/4/2010
                try
                {
                    BusyImageProcess.Kill();
                    this.Cursor = Cursors.Default;
                }
                catch
                {
                }

                if (string.IsNullOrEmpty(sApp))
                {
                    sApp = "CtC";
                }

                //if (sApp == "Analyser" || sApp == "Recorder")
                //{
                //    lineGraphControl1.DrawLineGraph(xarrayNew, yarrayNew);
                //    tpGraphControl.Refresh();

                //}
                //else if (sApp == "RuCd" || sApp == "FRF")
                //{
                //    bbphaseCtr = 0;
                //    bbPhase.Caption = "View Phase";
                //    bbPhase.Visibility = BarItemVisibility.Always;
                //    tsbtnRuCD_Click(null, null);
                //    //sParameter = null;
                //}
                //else if (sApp == "CtC")
                //{
                //    GetConfCheckImages(path);
                //    lblApplication.Text = "Conformance Check";
                //    //sParameter = null;
                //}
                //else
                //{
                //    GetConfCheckImages(path);
                //    lblApplication.Text = "Conformance Check";
                //    //sParameter = null;
                //    //MessageBoxEx.Show("Not Analyser/Recorder Data");
                //}
            }
            catch (Exception ex)
            {
            }
            finally
            {
                try
                {
                    BusyImageProcess.Kill();
                    this.Cursor = Cursors.Default;
                }
                catch
                {
                }

                myConnection.Close();
                myConnection = null;
            }

            return sApp;
        }

        private void DrawLineGraphs(ArrayList XYData, string[] ColorTag)
        {
            //double[] xData=null;
            //double[] yData=null;


            try
            {
                if (_LineGraph == null)
                {
                    _LineGraph = new LineGraphControl();
                    _LineGraph.Dock = DockStyle.Fill;
                    CurrentYLabel = lblDisplayunit.Text.ToString();
                    _LineGraph._YLabel = lblDisplayunit.Text.ToString();
                    CurrentXLabel = lblXunit.Text.ToString();
                    _LineGraph._XLabel = lblXunit.Text.ToString();
                    panel1.Controls.Add(_LineGraph);
                    _LineGraph._MainForm = this;

                }

                _LineGraph._ChartFooter = ChartFooter;
                _LineGraph._GraphBG1 = _GraphBG1;
                _LineGraph._GraphBG2 = _GraphBG2;
                _LineGraph._GraphBGDir = _GraphBGDir;
                _LineGraph._ChartBG1 = _ChartBG1;
                _LineGraph._ChartBG2 = _ChartBG2;
                _LineGraph._ChartBGDir = _ChartBGDir;
                _LineGraph._AxisColor = _AxisColor;
                _LineGraph._MainCursorColor = _MainCursorColor;

                _LineGraph.DrawLineGraph(XYData, ColorTag);

                //for (int i = 0; i < GraphCount; i++)
                //{
                //    double[] xData = (double[])XYData[2 * i];
                //    double[] yData = (double[])XYData[(2 * i) + 1];

                //    _LineGraph = new LineGraphControl();
                //    _LineGraph.Name = "LineGraph" + i.ToString();

                //    _LineGraph._MainForm = this;
                //    _LineGraph._XLabel = lblXunit.Text.ToString();
                //    CurrentXLabel = _LineGraph._XLabel;
                //    _LineGraph._YLabel = lblDisplayunit.Text.ToString();
                //    CurrentYLabel = _LineGraph._YLabel;
                //    _LineGraph.Dock = DockStyle.Fill;
                //    _LineGraph.DrawLineGraph(xData, yData);
                //    panel1.Controls.Add(_LineGraph);
                //    //panel1.Controls[_LineGraph.Name].Dock = DockStyle.Fill;
                //}

            }
            catch (Exception ex)
            {
            }
        }

        private void DrawLineGraphs(int GraphCount, ArrayList XYData)
        {
            //double[] xData=null;
            //double[] yData=null;
            try
            {
                for (int i = 0; i < GraphCount; i++)
                {
                    double[] xData = (double[]) XYData[2 * i];
                    double[] yData = (double[]) XYData[(2 * i) + 1];

                    if (_LineGraph == null)
                    {
                        _LineGraph = new LineGraphControl();
                        _LineGraph.Name = "LineGraph" + i.ToString();
                    }

                    _LineGraph._ChartFooter = ChartFooter;
                    _LineGraph._MainForm = this;
                    _LineGraph._XLabel = lblXunit.Text.ToString();
                    CurrentXLabel = _LineGraph._XLabel;
                    _LineGraph._YLabel = lblDisplayunit.Text.ToString();
                    CurrentYLabel = _LineGraph._YLabel;

                    _LineGraph._GraphBG1 = _GraphBG1;
                    _LineGraph._GraphBG2 = _GraphBG2;
                    _LineGraph._GraphBGDir = _GraphBGDir;
                    _LineGraph._ChartBG1 = _ChartBG1;
                    _LineGraph._ChartBG2 = _ChartBG2;
                    _LineGraph._ChartBGDir = _ChartBGDir;
                    _LineGraph._AxisColor = _AxisColor;
                    _LineGraph._MainCursorColor = _MainCursorColor;
                    _LineGraph._AreaFill = _AreaPlot;

                    _LineGraph.Dock = DockStyle.Fill;
                    _LineGraph.DrawLineGraph(xData, yData);
                    panel1.Controls.Add(_LineGraph);
                    //panel1.Controls[_LineGraph.Name].Dock = DockStyle.Fill;
                }

            }
            catch (Exception ex)
            {
            }
        }

        private void DrawLineGraphs(double[] xData, double[] yData, string XLabel, string YLabel)
        {
            try
            {
                RemovePreviousGraphControl();
                //for (int i = 0; i < GraphCount; i++)
                {
                    if (_LineGraph == null)
                    {
                        _LineGraph = new LineGraphControl();
                        _LineGraph.Name = "LineGraph 1"; // +i.ToString();
                    }

                    _LineGraph._MainForm = this;
                    _LineGraph._XLabel = XLabel;
                    //CurrentXLabel = _LineGraph._XLabel;
                    _LineGraph._YLabel = YLabel;
                    //CurrentYLabel = _LineGraph._YLabel;
                    _LineGraph._ChartFooter = ChartFooter;
                    _LineGraph._GraphBG1 = _GraphBG1;
                    _LineGraph._GraphBG2 = _GraphBG2;
                    _LineGraph._GraphBGDir = _GraphBGDir;
                    _LineGraph._ChartBG1 = _ChartBG1;
                    _LineGraph._ChartBG2 = _ChartBG2;
                    _LineGraph._ChartBGDir = _ChartBGDir;
                    _LineGraph._AxisColor = _AxisColor;
                    _LineGraph._MainCursorColor = _MainCursorColor;

                    _LineGraph.Dock = DockStyle.Fill;
                    _LineGraph.DrawLineGraph(xData, yData);
                    panel1.Controls.Add(_LineGraph);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void RemovePreviousGraphControl()
        {
            try
            {
                int iControlCount = panel1.Controls.Count;
                int[] graphcontrolIndex = new int[0];
                for (int i = 0; i < iControlCount; i++)
                {
                    if (panel1.Controls[i].Name.Contains("LineGraph"))
                    {
                        panel1.Controls.Remove(panel1.Controls[i]);
                        i--;
                        iControlCount--;
                    }

                    _LineGraph = null;

                    if (panel1.Controls[i].Name.Contains("OrbitGraph"))
                    {
                        panel1.Controls.Remove(panel1.Controls[i]);
                        i--;
                        iControlCount--;
                    }

                    _OrbitGraph = null;

                    if (panel1.Controls[i].Name.Contains("BarGraph"))
                    {
                        panel1.Controls.Remove(panel1.Controls[i]);
                        i--;
                        iControlCount--;
                    }

                    _BarGraph = null;

                }

                for (int i = 0; i < graphcontrolIndex.Length; i++)
                {

                }

            }
            catch (Exception ex)
            {
            }
        }

        private void DrawWaterFallGraphs(int GraphCount, ArrayList XYData)
        {
            try
            {
                for (int i = 0; i < GraphCount; i++)
                {
                    double[] xData = (double[]) XYData[2 * i];
                    double[] yData = (double[]) XYData[(2 * i) + 1];

                    _3DGraph = new _3DGraphControl();
                    _3DGraph.Name = "3DGraph" + i.ToString();
                    _3DGraph.AllowDrop = true;
                    _3DGraph._MainForm = this;

                    _3DGraph._GraphBG1 = _GraphBG1;
                    _3DGraph._GraphBG2 = _GraphBG2;
                    _3DGraph._GraphBGDir = _GraphBGDir;
                    _3DGraph._ChartBG1 = _ChartBG1;
                    _3DGraph._ChartBG2 = _ChartBG2;
                    _3DGraph._ChartBGDir = _ChartBGDir;
                    _3DGraph._AxisColor = _AxisColor;
                    //_3DGraph._MainCursorColor = _MainCursorColor;

                    _3DGraph._XLabel = lblXunit.Text.ToString();
                    _3DGraph._YLabel = lblDisplayunit.Text.ToString();
                    _3DGraph.DGVTrendNodes = dataGridView2;
                    _3DGraph.Height = panel1.Height / 2;
                    _3DGraph.Dock = DockStyle.Top;
                    _3DGraph.DrawWaterfallGraph(xData, yData);
                    panel1.Controls.Add(_3DGraph);
                    //panel1.Controls[_LineGraph.Name].Dock = DockStyle.Fill;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private ArrayList GetAllPlotValuesNewGraph(ArrayList arlNewTime)
        {
            arrXYValues = new ArrayList();
            arrSelTime = new ArrayList();
            try
            {
                for (int i = 0; i < arlNewTime.Count; i++)
                {
                    string[] sarrFileName = arlNewTime[i].ToString()
                        .Split(new string[] {"<>"}, StringSplitOptions.RemoveEmptyEntries);
                    if (sarrFileName.Length > 1)
                    {
                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                        {
                            string filepath = (AppDomain.CurrentDomain.BaseDirectory + sarrFileName[1].ToString() +
                                               ".csv");
                            ReadCSVfile(filepath);
                            arrSelTime.Add(lblDate.Text.ToString());
                        }
                        else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                        {
                            string filepath = (AppDomain.CurrentDomain.BaseDirectory + sarrFileName[1].ToString() +
                                               ".TXT");
                            ReadTXTfile(filepath, true);
                            arrSelTime.Add(arlNewTime[i].ToString());
                        }

                        arrXYValues.Add(xarrayNew);
                        arrXYValues.Add(yarrayNew);
                    }
                    else
                    {
                        if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                        {
                            string filepath = sarrFileName[0].ToString();
                            ReadCSVfile(filepath);
                            arrSelTime.Add(lblDate.Text.ToString());
                            arrXYValues.Add(xarrayNew);
                            arrXYValues.Add(yarrayNew);
                        }
                        else if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile" ||
                                 trlPlantMangerComponents.FocusedNode.Tag.ToString() == "DATFile")
                        {

                            string filepath = ("c:\\vvtemp\\" + sarrFileName[0] + ".txt");
                            ReadTXTfileNew(filepath, true);
                            arrSelTime.Add(arlNewTime[i].ToString());
                            arrXYValues.Add(xarrayNew);
                            arrXYValues.Add(yarrayNew);

                            //string[] timectr = sarrFileName[0].ToString().Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                            //DateTime _datetime =Convert.ToDateTime( dateofwav);
                            //DateTime newdate = _datetime.AddSeconds(Convert.ToDouble(timectr[0].ToString()));

                            //    {
                            //        lblXAxis.Text = "Date : " + newdate.ToString();
                            //    }

                        }

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return arrXYValues;
        }

        private void ExtractDataForOctaveNewControl()
        {
            try
            {
                octaveSettings _octaveSettings = new octaveSettings();
                _octaveSettings.ShowDialog();
                OctaveStyle = _octaveSettings.Bars;

                double[] XData = new double[xarrayNew.Length]; //XData = xarrayNew;
                double[] YData = new double[xarrayNew.Length];
                YData = yarrayNew;

                double count = 0;
                double power = 0;
                OctaveOrder = Convert.ToDouble(_octaveSettings.Octave);

                octaveCenterData = new double[0];
                octaveLowerData = new double[0];
                octaveUpperData = new double[0];

                if (CurrentXLabel == "CPM")
                {
                    for (int i = 0; i < XData.Length; i++)
                    {
                        XData[i] = (double) xarrayNew[i] / 60;
                    }
                }
                else
                {
                    XData = xarrayNew;
                }

                do
                {
                    count = Math.Pow(10, power);
                    if (count >= 1000)
                    {
                        count = count / 1000;
                        count = Math.Round(count);
                        count = count * 1000;
                    }
                    else if (count >= 130)
                    {
                        count = count / 10;
                        count = Math.Round(count);
                        count = count * 10;
                    }
                    else if (count >= 50)
                    {
                        count = Math.Truncate(count);
                    }
                    else
                    {
                        if (OctaveOrder == 1)
                        {
                            count = Math.Round(count);
                        }
                        else
                        {
                            if (count >= 15)
                            {
                                count = Math.Round(count);
                            }
                            else
                            {
                                count = Math.Round(count, 3);
                            }
                        }
                    }

                    //Array.Resize(ref octaveCenterData, octaveCenterData.Length + 1);
                    _ResizeArray.IncreaseArrayDouble(ref octaveCenterData, 1);
                    octaveCenterData[octaveCenterData.Length - 1] = count;
                    //ClearCmbCursor();
                    //ArrayList CursorItems = new ArrayList();
                    //CursorItems.Add("Select Cursor");
                    //CursorItems.Add("Single");
                    //CursorItems.Add("Single With Square");
                    //CursorItems.Add("Cross Hair");
                    //AddToCmbCursor(CursorItems);
                    string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                    CmbCursorSelectedItem(SelectedCursorItem);
                    double count1 = Math.Pow(10, power - (.15 / OctaveOrder));
                    if (count1 >= 1000)
                    {
                        count1 = count1 / 10;
                        count1 = Math.Round(count1);
                        count1 = count1 * 10;
                    }
                    else if (count1 >= 130)
                    {
                        count1 = Math.Round(count1);
                    }
                    else if (count1 >= 50)
                    {
                        count1 = Math.Truncate(count1);
                    }
                    else
                    {
                        count1 = Math.Round(count1, 3);
                    }

                    //Array.Resize(ref octaveLowerData, octaveLowerData.Length + 1);
                    _ResizeArray.IncreaseArrayDouble(ref octaveLowerData, 1);
                    octaveLowerData[octaveLowerData.Length - 1] = count1;
                    count1 = Math.Pow(10, power + (.15 / OctaveOrder));
                    if (count1 >= 1000)
                    {
                        count1 = count1 / 10;
                        count1 = Math.Round(count1);
                        count1 = count1 * 10;
                    }
                    else if (count1 >= 130)
                    {
                        count1 = Math.Round(count1);
                    }
                    else if (count1 >= 50)
                    {
                        count1 = Math.Truncate(count1);
                    }
                    else
                    {
                        count1 = Math.Round(count1, 3);
                    }

                    //Array.Resize(ref octaveUpperData, octaveUpperData.Length + 1);
                    _ResizeArray.IncreaseArrayDouble(ref octaveUpperData, 1);
                    octaveUpperData[octaveUpperData.Length - 1] = count1;
                    power += Math.Round((double) (.3 / OctaveOrder), 3);
                    power = Math.Round(power, 3);
                } while (count < XData[XData.Length - 1]);

                dActXData = new double[0];
                double temp = 0;
                int ii = 0;

                try
                {
                    for (int j = 0; j < octaveCenterData.Length; j++)
                    {
                        temp = 0;
                        for (int i = 0; (XData[i] <= octaveUpperData[j]) && (i < XData.Length - 2); i++)
                        {
                            try
                            {
                                if ((XData[i] <= octaveUpperData[j]) && (XData[i] >= octaveLowerData[j]))
                                {
                                    if (temp < YData[i])
                                    {
                                        temp = YData[i];
                                    }
                                }
                            }
                            catch
                            {
                                break;
                            }
                        }

                        //Array.Resize(ref dActXData, dActXData.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref dActXData, 1);
                        dActXData[dActXData.Length - 1] = temp;
                        temp = 0;
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }

                XSelected = octaveCenterData;
                YSelected = dActXData;
                DrawBarGraphs(XSelected, YSelected);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void DrawBarGraphs(double[] xData, double[] yData)
        {
            try
            {
                //for (int i = 0; i < GraphCount; i++)
                {
                    //double[] xData = (double[])XYData[2 * i];
                    //double[] yData = (double[])XYData[(2 * i) + 1];

                    _BarGraph = new BarChart();
                    _BarGraph.Name = "BarGraph 1";
                    _BarGraph.AllowDrop = true;
                    _BarGraph._MainForm = this;
                    _BarGraph._XLabel = "Hz";
                    _BarGraph._YLabel = lblDisplayunit.Text.ToString();
                    _BarGraph._DataGridView = dataGridView1;


                    _BarGraph._GraphBG1 = _GraphBG1;
                    _BarGraph._GraphBG2 = _GraphBG2;
                    _BarGraph._GraphBGDir = _GraphBGDir;
                    _BarGraph._ChartBG1 = _ChartBG1;
                    _BarGraph._ChartBG2 = _ChartBG2;
                    _BarGraph._ChartBGDir = _ChartBGDir;
                    _BarGraph._AxisColor = _AxisColor;
                    _BarGraph._MainCursorColor = _MainCursorColor;


                    //_BarGraph.DGVTrendNodes = dataGridView2;
                    _LineGraph.Dock = DockStyle.Top;
                    _LineGraph.Height = panel1.Height / 2;
                    _BarGraph.Height = panel1.Height / 2;
                    _BarGraph.Dock = DockStyle.Top;
                    if (OctaveStyle == "Empty Bars")
                    {
                        _BarGraph._AreaFill = false;
                    }
                    else
                    {
                        _BarGraph._AreaFill = true;
                    }

                    if (OctaveStyle == "Filled bars")
                    {
                        _BarGraph._BarWidth = 1;
                    }
                    else if (OctaveStyle == "Thick Lines")
                    {
                        _BarGraph._BarWidth = .5;
                    }
                    else if (OctaveStyle == "Thin Lines")
                    {
                        _BarGraph._BarWidth = .15;
                    }
                    else
                    {
                        _BarGraph._BarWidth = .8;
                    }

                    _BarGraph.DrawBarGraph(xData, yData);
                    panel1.Controls.Add(_BarGraph);
                    //panel1.Controls[_LineGraph.Name].Dock = DockStyle.Fill;
                }
            }
            catch (Exception ex)
            {
            }
        }

        //commented for Netherland case to convert timewaveform units
        //private void ChangeDataUnitforIMXANew(string RawUnit, string Axis)
        //{
        //    string sUnitNew = null;
        //    string sUnitBlank = "Blank";
        //    try
        //    {
        //        string[] splUnit = RawUnit.Split(new string[] { "Y Unit", "X Unit", ":", " ","(",")" }, StringSplitOptions.RemoveEmptyEntries);
        //        Unit_IMXA _Unit_IMXA = new Unit_IMXA();
        //        _Unit_IMXA.SetHeader(Axis);
        //        byte[] _charUnit = Encoding.ASCII.GetBytes(splUnit[0].ToString());
        //        if (_charUnit.Length == 4)
        //        {
        //            if (_charUnit[0].ToString() == "109" && _charUnit[1].ToString() == "47" && _charUnit[2].ToString() == "115" && _charUnit[3].ToString() == "63")
        //            {
        //                splUnit[0] = "m/s2";
        //            }
        //        }
        //        _Unit_IMXA.GetOldUnit = splUnit[0].ToString();
        //        _Unit_IMXA.ShowDialog();

        //        if (_Unit_IMXA.IsOkClicked)
        //        {
        //            if (_Unit_IMXA.UnitSelected)
        //            {
        //                sUnitNew = _Unit_IMXA.RetNewUnit.ToString();
        //                if (Axis == "X")
        //                {
        //                    //lblGrphUnitX.Text = "X Unit : " + sUnitNew.ToString();
        //                    CurrentXLabel = sUnitNew.ToString();
        //                    double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew);
        //                    double[] TempX = new double[xarrayNew.Length];
        //                    for (int i = 0; i < TempX.Length; i++)
        //                    {
        //                        TempX[i] = (double)xarrayNew[i] * ConversionFactor;
        //                    }
        //                    xarrayNew = TempX;
        //                    //XSelected = x;
        //                    //panel1.Refresh();
        //                    //redraw();
        //                    DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                }
        //                if (Axis == "Y")
        //                {

        //                    if (sUnitNew.ToString() == "db")
        //                    {

        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), "IPS", (float)1);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            {
        //                                if (xarrayNew[i] != 0)
        //                                {
        //                                    if (CurrentXLabel.Contains("CPM"))
        //                                    {
        //                                        TempY[i] = TempY[i] * xarrayNew[i];
        //                                    }
        //                                    else if (CurrentXLabel.Contains("Hz"))
        //                                    {
        //                                        TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (xarrayNew[i] != 0)
        //                                {
        //                                    if (CurrentXLabel.Contains("CPM"))
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                    }
        //                                    else if (CurrentXLabel.Contains("Hz"))
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                    }
        //                                    else if (CurrentXLabel.Contains("Sec"))
        //                                    {
        //                                        TempY[i] = TempY[i] * (xarrayNew[i] / 60);
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        //sUnitNew = "mm/s";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("IPS", "mm/s");
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            if (yarrayNew[i] != 0)
        //                            {
        //                                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                                if (TempY[i] <= 0)
        //                                {
        //                                    TempY[i] = 0;
        //                                }
        //                                else
        //                                {
        //                                    TempY[i] = 20 * Math.Log10(TempY[i] / Math.Pow(10, (-5)));
        //                                }
        //                            }
        //                        }

        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            if (TempY[i] != 0)
        //                            {
        //                                if (xarrayNew[i] != 0)
        //                                {

        //                                    //vdb
        //                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                                    {
        //                                        //TempY[i] = 20 * Math.Log10(TempY[i] / Math.Pow(10, (-5)));
        //                                    }
        //                                    //  adb
        //                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                                    {
        //                                        TempY[i] = TempY[i] + (20 * Math.Log10(xarrayNew[i])) - 44;
        //                                    }
        //                                    //ddb
        //                                    else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                                    {
        //                                        TempY[i] = TempY[i] - (20 * Math.Log10(xarrayNew[i])) - 24;
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else
        //                    {
        //                        // lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }


        //                        yarrayNew = TempY;
        //                    }
        //                    //YSelected = y;
        //                    //panel1.Refresh();
        //                    DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                }
        //            }
        //            else if (_Unit_IMXA.ConversionSelected)
        //            {
        //                bool bchkTime = CheckForTimeData(yarrayNew);
        //                //if (!bchkTime)
        //                {
        //                    float fCPM = 1;// (float)Convert.ToDouble(m_objMainControl._txtxRPM.ToString()) / (float)Convert.ToDouble(m_objMainControl._txtxPulse.ToString());
        //                    sUnitNew = _Unit_IMXA.RetNewUnit.ToString();
        //                    if (sUnitNew == "Displacement (Mils)")
        //                    {
        //                        sUnitNew = "Mils";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * xarrayNew[i];
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM") || bchkTime)
        //                                        {
        //                                            TempY[i] = TempY[i] / xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM") || bchkTime)
        //                                        {
        //                                            TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }

        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;

        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Displacement (mm)")
        //                    {
        //                        sUnitNew = "Mils";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * xarrayNew[i];
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM") || bchkTime)
        //                                        {
        //                                            TempY[i] = TempY[i] / xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM") || bchkTime)
        //                                        {
        //                                            TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;


        //                        sUnitNew = "mm";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("Mils", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;

        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Displacement (um)")
        //                    {
        //                        sUnitNew = "Mils";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * xarrayNew[i];
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM") || bchkTime)
        //                                        {
        //                                            TempY[i] = TempY[i] / xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;


        //                        sUnitNew = "um";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("Mils", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;

        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Acceleration (g)")
        //                    {
        //                        sUnitNew = "g";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / xarrayNew[i];
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Acceleration (mm/s2)")
        //                    {
        //                        sUnitNew = "g";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / xarrayNew[i];
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "mm/s2";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("g", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Acceleration (cm/s2)")
        //                    {
        //                        sUnitNew = "g";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / xarrayNew[i];
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "cm/s2";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("g", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Acceleration (m/s2)")
        //                    {
        //                        sUnitNew = "g";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / xarrayNew[i];
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "m/s2";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("g", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Velocity (IPS)")
        //                    {
        //                        sUnitNew = "IPS";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * (xarrayNew[i]);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Velocity (mm/s)")
        //                    {
        //                        sUnitNew = "IPS";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * (xarrayNew[i]);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }

        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "mm/s";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("IPS", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }

        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Velocity (cm/s)")
        //                    {
        //                        sUnitNew = "IPS";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * (xarrayNew[i]);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "cm/s";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("IPS", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }

        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Velocity (m/s)")
        //                    {
        //                        sUnitNew = "IPS";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * (xarrayNew[i]);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "m/s";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("IPS", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }

        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    else if (sUnitNew == "Velocity (ft/s)")
        //                    {
        //                        sUnitNew = "IPS";
        //                        //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //                        double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //                            if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                    }
        //                                    else
        //                                    {
        //                                        TempY[i] = 0;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] * xarrayNew[i];
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //                            {
        //                                if (bchkTime)
        //                                {
        //                                    TempY[i] = TempY[i] * (xarrayNew[i]);
        //                                }
        //                                else
        //                                {
        //                                    if (xarrayNew[i] != 0)
        //                                    {
        //                                        if (CurrentXLabel.Contains("CPM"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //                                        }
        //                                        else if (CurrentXLabel.Contains("Hz"))
        //                                        {
        //                                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        yarrayNew = TempY;

        //                        sUnitNew = "ft/s";
        //                        CurrentYLabel = sUnitNew.ToString();
        //                        ConversionFactor = UnitConverter("IPS", sUnitNew);
        //                        TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }

        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                }
        //                //else
        //                //{
        //                //    MessageBox.Show("Conversion Method not found");
        //                //}
        //            }
        //            //{
        //            //    bool bchkTime = CheckForTimeData(yarrayNew);
        //            //    if (!bchkTime)
        //            //    {
        //            //        float fCPM = (float)Convert.ToDouble(txtxRPM.Text.ToString()) / (float)Convert.ToDouble(txtxPulse.Text.ToString());
        //            //        sUnitNew = _Unit_IMXA.RetNewUnit.ToString();
        //            //        if (sUnitNew == "Displacement (Mils)")
        //            //        {
        //            //            sUnitNew = "Mils";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;

        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Displacement (mm)")
        //            //        {
        //            //            sUnitNew = "Mils";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;


        //            //            sUnitNew = "mm";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("Mils", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;

        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Displacement (um)")
        //            //        {
        //            //            sUnitNew = "Mils";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;


        //            //            sUnitNew = "um";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("Mils", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;

        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Acceleration (g)")
        //            //        {
        //            //            sUnitNew = "g";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Acceleration (mm/s2)")
        //            //        {
        //            //            sUnitNew = "g";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "mm/s2";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("g", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Acceleration (cm/s2)")
        //            //        {
        //            //            sUnitNew = "g";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "cm/s2";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("g", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Acceleration (m/s2)")
        //            //        {
        //            //            sUnitNew = "g";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" || splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" || splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "m/s2";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("g", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Velocity (IPS)")
        //            //        {
        //            //            sUnitNew = "IPS";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Velocity (mm/s)")
        //            //        {
        //            //            sUnitNew = "IPS";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "mm/s";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("IPS", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }

        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Velocity (cm/s)")
        //            //        {
        //            //            sUnitNew = "IPS";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "cm/s";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("IPS", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }

        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Velocity (m/s)")
        //            //        {
        //            //            sUnitNew = "IPS";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "m/s";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("IPS", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }

        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //        else if (sUnitNew == "Velocity (ft/s)")
        //            //        {
        //            //            sUnitNew = "IPS";
        //            //            //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
        //            //            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
        //            //            double[] TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;


        //            //                if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" || splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * xarrayNew[i];
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] * (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //                else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
        //            //                {
        //            //                    if (xarrayNew[i] != 0)
        //            //                    {
        //            //                        if (CurrentXLabel.Contains("CPM"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i]);
        //            //                        }
        //            //                        else if (CurrentXLabel.Contains("Hz"))
        //            //                        {
        //            //                            TempY[i] = TempY[i] / (xarrayNew[i] * 60);
        //            //                        }
        //            //                    }
        //            //                }
        //            //            }
        //            //            yarrayNew = TempY;

        //            //            sUnitNew = "ft/s";
        //            //            CurrentYLabel = sUnitNew.ToString();
        //            //            ConversionFactor = UnitConverter("IPS", sUnitNew);
        //            //            TempY = new double[yarrayNew.Length];
        //            //            for (int i = 0; i < TempY.Length; i++)
        //            //            {
        //            //                TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //            //            }

        //            //            yarrayNew = TempY;
        //            //            //YSelected = y;
        //            //            //panel1.Refresh();
        //            //            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //            //        }
        //            //    }
        //            //}
        //            else
        //            {
        //                string Formula = _Unit_IMXA._Formula.ToString();
        //                string FormulaUnit = _Unit_IMXA._FormulaUnit.ToString();
        //                if (Axis == "X")
        //                {
        //                    //lblGrphUnitX.Text = "X Unit : " + FormulaUnit.ToString();
        //                    CurrentXLabel = FormulaUnit.ToString();
        //                }
        //                if (Axis == "Y")
        //                {
        //                    //lblGraphUnitY.Text = "Y Unit : " + FormulaUnit;
        //                    CurrentYLabel = FormulaUnit;
        //                }
        //                string[] arrFormula = Formula.Split(new string[] { "+", "-", "/", "*" }, StringSplitOptions.RemoveEmptyEntries);
        //                double ConversionFactor = Convert.ToDouble(arrFormula[0].ToString());
        //                if (Formula.Contains("/"))
        //                {
        //                    if (Axis == "X")
        //                    {
        //                        double[] TempX = new double[xarrayNew.Length];
        //                        for (int i = 0; i < TempX.Length; i++)
        //                        {
        //                            TempX[i] = (double)xarrayNew[i] / ConversionFactor;
        //                        }
        //                        xarrayNew = TempX;
        //                        //XSelected = x;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    if (Axis == "Y")
        //                    {
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] / ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                }
        //                else if (Formula.Contains("*"))
        //                {
        //                    if (Axis == "X")
        //                    {
        //                        double[] TempX = new double[xarrayNew.Length];
        //                        for (int i = 0; i < TempX.Length; i++)
        //                        {
        //                            TempX[i] = (double)xarrayNew[i] * ConversionFactor;
        //                        }
        //                        xarrayNew = TempX;
        //                        //XSelected = x;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    if (Axis == "Y")
        //                    {
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] * ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                }
        //                else if (Formula.Contains("+"))
        //                {
        //                    if (Axis == "X")
        //                    {
        //                        double[] TempX = new double[xarrayNew.Length];
        //                        for (int i = 0; i < TempX.Length; i++)
        //                        {
        //                            TempX[i] = (double)xarrayNew[i] + ConversionFactor;
        //                        }
        //                        xarrayNew = TempX;
        //                        //XSelected = x;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    if (Axis == "Y")
        //                    {
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] + ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                }
        //                else if (Formula.Contains("-"))
        //                {
        //                    if (Axis == "X")
        //                    {
        //                        double[] TempX = new double[xarrayNew.Length];
        //                        for (int i = 0; i < TempX.Length; i++)
        //                        {
        //                            TempX[i] = (double)xarrayNew[i] - ConversionFactor;
        //                        }
        //                        xarrayNew = TempX;
        //                        //XSelected = x;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                    if (Axis == "Y")
        //                    {
        //                        double[] TempY = new double[yarrayNew.Length];
        //                        for (int i = 0; i < TempY.Length; i++)
        //                        {
        //                            TempY[i] = (double)yarrayNew[i] - ConversionFactor;
        //                        }
        //                        yarrayNew = TempY;
        //                        //YSelected = y;
        //                        //panel1.Refresh();
        //                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
        //                    }
        //                }
        //            }
        //            GphCtr = 0;

        //            // CreatGPWithVariableForDi();
        //            // panel1.Invalidate(true);
        //            // m_objMainControl.CallFillDataGridDI(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());
        //        }

        //        string SelectedCursorItem = cmbCurSors.Items[0].ToString();
        //        CmbCursorSelectedItem(SelectedCursorItem);
        //        dataGridView1.Rows.Clear();
        //        while (dataGridView1.Rows.Count > 1)
        //        {
        //            dataGridView1.Rows.RemoveAt(0);
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //}
        private void ChangeDataUnitforIMXANew(string RawUnit, string Axis)
        {
            string sUnitNew = null;
            string sUnitBlank = "Blank";
            try
            {
                string[] splUnit = RawUnit.Split(new string[] {"Y Unit", "X Unit", ":", " ", "(", ")"},
                    StringSplitOptions.RemoveEmptyEntries);
                Unit_IMXA _Unit_IMXA = new Unit_IMXA();
                _Unit_IMXA.SetHeader(Axis);
                byte[] _charUnit = Encoding.ASCII.GetBytes(splUnit[0].ToString());
                if (_charUnit.Length == 4)
                {
                    if (_charUnit[0].ToString() == "109" && _charUnit[1].ToString() == "47" &&
                        _charUnit[2].ToString() == "115" && _charUnit[3].ToString() == "63")
                    {
                        splUnit[0] = "m/s2";
                    }
                }

                _Unit_IMXA.GetOldUnit = splUnit[0].ToString();
                _Unit_IMXA.ShowDialog();

                if (_Unit_IMXA.IsOkClicked)
                {
                    if (_Unit_IMXA.UnitSelected)
                    {
                        sUnitNew = _Unit_IMXA.RetNewUnit.ToString();
                        if (Axis == "X")
                        {
                            //lblGrphUnitX.Text = "X Unit : " + sUnitNew.ToString();
                            CurrentXLabel = sUnitNew.ToString();
                            double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew);
                            double[] TempX = new double[xarrayNew.Length];
                            for (int i = 0; i < TempX.Length; i++)
                            {
                                TempX[i] = (double) xarrayNew[i] * ConversionFactor;
                            }

                            xarrayNew = TempX;
                            //XSelected = x;
                            //panel1.Refresh();
                            //redraw();
                            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                        }

                        if (Axis == "Y")
                        {

                            if (sUnitNew.ToString() == "db")
                            {

                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), "IPS", (float) 1);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                        splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                    {
                                        if (xarrayNew[i] != 0)
                                        {
                                            if (CurrentXLabel.Contains("CPM"))
                                            {
                                                TempY[i] = TempY[i] * xarrayNew[i];
                                            }
                                            else if (CurrentXLabel.Contains("Hz"))
                                            {
                                                TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                            }
                                            else if (CurrentXLabel.Contains("Sec"))
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (xarrayNew[i] != 0)
                                        {
                                            if (CurrentXLabel.Contains("CPM"))
                                            {
                                                TempY[i] = TempY[i] / (xarrayNew[i]);
                                            }
                                            else if (CurrentXLabel.Contains("Hz"))
                                            {
                                                TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                            }
                                            else if (CurrentXLabel.Contains("Sec"))
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                //sUnitNew = "mm/s";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("IPS", "mm/s");
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    if (yarrayNew[i] != 0)
                                    {
                                        TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                        if (TempY[i] <= 0)
                                        {
                                            TempY[i] = 0;
                                        }
                                        else
                                        {
                                            TempY[i] = 20 * Math.Log10(TempY[i] / Math.Pow(10, (-5)));
                                        }
                                    }
                                }

                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    if (TempY[i] != 0)
                                    {
                                        if (xarrayNew[i] != 0)
                                        {

                                            //vdb
                                            if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                                splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                                splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                            {
                                                //TempY[i] = 20 * Math.Log10(TempY[i] / Math.Pow(10, (-5)));
                                            }
                                            //  adb
                                            else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                                     splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                                     splUnit[0].ToString() == "cm/s2" ||
                                                     splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
                                            {
                                                TempY[i] = TempY[i] + (20 * Math.Log10(xarrayNew[i])) - 44;
                                            }
                                            //ddb
                                            else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                                     splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                            {
                                                TempY[i] = TempY[i] - (20 * Math.Log10(xarrayNew[i])) - 24;
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                                double MeanY = yarrayNew.Average();
                                _LineGraph.DrawdbRegion(MeanY);
                            }
                            else
                            {
                                // lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                CurrentYLabel = sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }


                                yarrayNew = TempY;

                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                    }
                    else if (_Unit_IMXA.ConversionSelected)
                    {
                        bool bchkTime = CheckForTimeData(yarrayNew);
                        //if (!bchkTime)
                        {
                            float
                                fCPM = 1; // (float)Convert.ToDouble(m_objMainControl._txtxRPM.ToString()) / (float)Convert.ToDouble(m_objMainControl._txtxPulse.ToString());
                            sUnitNew = _Unit_IMXA.RetNewUnit.ToString();
                            if (sUnitNew == "Displacement (Mils)")
                            {
                                sUnitNew = "Mils";
                                CurrentYLabel = sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM") || bchkTime)
                                                {
                                                    TempY[i] = TempY[i] / xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM") || bchkTime)
                                                {
                                                    TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }

                                }

                                yarrayNew = TempY;
                                //YSelected = y;

                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Displacement (mm)")
                            {
                                sUnitNew = "Mils";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM") || bchkTime)
                                                {
                                                    TempY[i] = TempY[i] / xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM") || bchkTime)
                                                {
                                                    TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;


                                sUnitNew = "mm";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("Mils", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;

                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Displacement (um)")
                            {
                                sUnitNew = "Mils";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM") || bchkTime)
                                                {
                                                    TempY[i] = TempY[i] / xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] / Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;


                                sUnitNew = "um";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("Mils", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;

                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Acceleration (g)")
                            {
                                sUnitNew = "g";
                                CurrentYLabel = sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                             splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                        //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Acceleration (mm/s2)")
                            {
                                sUnitNew = "g";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                             splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                        //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "mm/s2";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("g", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Acceleration (cm/s2)")
                            {
                                sUnitNew = "g";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                             splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                        //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "cm/s2";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("g", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Acceleration (m/s2)")
                            {
                                sUnitNew = "g";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "IPS" || splUnit[0].ToString() == "in/s" ||
                                        splUnit[0].ToString() == "mm/s" || splUnit[0].ToString() == "cm/s" ||
                                        splUnit[0].ToString() == "m/s" || splUnit[0].ToString() == "ft/s")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                             splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                        //if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" || splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" || splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" || splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (Math.Pow((1 / (xarrayNew[i]) * 60), 2));
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * Math.Pow(xarrayNew[i], 2);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (Math.Pow((xarrayNew[i] * 60), 2));
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "m/s2";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("g", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Velocity (IPS)")
                            {
                                sUnitNew = "IPS";
                                CurrentYLabel = sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                        splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i]);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Velocity (mm/s)")
                            {
                                sUnitNew = "IPS";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                        splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i]);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }

                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "mm/s";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("IPS", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Velocity (cm/s)")
                            {
                                sUnitNew = "IPS";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                        splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i]);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "cm/s";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("IPS", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Velocity (m/s)")
                            {
                                sUnitNew = "IPS";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                        splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i]);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "m/s";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("IPS", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                            else if (sUnitNew == "Velocity (ft/s)")
                            {
                                sUnitNew = "IPS";
                                //lblGraphUnitY.Text = "Y Unit : " + sUnitNew.ToString();
                                double ConversionFactor = UnitConverter(splUnit[0].ToString(), sUnitNew, fCPM);
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;


                                    if (splUnit[0].ToString() == "mm" || splUnit[0].ToString() == "um" ||
                                        splUnit[0].ToString() == "mil" || splUnit[0].ToString() == "Mils")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] * (1 / (xarrayNew[i]) * 60);
                                            }
                                            else
                                            {
                                                TempY[i] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] * xarrayNew[i];
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] * (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                    else if (splUnit[0].ToString() == "Gs" || splUnit[0].ToString() == "G" ||
                                             splUnit[0].ToString() == "g" || splUnit[0].ToString() == "mm/s2" ||
                                             splUnit[0].ToString() == "cm/s2" || splUnit[0].ToString() == "m/s2" ||
                                             splUnit[0].ToString() == "gal")
                                    {
                                        if (bchkTime)
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                TempY[i] = TempY[i] / (1 / (xarrayNew[i]) * 60);
                                            }
                                        }
                                        else
                                        {
                                            if (xarrayNew[i] != 0)
                                            {
                                                if (CurrentXLabel.Contains("CPM"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i]);
                                                }
                                                else if (CurrentXLabel.Contains("Hz"))
                                                {
                                                    TempY[i] = TempY[i] / (xarrayNew[i] * 60);
                                                }
                                            }
                                        }
                                    }
                                }

                                yarrayNew = TempY;

                                sUnitNew = "ft/s";
                                CurrentYLabel = sUnitNew.ToString();
                                ConversionFactor = UnitConverter("IPS", sUnitNew);
                                TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                        //else
                        //{
                        //    MessageBox.Show("Conversion Method not found");
                        //}
                    }
                    else
                    {
                        string Formula = _Unit_IMXA._Formula.ToString();
                        string FormulaUnit = _Unit_IMXA._FormulaUnit.ToString();
                        if (Axis == "X")
                        {
                            //lblGrphUnitX.Text = "X Unit : " + FormulaUnit.ToString();
                            CurrentXLabel = FormulaUnit.ToString();
                        }

                        if (Axis == "Y")
                        {
                            //lblGraphUnitY.Text = "Y Unit : " + FormulaUnit;
                            CurrentYLabel = FormulaUnit;
                        }

                        string[] arrFormula = Formula.Split(new string[] {"+", "-", "/", "*"},
                            StringSplitOptions.RemoveEmptyEntries);
                        double ConversionFactor = Convert.ToDouble(arrFormula[0].ToString());
                        if (Formula.Contains("/"))
                        {
                            if (Axis == "X")
                            {
                                double[] TempX = new double[xarrayNew.Length];
                                for (int i = 0; i < TempX.Length; i++)
                                {
                                    TempX[i] = (double) xarrayNew[i] / ConversionFactor;
                                }

                                xarrayNew = TempX;
                                //XSelected = x;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }

                            if (Axis == "Y")
                            {
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] / ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                        else if (Formula.Contains("*"))
                        {
                            if (Axis == "X")
                            {
                                double[] TempX = new double[xarrayNew.Length];
                                for (int i = 0; i < TempX.Length; i++)
                                {
                                    TempX[i] = (double) xarrayNew[i] * ConversionFactor;
                                }

                                xarrayNew = TempX;
                                //XSelected = x;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }

                            if (Axis == "Y")
                            {
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] * ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                        else if (Formula.Contains("+"))
                        {
                            if (Axis == "X")
                            {
                                double[] TempX = new double[xarrayNew.Length];
                                for (int i = 0; i < TempX.Length; i++)
                                {
                                    TempX[i] = (double) xarrayNew[i] + ConversionFactor;
                                }

                                xarrayNew = TempX;
                                //XSelected = x;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }

                            if (Axis == "Y")
                            {
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] + ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                        else if (Formula.Contains("-"))
                        {
                            if (Axis == "X")
                            {
                                double[] TempX = new double[xarrayNew.Length];
                                for (int i = 0; i < TempX.Length; i++)
                                {
                                    TempX[i] = (double) xarrayNew[i] - ConversionFactor;
                                }

                                xarrayNew = TempX;
                                //XSelected = x;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }

                            if (Axis == "Y")
                            {
                                double[] TempY = new double[yarrayNew.Length];
                                for (int i = 0; i < TempY.Length; i++)
                                {
                                    TempY[i] = (double) yarrayNew[i] - ConversionFactor;
                                }

                                yarrayNew = TempY;
                                //YSelected = y;
                                //panel1.Refresh();
                                DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                            }
                        }
                    }

                    GphCtr = 0;

                    // CreatGPWithVariableForDi();
                    // panel1.Invalidate(true);
                    // m_objMainControl.CallFillDataGridDI(m_objMainControl.MainTreeList.FocusedNode.GetDisplayText(2).ToString());
                }

                string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                CmbCursorSelectedItem(SelectedCursorItem);
                dataGridView1.Rows.Clear();

                DataSelected = new ArrayList();
                //DataSelected.Add(testX);
                while (dataGridView1.Rows.Count > 1)
                {
                    dataGridView1.Rows.RemoveAt(0);
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }


        private double UnitConverter(string ConvertFromUnit, string ConvertToUnit, float CPM)
        {

            string Convertto = null;
            string Convertfrom = null;
            double NumericValue = 1;
            double NewNumericValue = 1;
            //string NewValue = null;
            //string NewUnit = null;
            try
            {

                Convertto = ConvertToUnit;
                Convertfrom = ConvertFromUnit;

                //NumericValue = Convert.ToDouble(ConvertFromValue);
                string[] splittedTo =
                    Convertto.ToString().Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);

                //NewUnit = CompleteUnit.ToString().Replace(Convertfrom.ToString(), splittedTo[0].ToString());


                switch (Convertto.ToString())
                {
                    case "mil":
                    {

                        switch (Convertfrom.ToString())
                        {

                            case "mm":
                            {
                                NewNumericValue = NumericValue * 39.4;
                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * .0394;

                                break;
                            }
                            case "mil":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "Mils":
                    {

                        switch (Convertfrom.ToString())
                        {

                            case "mm":
                            {
                                NewNumericValue = NumericValue * 39.4;
                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * .0394;

                                break;
                            }
                            case "mil":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }

                            case "IPS":
                            {
                                //Velocity and cpm known
                                NewNumericValue = (19100 * NumericValue);
                                break;
                            }
                            case "in/s":
                            {
                                //Velocity and cpm known
                                NewNumericValue = (19100 * NumericValue);
                                break;
                            }
                            case "mm/s":
                            {
                                //Velocity and cpm known


                                NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                                NewNumericValue *= (19100 * NumericValue);
                                break;
                            }
                            case "cm/s":
                            {
                                //Velocity and cpm known

                                NewNumericValue = NumericValue / 2.54; //NumericValue * .394;
                                NewNumericValue *= (19100 * NumericValue);
                                break;
                            }
                            case "m/s":
                            {
                                //Velocity and cpm known

                                NewNumericValue = NumericValue / .0254; //NumericValue * 39.4;
                                NewNumericValue *= (19100 * NumericValue);
                                break;
                            }

                            case "ft/s":
                            {
                                //Velocity and cpm known

                                NewNumericValue = NumericValue * 12;
                                NewNumericValue *= (19100 * NumericValue);
                                break;
                            }


                            case "Gs":
                            {
                                //Acceleration and CPM Known
                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (70400000 * NumericValue);

                                break;
                            }
                            case "G":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (70400000 * NumericValue);
                                break;
                            }
                            case "g":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (70400000 * NumericValue);
                                break;
                            }
                            case "mm/s2":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                NewNumericValue *= (70400000 * NumericValue);
                                break;
                            }
                            case "cm/s2":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                NewNumericValue *= (70400000 * NumericValue);
                                break;
                            }
                            case "m/s2":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                NewNumericValue *= (70400000 * NumericValue);
                                break;
                            }
                            case "gal":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                NewNumericValue *= (70400000 * NumericValue);
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mm":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "mil":
                            {
                                NewNumericValue = NumericValue / 39.4; //NumericValue * .0254;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue / 39.4; //NumericValue * .0254;

                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * .001;

                                break;
                            }
                            case "mm":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "um":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "mil":
                            {
                                NewNumericValue = NumericValue / .0394; //NumericValue * 25.4;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue / .0394; //NumericValue * 25.4;

                                break;
                            }
                            case "mm":
                            {
                                NewNumericValue = NumericValue * 1000;

                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "*C":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "*F":
                            {
                                double factor = 9.0 / 5.0;
                                NewNumericValue = (NumericValue * factor) + 32;

                                break;
                            }
                            case "*C":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "*F":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "*C":
                            {
                                double factor = 5.0 / 9.0;
                                NewNumericValue = (NumericValue - 32) * factor;

                                break;
                            }
                            case "*F":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mm/s":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * 10;

                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 1000;

                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 25.4;

                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 25.4;

                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 305;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "cm/s":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * .1;

                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 100;

                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 2.54;

                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 2.54;

                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 30.5;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "m/s":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * .001;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }

                            case "in/s":
                            {
                                NewNumericValue = NumericValue * .0254;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * .0254;
                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * .305;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "in/s":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue / 2.54; //NumericValue * .394;
                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue / .0254; //NumericValue * 39.4;
                                break;
                            }

                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 12;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "IPS":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue / 2.54; //NumericValue * .394;
                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue / .0254; //NumericValue * 39.4;
                                break;
                            }

                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 12;
                                break;
                            }


                            case "mm":
                            {
                                //Displacement and CPM Known

                                NewNumericValue = NumericValue * 39.4;
                                NewNumericValue *= (NumericValue) / 19100;
                                break;
                            }
                            case "um":
                            {
                                //Displacement and CPM Known

                                NewNumericValue = NumericValue * .0394;
                                NewNumericValue *= (NumericValue) / 19100;
                                break;
                            }
                            case "mil":
                            {
                                //Displacement and CPM Known

                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (NumericValue) / 19100;
                                break;
                            }
                            case "Mils":
                            {
                                //Displacement and CPM Known


                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (NumericValue) / 19100;

                                break;
                            }

                            case "Gs":
                            {
                                //Acceleration and CPM Known
                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271 * CPM));

                                break;
                            }
                            case "G":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271 * CPM));

                                break;
                            }
                            case "g":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271));

                                break;
                            }
                            case "mm/s2":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271));

                                break;
                            }
                            case "cm/s2":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271));

                                break;
                            }
                            case "m/s2":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271));

                                break;
                            }
                            case "gal":
                            {
                                //Acceleration and CPM Known

                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                NewNumericValue *= ((NumericValue * 1000) / (0.271));

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "ft/s":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue / 305; //NumericValue * .00328;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue / 30.5; //NumericValue * .0328;
                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue / .305; //NumericValue * 3.28;
                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue / 12; //NumericValue * .0833;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue / 12; //NumericValue * .0833;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mm/s2":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * 10;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 1000;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 9810;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 9810;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 9810;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue * 10;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "cm/s2":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .1;
                                break;
                            }

                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 100;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "m/s2":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .001;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "Gs":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "G":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "g":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }

                            case "IPS":
                            {
                                //Velocity and cpm known
                                NewNumericValue = 0.000271 * NumericValue;
                                break;
                            }
                            case "in/s":
                            {
                                //Velocity and cpm known
                                NewNumericValue = 0.000271 * NumericValue;
                                break;
                            }
                            case "mm/s":
                            {
                                //Velocity and cpm known


                                NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                                NewNumericValue *= 0.000271 * NumericValue;
                                break;
                            }
                            case "cm/s":
                            {
                                //Velocity and cpm known

                                NewNumericValue = NumericValue / 2.54; //NumericValue * .394;
                                NewNumericValue *= 0.000271 * NumericValue;
                                break;
                            }
                            case "m/s":
                            {
                                //Velocity and cpm known

                                NewNumericValue = NumericValue / .0254; //NumericValue * 39.4;
                                NewNumericValue *= 0.000271 * NumericValue;
                                break;
                            }

                            case "ft/s":
                            {
                                //Velocity and cpm known

                                NewNumericValue = NumericValue * 12;
                                NewNumericValue *= 0.000271 * NumericValue;
                                break;
                            }

                            case "mm":
                            {
                                //Displacement and CPM Known
                                NewNumericValue = NumericValue * 39.4;
                                NewNumericValue *= (NumericValue) / 70400000;

                                break;
                            }
                            case "um":
                            {
                                //Displacement and CPM Known

                                NewNumericValue = NumericValue * .0394;
                                NewNumericValue *= (NumericValue) / 70400000;
                                break;
                            }
                            case "mil":
                            {
                                //Displacement and CPM Known
                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (NumericValue) / 70400000;
                                break;
                            }
                            case "Mils":
                            {
                                //Displacement and CPM Known
                                NewNumericValue = NumericValue * 1;
                                NewNumericValue *= (NumericValue) / 70400000;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "gal":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "gal":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .1;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 100;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "CPM":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Hz":
                            {
                                NewNumericValue = NumericValue * 60;
                                break;
                            }
                            case "CPM":
                            {
                                NumericValue = NumericValue * 1;
                                break;
                            }


                        }

                        break;
                    }
                    case "Hz":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "CPM":
                            {
                                NewNumericValue = NumericValue / 60;
                                break;
                            }
                            case "Hz":
                            {
                                NewNumericValue = NewNumericValue * 1;
                                break;
                            }
                        }

                        break;
                    }
                    //case "Sec":
                    //    {
                    //        switch (Convertfrom.ToString())
                    //        {
                    //            case "Hz":
                    //                {NewNumericValue=
                    //                    break;
                    //                }
                    //        }
                    //        break;
                    //    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return NewNumericValue;
        }

        private double UnitConverter(string ConvertFromUnit, string ConvertToUnit)
        {

            string Convertto = null;
            string Convertfrom = null;
            double NumericValue = 1;
            double NewNumericValue = 1;
            //string NewValue = null;
            //string NewUnit = null;
            try
            {

                Convertto = ConvertToUnit;
                Convertfrom = ConvertFromUnit;

                //NumericValue = Convert.ToDouble(ConvertFromValue);
                string[] splittedTo =
                    Convertto.ToString().Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);

                //NewUnit = CompleteUnit.ToString().Replace(Convertfrom.ToString(), splittedTo[0].ToString());


                switch (Convertto.ToString())
                {
                    case "db":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "mil":
                            {
                                NewNumericValue = NumericValue / .0394; //NumericValue * 25.4;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue / .0394; //NumericValue * 25.4;

                                break;
                            }
                            case "mm":
                            {
                                NewNumericValue = NumericValue * 1000;

                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }


                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * 10;

                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 1000;

                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 25.4;

                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 25.4;

                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 305;

                                break;
                            }


                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .001;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mil":
                    {

                        switch (Convertfrom.ToString())
                        {

                            case "mm":
                            {
                                NewNumericValue = NumericValue * 39.4;
                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * .0394;

                                break;
                            }
                            case "mil":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "Mils":
                    {

                        switch (Convertfrom.ToString())
                        {

                            case "mm":
                            {
                                NewNumericValue = NumericValue * 39.4;
                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * .0394;

                                break;
                            }
                            case "mil":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }

                            //case "IPS":
                            //    {//Velocity and cpm known
                            //        NewNumericValue= (19100 * Velocity)/CPM
                            //        break;
                            //    }
                            //case "in/s":
                            //    {//Velocity and cpm known
                            //        NewNumericValue= (19100 * Velocity)/CPM
                            //        break;
                            //    }                                
                            //case "mm/s":
                            //    {//Velocity and cpm known


                            //        NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                            //        NewNumericValue *= (19100 * Velocity) / CPM;
                            //        break;
                            //    }
                            //case "cm/s":
                            //    {//Velocity and cpm known

                            //        NewNumericValue = NumericValue / 2.54;//NumericValue * .394;
                            //        NewNumericValue *= (19100 * Velocity) / CPM;
                            //        break;
                            //    }
                            //case "m/s":
                            //    {//Velocity and cpm known

                            //        NewNumericValue = NumericValue / .0254;//NumericValue * 39.4;
                            //        NewNumericValue *= (19100 * Velocity) / CPM;
                            //        break;
                            //    }

                            //case "ft/s":
                            //    {//Velocity and cpm known

                            //        NewNumericValue = NumericValue * 12;
                            //        NewNumericValue *= (19100 * Velocity) / CPM;
                            //        break;
                            //    }


                            //case "Gs":
                            //    {
                            //        //Acceleration and CPM Known
                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);

                            //        break;
                            //    }
                            //case "G":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);
                            //        break;
                            //    }
                            //case "g":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);
                            //        break;
                            //    }
                            //case "mm/s2":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 9810;//NumericValue * .000102;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);
                            //        break;
                            //    }
                            //case "cm/s2":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 981;//NumericValue * .00102;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);
                            //        break;
                            //    }
                            //case "m/s2":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 9.81;//NumericValue * .102;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);
                            //        break;
                            //    }
                            //case "gal":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 981;//NumericValue * .00102;
                            //        NewNumericValue *= (70400000 * Acceleration) / Math.Pow(CPM, 2);
                            //        break;
                            //    }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mm":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "mil":
                            {
                                NewNumericValue = NumericValue / 39.4; //NumericValue * .0254;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue / 39.4; //NumericValue * .0254;

                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * .001;

                                break;
                            }
                            case "mm":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "um":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "mil":
                            {
                                NewNumericValue = NumericValue / .0394; //NumericValue * 25.4;

                                break;
                            }
                            case "Mils":
                            {
                                NewNumericValue = NumericValue / .0394; //NumericValue * 25.4;

                                break;
                            }
                            case "mm":
                            {
                                NewNumericValue = NumericValue * 1000;

                                break;
                            }
                            case "um":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "*C":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "*F":
                            {
                                double factor = 9.0 / 5.0;
                                NewNumericValue = (NumericValue * factor) + 32;

                                break;
                            }
                            case "*C":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "*F":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "*C":
                            {
                                double factor = 5.0 / 9.0;
                                NewNumericValue = (NumericValue - 32) * factor;

                                break;
                            }
                            case "*F":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mm/s":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * 10;

                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 1000;

                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 25.4;

                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 25.4;

                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 305;

                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "cm/s":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * .1;

                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * 1;

                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 100;

                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 2.54;

                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 2.54;

                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 30.5;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "m/s":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "m/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue * .001;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }

                            case "in/s":
                            {
                                NewNumericValue = NumericValue * .0254;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * .0254;
                                break;
                            }
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * .305;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "in/s":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue / 2.54; //NumericValue * .394;
                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue / .0254; //NumericValue * 39.4;
                                break;
                            }

                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 12;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "IPS":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "in/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue / 2.54; //NumericValue * .394;
                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue / .0254; //NumericValue * 39.4;
                                break;
                            }

                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 12;
                                break;
                            }


                            //case "mm":
                            //    {
                            //        //Displacement and CPM Known

                            //        NewNumericValue = NumericValue * 39.4;
                            //        NewNumericValue *= (Displacement * CPM) / 19100;
                            //        break;
                            //    }
                            //case "um":
                            //    {//Displacement and CPM Known

                            //        NewNumericValue = NumericValue * .0394;
                            //        NewNumericValue *= (Displacement * CPM) / 19100;
                            //        break;
                            //    }
                            //case "mil":
                            //    {//Displacement and CPM Known

                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= (Displacement * CPM) / 19100;
                            //        break;
                            //    }
                            //case "Mils":
                            //    {//Displacement and CPM Known


                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue*= (Displacement * CPM)/19100 ;

                            //        break;
                            //    }

                            //case "Gs":
                            //    {
                            //        //Acceleration and CPM Known
                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            //case "G":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            //case "g":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            //case "mm/s2":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 9810;//NumericValue * .000102;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            //case "cm/s2":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 981;//NumericValue * .00102;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            //case "m/s2":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 9.81;//NumericValue * .102;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            //case "gal":
                            //    {//Acceleration and CPM Known

                            //        NewNumericValue = NumericValue / 981;//NumericValue * .00102;
                            //        NewNumericValue *= ((Acceleration * 1000) / (0.271 * CPM));

                            //        break;
                            //    }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "ft/s":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "ft/s":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s":
                            {
                                NewNumericValue = NumericValue / 305; //NumericValue * .00328;
                                break;
                            }
                            case "cm/s":
                            {
                                NewNumericValue = NumericValue / 30.5; //NumericValue * .0328;
                                break;
                            }
                            case "m/s":
                            {
                                NewNumericValue = NumericValue / .305; //NumericValue * 3.28;
                                break;
                            }
                            case "in/s":
                            {
                                NewNumericValue = NumericValue / 12; //NumericValue * .0833;
                                break;
                            }
                            case "IPS":
                            {
                                NewNumericValue = NumericValue / 12; //NumericValue * .0833;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "mm/s2":
                    {
                        switch (Convertfrom.ToString())
                        {

                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * 10;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 1000;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 9810;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 9810;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 9810;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue * 10;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "cm/s2":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .1;
                                break;
                            }

                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 100;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "m/s2":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .001;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 9.81;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue * .01;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "Gs":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "G":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "g":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue / 9810; //NumericValue * .000102;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue / 9.81; //NumericValue * .102;
                                break;
                            }
                            case "gal":
                            {
                                NewNumericValue = NumericValue / 981; //NumericValue * .00102;
                                break;
                            }

                            //case "IPS":
                            //    {//Velocity and cpm known
                            //        NewNumericValue= 0.000271 * Velocity * CPM;
                            //        break;
                            //    }
                            //case "in/s":
                            //    {//Velocity and cpm known
                            //        NewNumericValue = 0.000271 * Velocity * CPM;
                            //        break;
                            //    }                                
                            //case "mm/s":
                            //    {//Velocity and cpm known


                            //        NewNumericValue = NumericValue / 25.4; //NumericValue * .0394;
                            //        NewNumericValue *= 0.000271 * Velocity * CPM;
                            //        break;
                            //    }
                            //case "cm/s":
                            //    {//Velocity and cpm known

                            //        NewNumericValue = NumericValue / 2.54;//NumericValue * .394;
                            //        NewNumericValue *= 0.000271 * Velocity * CPM;
                            //        break;
                            //    }
                            //case "m/s":
                            //    {//Velocity and cpm known

                            //        NewNumericValue = NumericValue / .0254;//NumericValue * 39.4;
                            //        NewNumericValue *= 0.000271 * Velocity * CPM;
                            //        break;
                            //    }

                            //case "ft/s":
                            //    {//Velocity and cpm known

                            //        NewNumericValue = NumericValue * 12;
                            //        NewNumericValue *= 0.000271 * Velocity * CPM;
                            //        break;
                            //    }

                            //case "mm":
                            //    {
                            //        //Displacement and CPM Known
                            //        NewNumericValue = NumericValue * 39.4;
                            //        NewNumericValue *= (Displacement * CPM) / 70400000;

                            //        break;
                            //    }
                            //case "um":
                            //    {//Displacement and CPM Known

                            //        NewNumericValue = NumericValue * .0394;
                            //        NewNumericValue *= (Displacement * CPM) / 70400000;
                            //        break;
                            //    }
                            //case "mil":
                            //    {
                            //        //Displacement and CPM Known
                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= (Displacement * CPM) / 70400000;
                            //        break;
                            //    }
                            //case "Mils":
                            //    {
                            //        //Displacement and CPM Known
                            //        NewNumericValue = NumericValue * 1;
                            //        NewNumericValue *= (Displacement * CPM) / 70400000;
                            //        break;
                            //    }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "gal":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "gal":
                            {
                                NewNumericValue = NumericValue * 1;
                                break;
                            }
                            case "mm/s2":
                            {
                                NewNumericValue = NumericValue * .1;
                                break;
                            }
                            case "cm/s2":
                            {
                                NewNumericValue = NumericValue;
                                break;
                            }
                            case "m/s2":
                            {
                                NewNumericValue = NumericValue * 100;
                                break;
                            }
                            case "Gs":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "G":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            case "g":
                            {
                                NewNumericValue = NumericValue * 981;
                                break;
                            }
                            default:
                            {
                                MessageBoxEx.Show("Sorry!!! Conversion Method not implemented");
                                break;
                            }
                        }

                        break;
                    }
                    case "CPM":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "Hz":
                            {
                                NewNumericValue = NumericValue * 60;
                                break;
                            }
                            case "CPM":
                            {
                                NumericValue = NumericValue * 1;
                                break;
                            }


                        }

                        break;
                    }
                    case "Hz":
                    {
                        switch (Convertfrom.ToString())
                        {
                            case "CPM":
                            {
                                NewNumericValue = NumericValue / 60;
                                break;
                            }
                            case "Hz":
                            {
                                NewNumericValue = NewNumericValue * 1;
                                break;
                            }
                        }

                        break;
                    }
                    //case "Sec":
                    //    {
                    //        switch (Convertfrom.ToString())
                    //        {
                    //            case "Hz":
                    //                {NewNumericValue=
                    //                    break;
                    //                }
                    //        }
                    //        break;
                    //    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return NewNumericValue;
        }

        private void BackGroundChanges()
        {
            try
            {
                if (_LineGraph != null)
                {
                    _LineGraph.BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph.BackGroundChanges();
                }

                if (_3DGraph != null)
                {
                    _3DGraph.BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph.BackGroundChanges();
                }

                this.Refresh();
            }
            catch (Exception ex)
            {
            }
        }

        private void NullComparisionVariables()
        {
            try
            {
                sDisplayUnitToCompare = null;
                sApplicationToCompare = null;
                sHPFToCompare = null;
                sFTypeToCompare = null;
                sordertocompare = null;
                sDetectionToCompare = null;
                sNoOfLinesToCompare = null;
                sWindowTypeToCompare = null;
                sYaxisUnitToCompare = null;
                sXaxisUnitToCompare = null;
                sYaxisDisplayToCompare = null;
                sDomainToCompare = null;
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void getoriginalCSVvalues()
        {
            try
            {
                sApplicationToCompare = lblApplication.Text.ToString();
                sDisplayUnitToCompare = lblDisplayunit.Text.ToString();
                sHPFToCompare = lblhpf.Text.ToString();
                sFTypeToCompare = lblFreqType.Text.ToString();
                sordertocompare = lblOrder.Text.ToString();
                sDetectionToCompare = lblDetection.Text.ToString();
                sNoOfLinesToCompare = lbllines.Text.ToString();
                sWindowTypeToCompare = lblWindowtype.Text.ToString();
                sYaxisUnitToCompare = lblYunit.Text.ToString();
                sXaxisUnitToCompare = lblXunit.Text.ToString();
                sYaxisDisplayToCompare = lblYaxisDisplay.Text.ToString();
                sDomainToCompare = lblMeasDomain.Text.ToString();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private bool ReadCSVfileForData(string pathforCSV)
        {
            bool valuetoreturn = true;
            xarrayNew = new double[0];
            yarrayNew = new double[0];
            sApp = null;
            DispType = null;
            string[] sarrpath = pathforCSV.Split(new string[] {"\\"}, StringSplitOptions.RemoveEmptyEntries);
            StreamReader myReader = null;
            string newpath = null;
            for (int i = 0; i < sarrpath.Length - 1; i++)
            {
                newpath += sarrpath[i].ToString() + "\\";
            }

            try
            {
                myReader = new StreamReader(pathforCSV);
                string line = null;
                totalValues = 1;
                IsFoundValues = false;
                bool chakstream = false;

                while ((line = myReader.ReadLine()) != null || (line = myReader.ReadLine()) != "")
                {
                    chakstream = myReader.EndOfStream;
                    if (chakstream == true)
                    {
                        break;
                    }

                    if (chakstream == false)
                    {
                        string first = null;
                        string second = null;
                        string[] strread = line.Split(new string[] {","}, StringSplitOptions.RemoveEmptyEntries);
                        if (strread.Length > 0)
                        {
                            if (strread[0] != null || strread[0] != "")
                            {
                                first = strread[0].ToString();
                            }
                        }

                        if (strread.Length > 1)
                        {
                            if (strread[1] != null || strread[1] != "")
                            {
                                second = strread[1].ToString();
                            }
                        }

                        if (!string.IsNullOrEmpty(first))
                        {
                            switch (first)
                            {
                                case "Application":
                                {
                                    if (sApplicationToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "User ID":
                                {
                                    break;
                                }
                                case "Unit ID":
                                {
                                    break;
                                }
                                case "Date/Time":
                                {
                                    break;
                                }

                                case "Trigger Type":
                                {
                                    break;
                                }
                                case "Trigger Level":
                                {
                                    break;
                                }
                                case "Slope":
                                {
                                    break;
                                }
                                case "Transducer Units":
                                {
                                    break;
                                }
                                case "Sensitivity":
                                {
                                    break;
                                }
                                case "Transducer Offset":
                                {
                                    break;
                                }
                                case "Display Units":
                                {
                                    string strDisplayUnitToCompare = null;
                                    try
                                    {
                                        byte[] _charUnit = Encoding.ASCII.GetBytes(sDisplayUnitToCompare.ToString());
                                        if (_charUnit.Length == 4)
                                        {
                                            if (_charUnit[0].ToString() == "109" && _charUnit[1].ToString() == "47" &&
                                                _charUnit[2].ToString() == "115" && _charUnit[3].ToString() == "63")
                                            {
                                                strDisplayUnitToCompare = "m/s2";
                                            }
                                        }

                                        byte[] _charUnit1 = Encoding.ASCII.GetBytes(second.ToString());
                                        if (_charUnit1.Length == 4)
                                        {
                                            if (_charUnit1[0].ToString() == "109" && _charUnit1[1].ToString() == "47" &&
                                                _charUnit1[2].ToString() == "115" && _charUnit1[3].ToString() == "63")
                                            {
                                                second = "m/s2";
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorLog_Class.ErrorLogEntry(ex);
                                    }

                                    if (strDisplayUnitToCompare == null)
                                    {
                                        if (sDisplayUnitToCompare != second.ToString())
                                        {
                                            valuetoreturn = false;
                                        }
                                    }
                                    else
                                    {
                                        if (strDisplayUnitToCompare != second.ToString())
                                        {
                                            valuetoreturn = false;
                                        }
                                    }

                                    break;
                                }
                                case "High Pass Filter":
                                {
                                    if (sHPFToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "Coupling Type":
                                {
                                    break;
                                }
                                case "Channel Input":
                                {
                                    break;
                                }
                                case "Freq Type":
                                {
                                    if (sFTypeToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "Max Freq / Orders":
                                {
                                    if (sordertocompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "No. of Averages":
                                {
                                    break;
                                }
                                case "Average Type":
                                {
                                    break;
                                }
                                case "Overlap (%)":
                                {
                                    break;
                                }
                                case "Detection":
                                {
                                    if (sDetectionToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "No. of Lines":
                                {
                                    if (sNoOfLinesToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "No. of Samples":
                                {
                                    if (sNoOfLinesToCompare.ToString() != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "Window Type":
                                {
                                    if (sWindowTypeToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "Input Range Mode":
                                {
                                    break;
                                }
                                case "Fixed Range Value":
                                {
                                    break;
                                }
                                case "Auto Mode":
                                {
                                    break;
                                }
                                case "Meas. Type":
                                {
                                    break;
                                }
                                case "Meas. Domain":
                                {
                                    if (sDomainToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "Trigger Hysteresis":
                                {
                                    break;
                                }
                                case "Trigger Pullup":
                                {
                                    break;
                                }
                                case "Bin Zeroing":
                                {
                                    break;
                                }
                                case "Units String":
                                {
                                    break;
                                }
                                case "Y-axis Units":
                                {
                                    string srrYaxisUnitToCompare = null;
                                    try
                                    {
                                        string[] YaxisUnitToCompare = sYaxisUnitToCompare.Split(new string[] {" "},
                                            StringSplitOptions.RemoveEmptyEntries);
                                        if (YaxisUnitToCompare.Length > 1)
                                        {
                                            byte[] _charUnit =
                                                Encoding.ASCII.GetBytes(YaxisUnitToCompare[1].ToString());
                                            if (_charUnit.Length == 6)
                                            {
                                                if (_charUnit[0].ToString() == "40" &&
                                                    _charUnit[1].ToString() == "109" &&
                                                    _charUnit[2].ToString() == "47" &&
                                                    _charUnit[3].ToString() == "115" &&
                                                    _charUnit[4].ToString() == "63" && _charUnit[5].ToString() == "41")
                                                {
                                                    srrYaxisUnitToCompare = "m/s2";
                                                }
                                            }

                                            string strsplit = second.ToString();
                                            string[] streamYaxis = strsplit.Split(new string[] {" "},
                                                StringSplitOptions.RemoveEmptyEntries);
                                            byte[] _charUnit1 = Encoding.ASCII.GetBytes(streamYaxis[1].ToString());
                                            if (_charUnit1.Length == 6)
                                            {
                                                if (_charUnit[0].ToString() == "40" &&
                                                    _charUnit1[1].ToString() == "109" &&
                                                    _charUnit1[2].ToString() == "47" &&
                                                    _charUnit1[3].ToString() == "115" &&
                                                    _charUnit1[4].ToString() == "63" && _charUnit[5].ToString() == "41")
                                                {
                                                    second = "m/s2";
                                                }
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorLog_Class.ErrorLogEntry(ex);
                                    }

                                    if (srrYaxisUnitToCompare == null)
                                    {
                                        if (sYaxisUnitToCompare != second.ToString())
                                        {
                                            valuetoreturn = false;
                                        }
                                    }
                                    else
                                    {
                                        if (srrYaxisUnitToCompare != second.ToString())
                                        {
                                            valuetoreturn = false;
                                        }
                                    }

                                    break;

                                }
                                case "X-axis Units":
                                {
                                    if (sXaxisUnitToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "View Signal":
                                {
                                    break;
                                }
                                case "Y-axis Display":
                                {
                                    if (sYaxisDisplayToCompare != second.ToString())
                                    {
                                        valuetoreturn = false;
                                    }

                                    break;
                                }
                                case "Sensor Type":
                                {
                                    break;
                                }
                                case "Overall":
                                {
                                    break;
                                }
                                case "X-Axis":
                                {
                                    break;
                                }
                                case "Rec Start Mode":
                                {
                                    break;
                                }
                                case "Rec Trig Level":
                                {
                                    break;
                                }
                                case "Acq. Errors":
                                {
                                    break;
                                }
                                case "Order":
                                {
                                    break;
                                }
                                case "RPM Stamp":
                                {
                                    break;
                                }
                                case "Time Stamp":
                                {
                                    break;
                                }
                            }
                        }
                    }
                }

                myReader.Close();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return valuetoreturn;
        }

        private void ReadCSVfile(string path)
        {
            sParameter = " $ Path % " + sourceCSV;
            xarrayNew = new double[0];
            yarrayNew = new double[0];
            sApp = null;
            DispType = null;
            string[] sarrpath = path.Split(new string[] {"\\"}, StringSplitOptions.RemoveEmptyEntries);

            string newpath = null;
            for (int i = 0; i < sarrpath.Length - 1; i++)
            {
                newpath += sarrpath[i].ToString() + "\\";
            }

            OleDbConnection myConnection = null;
            try
            {
                try
                {
                    BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                    this.Cursor = Cursors.WaitCursor;
                }
                catch (Exception ep)
                {
                    ErrorLog_Class.ErrorLogEntry(ep);
                    ErrorLogFile(ep);
                }

                string connectionString = "Provider=Microsoft.Jet.OleDb.4.0;Data Source=" + newpath +
                                          ";Extended Properties='Text;HDR=NO;IMEX=1;FMT=Delimited';"; //\"Excel 8.0;HDR=NO;IMEX=1\"";

                // always read from the sheet1.
                myConnection = new OleDbConnection(connectionString);
                OleDbCommand myCommand =
                    new OleDbCommand("Select * from [" + sarrpath[sarrpath.Length - 1].ToString() + "]", myConnection);
                totalValues = 1;
                IsFoundValues = false;
                myConnection.Open();
                myCommand.Connection = myConnection;

                OleDbDataReader myReader = myCommand.ExecuteReader();
                while (myReader.Read())
                {
                    string first = myReader[0].ToString();
                    string second = myReader[1].ToString();
                    if (!string.IsNullOrEmpty(first))
                    {
                        switch (first)
                        {
                            case "Application":
                            {
                                sApp = second;
                                sParameter += " $ Application % " + second;
                                lblApplication.Text = second.ToString();
                                break;
                            }
                            case "User ID":
                            {
                                break;
                            }
                            case "Unit ID":
                            {
                                break;
                            }
                            case "Date/Time":
                            {
                                lblDate.Text = second.ToString();
                                sParameter += " $ Date % " + second;
                                break;
                            }
                            case "Trigger Type":
                            {
                                lblTriggerType.Text = second.ToString();
                                sParameter += " $ Trigger Type % " + second;
                                break;
                            }
                            case "Trigger Level":
                            {
                                lblTriggerlevel.Text = second.ToString();
                                sParameter += " $ Trigger Level % " + second;
                                break;
                            }
                            case "Slope":
                            {
                                lblSlope.Text = second.ToString();
                                sParameter += " $ Slope % " + second;
                                break;
                            }
                            case "Transducer Units":
                            {
                                lblTransducerUnit.Text = second.ToString();
                                sParameter += " $ Transducer Units % " + second;
                                break;
                            }
                            case "Sensitivity":
                            {
                                lblSensitivity.Text = second.ToString();
                                sParameter += " $ Sensitivity % " + second;
                                break;
                            }
                            case "Transducer Offset":
                            {
                                lblTransduceroffset.Text = second.ToString();
                                sParameter += " $ Transducer Offset % " + second;
                                break;
                            }
                            case "Display Units":
                            {
                                lblDisplayunit.Text = second.ToString();
                                lblGraphUnitY.Text = "Y Unit : " + second.ToString();
                                sParameter += " $ Display Units % " + second;
                                break;
                            }
                            case "High Pass Filter":
                            {
                                lblhpf.Text = second.ToString();
                                sParameter += " $ High Pass Filter % " + second;
                                break;
                            }
                            case "Coupling Type":
                            {
                                lblCouplingtype.Text = second.ToString();
                                sParameter += " $ Coupling Type % " + second;
                                break;
                            }
                            case "Channel Input":
                            {
                                lblChannelInput.Text = second.ToString();
                                sParameter += " $ Channel Input % " + second;
                                break;
                            }
                            case "Freq Type":
                            {
                                lblFreqType.Text = second.ToString();
                                sParameter += " $ Freq Type % " + second;
                                break;
                            }
                            case "Max Freq / Orders":
                            {
                                lblOrder.Text = second.ToString();
                                sParameter += " $ Orders % " + second;
                                break;
                            }
                            case "No. of Averages":
                            {
                                lblAvg.Text = second.ToString();
                                sParameter += " $ No. of Averages % " + second;
                                break;
                            }
                            case "Average Type":
                            {
                                lblAveragetype.Text = second.ToString();
                                sParameter += " $ Average Type % " + second;
                                break;
                            }
                            case "Overlap (%)":
                            {
                                lbloverlap.Text = second.ToString();
                                sParameter += " $ Overlap % " + second;
                                break;
                            }
                            case "Detection":
                            {
                                lblDetection.Text = second.ToString();
                                sParameter += " $ Detection % " + second;
                                break;
                            }
                            case "No. of Lines":
                            {
                                lbllines.Text = second.ToString();
                                sParameter += " $ No. of Lines % " + second;
                                break;
                            }
                            case "No. of Samples":
                            {
                                lbllines.Text = second.ToString();
                                sParameter += " $ No. of Samples % " + second;
                                break;
                            }
                            case "Window Type":
                            {
                                lblWindowtype.Text = second.ToString();
                                sParameter += " $ Window Type % " + second;
                                break;
                            }
                            case "Input Range Mode":
                            {
                                lblInputRange.Text = second.ToString();
                                sParameter += " $ Input Range Mode % " + second;
                                break;
                            }
                            case "Fixed Range Value":
                            {
                                lblFixedRangeValue.Text = second.ToString();
                                sParameter += " $ Fixed Range Value % " + second;
                                break;
                            }
                            case "Auto Mode":
                            {
                                lblAutoMode.Text = second.ToString();
                                sParameter += " $ Auto Mode % " + second;
                                break;
                            }
                            case "Meas. Type":
                            {
                                lblMeastype.Text = second.ToString();
                                sParameter += " $ Meas. Type % " + second;
                                break;
                            }
                            case "Meas. Domain":
                            {
                                lblMeasDomain.Text = second.ToString();
                                sParameter += " $ Meas. Domain % " + second;
                                break;
                            }
                            case "Trigger Hysteresis":
                            {
                                lblTriggerH.Text = second.ToString();
                                sParameter += " $ Trigger Hysteresis % " + second;
                                break;
                            }
                            case "Trigger Pullup":
                            {
                                lblTriggerPullup.Text = second.ToString();
                                sParameter += " $ Trigger Pullup % " + second;
                                break;
                            }
                            case "Bin Zeroing":
                            {
                                lblBinZero.Text = second.ToString();
                                sParameter += " $ Bin Zeroing % " + second;
                                break;
                            }
                            case "Units String":
                            {
                                lblUnitstring.Text = second.ToString();

                                sParameter += " $ Units String % " + second;
                                break;
                            }
                            case "Y-axis Units":
                            {
                                lblYunit.Text = second.ToString();
                                sParameter += " $ Y-axis Units % " + second;

                                break;
                            }
                            case "X-axis Units":
                            {
                                lblXunit.Text = second.ToString();
                                sParameter += " $ X-axis Units % " + second;
                                if (lblYunit.Text.ToString() == "Time")
                                {
                                    lblGrphUnitX.Text = "X Unit : sec";
                                }
                                else
                                {
                                    lblGrphUnitX.Text = "X Unit : " + second;
                                    ;
                                }

                                break;
                            }
                            case "View Signal":
                            {
                                lblViewSignal.Text = second.ToString();
                                sParameter += " $ View Signal % " + second;
                                break;
                            }
                            case "Y-axis Display":
                            {
                                lblYaxisDisplay.Text = second.ToString();
                                sParameter += " $ Y-axis Display % " + second;
                                break;
                            }
                            case "Sensor Type":
                            {
                                lblSensorType.Text = second.ToString();
                                sParameter += " $ Sensor Type % " + second;
                                break;
                            }
                            case "Overall":
                            {
                                lblOverall.Text = second.ToString();
                                sParameter += " $ Overall % " + second;
                                break;
                            }
                            case "X-Axis":
                            {
                                break;
                            }
                            case "Rec Start Mode":
                            {
                                break;
                            }
                            case "Rec Trig Level":
                            {
                                break;
                            }
                            case "Acq. Errors":
                            {
                                break;
                            }
                            case "Order":
                            {
                                break;
                            }
                            case "RPM Stamp":
                            {
                                break;
                            }
                            case "Time Stamp":
                            {
                                break;
                            }
                            default:
                            {
                                if (!IsFoundValues)
                                {
                                    string CheckVal = "test"; // myReader[totalValues].ToString();
                                    while (!string.IsNullOrEmpty(CheckVal))
                                    {
                                        try
                                        {
                                            CheckVal = myReader[totalValues].ToString();
                                            totalValues++;
                                        }
                                        catch
                                        {
                                            CheckVal = null;
                                            totalValues--;
                                        }
                                    }

                                    IsFoundValues = true;
                                }

                                if (sApp == "Analyser" || sApp == "Recorder")
                                {
                                    //Array.Resize(ref xarrayNew, xarrayNew.Length + 1);
                                    //Array.Resize(ref yarrayNew, yarrayNew.Length + 1);
                                    _ResizeArray.IncreaseArrayDouble(ref xarrayNew, 1);
                                    _ResizeArray.IncreaseArrayDouble(ref yarrayNew, 1);
                                    xarrayNew[xarrayNew.Length - 1] = Convert.ToDouble(first);
                                    yarrayNew[yarrayNew.Length - 1] = Convert.ToDouble(second);
                                }

                                break;
                            }
                        }
                    }
                }

                myReader.Close();
                myConnection.Close();
                try
                {
                    BusyImageProcess.Kill();
                    this.Cursor = Cursors.Default;
                }
                catch
                {
                }

                if (sApp == "Analyser" || sApp == "Recorder")
                {
                }
                else if (sApp == "RuCd" || sApp == "FRF")
                {
                    bbphaseCtr = 0;
                    bbPhase.Caption = "View Phase";
                    bbPhase.Visibility = BarItemVisibility.Always;
                    tsbtnRuCD_Click(null, null);
                }
                else if (sApp == "CtC")
                {
                    GetConfCheckImages(path);
                    lblApplication.Text = "Conformance Check";
                }
                else
                {
                    GetConfCheckImages(path);
                    lblApplication.Text = "Conformance Check";
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                myConnection.Close();
                myConnection = null;
            }
        }

        //To be changed for WAV file Reading Properly
        //private void CreateFinalWave(string spath)
        //{
        //    arlTachoData = new ArrayList();
        //    int[] LOR = { 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200, 102400, 204800 };
        //    int[] LOR1 = { 256, 512, 1024, 2048, 4096, 8192, 16384, 32738, 65536, 131072, 262144, 524288 };
        //    AvgBytesPerSec = 0;
        //    SF = 0;
        //    iLastFrequency = 0;
        //    iLOR = 0;
        //    LineOfResolution = 0;
        //    ExectTime = 0;
        //    ExectDataByteSample = 0;
        //    TotalDataBytes = 0;
        //    TimeVal = 0;
        //    TotalTime = 0;
        //    channel = 1;
        //    try
        //    {
        //        iclick = 1;
        //        setWaveFirstData();
        //        if (Directory.Exists("c:\\vvtemp\\"))
        //        {
        //            Directory.Delete("c:\\vvtemp\\", true);
        //        }
        //        using (FileStream wav = new FileStream(spath, FileMode.Open, FileAccess.Read))
        //        {
        //            Byte[] Parameter = new byte[wav.Length];
        //            wav.Read(Parameter, 0, Parameter.Length);
        //            channel = Convert.ToInt32(Parameter[22].ToString());
        //            string[] SFbyteD = new string[4];
        //            string SFH = null;
        //            int ctr = 0;
        //            for (int i = 27; i > 23; i--)
        //            {
        //                int val = Convert.ToInt32(Parameter[i].ToString());
        //                string sval = Common.DeciamlToHexadeciaml1(val);
        //                switch (sval)
        //                {
        //                    case "0":
        //                        sval = "00";
        //                        break;
        //                    case "1":
        //                        sval = "01";
        //                        break;
        //                    case "2":
        //                        sval = "02";
        //                        break;
        //                    case "3":
        //                        sval = "03";
        //                        break;
        //                    case "4":
        //                        sval = "04";
        //                        break;
        //                    case "5":
        //                        sval = "05";
        //                        break;
        //                    case "6":
        //                        sval = "06";
        //                        break;
        //                    case "7":
        //                        sval = "07";
        //                        break;
        //                    case "8":
        //                        sval = "08";
        //                        break;
        //                    case "9":
        //                        sval = "09";
        //                        break;
        //                }
        //                SFH += sval;
        //            }
        //            SF = Common.HexadecimaltoDecimal(SFH);
        //            SFH = null;
        //            for (int i = 31; i > 27; i--)
        //            {
        //                int val = Convert.ToInt32(Parameter[i].ToString());
        //                string sval = Common.DeciamlToHexadeciaml1(val);
        //                switch (sval)
        //                {
        //                    case "0":
        //                        sval = "00";
        //                        break;
        //                    case "1":
        //                        sval = "01";
        //                        break;
        //                    case "2":
        //                        sval = "02";
        //                        break;
        //                    case "3":
        //                        sval = "03";
        //                        break;
        //                    case "4":
        //                        sval = "04";
        //                        break;
        //                    case "5":
        //                        sval = "05";
        //                        break;
        //                    case "6":
        //                        sval = "06";
        //                        break;
        //                    case "7":
        //                        sval = "07";
        //                        break;
        //                    case "8":
        //                        sval = "08";
        //                        break;
        //                    case "9":
        //                        sval = "09";
        //                        break;
        //                }
        //                SFH += sval;
        //            }
        //            AvgBytesPerSec = Common.HexadecimaltoDecimal(SFH);

        //            SFH = null;

        //            for (int i = 27; i > 23; i--)
        //            {
        //                string sval = Parameter[i].ToString();
        //                switch (sval)
        //                {
        //                    case "0":
        //                        sval = "00";
        //                        break;
        //                    case "1":
        //                        sval = "01";
        //                        break;
        //                    case "2":
        //                        sval = "02";
        //                        break;
        //                    case "3":
        //                        sval = "03";
        //                        break;
        //                    case "4":
        //                        sval = "04";
        //                        break;
        //                    case "5":
        //                        sval = "05";
        //                        break;
        //                    case "6":
        //                        sval = "06";
        //                        break;
        //                    case "7":
        //                        sval = "07";
        //                        break;
        //                    case "8":
        //                        sval = "08";
        //                        break;
        //                    case "9":
        //                        sval = "09";
        //                        break;
        //                }
        //                SFH += sval;
        //            }
        //            iLastFrequency = Convert.ToInt32(SFH);
        //            iFinalFrequency = iLastFrequency;
        //            lblOrder.Text = iFinalFrequency.ToString();
        //            iLOR = 0;
        //            for (int i = 0; i < LOR.Length; i++)
        //            {
        //                double temp = (double)LOR[i] / (double)iLastFrequency;
        //                if (temp >= 0.666667)
        //                {
        //                    iLOR = i;
        //                    break;
        //                }
        //            }
        //            LineOfResolution = LOR1[iLOR];
        //            RUCDvariable = (LOR[iLOR] / 100) * 2;
        //            if (RUCDvariable < 5)
        //            {
        //                RUCDvariable = 5;
        //            }
        //            lbllines.Text = LineOfResolution.ToString();
        //            ExectTime = (double)LOR[iLOR] / (double)iLastFrequency;
        //            ExectDataByteSample = Convert.ToInt32((double)SF * ExectTime);
        //            SFH = null;
        //            for (int i = 43; i > 39; i--)
        //            {
        //                int val = Convert.ToInt32(Parameter[i].ToString());
        //                string sval = Common.DeciamlToHexadeciaml1(val);
        //                switch (sval)
        //                {
        //                    case "0":
        //                        sval = "00";
        //                        break;
        //                    case "1":
        //                        sval = "01";
        //                        break;
        //                    case "2":
        //                        sval = "02";
        //                        break;
        //                    case "3":
        //                        sval = "03";
        //                        break;
        //                    case "4":
        //                        sval = "04";
        //                        break;
        //                    case "5":
        //                        sval = "05";
        //                        break;
        //                    case "6":
        //                        sval = "06";
        //                        break;
        //                    case "7":
        //                        sval = "07";
        //                        break;
        //                    case "8":
        //                        sval = "08";
        //                        break;
        //                    case "9":
        //                        sval = "09";
        //                        break;
        //                }
        //                SFH += sval;
        //            }
        //            TotalDataBytes = Common.HexadecimaltoDecimal(SFH);
        //            TimeVal = Convert.ToDouble(1 / Convert.ToDouble(SF));
        //            double[] xData = new double[ExectDataByteSample];

        //            for (int i = 0; i < ExectDataByteSample; i++)
        //            {
        //                xData[i] = i * TimeVal;
        //            }
        //            xarray = xData;
        //            SamplePerSec = 0;
        //            if (channel == 1)
        //            {
        //                SamplePerSec = AvgBytesPerSec / SF;
        //            }
        //            else if (channel == 2)
        //            {
        //                SamplePerSec = AvgBytesPerSec / SF;
        //                SamplePerSec = SamplePerSec / 2;
        //            }
        //            else
        //            {
        //                SamplePerSec = AvgBytesPerSec / SF;
        //                SamplePerSec = SamplePerSec / channel;
        //            }
        //            TotalTime = TotalDataBytes / AvgBytesPerSec;
        //            if (wav.Length > (TotalDataBytes + 44))
        //            {
        //                try
        //                {
        //                    SFH = null;
        //                    for (int i = TotalDataBytes + 44 + 7; i > TotalDataBytes + 44 + 3; i--)
        //                    {
        //                        int val = Convert.ToInt32(Parameter[i].ToString());
        //                        string sval = Common.DeciamlToHexadeciaml1(val);
        //                        switch (sval)
        //                        {
        //                            case "0":
        //                                sval = "00";
        //                                break;
        //                            case "1":
        //                                sval = "01";
        //                                break;
        //                            case "2":
        //                                sval = "02";
        //                                break;
        //                            case "3":
        //                                sval = "03";
        //                                break;
        //                            case "4":
        //                                sval = "04";
        //                                break;
        //                            case "5":
        //                                sval = "05";
        //                                break;
        //                            case "6":
        //                                sval = "06";
        //                                break;
        //                            case "7":
        //                                sval = "07";
        //                                break;
        //                            case "8":
        //                                sval = "08";
        //                                break;
        //                            case "9":
        //                                sval = "09";
        //                                break;
        //                        }
        //                        SFH += sval;
        //                    }
        //                    int TotalOROSDataBytes = Common.HexadecimaltoDecimal(SFH);

        //                    Byte[] orosChunk = new byte[TotalOROSDataBytes];
        //                    int orosctr = TotalDataBytes + 44 + 8;
        //                    for (int i = 0; i < orosChunk.Length; i++)
        //                    {
        //                        orosChunk[i] = Parameter[orosctr];
        //                        orosctr++;
        //                    }

        //                    sensitivity_CH1 = 0;
        //                    sensitivity_CH2 = 0;
        //                    label_Ch1 = null;
        //                    label_Ch2 = null;
        //                    Name_Ch1 = null;
        //                    Name_Ch2 = null;
        //                    sensitivity_CH1 = BitConverter.ToSingle(orosChunk, 8);
        //                    lblSensitivity.Text = sensitivity_CH1.ToString();
        //                    divider_CH1 = (3.16 * 1.414 / 32768) / sensitivity_CH1;
        //                    if (channel == 2)
        //                    {
        //                        sensitivity_CH2 = BitConverter.ToSingle(orosChunk, 100);
        //                        divider_CH2 = (3.16 * 1.414 / 32768) / sensitivity_CH2;
        //                        lblSensitivity.Text = "CH1 " + Math.Round(sensitivity_CH1, 3).ToString() + ", CH2 " + Math.Round(sensitivity_CH2, 3).ToString();
        //                    }
        //                    byte[] NameExtracter = new byte[32];
        //                    for (int i = 39, j = 0; j < 32; i++, j++)
        //                    {
        //                        NameExtracter[j] = orosChunk[i];
        //                    }
        //                    label_Ch1 = Encoding.ASCII.GetString(NameExtracter);
        //                    label_Ch1 = label_Ch1.Trim(new char[] { '\0', ' ' });
        //                    lblYunit.Text = label_Ch1;
        //                    if (channel == 2)
        //                    {
        //                        NameExtracter = new byte[32];
        //                        for (int i = 131, j = 0; j < 32; i++, j++)
        //                        {
        //                            NameExtracter[j] = orosChunk[i];
        //                        }
        //                        label_Ch2 = Encoding.ASCII.GetString(NameExtracter);
        //                        label_Ch2 = label_Ch2.Trim(new char[] { '\0', ' ' });
        //                        lblYunit.Text = "CH1 " + label_Ch1 + ", CH2 " + label_Ch2;
        //                    }
        //                    lblXunit.Text = "sec";

        //                    // Amit Jain    17 feb 2010
        //                    //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.
        //                    NameExtracter = new byte[20];
        //                    for (int i = 78, j = 0; j < 20; i++, j++)
        //                    {
        //                        NameExtracter[j] = orosChunk[i];
        //                    }

        //                    Name_Ch1 = Encoding.ASCII.GetString(NameExtracter);
        //                    Name_Ch1 = Name_Ch1.Trim(new char[] { '\0', ' ' });
        //                    if (channel == 2)
        //                    {
        //                        NameExtracter = new byte[20];
        //                        for (int i = 170, j = 0; j < 20; i++, j++)
        //                        {
        //                            NameExtracter[j] = orosChunk[i];
        //                        }

        //                        Name_Ch2 = Encoding.ASCII.GetString(NameExtracter);
        //                        Name_Ch2 = Name_Ch2.Trim(new char[] { '\0', ' ' });
        //                    }
        //                    //end
        //                }
        //                catch (Exception exx)
        //                {
        //                    ErrorLog_Class.ErrorLogEntry(exx);
        //                }
        //            }
        //            bShowOrbit = false;
        //            if (TotalTime > 0)
        //            {
        //                short sample;
        //                double[] narray = new double[0];
        //                BinaryReader fr = new BinaryReader(wav);

        //                double[] soundBytes = new double[xData.Length];
        //                double[] soundBytes1 = new double[xData.Length];
        //                arlYData = new ArrayList();
        //                ctr = 0;
        //                int abc = 0;
        //                fr.BaseStream.Position = 44;
        //                if (channel == 1)
        //                {
        //                    dataGridViewX1.Visible = false;
        //                    expandableSplitter5.Visible = false;
        //                    int xx = 0;
        //                    double[] abcd = new double[TotalDataBytes / 2];
        //                    Fulldata_CH1 = new double[abcd.Length];
        //                    while (fr.BaseStream.Position - 44 < TotalDataBytes)//while (fr.BaseStream.Position != fr.BaseStream.Length)                            
        //                    {

        //                        sample = fr.ReadInt16();
        //                        abcd[xx] = sample;

        //                        soundBytes[ctr] = sample;
        //                        double SampleVal = Convert.ToDouble(sample * divider_CH1); //SampleVal = SampleVal / 1000;
        //                        Fulldata_CH1[xx] = SampleVal;
        //                        if (SampleVal < 100)
        //                        {
        //                            SampleVal = Math.Round(SampleVal, 9);
        //                            soundBytes[ctr] = (SampleVal);
        //                        }
        //                        else
        //                        {
        //                            SampleVal = Math.Round(SampleVal);
        //                            soundBytes[ctr] = (SampleVal);
        //                        }
        //                        ctr++;
        //                        xx++;
        //                        if (ctr == xData.Length)
        //                        {
        //                            double[] tempYdata = null;
        //                            if (!bShowOrbit)
        //                            {
        //                                double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
        //                                arlYData.Add(Fmag);
        //                                tempYdata = soundBytes;
        //                            }
        //                            else
        //                            {
        //                                arlYData.Add(soundBytes);
        //                                tempYdata = soundBytes;
        //                            }
        //                            //hshDrag.Add(trendValCtr, trendValCtr);
        //                            ctr = 0;
        //                            soundBytes = new double[xData.Length];
        //                            {
        //                                string source = null;
        //                                string Dest = null;
        //                                TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
        //                                TreeListNode node1 = null;
        //                                string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
        //                                string[] ColorCode = { "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352" };

        //                                try
        //                                {

        //                                    dataGridViewImageColumn1.ValuesAreIcons = false;
        //                                    {
        //                                        string s = null;
        //                                        if (!bShowOrbit)
        //                                        {
        //                                            if (channel == 1)
        //                                            {
        //                                                s = trendValCtr.ToString();
        //                                                s = (ExectTime * (double)trendValCtr).ToString();
        //                                            }
        //                                            else if (channel == 2 && trendValCtr % 2 == 0)
        //                                            {
        //                                                abc += 1;
        //                                                s = abc.ToString() + " Ch-1";
        //                                                s = (ExectTime * (double)trendValCtr).ToString() + " Ch-1";
        //                                            }
        //                                            else if (channel == 2 && trendValCtr % 2 != 0)
        //                                            {
        //                                                s = abc.ToString() + " Ch-2";
        //                                                s = (ExectTime * (double)(trendValCtr - 1)).ToString() + " Ch-2";
        //                                            }

        //                                            if (!Directory.Exists("c:\\vvtemp\\"))
        //                                            {
        //                                                Directory.CreateDirectory("c:\\vvtemp\\");
        //                                            }

        //                                            aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create, FileAccess.ReadWrite);

        //                                            sw = new StreamWriter(aa);
        //                                            for (int i = 0; i < xData.Length; i++)
        //                                            {
        //                                                sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
        //                                            }
        //                                            sw.Close();

        //                                            int iCCtr = trendValCtr % 30;
        //                                            dataGridView2.Rows.Add(1);
        //                                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
        //                                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
        //                                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
        //                                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value = objlistimg.Images[iCCtr];
        //                                            dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = ColorCode[iCCtr].ToString();

        //                                            trendValCtr++;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (channel == 2 && trendValCtr % 2 == 0)
        //                                            {

        //                                                s = abc.ToString();

        //                                                int iCCtr = trendValCtr % 30;
        //                                                dataGridView2.Rows.Add(1);
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value = objlistimg.Images[iCCtr];
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = ColorCode[iCCtr].ToString();

        //                                            }
        //                                            abc += 1;
        //                                            trendValCtr++;
        //                                        }
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    ErrorLog_Class.ErrorLogEntry(ex);
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    // Amit Jain    17 feb 2010
        //                    //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.

        //                    if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
        //                    {
        //                        dataGridViewX1.Visible = false;
        //                        expandableSplitter5.Visible = false;
        //                    }
        //                    else
        //                    {
        //                        expandableSplitter5.Visible = true;
        //                        dataGridViewX1.Visible = true;
        //                        {
        //                            dataGridViewX1.Height = panel1.Height / 3;
        //                            dataGridView2.Height = panel1.Height / 3;

        //                        }
        //                    }
        //                    //End
        //                    int xx = 0;
        //                    int yy = 0;
        //                    double[] abcd = new double[TotalDataBytes / 4];
        //                    Fulldata_CH1 = new double[abcd.Length];
        //                    double[] abcd1 = new double[TotalDataBytes / 4];
        //                    Fulldata_CH2 = new double[abcd1.Length];
        //                    int timectr = 0;
        //                    while (fr.BaseStream.Position - 44 < TotalDataBytes)//while (fr.BaseStream.Position != fr.BaseStream.Length)
        //                    {

        //                        sample = fr.ReadInt16();

        //                        double SampleVal = 0;// Convert.ToDouble(sample * divider); //SampleVal = SampleVal / 1000;
        //                        if (xx % 2 == 0)
        //                        {
        //                            SampleVal = Convert.ToDouble(sample * divider_CH1);
        //                            if (SampleVal < 100)
        //                            {
        //                                SampleVal = Math.Round(SampleVal, 9);
        //                                soundBytes[ctr] = (SampleVal);
        //                            }
        //                            else
        //                            {
        //                                SampleVal = Math.Round(SampleVal);
        //                                soundBytes[ctr] = (SampleVal);
        //                            }
        //                            abcd[yy] = sample;
        //                            Fulldata_CH1[yy] = SampleVal;
        //                            xx++;

        //                        }
        //                        else
        //                        {
        //                            SampleVal = Convert.ToDouble(sample * divider_CH2);
        //                            if (SampleVal < 100)
        //                            {
        //                                SampleVal = Math.Round(SampleVal, 9);
        //                                soundBytes1[ctr] = (SampleVal);
        //                            }
        //                            else
        //                            {
        //                                SampleVal = Math.Round(SampleVal);
        //                                soundBytes1[ctr] = (SampleVal);
        //                            }
        //                            abcd1[yy] = sample;
        //                            Fulldata_CH2[yy] = SampleVal;
        //                            ctr++;
        //                            xx++;
        //                            yy++;
        //                        }
        //                        if (ctr == xData.Length)
        //                        {
        //                            double[] tempYdata = null;
        //                            if (!bShowOrbit)
        //                            {
        //                                double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
        //                                arlYData.Add(Fmag);
        //                                tempYdata = soundBytes;
        //                            }
        //                            else
        //                            {
        //                                arlYData.Add(soundBytes);
        //                                tempYdata = soundBytes;
        //                            }
        //                            //hshDrag.Add(trendValCtr, trendValCtr);
        //                            ctr = 0;
        //                            soundBytes = new double[xData.Length];


        //                            {
        //                                string source = null;
        //                                string Dest = null;
        //                                TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
        //                                TreeListNode node1 = null;
        //                                string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
        //                                string[] ColorCode = { "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352" };

        //                                try
        //                                {

        //                                    dataGridViewImageColumn1.ValuesAreIcons = false;
        //                                    {
        //                                        string s = null;
        //                                        if (!bShowOrbit)
        //                                        {
        //                                            //if (channel == 2 && trendValCtr % 2 == 0)
        //                                            {
        //                                                abc += 1;
        //                                                s = abc.ToString() + " Ch-1";
        //                                                s = (ExectTime * (double)timectr).ToString() + " Ch-1";

        //                                                int iCCtr = trendValCtr % 30;
        //                                                dataGridView2.Rows.Add(1);
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value = objlistimg.Images[iCCtr];
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = ColorCode[iCCtr].ToString();

        //                                                trendValCtr++;

        //                                                if (!Directory.Exists("c:\\vvtemp\\"))
        //                                                {
        //                                                    Directory.CreateDirectory("c:\\vvtemp\\");
        //                                                }

        //                                                aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create, FileAccess.ReadWrite);

        //                                                sw = new StreamWriter(aa);
        //                                                for (int i = 0; i < xData.Length; i++)
        //                                                {
        //                                                    sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
        //                                                }
        //                                                sw.Close();
        //                                            }
        //                                            // Amit Jain    17 feb 2010
        //                                            //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.


        //                                            if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
        //                                            {
        //                                                s = abc.ToString() + " Ch-2";
        //                                                s = (ExectTime * (double)(timectr)).ToString() + " Ch-2";
        //                                                int iCCtr = trendValCtr % 30;
        //                                                aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create, FileAccess.ReadWrite);

        //                                                sw = new StreamWriter(aa);
        //                                                for (int i = 0; i < xData.Length; i++)
        //                                                {
        //                                                    sw.Write(xData[i] + "/././" + soundBytes1[i] + ".....");
        //                                                }
        //                                                sw.Close();

        //                                                if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
        //                                                {
        //                                                    arlTachoData.Add(s);
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                //end
        //                                                s = abc.ToString() + " Ch-2";
        //                                                s = (ExectTime * (double)(timectr)).ToString() + " Ch-2";

        //                                                int iCCtr = trendValCtr % 30;
        //                                                dataGridViewX1.Rows.Add(1);
        //                                                dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[0].Value = s;
        //                                                dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[2].Value = s;
        //                                                dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[1].Value = "X";
        //                                                dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[3].Value = objlistimg.Images[iCCtr];
        //                                                dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[3].Tag = ColorCode[iCCtr].ToString();

        //                                                trendValCtr++;

        //                                                aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create, FileAccess.ReadWrite);

        //                                                sw = new StreamWriter(aa);
        //                                                for (int i = 0; i < xData.Length; i++)
        //                                                {
        //                                                    sw.Write(xData[i] + "/././" + soundBytes1[i] + ".....");
        //                                                }
        //                                                sw.Close();
        //                                            }
        //                                            soundBytes1 = new double[xData.Length];
        //                                            timectr++;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (channel == 2 && trendValCtr % 2 == 0)
        //                                            {

        //                                                s = abc.ToString();

        //                                                int iCCtr = trendValCtr % 30;
        //                                                dataGridView2.Rows.Add(1);
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;

        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value = objlistimg.Images[iCCtr];
        //                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag = ColorCode[iCCtr].ToString();

        //                                            }
        //                                            abc += 1;
        //                                            trendValCtr++;
        //                                        }
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    ErrorLog_Class.ErrorLogEntry(ex);
        //                                }
        //                            }
        //                        }
        //                    }
        //                    double and = findHighestValue(abcd);
        //                }
        //            }
        //            else
        //            {
        //                MessageBoxEx.Show("Not Enough Sample to Draw");
        //                bWave = !bWave;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog_Class.ErrorLogEntry(ex);
        //    }
        //    finally
        //    {
        //        sr = null;
        //        sw = null;
        //    }
        //}

        private string SingleDigitToDouble(string sval)
        {
            switch (sval)
            {
                case "0":
                    sval = "00";
                    break;
                case "1":
                    sval = "01";
                    break;
                case "2":
                    sval = "02";
                    break;
                case "3":
                    sval = "03";
                    break;
                case "4":
                    sval = "04";
                    break;
                case "5":
                    sval = "05";
                    break;
                case "6":
                    sval = "06";
                    break;
                case "7":
                    sval = "07";
                    break;
                case "8":
                    sval = "08";
                    break;
                case "9":
                    sval = "09";
                    break;
            }

            return sval;
        }

        private void CreateWav(string spath)
        {
            string RIFX = "RIFX";
            
            string RIFF = "RIFF";
            iclick = 1;
            setWaveFirstData();
            if (Directory.Exists("c:\\vvtemp\\"))
            {
                Directory.Delete("c:\\vvtemp\\", true);
            }

            using (FileStream wav = new FileStream(spath, FileMode.Open, FileAccess.Read))
            {
                Byte[] Parameter = new byte[wav.Length];
                wav.Read(Parameter, 0, Parameter.Length);
                string SFH = null;
                //Check Header ID
                for (int i = 0; i < 4; i++)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    char c = (char) val;
                    SFH += c.ToString();
                }

                
                
                if (SFH == RIFX)
                {
                    CreateFinalABBWave(wav, Parameter);
                }
                else if (SFH == RIFF)
                {
                    CreateFinalWave(wav, Parameter);
                }
                else
                {
                    throw new ApplicationException("Incorrect Header info");
                }

            }
        }

        private void CreateFinalABBWave(FileStream wav, Byte[] Parameter)
        {
            arlTachoData = new ArrayList();
            int[] LOR = {100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200, 102400, 204800};
            int[] LOR1 = {256, 512, 1024, 2048, 4096, 8192, 16384, 32738, 65536, 131072, 262144, 524288};
            AvgBytesPerSec = 0;
            SF = 0;
            iLastFrequency = 0;
            iLOR = 0;
            LineOfResolution = 0;
            ExectTime = 0;
            ExectDataByteSample = 0;
            TotalDataBytes = 0;
            TimeVal = 0;
            TotalTime = 0;
            channel = 1;
            string SFH = null;

            string OROS = "labl";
            string fmt = "fmt ";
            string data = "data";
            double[] xData = null;
            int iDataStart = 0;
            try
            {
                iclick = 1;
                setWaveFirstData();
                if (Directory.Exists("c:\\vvtemp\\"))
                {
                    Directory.Delete("c:\\vvtemp\\", true);
                }

                SFH = null;
                for (int i = 12; i < 16; i++)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    char c = (char) val;
                    SFH += c.ToString();
                }

                if (SFH != fmt)
                {
                    throw new ApplicationException("format not correct");
                }

                //Channels
                SFH = null;
                for (int i = 23; i > 21; i--)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));

                    SFH += sval;
                }

                channel = Common.HexadecimaltoDecimal(SFH);
                //channel = Convert.ToInt32(Parameter[22].ToString());
                string[] SFbyteD = new string[4];
                SFH = null;
                int ctr = 0;

                //Sample Per Second
                for (int i = 27; i > 23; i--)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                    SFH += sval;
                }

                SF = Common.HexadecimaltoDecimal(SFH); //sample per second

                // Bytes per Second
                SFH = null;
                for (int i = 31; i > 27; i--)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                    SFH += sval;
                }

                AvgBytesPerSec = Common.HexadecimaltoDecimal(SFH); //avg byte per second


                SFH = null;
                for (int i = 27; i > 23; i--)
                {
                    string sval = SingleDigitToDouble(Parameter[i].ToString());
                    SFH += sval;
                }

                iLastFrequency = Convert.ToInt32(SFH);
                iFinalFrequency = iLastFrequency;
                lblOrder.Text = iFinalFrequency.ToString();
                iLOR = 0;
                for (int i = 0; i < LOR.Length; i++)
                {
                    double temp = (double) LOR[i] / (double) iLastFrequency;
                    if (temp >= 0.666667)
                    {
                        iLOR = i;
                        break;
                    }
                }

                LineOfResolution = LOR1[iLOR];
                RUCDvariable = (LOR[iLOR] / 100) * 2;
                if (RUCDvariable < 5)
                {
                    RUCDvariable = 5;
                }

                lbllines.Text = LineOfResolution.ToString();
                ExectTime = (double) LOR[iLOR] / (double) iLastFrequency;
                ExectDataByteSample = Convert.ToInt32((double) SF * ExectTime);
                SFH = null;

                for (int i = 36; i < 40; i++)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    char c = (char) val;
                    SFH += c.ToString();
                }



                bool xyz = false;
                if (SFH != data)
                {
                    throw new ApplicationException("No data chunk found");
                }

                iDataStart = iDataStart = 44;
                SFH = null;

                //Data length
                for (int i = 43; i > 39; i--)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                    SFH += sval;
                }

                TotalDataBytes = Common.HexadecimaltoDecimal(SFH);
                TimeVal = Convert.ToDouble(1 / Convert.ToDouble(SF));


                xData = new double[ExectDataByteSample];

                for (int i = 0; i < ExectDataByteSample; i++)
                {
                    xData[i] = i * TimeVal;
                }

                xarray = xData;
                SamplePerSec = 0;
                if (channel == 1)
                {
                    SamplePerSec = AvgBytesPerSec / SF;
                }
                else if (channel == 2)
                {
                    SamplePerSec = AvgBytesPerSec / SF;
                    SamplePerSec = SamplePerSec / 2;
                }
                else
                {
                    SamplePerSec = AvgBytesPerSec / SF;
                    SamplePerSec = SamplePerSec / channel;
                }

                TotalTime = TotalDataBytes / AvgBytesPerSec;

                //Getting ABB encoder data
                try
                {
                    if (wav.Length > (TotalDataBytes + 44))
                    {
                        try
                        {
                            //Datalength of encoder patch
                            SFH = null;
                            for (int i = TotalDataBytes + 44 + 7; i > TotalDataBytes + 44 + 3; i--)
                            {
                                int val = Convert.ToInt32(Parameter[i].ToString());
                                string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                                SFH += sval;
                            }

                            int TotalOROSDataBytes = Common.HexadecimaltoDecimal(SFH);

                            // channel / Encoder ID of patch
                            SFH = null;
                            for (int i = TotalDataBytes + 44 + 11; i > TotalDataBytes + 44 + 7; i--)
                            {
                                int val = Convert.ToInt32(Parameter[i].ToString());
                                string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                                SFH += sval;
                            }

                            int EncoderID = Common.HexadecimaltoDecimal(SFH);

                            Byte[] orosChunk = new byte[TotalOROSDataBytes];
                            int orosctr = TotalDataBytes + 44 + 12;
                            for (int i = 0; i < orosChunk.Length; i++)
                            {
                                orosChunk[i] = Parameter[orosctr];
                                orosctr++;
                            }

                            sensitivity_CH1 = 0;
                            sensitivity_CH2 = 0;
                            label_Ch1 = null;
                            label_Ch2 = null;
                            Name_Ch1 = null;
                            Name_Ch2 = null;
                            sensitivity_CH1 = BitConverter.ToSingle(orosChunk, 8);
                            lblSensitivity.Text = sensitivity_CH1.ToString();
                            divider_CH1 = (3.16 * 1.414 / 32768) / sensitivity_CH1;
                            if (channel == 2)
                            {
                                sensitivity_CH2 = BitConverter.ToSingle(orosChunk, 100);
                                divider_CH2 = (3.16 * 1.414 / 32768) / sensitivity_CH2;
                                lblSensitivity.Text =
                                    "CH1 " + Math.Round(sensitivity_CH1, 3).ToString() + ", CH2 " +
                                    Math.Round(sensitivity_CH2, 3).ToString();
                            }

                            byte[] NameExtracter = new byte[32];
                            for (int i = 39, j = 0; j < 32; i++, j++)
                            {
                                NameExtracter[j] = orosChunk[i];
                            }

                            label_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                            label_Ch1 = label_Ch1.Trim(new char[] {'\0', ' '});
                            string[] arrch_label = label_Ch1.Split(new string[] {" "},
                                StringSplitOptions.RemoveEmptyEntries);
                            if (arrch_label.Length > 1)
                            {
                                label_Ch1 = arrch_label[1].ToString();
                            }

                            lblYunit.Text = label_Ch1;
                            if (channel == 2)
                            {
                                NameExtracter = new byte[32];
                                for (int i = 131, j = 0; j < 32; i++, j++)
                                {
                                    NameExtracter[j] = orosChunk[i];
                                }

                                label_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                                label_Ch2 = label_Ch2.Trim(new char[] {'\0', ' '});
                                arrch_label = label_Ch2.Split(new string[] {" "},
                                    StringSplitOptions.RemoveEmptyEntries);
                                if (arrch_label.Length > 1)
                                {
                                    label_Ch2 = arrch_label[1].ToString();
                                }

                                lblYunit.Text = "CH1 " + label_Ch1 + ", CH2 " + label_Ch2;
                            }

                            lblXunit.Text = "sec";

                            //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.
                            NameExtracter = new byte[20];
                            for (int i = 78, j = 0; j < 20; i++, j++)
                            {
                                NameExtracter[j] = orosChunk[i];
                            }

                            Name_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                            Name_Ch1 = Name_Ch1.Trim(new char[] {'\0', ' '});
                            if (channel == 2)
                            {
                                NameExtracter = new byte[20];
                                for (int i = 170, j = 0; j < 20; i++, j++)
                                {
                                    NameExtracter[j] = orosChunk[i];
                                }

                                Name_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                                Name_Ch2 = Name_Ch2.Trim(new char[] {'\0', ' '});
                            }

                            //end
                        }
                        catch (Exception exx)
                        {
                            ErrorLog_Class.ErrorLogEntry(exx);
                            xyz = true;
                        }
                    }
                }
                catch (Exception eex)
                {
                    xyz = true;
                }


                if (xyz)
                {
                    //tempDATA = null;
                    //SFH = null;
                    //tempICTR = 36;
                    //while (SFH != OROS)
                    //{
                    //    if (tempICTR < TotalDataBytes - 100)
                    //    {
                    //        try
                    //        {
                    //            for (int i = tempICTR; i < tempICTR + 4; i++)
                    //            {
                    //                int val = Convert.ToInt32(Parameter[i].ToString());
                    //                char c = (char) val;
                    //                tempDATA += c.ToString();
                    //            }

                    //            tempICTR++;
                    //            SFH = tempDATA;
                    //            tempDATA = null;
                    //        }

                    //        catch (Exception ex)
                    //        {
                    //        }
                    //    }
                    //    else
                    //    {
                    //        break;
                    //    }
                    //}

                    if (SFH == OROS)
                    {
                        SFH = null;
                        //for (int i = tempICTR + 6; i > (tempICTR + 2); i--) //
                        for (int i = 43; i > 39; i--)
                        {
                            int val = Convert.ToInt32(Parameter[i].ToString());
                            string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                            SFH += sval;
                        }

                        int TotalOROSDataBytes = Common.HexadecimaltoDecimal(SFH);

                        Byte[] orosChunk = new byte[TotalOROSDataBytes];
                        int orosctr = TotalDataBytes + 36 + 8;
                        for (int i = 0; i < orosChunk.Length; i++)
                        {
                            orosChunk[i] = Parameter[orosctr];
                            orosctr++;
                        }

                        sensitivity_CH1 = 0;
                        sensitivity_CH2 = 0;
                        label_Ch1 = null;
                        label_Ch2 = null;
                        Name_Ch1 = null;
                        Name_Ch2 = null;
                        sensitivity_CH1 = BitConverter.ToSingle(orosChunk, 8);
                        lblSensitivity.Text = sensitivity_CH1.ToString();
                        divider_CH1 = (3.16 * 1.414 / 32768) / sensitivity_CH1;
                        if (channel == 2)
                        {
                            sensitivity_CH2 = BitConverter.ToSingle(orosChunk, 100);
                            divider_CH2 = (3.16 * 1.414 / 32768) / sensitivity_CH2;
                            lblSensitivity.Text =
                                "CH1 " + Math.Round(sensitivity_CH1, 3).ToString() + ", CH2 " +
                                Math.Round(sensitivity_CH2, 3).ToString();
                        }

                        byte[] NameExtracter = new byte[32];
                        for (int i = 39, j = 0; j < 32; i++, j++)
                        {
                            NameExtracter[j] = orosChunk[i];
                        }

                        label_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                        label_Ch1 = label_Ch1.Trim(new char[] {'\0', ' '});
                        string[] arrch_label = label_Ch1.Split(new string[] {" "},
                            StringSplitOptions.RemoveEmptyEntries);
                        if (arrch_label.Length > 1)
                        {
                            label_Ch1 = arrch_label[1].ToString();
                        }

                        lblYunit.Text = label_Ch1;
                        if (channel == 2)
                        {
                            NameExtracter = new byte[32];
                            for (int i = 131, j = 0; j < 32; i++, j++)
                            {
                                NameExtracter[j] = orosChunk[i];
                            }

                            label_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                            label_Ch2 = label_Ch2.Trim(new char[] {'\0', ' '});
                            arrch_label = label_Ch2.Split(new string[] {" "},
                                StringSplitOptions.RemoveEmptyEntries);
                            if (arrch_label.Length > 1)
                            {
                                label_Ch2 = arrch_label[1].ToString();
                            }

                            lblYunit.Text = "CH1 " + label_Ch1 + ", CH2 " + label_Ch2;
                        }

                        lblXunit.Text = "sec";

                        // Amit Jain    17 feb 2010
                        //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.
                        NameExtracter = new byte[20];
                        for (int i = 78, j = 0; j < 20; i++, j++)
                        {
                            NameExtracter[j] = orosChunk[i];
                        }

                        Name_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                        Name_Ch1 = Name_Ch1.Trim(new char[] {'\0', ' '});
                        if (channel == 2)
                        {
                            NameExtracter = new byte[20];
                            for (int i = 170, j = 0; j < 20; i++, j++)
                            {
                                NameExtracter[j] = orosChunk[i];
                            }

                            Name_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                            Name_Ch2 = Name_Ch2.Trim(new char[] {'\0', ' '});
                        }

                        SFH = null;

                        for (int i = orosctr; i < orosctr + 4; i++)
                        {
                            int val = Convert.ToInt32(Parameter[i].ToString());
                            char c = (char) val;
                            SFH += c.ToString();
                        }

                        if (SFH == data)
                        {
                            SFH = null;
                            int datastart = orosctr + 4 - 1;
                            for (int i = datastart + 4; i > datastart; i--)
                            {
                                int val = Convert.ToInt32(Parameter[i].ToString());
                                string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                                SFH += sval;
                            }

                            TotalDataBytes = Common.HexadecimaltoDecimal(SFH);
                            TimeVal = Convert.ToDouble(1 / Convert.ToDouble(SF));

                            iDataStart = datastart + 4 + 1;
                            xData = new double[ExectDataByteSample];

                            for (int i = 0; i < ExectDataByteSample; i++)
                            {
                                xData[i] = i * TimeVal;
                            }

                            xarray = xData;
                            SamplePerSec = 0;
                            if (channel == 1)
                            {
                                SamplePerSec = AvgBytesPerSec / SF;
                            }
                            else if (channel == 2)
                            {
                                SamplePerSec = AvgBytesPerSec / SF;
                                SamplePerSec = SamplePerSec / 2;
                            }
                            else
                            {
                                SamplePerSec = AvgBytesPerSec / SF;
                                SamplePerSec = SamplePerSec / channel;
                            }

                            TotalTime = TotalDataBytes / AvgBytesPerSec;
                        }
                    }
                }

                bShowOrbit = false;
                if (TotalTime > 0)
                {
                    short sample;
                    double[] narray = new double[0];
                    BinaryReader fr = new BinaryReader(wav);

                    double[] soundBytes = new double[xData.Length];
                    double[] soundBytes1 = new double[xData.Length];
                    arlYData = new ArrayList();
                    ctr = 0;
                    int abc = 0;
                    fr.BaseStream.Position = iDataStart;
                    if (channel == 1)
                    {
                        dataGridViewX1.Visible = false;
                        expandableSplitter5.Visible = false;
                        int xx = 0;
                        double[] abcd = new double[TotalDataBytes / 2];
                        Fulldata_CH1 = new double[abcd.Length];
                        while (fr.BaseStream.Position - iDataStart < TotalDataBytes
                        ) //while (fr.BaseStream.Position != fr.BaseStream.Length)                            
                        {

                            sample = fr.ReadInt16();
                            abcd[xx] = sample;

                            soundBytes[ctr] = sample;
                            double SampleVal =
                                Convert.ToDouble(sample * divider_CH1); //SampleVal = SampleVal / 1000;
                            Fulldata_CH1[xx] = SampleVal;
                            if (SampleVal < 100)
                            {
                                SampleVal = Math.Round(SampleVal, 9);
                                soundBytes[ctr] = (SampleVal);
                            }
                            else
                            {
                                SampleVal = Math.Round(SampleVal);
                                soundBytes[ctr] = (SampleVal);
                            }

                            ctr++;
                            xx++;
                            if (ctr == xData.Length)
                            {
                                double[] tempYdata = null;
                                if (!bShowOrbit)
                                {
                                    double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                                    arlYData.Add(Fmag);
                                    tempYdata = soundBytes;
                                }
                                else
                                {
                                    arlYData.Add(soundBytes);
                                    tempYdata = soundBytes;
                                }

                                //hshDrag.Add(trendValCtr, trendValCtr);
                                ctr = 0;
                                soundBytes = new double[xData.Length];
                                {
                                    string source = null;
                                    string Dest = null;
                                    TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                    TreeListNode node1 = null;
                                    string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                    string[] ColorCode =
                                    {
                                        "7667712", "16751616", "4684277", "7077677", "16777077", "9868951",
                                        "2987746", "4343957", "16777216", "23296", "16711681", "8388652",
                                        "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                                        "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                                        "38476", "3318692", "29696", "6737204", "16728065", "744352"
                                    };

                                    try
                                    {

                                        dataGridViewImageColumn1.ValuesAreIcons = false;
                                        {
                                            string s = null;
                                            if (!bShowOrbit)
                                            {
                                                if (channel == 1)
                                                {
                                                    s = trendValCtr.ToString();
                                                    s = (ExectTime * (double) trendValCtr).ToString();
                                                }
                                                else if (channel == 2 && trendValCtr % 2 == 0)
                                                {
                                                    abc += 1;
                                                    s = abc.ToString() + " Ch-1";
                                                    s = (ExectTime * (double) trendValCtr).ToString() + " Ch-1";
                                                }
                                                else if (channel == 2 && trendValCtr % 2 != 0)
                                                {
                                                    s = abc.ToString() + " Ch-2";
                                                    s = (ExectTime * (double) (trendValCtr - 1)).ToString() +
                                                        " Ch-2";
                                                }

                                                if (!Directory.Exists("c:\\vvtemp\\"))
                                                {
                                                    Directory.CreateDirectory("c:\\vvtemp\\");
                                                }

                                                aa = new FileStream("c:\\vvtemp\\" + s + ".txt",
                                                    FileMode.Create, FileAccess.ReadWrite);

                                                sw = new StreamWriter(aa);
                                                for (int i = 0; i < xData.Length; i++)
                                                {
                                                    sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
                                                }

                                                sw.Close();

                                                int iCCtr = trendValCtr % 30;
                                                dataGridView2.Rows.Add(1);
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                    .Value = s;
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2]
                                                    .Value = s;
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                    .Value = "X";
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value
                                                    = objlistimg.Images[iCCtr];
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                    ColorCode[iCCtr].ToString();

                                                trendValCtr++;
                                            }
                                            else
                                            {
                                                if (channel == 2 && trendValCtr % 2 == 0)
                                                {

                                                    s = abc.ToString();

                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridView2.Rows.Add(1);
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                        .Value = "X";
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Value = objlistimg.Images[iCCtr];
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Tag = ColorCode[iCCtr].ToString();

                                                }

                                                abc += 1;
                                                trendValCtr++;
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorLog_Class.ErrorLogEntry(ex);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        // Amit Jain    17 feb 2010
                        //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.

                        //For rene
                        //if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
                        //{
                        //    dataGridViewX1.Visible = false;
                        //    expandableSplitter5.Visible = false;
                        //}
                        //else
                        //For rene end
                        {
                            expandableSplitter5.Visible = true;
                            dataGridViewX1.Visible = true;
                            {
                                dataGridViewX1.Height = panel1.Height / 3;
                                dataGridView2.Height = panel1.Height / 3;

                            }
                        }
                        //End
                        int xx = 0;
                        int yy = 0;
                        double[] abcd = new double[TotalDataBytes / 4];
                        Fulldata_CH1 = new double[abcd.Length];
                        double[] abcd1 = new double[TotalDataBytes / 4];
                        Fulldata_CH2 = new double[abcd1.Length];
                        int timectr = 0;
                        while (fr.BaseStream.Position - iDataStart < TotalDataBytes
                        ) //while (fr.BaseStream.Position != fr.BaseStream.Length)
                        {

                            sample = fr.ReadInt16();

                            double
                                SampleVal =
                                    0; // Convert.ToDouble(sample * divider); //SampleVal = SampleVal / 1000;
                            if (xx % 2 == 0)
                            {
                                SampleVal = Convert.ToDouble(sample * divider_CH1);
                                if (SampleVal < 100)
                                {
                                    SampleVal = Math.Round(SampleVal, 9);
                                    soundBytes[ctr] = (SampleVal);
                                }
                                else
                                {
                                    SampleVal = Math.Round(SampleVal);
                                    soundBytes[ctr] = (SampleVal);
                                }

                                abcd[yy] = sample;
                                Fulldata_CH1[yy] = SampleVal;
                                xx++;

                            }
                            else
                            {
                                SampleVal = Convert.ToDouble(sample * divider_CH2);
                                if (SampleVal < 100)
                                {
                                    SampleVal = Math.Round(SampleVal, 9);
                                    soundBytes1[ctr] = (SampleVal);
                                }
                                else
                                {
                                    SampleVal = Math.Round(SampleVal);
                                    soundBytes1[ctr] = (SampleVal);
                                }

                                abcd1[yy] = sample;
                                Fulldata_CH2[yy] = SampleVal;
                                ctr++;
                                xx++;
                                yy++;
                            }

                            if (ctr == xData.Length)
                            {
                                double[] tempYdata = null;
                                if (!bShowOrbit)
                                {
                                    double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                                    arlYData.Add(Fmag);
                                    tempYdata = soundBytes;
                                }
                                else
                                {
                                    arlYData.Add(soundBytes);
                                    tempYdata = soundBytes;
                                }

                                //hshDrag.Add(trendValCtr, trendValCtr);
                                ctr = 0;
                                soundBytes = new double[xData.Length];


                                {
                                    string source = null;
                                    string Dest = null;
                                    TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                    TreeListNode node1 = null;
                                    string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                    string[] ColorCode =
                                    {
                                        "7667712", "16751616", "4684277", "7077677", "16777077", "9868951",
                                        "2987746", "4343957", "16777216", "23296", "16711681", "8388652",
                                        "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                                        "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                                        "38476", "3318692", "29696", "6737204", "16728065", "744352"
                                    };

                                    try
                                    {

                                        dataGridViewImageColumn1.ValuesAreIcons = false;
                                        {
                                            string s = null;
                                            if (!bShowOrbit)
                                            {
                                                //if (channel == 2 && trendValCtr % 2 == 0)
                                                {
                                                    abc += 1;
                                                    s = abc.ToString() + " Ch-1";
                                                    s = (ExectTime * (double) timectr).ToString() + " Ch-1";

                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridView2.Rows.Add(1);
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                        .Value = "X";
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Value = objlistimg.Images[iCCtr];
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Tag = ColorCode[iCCtr].ToString();

                                                    trendValCtr++;

                                                    if (!Directory.Exists("c:\\vvtemp\\"))
                                                    {
                                                        Directory.CreateDirectory("c:\\vvtemp\\");
                                                    }

                                                    aa = new FileStream("c:\\vvtemp\\" + s + ".txt",
                                                        FileMode.Create, FileAccess.ReadWrite);

                                                    sw = new StreamWriter(aa);
                                                    for (int i = 0; i < xData.Length; i++)
                                                    {
                                                        sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
                                                    }

                                                    sw.Close();
                                                }
                                                // Amit Jain    17 feb 2010
                                                //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.

                                                //For rene
                                                //if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
                                                //{
                                                //    s = abc.ToString() + " Ch-2";
                                                //    s = (ExectTime * (double)(timectr)).ToString() + " Ch-2";
                                                //    int iCCtr = trendValCtr % 30;
                                                //    aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create, FileAccess.ReadWrite);

                                                //    sw = new StreamWriter(aa);
                                                //    for (int i = 0; i < xData.Length; i++)
                                                //    {
                                                //        sw.Write(xData[i] + "/././" + soundBytes1[i] + ".....");
                                                //    }
                                                //    sw.Close();

                                                //    if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
                                                //    {
                                                //        arlTachoData.Add(s);
                                                //    }
                                                //}
                                                //else
                                                //For Rene ends
                                                {
                                                    //end
                                                    s = abc.ToString() + " Ch-2";
                                                    s = (ExectTime * (double) (timectr)).ToString() + " Ch-2";

                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridViewX1.Rows.Add(1);
                                                    dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[0]
                                                        .Value = s;
                                                    dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[2]
                                                        .Value = s;
                                                    dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[1]
                                                        .Value = "X";
                                                    dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[3]
                                                        .Value = objlistimg.Images[iCCtr];
                                                    dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2].Cells[3]
                                                        .Tag = ColorCode[iCCtr].ToString();

                                                    trendValCtr++;

                                                    aa = new FileStream("c:\\vvtemp\\" + s + ".txt",
                                                        FileMode.Create, FileAccess.ReadWrite);

                                                    sw = new StreamWriter(aa);
                                                    for (int i = 0; i < xData.Length; i++)
                                                    {
                                                        sw.Write(xData[i] + "/././" + soundBytes1[i] + ".....");
                                                    }

                                                    sw.Close();
                                                }
                                                soundBytes1 = new double[xData.Length];
                                                timectr++;
                                            }
                                            else
                                            {
                                                if (channel == 2 && trendValCtr % 2 == 0)
                                                {

                                                    s = abc.ToString();

                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridView2.Rows.Add(1);
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                        .Value = s;

                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                        .Value = "X";
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Value = objlistimg.Images[iCCtr];
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Tag = ColorCode[iCCtr].ToString();

                                                }

                                                abc += 1;
                                                trendValCtr++;
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorLog_Class.ErrorLogEntry(ex);
                                    }
                                }
                            }
                        }

                        double and = findHighestValue(abcd);
                    }
                }
                else
                {
                    MessageBoxEx.Show("Not Enough Sample to Draw");
                    bWave = !bWave;
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private void CreateFinalWave(FileStream wav, Byte[] Parameter)
        {
            arlTachoData = new ArrayList();
            int[] LOR = {100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200, 102400, 204800};
            int[] LOR1 = {256, 512, 1024, 2048, 4096, 8192, 16384, 32738, 65536, 131072, 262144, 524288};
            AvgBytesPerSec = 0;
            SF = 0;
            iLastFrequency = 0;
            iLOR = 0;
            LineOfResolution = 0;
            ExectTime = 0;
            ExectDataByteSample = 0;
            TotalDataBytes = 0;
            TimeVal = 0;
            TotalTime = 0;
            channel = 1;
            string SFH = null;

            string OROS = "oros";
            string fmt = "fmt ";
            string data = "data";
            double[] xData = null;
            int iDataStart = 0;
            try
            {
                iclick = 1;
                setWaveFirstData();
                if (Directory.Exists("c:\\vvtemp\\"))
                {
                    Directory.Delete("c:\\vvtemp\\", true);
                }

                SFH = null;
                for (int i = 12; i < 16; i++)
                {
                    int val = Convert.ToInt32(Parameter[i].ToString());
                    char c = (char) val;
                    SFH += c.ToString();
                }

                if (SFH == fmt)
                {
                    SFH = null;
                    for (int i = 23; i > 21; i--)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));

                        SFH += sval;
                    }

                    channel = Common.HexadecimaltoDecimal(SFH);
                    //channel = Convert.ToInt32(Parameter[22].ToString());
                    string[] SFbyteD = new string[4];
                    SFH = null;
                    int ctr = 0;
                    for (int i = 27; i > 23; i--)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                        SFH += sval;
                    }

                    SF = Common.HexadecimaltoDecimal(SFH); //sample per second
                    SFH = null;
                    for (int i = 31; i > 27; i--)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                        SFH += sval;
                    }

                    AvgBytesPerSec = Common.HexadecimaltoDecimal(SFH); //avg byte per second

                    SFH = null;

                    for (int i = 27; i > 23; i--)
                    {
                        string sval = SingleDigitToDouble(Parameter[i].ToString());
                        SFH += sval;
                    }

                    iLastFrequency = Convert.ToInt32(SFH);
                    iFinalFrequency = iLastFrequency;
                    lblOrder.Text = iFinalFrequency.ToString();
                    iLOR = 0;
                    for (int i = 0; i < LOR.Length; i++)
                    {
                        double temp = (double) LOR[i] / (double) iLastFrequency;
                        if (temp >= 0.666667)
                        {
                            iLOR = i;
                            break;
                        }
                    }

                    LineOfResolution = LOR1[iLOR];
                    RUCDvariable = (LOR[iLOR] / 100) * 2;
                    if (RUCDvariable < 5)
                    {
                        RUCDvariable = 5;
                    }

                    lbllines.Text = LineOfResolution.ToString();
                    ExectTime = (double) LOR[iLOR] / (double) iLastFrequency;
                    ExectDataByteSample = Convert.ToInt32((double) SF * ExectTime);
                    SFH = null;

                    for (int i = 36; i < 40; i++)
                    {
                        int val = Convert.ToInt32(Parameter[i].ToString());
                        char c = (char) val;
                        SFH += c.ToString();
                    }

                    // for rene
                    string tempDATA = null;
                    SFH = null;
                    int tempICTR = 36;
                    while (SFH != data)
                    {
                        for (int i = tempICTR; i < tempICTR + 4; i++)
                        {
                            int val = Convert.ToInt32(Parameter[i].ToString());
                            char c = (char) val;
                            tempDATA += c.ToString();
                        }

                        tempICTR++;
                        SFH = tempDATA;
                        tempDATA = null;
                    }
                    //for rene end

                    bool xyz = false;
                    if (SFH == data)
                    {
                        iDataStart = tempICTR + 3; //iDataStart = 44; //For rene commented 
                        SFH = null;
                        for (int i = tempICTR + 6;
                            i > (tempICTR + 2);
                            i--) //for (int i = 43; i > 39; i--) //For rene commented  
                        {
                            int val = Convert.ToInt32(Parameter[i].ToString());
                            string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                            SFH += sval;
                        }

                        TotalDataBytes = Common.HexadecimaltoDecimal(SFH);
                        TimeVal = Convert.ToDouble(1 / Convert.ToDouble(SF));


                        xData = new double[ExectDataByteSample];

                        for (int i = 0; i < ExectDataByteSample; i++)
                        {
                            xData[i] = i * TimeVal;
                        }

                        xarray = xData;
                        SamplePerSec = 0;
                        if (channel == 1)
                        {
                            SamplePerSec = AvgBytesPerSec / SF;
                        }
                        else if (channel == 2)
                        {
                            SamplePerSec = AvgBytesPerSec / SF;
                            SamplePerSec = SamplePerSec / 2;
                        }
                        else
                        {
                            SamplePerSec = AvgBytesPerSec / SF;
                            SamplePerSec = SamplePerSec / channel;
                        }

                        TotalTime = TotalDataBytes / AvgBytesPerSec;
                        try
                        {
                            if (wav.Length > (TotalDataBytes + 44))
                            {
                                try
                                {
                                    SFH = null;
                                    for (int i = TotalDataBytes + 44 + 7; i > TotalDataBytes + 44 + 3; i--)
                                    {
                                        int val = Convert.ToInt32(Parameter[i].ToString());
                                        string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                                        SFH += sval;
                                    }

                                    int TotalOROSDataBytes = Common.HexadecimaltoDecimal(SFH);

                                    Byte[] orosChunk = new byte[TotalOROSDataBytes];
                                    int orosctr = TotalDataBytes + 44 + 8;
                                    for (int i = 0; i < orosChunk.Length; i++)
                                    {
                                        orosChunk[i] = Parameter[orosctr];
                                        orosctr++;
                                    }

                                    sensitivity_CH1 = 0;
                                    sensitivity_CH2 = 0;
                                    label_Ch1 = null;
                                    label_Ch2 = null;
                                    Name_Ch1 = null;
                                    Name_Ch2 = null;
                                    sensitivity_CH1 = BitConverter.ToSingle(orosChunk, 8);
                                    lblSensitivity.Text = sensitivity_CH1.ToString();
                                    divider_CH1 = (3.16 * 1.414 / 32768) / sensitivity_CH1;
                                    if (channel == 2)
                                    {
                                        sensitivity_CH2 = BitConverter.ToSingle(orosChunk, 100);
                                        divider_CH2 = (3.16 * 1.414 / 32768) / sensitivity_CH2;
                                        lblSensitivity.Text =
                                            "CH1 " + Math.Round(sensitivity_CH1, 3).ToString() + ", CH2 " +
                                            Math.Round(sensitivity_CH2, 3).ToString();
                                    }

                                    byte[] NameExtracter = new byte[32];
                                    for (int i = 39, j = 0; j < 32; i++, j++)
                                    {
                                        NameExtracter[j] = orosChunk[i];
                                    }

                                    label_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                                    label_Ch1 = label_Ch1.Trim(new char[] {'\0', ' '});
                                    string[] arrch_label = label_Ch1.Split(new string[] {" "},
                                        StringSplitOptions.RemoveEmptyEntries);
                                    if (arrch_label.Length > 1)
                                    {
                                        label_Ch1 = arrch_label[1].ToString();
                                    }

                                    lblYunit.Text = label_Ch1;
                                    if (channel == 2)
                                    {
                                        NameExtracter = new byte[32];
                                        for (int i = 131, j = 0; j < 32; i++, j++)
                                        {
                                            NameExtracter[j] = orosChunk[i];
                                        }

                                        label_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                                        label_Ch2 = label_Ch2.Trim(new char[] {'\0', ' '});
                                        arrch_label = label_Ch2.Split(new string[] {" "},
                                            StringSplitOptions.RemoveEmptyEntries);
                                        if (arrch_label.Length > 1)
                                        {
                                            label_Ch2 = arrch_label[1].ToString();
                                        }

                                        lblYunit.Text = "CH1 " + label_Ch1 + ", CH2 " + label_Ch2;
                                    }

                                    lblXunit.Text = "sec";

                                    // Amit Jain    17 feb 2010
                                    //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.
                                    NameExtracter = new byte[20];
                                    for (int i = 78, j = 0; j < 20; i++, j++)
                                    {
                                        NameExtracter[j] = orosChunk[i];
                                    }

                                    Name_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                                    Name_Ch1 = Name_Ch1.Trim(new char[] {'\0', ' '});
                                    if (channel == 2)
                                    {
                                        NameExtracter = new byte[20];
                                        for (int i = 170, j = 0; j < 20; i++, j++)
                                        {
                                            NameExtracter[j] = orosChunk[i];
                                        }

                                        Name_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                                        Name_Ch2 = Name_Ch2.Trim(new char[] {'\0', ' '});
                                    }

                                    //end
                                }
                                catch (Exception exx)
                                {
                                    ErrorLog_Class.ErrorLogEntry(exx);
                                    xyz = true;
                                }
                            }
                        }
                        catch (Exception eex)
                        {
                            xyz = true;
                        }
                    }

                    if (xyz)
                    {
                        tempDATA = null;
                        SFH = null;
                        tempICTR = 36;
                        while (SFH != OROS)
                        {
                            if (tempICTR < TotalDataBytes - 100)
                            {
                                try
                                {
                                    for (int i = tempICTR; i < tempICTR + 4; i++)
                                    {
                                        int val = Convert.ToInt32(Parameter[i].ToString());
                                        char c = (char) val;
                                        tempDATA += c.ToString();
                                    }

                                    tempICTR++;
                                    SFH = tempDATA;
                                    tempDATA = null;
                                }

                                catch (Exception ex)
                                {
                                }
                            }
                            else
                            {
                                break;
                            }
                        }

                        if (SFH == OROS)
                        {
                            SFH = null;
                            for (int i = tempICTR + 6; i > (tempICTR + 2); i--) //for (int i = 43; i > 39; i--)
                            {
                                int val = Convert.ToInt32(Parameter[i].ToString());
                                string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                                SFH += sval;
                            }

                            int TotalOROSDataBytes = Common.HexadecimaltoDecimal(SFH);

                            Byte[] orosChunk = new byte[TotalOROSDataBytes];
                            int orosctr = tempICTR + 7; // TotalDataBytes + 36 + 8;
                            for (int i = 0; i < orosChunk.Length; i++)
                            {
                                orosChunk[i] = Parameter[orosctr];
                                orosctr++;
                            }

                            sensitivity_CH1 = 0;
                            sensitivity_CH2 = 0;
                            label_Ch1 = null;
                            label_Ch2 = null;
                            Name_Ch1 = null;
                            Name_Ch2 = null;
                            sensitivity_CH1 = BitConverter.ToSingle(orosChunk, 8);
                            lblSensitivity.Text = sensitivity_CH1.ToString();
                            divider_CH1 = (3.16 * 1.414 / 32768) / sensitivity_CH1;
                            if (channel == 2)
                            {
                                sensitivity_CH2 = BitConverter.ToSingle(orosChunk, 100);
                                divider_CH2 = (3.16 * 1.414 / 32768) / sensitivity_CH2;
                                lblSensitivity.Text =
                                    "CH1 " + Math.Round(sensitivity_CH1, 3).ToString() + ", CH2 " +
                                    Math.Round(sensitivity_CH2, 3).ToString();
                            }

                            byte[] NameExtracter = new byte[32];
                            for (int i = 39, j = 0; j < 32; i++, j++)
                            {
                                NameExtracter[j] = orosChunk[i];
                            }

                            label_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                            label_Ch1 = label_Ch1.Trim(new char[] {'\0', ' '});
                            string[] arrch_label = label_Ch1.Split(new string[] {" "},
                                StringSplitOptions.RemoveEmptyEntries);
                            if (arrch_label.Length > 1)
                            {
                                label_Ch1 = arrch_label[1].ToString();
                            }

                            lblYunit.Text = label_Ch1;
                            if (channel == 2)
                            {
                                NameExtracter = new byte[32];
                                for (int i = 131, j = 0; j < 32; i++, j++)
                                {
                                    NameExtracter[j] = orosChunk[i];
                                }

                                label_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                                label_Ch2 = label_Ch2.Trim(new char[] {'\0', ' '});
                                arrch_label = label_Ch2.Split(new string[] {" "},
                                    StringSplitOptions.RemoveEmptyEntries);
                                if (arrch_label.Length > 1)
                                {
                                    label_Ch2 = arrch_label[1].ToString();
                                }

                                lblYunit.Text = "CH1 " + label_Ch1 + ", CH2 " + label_Ch2;
                            }

                            lblXunit.Text = "sec";

                            // Amit Jain    17 feb 2010
                            //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.
                            NameExtracter = new byte[20];
                            for (int i = 78, j = 0; j < 20; i++, j++)
                            {
                                NameExtracter[j] = orosChunk[i];
                            }

                            Name_Ch1 = Encoding.ASCII.GetString(NameExtracter);
                            Name_Ch1 = Name_Ch1.Trim(new char[] {'\0', ' '});
                            if (channel == 2)
                            {
                                NameExtracter = new byte[20];
                                for (int i = 170, j = 0; j < 20; i++, j++)
                                {
                                    NameExtracter[j] = orosChunk[i];
                                }

                                Name_Ch2 = Encoding.ASCII.GetString(NameExtracter);
                                Name_Ch2 = Name_Ch2.Trim(new char[] {'\0', ' '});
                            }

                            SFH = null;

                            for (int i = orosctr; i < orosctr + 4; i++)
                            {
                                int val = Convert.ToInt32(Parameter[i].ToString());
                                char c = (char) val;
                                SFH += c.ToString();
                            }

                            if (SFH == data)
                            {
                                SFH = null;
                                int datastart = orosctr + 4 - 1;
                                for (int i = datastart + 4; i > datastart; i--)
                                {
                                    int val = Convert.ToInt32(Parameter[i].ToString());
                                    string sval = SingleDigitToDouble(Common.DeciamlToHexadeciaml1(val));
                                    SFH += sval;
                                }

                                TotalDataBytes = Common.HexadecimaltoDecimal(SFH);
                                TimeVal = Convert.ToDouble(1 / Convert.ToDouble(SF));

                                iDataStart = datastart + 4 + 1;
                                xData = new double[ExectDataByteSample];

                                for (int i = 0; i < ExectDataByteSample; i++)
                                {
                                    xData[i] = i * TimeVal;
                                }

                                xarray = xData;
                                SamplePerSec = 0;
                                if (channel == 1)
                                {
                                    SamplePerSec = AvgBytesPerSec / SF;
                                }
                                else if (channel == 2)
                                {
                                    SamplePerSec = AvgBytesPerSec / SF;
                                    SamplePerSec = SamplePerSec / 2;
                                }
                                else
                                {
                                    SamplePerSec = AvgBytesPerSec / SF;
                                    SamplePerSec = SamplePerSec / channel;
                                }

                                TotalTime = TotalDataBytes / AvgBytesPerSec;
                            }
                        }
                    }

                    bShowOrbit = false;
                    if (TotalTime > 0)
                    {
                        short sample;
                        double[] narray = new double[0];
                        BinaryReader fr = new BinaryReader(wav);

                        double[] soundBytes = new double[xData.Length];
                        double[] soundBytes1 = new double[xData.Length];
                        arlYData = new ArrayList();
                        ctr = 0;
                        int abc = 0;
                        fr.BaseStream.Position = iDataStart;
                        if (channel == 1)
                        {
                            dataGridViewX1.Visible = false;
                            expandableSplitter5.Visible = false;
                            int xx = 0;
                            double[] abcd = new double[TotalDataBytes / 2];
                            Fulldata_CH1 = new double[abcd.Length];
                            while (fr.BaseStream.Position - iDataStart < TotalDataBytes
                            ) //while (fr.BaseStream.Position != fr.BaseStream.Length)                            
                            {

                                sample = fr.ReadInt16();
                                abcd[xx] = sample;

                                soundBytes[ctr] = sample;
                                double SampleVal =
                                    Convert.ToDouble(sample * divider_CH1); //SampleVal = SampleVal / 1000;
                                Fulldata_CH1[xx] = SampleVal;
                                if (SampleVal < 100)
                                {
                                    SampleVal = Math.Round(SampleVal, 9);
                                    soundBytes[ctr] = (SampleVal);
                                }
                                else
                                {
                                    SampleVal = Math.Round(SampleVal);
                                    soundBytes[ctr] = (SampleVal);
                                }

                                ctr++;
                                xx++;
                                if (ctr == xData.Length)
                                {
                                    double[] tempYdata = null;
                                    if (!bShowOrbit)
                                    {
                                        double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                                        arlYData.Add(Fmag);
                                        tempYdata = soundBytes;
                                    }
                                    else
                                    {
                                        arlYData.Add(soundBytes);
                                        tempYdata = soundBytes;
                                    }

                                    //hshDrag.Add(trendValCtr, trendValCtr);
                                    ctr = 0;
                                    soundBytes = new double[xData.Length];
                                    {
                                        string source = null;
                                        string Dest = null;
                                        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                        TreeListNode node1 = null;
                                        string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                        string[] ColorCode =
                                        {
                                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951",
                                            "2987746", "4343957", "16777216", "23296", "16711681", "8388652",
                                            "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                                            "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                                        };

                                        try
                                        {

                                            dataGridViewImageColumn1.ValuesAreIcons = false;
                                            {
                                                string s = null;
                                                if (!bShowOrbit)
                                                {
                                                    if (channel == 1)
                                                    {
                                                        s = trendValCtr.ToString();
                                                        s = (ExectTime * (double) trendValCtr).ToString();
                                                    }
                                                    else if (channel == 2 && trendValCtr % 2 == 0)
                                                    {
                                                        abc += 1;
                                                        s = abc.ToString() + " Ch-1";
                                                        s = (ExectTime * (double) trendValCtr).ToString() +
                                                            " Ch-1";
                                                    }
                                                    else if (channel == 2 && trendValCtr % 2 != 0)
                                                    {
                                                        s = abc.ToString() + " Ch-2";
                                                        s = (ExectTime * (double) (trendValCtr - 1))
                                                            .ToString() + " Ch-2";
                                                    }

                                                    if (!Directory.Exists("c:\\vvtemp\\"))
                                                    {
                                                        Directory.CreateDirectory("c:\\vvtemp\\");
                                                    }

                                                    aa = new FileStream("c:\\vvtemp\\" + s + ".txt",
                                                        FileMode.Create, FileAccess.ReadWrite);

                                                    sw = new StreamWriter(aa);
                                                    for (int i = 0; i < xData.Length; i++)
                                                    {
                                                        sw.Write(xData[i] + "/././" + tempYdata[i] + ".....");
                                                    }

                                                    sw.Close();

                                                    int iCCtr = trendValCtr % 30;
                                                    dataGridView2.Rows.Add(1);
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2]
                                                        .Value = s;
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1]
                                                        .Value = "X";
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Value = objlistimg.Images[iCCtr];
                                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3]
                                                        .Tag = ColorCode[iCCtr].ToString();

                                                    trendValCtr++;
                                                }
                                                else
                                                {
                                                    if (channel == 2 && trendValCtr % 2 == 0)
                                                    {

                                                        s = abc.ToString();

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridView2.Rows.Add(1);
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[0].Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[2].Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[1].Value = "X";
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[3].Value = objlistimg.Images[iCCtr];
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[3].Tag = ColorCode[iCCtr].ToString();

                                                    }

                                                    abc += 1;
                                                    trendValCtr++;
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ErrorLog_Class.ErrorLogEntry(ex);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            // Amit Jain    17 feb 2010
                            //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.

                            //For rene
                            //if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
                            //{
                            //    dataGridViewX1.Visible = false;
                            //    expandableSplitter5.Visible = false;
                            //}
                            //else
                            //For rene end
                            {
                                expandableSplitter5.Visible = true;
                                dataGridViewX1.Visible = true;
                                {
                                    dataGridViewX1.Height = panel1.Height / 3;
                                    dataGridView2.Height = panel1.Height / 3;

                                }
                            }
                            //End
                            int xx = 0;
                            int yy = 0;
                            double[] abcd = new double[TotalDataBytes / 4];
                            Fulldata_CH1 = new double[abcd.Length];
                            double[] abcd1 = new double[TotalDataBytes / 4];
                            Fulldata_CH2 = new double[abcd1.Length];
                            int timectr = 0;
                            while (fr.BaseStream.Position - iDataStart < TotalDataBytes
                            ) //while (fr.BaseStream.Position != fr.BaseStream.Length)
                            {

                                sample = fr.ReadInt16();

                                double
                                    SampleVal =
                                        0; // Convert.ToDouble(sample * divider); //SampleVal = SampleVal / 1000;
                                if (xx % 2 == 0)
                                {
                                    SampleVal = Convert.ToDouble(sample * divider_CH1);
                                    if (SampleVal < 100)
                                    {
                                        SampleVal = Math.Round(SampleVal, 9);
                                        soundBytes[ctr] = (SampleVal);
                                    }
                                    else
                                    {
                                        SampleVal = Math.Round(SampleVal);
                                        soundBytes[ctr] = (SampleVal);
                                    }

                                    abcd[yy] = sample;
                                    Fulldata_CH1[yy] = SampleVal;
                                    xx++;

                                }
                                else
                                {
                                    SampleVal = Convert.ToDouble(sample * divider_CH2);
                                    if (SampleVal < 100)
                                    {
                                        SampleVal = Math.Round(SampleVal, 9);
                                        soundBytes1[ctr] = (SampleVal);
                                    }
                                    else
                                    {
                                        SampleVal = Math.Round(SampleVal);
                                        soundBytes1[ctr] = (SampleVal);
                                    }

                                    abcd1[yy] = sample;
                                    Fulldata_CH2[yy] = SampleVal;
                                    ctr++;
                                    xx++;
                                    yy++;
                                }

                                if (ctr == xData.Length)
                                {
                                    double[] tempYdata = null;
                                    if (!bShowOrbit)
                                    {
                                        double[] Fmag = ConvertToFFT(soundBytes, xData, iLastFrequency);
                                        arlYData.Add(Fmag);
                                        tempYdata = soundBytes;
                                    }
                                    else
                                    {
                                        arlYData.Add(soundBytes);
                                        tempYdata = soundBytes;
                                    }

                                    //hshDrag.Add(trendValCtr, trendValCtr);
                                    ctr = 0;
                                    soundBytes = new double[xData.Length];


                                    {
                                        string source = null;
                                        string Dest = null;
                                        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                                        TreeListNode node1 = null;
                                        string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                                        string[] ColorCode =
                                        {
                                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951",
                                            "2987746", "4343957", "16777216", "23296", "16711681", "8388652",
                                            "6972", "16776961", "7722014", "32944", "7667573", "7357301",
                                            "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                                        };

                                        try
                                        {

                                            dataGridViewImageColumn1.ValuesAreIcons = false;
                                            {
                                                string s = null;
                                                if (!bShowOrbit)
                                                {
                                                    //if (channel == 2 && trendValCtr % 2 == 0)
                                                    {
                                                        abc += 1;
                                                        s = abc.ToString() + " Ch-1";
                                                        s = (ExectTime * (double) timectr).ToString() + " Ch-1";

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridView2.Rows.Add(1);
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[0].Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[2].Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[1].Value = "X";
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[3].Value = objlistimg.Images[iCCtr];
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[3].Tag = ColorCode[iCCtr].ToString();

                                                        trendValCtr++;

                                                        if (!Directory.Exists("c:\\vvtemp\\"))
                                                        {
                                                            Directory.CreateDirectory("c:\\vvtemp\\");
                                                        }

                                                        aa = new FileStream("c:\\vvtemp\\" + s + ".txt",
                                                            FileMode.Create, FileAccess.ReadWrite);

                                                        sw = new StreamWriter(aa);
                                                        for (int i = 0; i < xData.Length; i++)
                                                        {
                                                            sw.Write(
                                                                xData[i] + "/././" + tempYdata[i] + ".....");
                                                        }

                                                        sw.Close();
                                                    }
                                                    // Amit Jain    17 feb 2010
                                                    //Generate the graph of channel 1.  Will not show the graph of tacho. Will act as single channel in the graphical mode.

                                                    //For rene
                                                    //if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
                                                    //{
                                                    //    s = abc.ToString() + " Ch-2";
                                                    //    s = (ExectTime * (double)(timectr)).ToString() + " Ch-2";
                                                    //    int iCCtr = trendValCtr % 30;
                                                    //    aa = new FileStream("c:\\vvtemp\\" + s + ".txt", FileMode.Create, FileAccess.ReadWrite);

                                                    //    sw = new StreamWriter(aa);
                                                    //    for (int i = 0; i < xData.Length; i++)
                                                    //    {
                                                    //        sw.Write(xData[i] + "/././" + soundBytes1[i] + ".....");
                                                    //    }
                                                    //    sw.Close();

                                                    //    if (Name_Ch2 == "Tacho" || label_Ch2.Contains("Tacho"))
                                                    //    {
                                                    //        arlTachoData.Add(s);
                                                    //    }
                                                    //}
                                                    //else
                                                    //For Rene ends
                                                    {
                                                        //end
                                                        s = abc.ToString() + " Ch-2";
                                                        s = (ExectTime * (double) (timectr)).ToString() +
                                                            " Ch-2";

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridViewX1.Rows.Add(1);
                                                        dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2]
                                                            .Cells[0].Value = s;
                                                        dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2]
                                                            .Cells[2].Value = s;
                                                        dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2]
                                                            .Cells[1].Value = "X";
                                                        dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2]
                                                            .Cells[3].Value = objlistimg.Images[iCCtr];
                                                        dataGridViewX1.Rows[dataGridViewX1.Rows.Count - 2]
                                                            .Cells[3].Tag = ColorCode[iCCtr].ToString();

                                                        trendValCtr++;

                                                        aa = new FileStream("c:\\vvtemp\\" + s + ".txt",
                                                            FileMode.Create, FileAccess.ReadWrite);

                                                        sw = new StreamWriter(aa);
                                                        for (int i = 0; i < xData.Length; i++)
                                                        {
                                                            sw.Write(xData[i] + "/././" + soundBytes1[i] +
                                                                     ".....");
                                                        }

                                                        sw.Close();
                                                    }
                                                    soundBytes1 = new double[xData.Length];
                                                    timectr++;
                                                }
                                                else
                                                {
                                                    if (channel == 2 && trendValCtr % 2 == 0)
                                                    {

                                                        s = abc.ToString();

                                                        int iCCtr = trendValCtr % 30;
                                                        dataGridView2.Rows.Add(1);
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[0].Value = s;

                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[2].Value = s;
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[1].Value = "X";
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[3].Value = objlistimg.Images[iCCtr];
                                                        dataGridView2.Rows[dataGridView2.Rows.Count - 2]
                                                            .Cells[3].Tag = ColorCode[iCCtr].ToString();

                                                    }

                                                    abc += 1;
                                                    trendValCtr++;
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ErrorLog_Class.ErrorLogEntry(ex);
                                        }
                                    }
                                }
                            }

                            double and = findHighestValue(abcd);
                        }
                    }
                    else
                    {
                        MessageBoxEx.Show("Not Enough Sample to Draw");
                        bWave = !bWave;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private void DrawWavInitial(TreeListNode treeListNode, bool New)
        {
            try
            {
                //lblGrphUnitX.Text = "X Unit : sec";
                //if (label_Ch1 != null)
                //{
                //    lblGraphUnitY.Text = "Y Unit : " + label_Ch1.ToString();
                //}
                //lblXAxis.Text = "Date : " + dateofwav.ToString();
                //int xlength = (TotalDataBytes / SamplePerSec) / channel;

                //double[] xData = new double[xlength];

                //for (int i = 0; i < xlength; i++)
                //{
                //    xData[i] = i * TimeVal;
                //}
                //xarray = xData;
                //FullTime_CH2 = xData;
                if (Channel1GraphToDraw)
                {
                    lblGrphUnitX.Text = "X Unit : sec";
                    if (label_Ch1 != null)
                    {
                        lblGraphUnitY.Text = "Y Unit : " + label_Ch1.ToString();
                    }

                    lblXAxis.Text = "Date : " + dateofwav.ToString();
                    int xlength = (TotalDataBytes / SamplePerSec) / channel;

                    double[] xData = new double[xlength];

                    for (int i = 0; i < xlength; i++)
                    {
                        xData[i] = i * TimeVal;
                    }

                    xarray = xData;
                    FullTime_CH2 = xData;

                    string source = null;
                    string Dest = null;
                    TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                    TreeListNode node1 = null;
                    string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                    string[] ColorCode =
                    {
                        "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                        "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573",
                        "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476",
                        "3318692", "29696", "6737204", "16728065", "744352"
                    };

                    try
                    {


                        Channel1WavX = xData;
                        Channel1WavY = Fulldata_CH1;
                        if (channel == 2)
                        {
                            Channel2WavX = Channel1WavX;
                            Channel2WavY = Fulldata_CH2;
                        }

                        x = xData;
                        y = Fulldata_CH1;
                        NullCursorBools();
                        GphCtr = 0;
                        ArrayList _arlst = new ArrayList();
                        _arlst.Add(x);
                        _arlst.Add(y);
                        CurrentXLabel = "Sec";
                        CurrentYLabel = label_Ch1.ToString();
                        xarrayNew = x;
                        yarrayNew = y;
                        DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);
                        //DrawLineGraphs((int)_arlst.Count / 2, _arlst);
                        //CreatGPWithVariableForDi();

                    }
                    catch (Exception ex)
                    {
                        ErrorLog_Class.ErrorLogEntry(ex);

                    }
                }
                else
                {
                    lblGrphUnitX.Text = "X Unit : sec";
                    if (label_Ch2 != null)
                    {
                        lblGraphUnitY.Text = "Y Unit : " + label_Ch2.ToString();
                    }

                    lblXAxis.Text = "Date : " + dateofwav.ToString();
                    int xlength = (TotalDataBytes / SamplePerSec) / channel;

                    double[] xData = new double[xlength];

                    for (int i = 0; i < xlength; i++)
                    {
                        xData[i] = i * TimeVal;
                    }

                    xarray = xData;
                    FullTime_CH2 = xData;


                    Channel1WavX = xData;
                    Channel1WavY = Fulldata_CH1;

                    Channel2WavX = Channel1WavX;
                    Channel2WavY = Fulldata_CH2;

                    {
                        string source = null;
                        string Dest = null;
                        TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                        TreeListNode node1 = null;
                        string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                        string[] ColorCode =
                        {
                            "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                            "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944",
                            "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161",
                            "38476", "3318692", "29696", "6737204", "16728065", "744352"
                        };

                        try
                        {

                            x = xData;
                            y = Fulldata_CH2;
                            NullCursorBools();
                            GphCtr = 0;

                            CurrentXLabel = "Sec";
                            CurrentYLabel = label_Ch2.ToString();
                            xarrayNew = x;
                            yarrayNew = y;
                            DrawLineGraphs(xarrayNew, yarrayNew, CurrentXLabel, CurrentYLabel);

                            //CreatGPWithVariableForDi();

                        }
                        catch (Exception ex)
                        {
                            ErrorLog_Class.ErrorLogEntry(ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void ReadTXTfileNew(string Dest, bool Exact)
        {
            xarrayNew = new double[0];
            yarrayNew = new double[0];
            string data = null;
            try
            {
                string[] sarrpath = null;
                if (!Exact)
                {
                    sarrpath = Dest.Split(new string[] {"\\"}, StringSplitOptions.RemoveEmptyEntries);
                    aa = new FileStream("c:\\vvtemp\\" + sarrpath[sarrpath.Length - 1], FileMode.Open, FileAccess.Read);
                    DestbeforeTrend = "c:\\vvtemp\\" + sarrpath[sarrpath.Length - 1];
                }
                else
                {

                    aa = new FileStream(Dest, FileMode.Open, FileAccess.Read);
                    DestbeforeTrend = Dest;
                }

                sr = new StreamReader(aa);
                data = sr.ReadToEnd();
                sr.Close();
                string[] splitedData = data.Split(new string[] {"....."}, StringSplitOptions.RemoveEmptyEntries);
                xarrayNew = new double[splitedData.Length];
                yarrayNew = new double[splitedData.Length];
                for (int i = 0; i < splitedData.Length; i++)
                {
                    string[] splittedXYData = splitedData[i].ToString()
                        .Split(new string[] {"/././"}, StringSplitOptions.RemoveEmptyEntries);
                    xarrayNew[i] = Convert.ToDouble(splittedXYData[0]);
                    yarrayNew[i] = Convert.ToDouble(splittedXYData[1]);
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                sr = null;
                sw = null;
            }
        }

        private void SetButtons(int TAG)
        {
            try
            {
                bbPhase.Visibility = BarItemVisibility.Never;
                switch (TAG)
                {
                    case 0:
                    {
                        SetIsTrend = false;
                        bbTrend.Enabled = true;
                        bbOctave.Enabled = true;
                        bbCepstrum.Enabled = true;
                        bbChangeXUnit.Enabled = true;
                        bbChangeYUnit.Enabled = true;

                        bbWaterfall.Enabled = true;
                        bbArea.Enabled = true;
                        bbConvertToFFT.Enabled = true;
                        bbBand.Enabled = true;
                        bbFaultFreq.Enabled = true;
                        bbBearingFF.Enabled = true;
                        bbRPM.Enabled = true;
                        rpgCursors.Visible = true;
                        break;
                    }
                    case 1:
                    //{
                    //    IsTrend = false;
                    //    bbTrend.Enabled = false;
                    //    bbOctave.Enabled = false;

                    //    bbWaterfall.Enabled = false;
                    //    bbArea.Enabled = false;
                    //    bbConvertToFFT.Enabled = false;
                    //    bbBand.Enabled = false;
                    //    bbFaultFreq.Enabled = false;
                    //    bbBearingFF.Enabled = false;
                    //    bbRPM.Enabled = false;
                    //    //rpgCursors.Visible = true;

                    //    bbCepstrum.Enabled = false;
                    //    bbChangeXUnit.Enabled = false;
                    //    bbChangeYUnit.Enabled = false;
                    //    break;
                    //}
                    case 2:
                    {
                        IsTrend = false;
                        bbTrend.Enabled = false;
                        bbOctave.Enabled = false;

                        bbWaterfall.Enabled = false;
                        bbArea.Enabled = false;
                        bbConvertToFFT.Enabled = false;
                        bbBand.Enabled = false;
                        bbFaultFreq.Enabled = false;
                        bbBearingFF.Enabled = false;
                        bbRPM.Enabled = false;
                        //rpgCursors.Visible = false;

                        bbCepstrum.Enabled = false;
                        bbChangeXUnit.Enabled = false;
                        bbChangeYUnit.Enabled = false;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void SetButtons(string TAG)
        {
            try
            {
                switch (TAG)
                {
                    case "DATFile":
                    {
                        IsTrend = true;
                        bbTrend.Enabled = false;
                        bbConvertToFFT.Enabled = false;
                        bbOctave.Enabled = false;
                        bbCepstrum.Enabled = false;
                        bbChangeXUnit.Enabled = false;
                        bbChangeYUnit.Enabled = false;
                        bbOriginal.Enabled = false; //ordertracking
                        break;
                    }
                    case "WAVFile":
                    {
                        IsTrend = true;
                        bbTrend.Enabled = false;
                        bbOctave.Enabled = false;
                        bbCepstrum.Enabled = false;
                        bbChangeXUnit.Enabled = false;
                        bbChangeYUnit.Enabled = true; // false; done for wave file conversion to different units
                        bbOriginal.Enabled = false; //ordertracking
                        break;
                    }
                    case "CSVFile":
                    {
                        SetIsTrend = false;
                        bbTrend.Enabled = true;
                        bbOctave.Enabled = true;
                        bbCepstrum.Enabled = true;
                        bbChangeXUnit.Enabled = true;
                        bbChangeYUnit.Enabled = true;
                        bbOriginal.Enabled = true; //ordertracking
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void GetBFFData()
        {
            int selection = 0;
            int iBRF = 0;
            int iBDIR = 0;
            int iBDOR = 0;
            int iBCA = 0;
            int iBDRE = 0;
            int iBNRE = 0;
            int Manufacturar = 0;
            int BearingNumber = 0;
            try
            {
                string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                if (File.Exists(sErrorLogPath + "\\BFF.XML"))
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    m_xdDocument.Load(sErrorLogPath + "\\BFF.XML");
                    string sXPath = "//Band/File";
                    XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                    if (xnFile != null)
                    {
                        XmlNode xnValueNode = xnFile.SelectSingleNode("Values");
                        iBRF = Convert.ToInt32(xnValueNode.Attributes["BRF"].Value);
                        iBDIR = Convert.ToInt32(xnValueNode.Attributes["BDIR"].Value);
                        iBDOR = Convert.ToInt32(xnValueNode.Attributes["BDOR"].Value);
                        iBCA = Convert.ToInt32(xnValueNode.Attributes["BCA"].Value);
                        iBDRE = Convert.ToInt32(xnValueNode.Attributes["BDRE"].Value);
                        iBNRE = Convert.ToInt32(xnValueNode.Attributes["BNRE"].Value);
                        try
                        {
                            selection = Convert.ToInt32(xnValueNode.Attributes["Selected"].Value);
                            Manufacturar = Convert.ToInt32(xnValueNode.Attributes["Manufacturar"].Value.ToString());
                            BearingNumber = Convert.ToInt32(xnValueNode.Attributes["BearingNumber"].Value.ToString());
                            PreviousManufacturer = null;
                        }
                        catch
                        {
                        }
                    }
                }

                txtxBRF.Text = iBRF.ToString();
                txtxBDIR.Text = iBDIR.ToString();
                txtxBDOR.Text = iBDOR.ToString();
                txtxBCA.Text = iBCA.ToString();
                txtxBDRE.Text = iBDRE.ToString();
                txtxBNRE.Text = iBNRE.ToString();
                try
                {
                    if (selection == 0)
                    {
                        rbPhysicalDimensions.Checked = true;
                        if (iBRF == 0 && iBDIR == 0 && iBDOR == 0 && iBCA == 0 && iBDRE == 0 && iBNRE == 0)
                        {
                        }
                        else
                        {
                            btnxCalculateFreq_Click(null, null);
                        }
                    }
                    else
                    {
                        rbBearingNumber.Checked = true;
                    }

                    cmbbxManufacturer.SelectedIndex = Manufacturar;
                    cmbbxBearingNumber.SelectedIndex = BearingNumber;
                }
                catch
                {
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void GetRPMData()
        {
            try
            {
                txtxRPM.Text = "1";
                txtxPulse.Text = "1";
                string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                if (File.Exists(sErrorLogPath + "\\RPM.XML"))
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    m_xdDocument.Load(sErrorLogPath + "\\RPM.XML");
                    string sXPath = "//Band/File";
                    XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                    if (xnFile != null)
                    {
                        XmlNode xnValueNode = xnFile.SelectSingleNode("Values");
                        txtxRPM.Text = xnValueNode.Attributes["Freq"].Value;
                        txtxPulse.Text = xnValueNode.Attributes["Value"].Value;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void GetFaultFreq()
        {
            try
            {
                dgvDiFF.Rows.Clear();

                while (dgvDiFF.Rows.Count > 1)
                {
                    dgvDiFF.Rows.RemoveAt(0);
                }

                string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                if (File.Exists(sErrorLogPath + "\\FF.XML"))
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    m_xdDocument.Load(sErrorLogPath + "\\FF.XML");
                    string sXPath = "//Band/File";

                    XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                    if (xnFile != null)
                    {
                        XmlNodeList xnlValueNodes = xnFile.SelectNodes("Values");
                        foreach (XmlNode xnValueNode in xnlValueNodes)
                        {
                            dgvDiFF.Rows.Add(1);
                            {
                                dgvDiFF.Rows[dgvDiFF.Rows.Count - 2].Cells[0].Value =
                                    xnValueNode.Attributes["Freq"].Value;
                                dgvDiFF.Rows[dgvDiFF.Rows.Count - 2].Cells[1].Value =
                                    xnValueNode.Attributes["Value"].Value;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void GetBandData()
        {
            try
            {
                dgvDiBA.Rows.Clear();
                while (dgvDiBA.Rows.Count > 1)
                {
                    dgvDiBA.Rows.RemoveAt(0);
                }

                string sFilepath = GetPath(trlPlantMangerComponents.FocusedNode);
                if (File.Exists(sErrorLogPath + "\\BA.XML"))
                {
                    XmlDocument m_xdDocument = new XmlDocument();
                    m_xdDocument.Load(sErrorLogPath + "\\BA.XML");
                    string sXPath = "//Band/File";
                    XmlNode xnFile = m_xdDocument.SelectSingleNode("//Band/File[@Path='" + sFilepath + "']");
                    if (xnFile != null)
                    {
                        XmlNodeList xnlValueNodes = xnFile.SelectNodes("Values");
                        foreach (XmlNode xnValueNode in xnlValueNodes)
                        {
                            dgvDiBA.Rows.Add(1);
                            {
                                dgvDiBA.Rows[dgvDiBA.Rows.Count - 2].Cells[0].Value =
                                    xnValueNode.Attributes["Freq"].Value;
                                dgvDiBA.Rows[dgvDiBA.Rows.Count - 2].Cells[1].Value =
                                    xnValueNode.Attributes["ValueHigh"].Value;
                                dgvDiBA.Rows[dgvDiBA.Rows.Count - 2].Cells[2].Value =
                                    xnValueNode.Attributes["ValueLow"].Value;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void TrendingButtons(bool ON)
        {
            try
            {
                bbOctave.Enabled = !ON;
                bbWaterfall.Enabled = !ON;
                bbCepstrum.Enabled = !ON;
                bbArea.Enabled = !ON;
                bbOriginal.Enabled = !ON; //ordertracking
                if (IsBandAreaPlot)
                {
                    BandAlarmButtons(IsBandAreaPlot);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void WaterFallButtons(bool ON)
        {
            try
            {
                if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                {
                    bbTrend.Enabled = !ON;
                    bbOctave.Enabled = !ON;
                    bbCepstrum.Enabled = !ON;
                    bbOriginal.Enabled = !ON; //ordertracking
                }

                if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                {
                    trlPlantMangerComponents.Enabled = !ON;
                    bbCepstrum.Enabled = false;
                }

                bbArea.Enabled = !ON;


                bbConvertToFFT.Enabled = false; // !ON;
                if (IsBandAreaPlot)
                {
                    BandAlarmButtons(IsBandAreaPlot);
                }

                if (ON)
                {
                    cmbCurSors.Items.Add((object) "Line");
                    repositoryItemComboBox1.Items.Add((object) "Line");
                }
                else
                {
                    cmbCurSors.Items.Remove((object) "Line");
                    repositoryItemComboBox1.Items.Remove((object) "Line");
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void OctaveButtons(bool ON)
        {
            try
            {
                bbArea.Enabled = !ON;
                bbTrend.Enabled = !ON;
                bbWaterfall.Enabled = !ON;
                bbCepstrum.Enabled = !ON;
                bbConvertToFFT.Enabled = !ON;
                bbOriginal.Enabled = !ON; //ordertracking
                if (bConvertToFFT)
                {
                    FFTConversionButtons(bConvertToFFT);
                }

                if (IsBandAreaPlot)
                {
                    BandAlarmButtons(IsBandAreaPlot);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void FFTConversionButtons(bool ON)
        {
            try
            {
                if (ON)
                {
                    setCursorCombo("Power");
                }
                else
                {
                    bool IsTimeGraph = CheckForTimeData(yarrayNew);
                    if (IsTimeGraph)
                    {
                        setCursorCombo("Time");
                    }
                    else
                    {
                        setCursorCombo("FFT");
                    }

                }

                if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                {
                    bbTrend.Enabled = !ON;
                }

                bbArea.Enabled = !ON;
                bbWaterfall.Enabled = !ON;
                bbCrestFactorTrend.Enabled = !ON;
                if (SetIsTrend && trlPlantMangerComponents.FocusedNode.Tag.ToString() == "CSVFile")
                {
                    TrendingButtons(SetIsTrend);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void CepstrumButtons(bool ON)
        {
            try
            {
                bbTrend.Enabled = !ON;
                bbWaterfall.Enabled = !ON;
                bbOctave.Enabled = !ON;
                bbConvertToFFT.Enabled = !ON;
                bbOriginal.Enabled = !ON; //ordertracking
                if (bConvertToFFT)
                {
                    FFTConversionButtons(bConvertToFFT);
                }

                if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                {
                    bbOriginal.Enabled = false;
                    bbOctave.Enabled = false;
                    bbTrend.Enabled = false;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void NewItemClickSettings()
        {
            try
            {
                if (IsOctave)
                {
                    bbOctave_ItemClick(null, null);
                }

                if (cepstrum)
                {
                    bbCepstrum_ItemClick(null, null);
                }

                if (bConvertToFFT)
                {
                    bbConvertToFFT_ItemClick(null, null);
                }

            }
            catch (Exception ex)
            {
            }
        }

        private ArrayList GetBearingFaultFrequencies()
        {
            ArrayList BearingFaultFrequencies = new ArrayList();
            try
            {
                double NumberOfBalls = Convert.ToDouble(txtxBNRE.Text.ToString());
                double BearingPitchDiameter =
                    Convert.ToDouble(((Convert.ToDouble(txtxBDIR.Text.ToString()) +
                                       Convert.ToDouble(txtxBDOR.Text.ToString())) / 2));
                double RollingElementDiameter = Convert.ToDouble(txtxBDRE.Text.ToString());
                double ContactAngle = Convert.ToDouble(txtxBCA.Text.ToString());
                double ShaftSpeed = 0;

                if (chkBFFOverride.Checked)
                {
                    ShaftSpeed = Convert.ToDouble(_LineGraph._BearingFFOverridenRPM);
                    if (CurrentXLabel == "Hz")
                    {
                        ShaftSpeed = ShaftSpeed * 60;
                    }
                }
                else
                {
                    ShaftSpeed = Convert.ToDouble(txtxRPM.Text.ToString()) /
                                 Convert.ToDouble(txtxPulse.Text.ToString());
                }


                if (rbPhysicalDimensions.Checked)
                {
                    BearingFaultFrequencies = _BFFInterface.CalculateBearingFaultFrequencies(ShaftSpeed, NumberOfBalls,
                        BearingPitchDiameter, RollingElementDiameter, ContactAngle);
                }
                else
                {
                    BearingFaultFrequencies.Add("BPFO = " + Convert.ToString(
                                                    Convert.ToDouble(
                                                        Convert.ToDouble(tbBPFO.Text.ToString()) * ShaftSpeed) / 60));
                    BearingFaultFrequencies.Add("BPFI = " + Convert.ToString(
                                                    Convert.ToDouble(
                                                        Convert.ToDouble(tbBPFI.Text.ToString()) * ShaftSpeed) / 60));
                    BearingFaultFrequencies.Add(
                        "BSF = " + Convert.ToString(
                            Convert.ToDouble(Convert.ToDouble(tbBSF.Text.ToString()) * ShaftSpeed) / 60));
                    BearingFaultFrequencies.Add(
                        "FTF = " + Convert.ToString(
                            Convert.ToDouble(Convert.ToDouble(tbFTF.Text.ToString()) * ShaftSpeed) / 60));
                }

                for (int i = 0; i < 4; i++)
                {
                    string[] ExtractFreqSingle = BearingFaultFrequencies[i].ToString()
                        .Split(new string[] {"="}, StringSplitOptions.RemoveEmptyEntries);
                    double Comparator = Convert.ToDouble(ExtractFreqSingle[1]);

                    double dcomp = Comparator;
                    for (int j = 0; j < iBearingHarmonics - 1; j++)
                    {
                        Comparator = dcomp * (j + 2);
                        BearingFaultFrequencies.Add(ExtractFreqSingle[0].ToString() + Convert.ToString(j + 2) + "x =" +
                                                    Comparator.ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return BearingFaultFrequencies;
        }

        private void DataGridSettingForBandAlarm(bool IsBandAlarm)
        {
            try
            {
                if (IsBandAlarm)
                {
                    ClearCmbCursor();
                    ArrayList CursorItems = new ArrayList();
                    CursorItems.Add("Select Cursor");
                    AddToCmbCursor(CursorItems);
                    string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                    CmbCursorSelectedItem(SelectedCursorItem);

                    dataGridView1.Rows.Clear();

                    for (int i = 0; i < dataGridView1.Columns.Count;)
                    {
                        dataGridView1.Columns.RemoveAt(0);
                    }

                    for (int i = 0; i < 5; i++)
                    {
                        switch (i)
                        {
                            case 0:
                            {
                                dataGridView1.Columns.Add("ColXValue", "X Value(Highest Peak)");
                                break;
                            }
                            case 1:
                            {
                                dataGridView1.Columns.Add("ColYValue", "Y Value(Highest Peak)");
                                break;
                            }
                            case 2:
                            {
                                dataGridView1.Columns.Add("ColBandHighValue", "HighValue");

                                break;
                            }
                            case 3:
                            {
                                dataGridView1.Columns.Add("ColBandLowerValue", "LowValue");
                                break;
                            }
                            case 4:
                            {
                                dataGridView1.Columns.Add("ColBandValue", "BandValue(Hz)");
                                break;
                            }
                        }

                    }

                    string HighAlValue = null;
                    string LowAlValue = null;
                    string Freq = null;
                    string prevFreq = null;
                    string displayed = null;
                    double HighestPeakinArea = 0;
                    double HighestPeakinAreaAt = 0;
                    double TempPeakinArea = 0;
                    if (BndAlrmsFreq.Length > 0)
                    {
                        dataGridView1.Rows.Add(BndAlrmsFreq.Length);

                        for (int i = 0; i < BndAlrmsFreq.Length; i++)
                        {
                            ArrayList BandValuetoDisplay = new ArrayList();
                            Freq = BndAlrmsFreq[i].ToString();
                            if (CurrentXLabel.ToString().Contains("CPM"))
                            {
                                Freq = (Convert.ToDouble(Freq) * 60).ToString();
                            }

                            HighAlValue = BndAlrmsHigh[i].ToString();
                            LowAlValue = BndAlrmsLow[i].ToString();
                            if (i == 0)
                            {
                                prevFreq = "0";
                            }
                            else
                            {
                                prevFreq = BndAlrmsFreq[i - 1].ToString();
                                if (CurrentXLabel.ToString().Contains("CPM"))
                                {
                                    prevFreq = (Convert.ToDouble(prevFreq) * 60).ToString();
                                }
                            }

                            TempPeakinArea = 0;
                            HighestPeakinArea = 0;
                            HighestPeakinAreaAt = 0;

                            for (int j = 0; j < yarrayNew.Length; j++)
                            {
                                if (Convert.ToDouble(xarrayNew[j]) >= Convert.ToDouble(prevFreq))
                                {
                                    if (Convert.ToDouble(xarrayNew[j]) <= Convert.ToDouble(Freq) &&
                                        Convert.ToDouble(xarrayNew[j]) <=
                                        Convert.ToDouble(xarrayNew[xarrayNew.Length - 2]))
                                    {
                                        if (Convert.ToDouble(yarrayNew[j]) > Convert.ToDouble(LowAlValue))
                                        {


                                            TempPeakinArea = Convert.ToDouble(yarrayNew[j]);
                                            if (j < yarrayNew.Length - 1)
                                                if (TempPeakinArea > Convert.ToDouble(yarrayNew[j - 1]) &&
                                                    TempPeakinArea > Convert.ToDouble(yarrayNew[j + 1]))

                                                    if (TempPeakinArea > HighestPeakinArea)
                                                    {
                                                        HighestPeakinArea = TempPeakinArea;
                                                        HighestPeakinAreaAt = Convert.ToDouble(xarrayNew[j]);
                                                    }

                                            if (i == 0)
                                            {
                                                prevFreq = "0";
                                            }
                                            else
                                            {
                                                prevFreq = BndAlrmsFreq[i - 1].ToString();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (HighestPeakinAreaAt != 0.0)
                                        {
                                            BandValuetoDisplay.Add(
                                                HighestPeakinAreaAt.ToString() + "//" + HighestPeakinArea.ToString());
                                        }

                                        break;
                                    }
                                }
                            }

                            if (BandValuetoDisplay.Count > 0)
                            {
                                string[] bandxy = BandValuetoDisplay[0].ToString().Split(new string[] {"//"},
                                    StringSplitOptions.RemoveEmptyEntries);

                                dataGridView1.Rows[i].Cells[0].Value = bandxy[0];
                                dataGridView1.Rows[i].Cells[1].Value = bandxy[1];
                            }

                            dataGridView1.Rows[i].Cells[2].Value = BndAlrmsHigh[i].ToString();
                            dataGridView1.Rows[i].Cells[3].Value = BndAlrmsLow[i].ToString();
                            dataGridView1.Rows[i].Cells[4].Value = BndAlrmsFreq[i].ToString();
                        }
                    }
                }
                else
                {
                    dataGridView1.Rows.Clear();
                    bool IsTimeGraph = CheckForTimeData(yarrayNew);
                    if (IsTimeGraph)
                    {
                        setCursorCombo("Time");
                    }
                    else
                    {
                        setCursorCombo("FFT");
                    }

                    for (int i = 0; i < dataGridView1.Columns.Count;)
                    {
                        dataGridView1.Columns.RemoveAt(0);
                    }

                    for (int i = 0; i < 2; i++)
                    {
                        switch (i)
                        {
                            case 0:
                            {
                                dataGridView1.Columns.Add("ColXValue", "X Value");
                                break;
                            }
                            case 1:
                            {
                                dataGridView1.Columns.Add("ColYValue", "Y Value");
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private string[] GetBandAlarmData()
        {
            ArrayList BndAlrms = new ArrayList();
            BndAlrmsHigh = new string[dgvDiBA.RowCount - 1];
            BndAlrmsLow = new string[dgvDiBA.RowCount - 1];
            BndAlrmsFreq = new string[dgvDiBA.RowCount - 1];
            try
            {
                BandAlarmsValues = new string[dgvDiBA.RowCount - 1];
                for (int i = 0; i < dgvDiBA.RowCount - 1; i++)
                {
                    BandAlarmsValues[i] = dgvDiBA.Rows[i].Cells[0].Value.ToString() + "!" +
                                          dgvDiBA.Rows[i].Cells[1].Value.ToString() + "@" +
                                          dgvDiBA.Rows[i].Cells[2].Value.ToString();
                    BndAlrms.Add(dgvDiBA.Rows[i].Cells[0].Value.ToString() + "!" +
                                 dgvDiBA.Rows[i].Cells[1].Value.ToString() + "@" +
                                 dgvDiBA.Rows[i].Cells[2].Value.ToString());

                    BndAlrmsFreq[i] = dgvDiBA.Rows[i].Cells[0].Value.ToString();
                    BndAlrmsHigh[i] = dgvDiBA.Rows[i].Cells[1].Value.ToString();
                    BndAlrmsLow[i] = dgvDiBA.Rows[i].Cells[2].Value.ToString();
                }
            }
            catch (Exception ex)
            {
            }

            return BandAlarmsValues;
        }

        private int[] FindAllPeaks()
        {
            Peeks = new int[0];
            Peeks1 = new double[0];
            double Fst = 0;
            double Scnd = 0;
            double Thrd = 0;
            try
            {
                for (int i = 2; i < y.Length; i++)
                {
                    Fst = y[i - 2];
                    Scnd = y[i - 1];
                    Thrd = y[i];

                    if (Fst < Scnd && Scnd > Thrd)
                    {
                        //Array.Resize(ref Peeks, Peeks.Length + 1);
                        _ResizeArray.IncreaseArrayInt(ref Peeks, 1);
                        Peeks[Peeks.Length - 1] = i - 1;
                        //Array.Resize(ref Peeks1, Peeks1.Length + 1);
                        _ResizeArray.IncreaseArrayDouble(ref Peeks1, 1);
                        Peeks1[Peeks1.Length - 1] = Pts[i - 1].X;
                        i++;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
            }

            return Peeks;
        }

        private void CopyValues(double[] XValsToCopy, double[] YValsToCopy)
        {
            StringBuilder ydata = new StringBuilder();
            try
            {

                if (IsTrend || IsWaterfall)
                {
                    if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                    {
                        ydata.Append(trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString() + "\n");
                    }

                    if (!string.IsNullOrEmpty(sDatagridCaption))
                    {
                        ydata.Append(sDatagridCaption + "\n");
                    }

                    //ydata.Append(lblYAxis.Text + "\n");
                    //ydata.Append(sDatagridCaption.ToString() + "\n");
                    //ydata.Append(sXunit + "\t" + lblGraphUnitY.Text.ToString() + "\n");
                }
                else
                {
                    ydata.Append(trlPlantMangerComponents.FocusedNode.GetDisplayText(0).ToString() + "\n");
                    ydata.Append("Date/Time" + "\t" + lblDate.Text.ToString() + "\n");
                    ydata.Append("Overall" + "\t" + lblOverall.Text.ToString() + "\n");

                    //ydata.Append(sXunit + "\t" + _LineGraph._YLabel.ToString() + "\n");
                }

                ydata.Append("X Values (" + _LineGraph._XLabel.ToString() + ")" + "\t\t");
                ydata.Append("Y Values (" + _LineGraph._YLabel.ToString() + ")" + "\n");
                string[] arrXValues = new string[XValsToCopy.Length];
                string[] arrYValues = new string[YValsToCopy.Length];
                for (int iCounter = 0; iCounter < XValsToCopy.Length; iCounter++)
                {
                    arrXValues[iCounter] = XValsToCopy[iCounter].ToString();
                    arrYValues[iCounter] = YValsToCopy[iCounter].ToString();
                    ydata.Append(arrXValues[iCounter].ToString() + "\t" + "\t" + arrYValues[iCounter].ToString() +
                                 "\n");
                }

                Clipboard.SetText(ydata.ToString());
                MessageBoxEx.Show("Copied to ClipBoard." + "\n" + "Click Paste in word/excel/notepad etc.");
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
                ErrorLogFile(ex);
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void NavigateGraphs(int selectGraphNumber)
        {
            try
            {
                int colorvalue = Convert.ToInt32(arlstSColors[selectGraphNumber]);
                if (_3DGraph != null)
                {
                    DataSelected = _3DGraph.SelectNextPlot(colorvalue);
                }
                else
                {
                    DataSelected = _LineGraph.SelectNextPlot(colorvalue);
                }

                try
                {
                    //sDatagridCaption = arlSelectedDataGridValue[selectGraphNumber].ToString();
                    string[] splitedgrid = arlSelectedDataGridValue[selectGraphNumber].ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (splitedgrid[0].ToString().Contains("1"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridView2.Rows[RowValue].Selected = true;
                        if (_3DGraph == null)
                        {
                            sDatagridCaption = dataGridView2.Rows[RowValue].Cells[0].Value.ToString();
                        }
                        else
                        {
                            _3DGraph._MainCursorColor = Color.FromArgb(-Convert.ToInt32(colorvalue));
                        }

                        //dataGridView2.Rows[RowValue].Visible = true;
                    }
                    else if (splitedgrid[0].ToString().Contains("2"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridViewX1.Rows[RowValue].Selected = true;
                        if (_3DGraph == null)
                        {
                            sDatagridCaption = dataGridViewX1.Rows[RowValue].Cells[0].Value.ToString();
                        }
                        else
                        {
                            _3DGraph._MainCursorColor = Color.FromArgb(-Convert.ToInt32(colorvalue));
                        }
                    }

                }
                catch (Exception exx)
                {
                    ErrorLog_Class.ErrorLogEntry(exx);
                    DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dvsrc = dataGridViewX1.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dataGridView2.Rows[dataGridView2.RowCount - 1].Selected = true;
                    if (_3DGraph == null)
                    {
                        //sDatagridCaption = dataGridViewX1.Rows[RowValue].Cells[0].Value.ToString();
                        sDatagridCaption = dataGridView2.Rows[dataGridView2.RowCount - 1].Cells[0].Value.ToString();
                    }
                    else
                    {
                        _3DGraph._MainCursorColor = Color.FromArgb(-Convert.ToInt32(colorvalue));
                    }
                }

                _LineGraph._FooterColor = Color.FromArgb(-Convert.ToInt32(colorvalue));
                if (_3DGraph == null)
                {
                    _LineGraph._ChartFooter = "Selected Graph Caption: " + sDatagridCaption;
                }
                else
                {
                    _3DGraph._MainCursorColor = Color.FromArgb(-Convert.ToInt32(colorvalue));
                }

                if (_LineGraph != null)
                {
                    _LineGraph.BackGroundChanges();
                }

                if (_BarGraph != null)
                {
                    _BarGraph.BackGroundChanges();
                }

                if (_OrbitGraph != null)
                {
                    _OrbitGraph.BackGroundChanges();
                }

                this.Refresh();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void NavigateGraphs(int colorvalue, string DatagridCaption)
        {
            try
            {
                DataSelected = _LineGraph.SelectNextPlot(colorvalue);
                try
                {

                    string[] splitedgrid = DatagridCaption.ToString()
                        .Split(new string[] {" "}, StringSplitOptions.RemoveEmptyEntries);
                    if (splitedgrid[0].ToString().Contains("1"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridView2.Rows[RowValue].Selected = true;
                        sDatagridCaption = dataGridView2.Rows[RowValue].Cells[0].Value.ToString();
                        //dataGridView2.Rows[RowValue].Visible = true;
                    }
                    else if (splitedgrid[0].ToString().Contains("2"))
                    {
                        int RowValue = Convert.ToInt32(splitedgrid[1].ToString());
                        DataGridViewSelectedRowCollection dvsrc = dataGridViewX1.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dvsrc = dataGridView2.SelectedRows;
                        for (int i = 0; i < dvsrc.Count; i++)
                        {
                            dvsrc[i].Selected = false;
                        }

                        dataGridViewX1.Rows[RowValue].Selected = true;
                        sDatagridCaption = dataGridViewX1.Rows[RowValue].Cells[0].Value.ToString();
                    }
                }
                catch (Exception exx)
                {
                    ErrorLog_Class.ErrorLogEntry(exx);
                    DataGridViewSelectedRowCollection dvsrc = dataGridView2.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dvsrc = dataGridViewX1.SelectedRows;
                    for (int i = 0; i < dvsrc.Count; i++)
                    {
                        dvsrc[i].Selected = false;
                    }

                    dataGridView2.Rows[dataGridView2.RowCount - 1].Selected = true;
                    sDatagridCaption = dataGridView2.Rows[dataGridView2.RowCount - 1].Cells[0].Value.ToString();
                }

                _LineGraph._FooterColor = Color.FromArgb(-Convert.ToInt32(colorvalue));
                _LineGraph._ChartFooter = "Selected Graph Caption: " + sDatagridCaption;
                BackGroundChanges();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void Top5Values()
        {
            Top5points = new double[5];
            Top5pointsX = new double[5];

            double temp = 0;
            string sTemp = null;
            try
            {
                double[] Xval = xarrayNew;
                double[] Yval = yarrayNew;

                for (int i = 0; i < Xval.Length; i++)
                {
                    if ((double) Yval[i] > (double) Top5points[0])
                    {
                        temp = (double) Top5points[0];
                        Top5points[0] = (double) Yval[i];
                        Top5points[4] = (double) Top5points[3];
                        Top5points[3] = (double) Top5points[2];
                        Top5points[2] = (double) Top5points[1];
                        Top5points[1] = temp;

                        temp = (double) Top5pointsX[0];
                        Top5pointsX[0] = (double) Xval[i];
                        Top5pointsX[4] = (double) Top5pointsX[3];
                        Top5pointsX[3] = (double) Top5pointsX[2];
                        Top5pointsX[2] = (double) Top5pointsX[1];
                        Top5pointsX[1] = temp;
                    }
                    else if ((double) Yval[i] > (double) Top5points[1])
                    {
                        temp = (double) Top5points[1];
                        Top5points[1] = (double) Yval[i];
                        Top5points[4] = (double) Top5points[3];
                        Top5points[3] = (double) Top5points[2];
                        Top5points[2] = temp;

                        temp = (double) Top5pointsX[1];
                        Top5pointsX[1] = (double) Xval[i];
                        Top5pointsX[4] = (double) Top5pointsX[3];
                        Top5pointsX[3] = (double) Top5pointsX[2];
                        Top5pointsX[2] = temp;
                    }
                    else if ((double) Yval[i] > (double) Top5points[2])
                    {
                        temp = (double) Top5points[2];
                        Top5points[2] = (double) Yval[i];
                        Top5points[4] = (double) Top5points[3];
                        Top5points[3] = temp;

                        temp = (double) Top5pointsX[2];
                        Top5pointsX[2] = (double) Xval[i];
                        Top5pointsX[4] = (double) Top5pointsX[3];
                        Top5pointsX[3] = temp;
                    }
                    else if ((double) Yval[i] > (double) Top5points[3])
                    {
                        temp = (double) Top5points[3];
                        Top5points[3] = (double) Yval[i];
                        Top5points[4] = temp;

                        temp = (double) Top5pointsX[3];
                        Top5pointsX[3] = (double) Xval[i];
                        Top5pointsX[4] = temp;
                    }
                    else if ((double) Yval[i] > (double) Top5points[4])
                    {
                        Top5points[4] = (double) Yval[i];
                        Top5pointsX[4] = (double) Xval[i];
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void BandAlarmButtons(bool ON)
        {
            try
            {
                bbConvertToFFT.Enabled = !ON;
                bbCepstrum.Enabled = !ON;
                bbFaultFreq.Enabled = !ON;
                bbRPM.Enabled = !ON;
                bbBearingFF.Enabled = !ON;
                if (IsOctave || IsWaterfall || IsTrend)
                {
                    // if (trlPlantMangerComponents.FocusedNode.Tag.ToString() == "WAVFile")
                    {
                        bbCepstrum.Enabled = false;
                        bbConvertToFFT.Enabled = false;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void GetConfCheckImages(string sPath)
        {
            double[] actualXdata = new double[0];
            double[] actualYdata = new double[0];
            double[] Orderdata = new double[0];
            double[] RPMdata = new double[0];
            double[] TSdata = new double[0];
            arrXYValues = new ArrayList();
            try
            {
                //tpGraph.PageVisible = false;
                //tpConfCheck.PageVisible = true;
                try
                {
                    this.Refresh();
                    BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                    this.Cursor = Cursors.WaitCursor;
                }
                catch (Exception ep)
                {
                    ErrorLog_Class.ErrorLogEntry(ep);
                    ErrorLogFile(ep);
                }

                ArrayList data = FunctionforConformanceCSV(sPath); //FunctionForNyquistCSV(spath);
                //DrawBarinImage(data);
                DrawBarGraphs(data);
                try
                {
                    BusyImageProcess.Kill();
                    this.Cursor = Cursors.Default;
                }
                catch
                {
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void ClearAllGraphs()
        {
            try
            {
                int iPanelControl = panel1.Controls.Count;
                for (int i = 0; i < iPanelControl; i++)
                {
                    string sPanelControlName = panel1.Controls[i].Name.ToString();
                    if (sPanelControlName.Contains("Graph"))
                    {
                        panel1.Controls.RemoveAt(i);
                        i--;
                        iPanelControl -= 1;
                    }
                }

                _3DGraph = null;
                _LineGraph = null;
                _BarGraph = null;
                _OrbitGraph = null;

            }
            catch (Exception ex)
            {
            }
        }

        private void DrawBarGraphs(ArrayList data)
        {
            Point pt1 = new Point();
            Point pt2 = new Point();
            try
            {

                string[] sdataArray = (string[]) data[2];
                double[] dxData = new double[sdataArray.Length];
                double[] dyData = new double[dxData.Length];
                int totallength = (data.Count - 1) / 2;

                for (int idata = 3, ictr = 0; ictr < totallength; ictr++, idata++)
                {
                    sdataArray = (string[]) data[idata];
                    for (int i = 1; i < sdataArray.Length; i++)
                    {
                        dyData[i] = Convert.ToDouble(sdataArray[i].ToString());
                        dxData[i] = Convert.ToDouble((i).ToString());

                    }

                    idata++;
                    DrawBarGraphs(dxData, dyData, totallength, sdataArray[0].ToString());
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void DrawBarGraphs(double[] data)
        {
            double[] dxData = new double[data.Length];
            double[] dyData = new double[data.Length];
            try
            {
                for (int i = 0; i < data.Length; i++)
                {
                    dxData[i] = i + 1;
                    dyData[i] = data[i];
                }

                _BarGraph = new BarChart();
                _BarGraph.Name = "BarGraph 1";
                _BarGraph.AllowDrop = false;
                _BarGraph._MainForm = this;
                _BarGraph._XLabel = " ";
                _BarGraph._YLabel = " ";
                _BarGraph._DataGridView = dataGridView1;
                _BarGraph._GraphBG1 = _GraphBG1;
                _BarGraph._GraphBG2 = _GraphBG2;
                _BarGraph._GraphBGDir = _GraphBGDir;
                _BarGraph._ChartBG1 = _ChartBG1;
                _BarGraph._ChartBG2 = _ChartBG2;
                _BarGraph._ChartBGDir = _ChartBGDir;
                _BarGraph._AxisColor = _AxisColor;
                _BarGraph._MainCursorColor = _MainCursorColor;
                _BarGraph.Height = panel1.Height / 2;
                _BarGraph.Dock = DockStyle.Top;
                _BarGraph._AreaFill = true;
                _BarGraph._BarWidth = .8;
                _BarGraph.DrawBarGraph(dxData, dyData);
                panel1.Controls.Add(_BarGraph);
            }
            catch (Exception ex)
            {
            }
        }

        private double[] CalculateCepstrumfromTime(double[] time, double[] XARRAY)
        {
            double[] ValueToReturn = null;
            try
            {

                Complex[] timedata = new Complex[time.Length];
                for (int i = 0; i < time.Length; i++)
                {

                    timedata[i].real = time[i];
                    timedata[i].imaginary = 0;
                }


                Complex[] data = null;

                try
                {
                    data = FFT.Calculate(timedata, false);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    data = CalculateFFTComplexed(timedata, XARRAY);
                }

                double[] magfft = new double[data.Length / 2];
                for (int i = 0; i < data.Length / 2; i++)
                {
                    magfft[i] = (2 * (Math.Sqrt(Math.Pow(data[i].real, 2) + Math.Pow(data[i].imaginary, 2)))) /
                                data.Length;
                }

                Complex[] magLog = new Complex[data.Length];
                for (int i = 0; i < magfft.Length; i++)
                {
                    if (Math.Round(data[i].imaginary, 6) != 0)
                    {
                        magLog[i].imaginary = Math.Log(Math.Abs(data[i].imaginary));
                    }
                    else
                    {
                        magLog[i].imaginary = 0;
                    }

                    if (Math.Round(data[i].real, 6) != 0)
                    {
                        magLog[i].real = Math.Log(Math.Abs(data[i].real));
                    }
                    else
                    {
                        magLog[i].real = 0;
                    }
                }



                Complex[] invdata = new Complex[magLog.Length];
                for (int i = 0; i < invdata.Length; i++)
                {
                    invdata[i].imaginary = magLog[i].real;
                    invdata[i].real = magLog[i].imaginary;
                }

                Complex[] invdataFFT = FFT.Calculate(invdata, false);

                Complex[] B = new Complex[invdataFFT.Length];
                for (int i = 0; i < invdataFFT.Length; i++)
                {
                    B[i].imaginary = invdataFFT[i].real;
                    B[i].real = invdataFFT[i].imaginary;
                }

                double[] magfftinv = new double[B.Length];
                for (int i = 0; i < B.Length; i++)
                {
                    magfftinv[i] = ((Math.Sqrt(Math.Pow(B[i].real, 2) + Math.Pow(B[i].imaginary, 2)))) / B.Length;
                }


                ValueToReturn = magfftinv;





            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return ValueToReturn;
        }

        private void DrawBarGraphs(double[] dxData, double[] dyData, int ictr, string ChartTitle)
        {
            try
            {

                _BarGraph = new BarChart();
                _BarGraph.Name = "BarGraph 1";
                _BarGraph.AllowDrop = true;
                _BarGraph._MainForm = this;
                _BarGraph._XLabel = " ";
                _BarGraph._YLabel = ChartTitle.ToString();
                _BarGraph._DataGridView = dataGridView1;
                _BarGraph._GraphBG1 = _GraphBG1;
                _BarGraph._GraphBG2 = _GraphBG2;
                _BarGraph._GraphBGDir = _GraphBGDir;
                _BarGraph._ChartBG1 = _ChartBG1;
                _BarGraph._ChartBG2 = _ChartBG2;
                _BarGraph._ChartBGDir = _ChartBGDir;
                _BarGraph._AxisColor = _AxisColor;
                _BarGraph._MainCursorColor = _MainCursorColor;
                _BarGraph.Height = panel1.Height / (ictr);
                _BarGraph.Dock = DockStyle.Top;
                _BarGraph._AreaFill = true;
                _BarGraph._BarWidth = .8;
                _BarGraph.DrawBarGraph(dxData, dyData);
                panel1.Controls.Add(_BarGraph);
            }
            catch (Exception ex)
            {
            }
        }

        private ArrayList FunctionforConformanceCSV(string sPath)
        {
            Microsoft.Office.Interop.Excel.Sheets objSheets;
            Microsoft.Office.Interop.Excel._Worksheet objSheet;
            Microsoft.Office.Interop.Excel.Range range;
            Microsoft.Office.Interop.Excel.Workbooks objBooks;


            try
            {

                // Instantiate Excel and start a new workbook.
                ExcelApp = new Microsoft.Office.Interop.Excel.Application();
                objBooks = ExcelApp.Workbooks;
                objBook = objBooks.Add(sPath);
                arlstData = new ArrayList();
                try
                {
                    //Get a reference to the first sheet of the workbook.
                    objSheets = objBook.Worksheets;
                    objSheet = (Microsoft.Office.Interop.Excel._Worksheet) objSheets.get_Item(1);
                }

                catch (Exception theException)
                {
                    ErrorLog_Class.ErrorLogEntry(theException);
                    String errorMessage;
                    errorMessage = "Can't find the Excel workbook.";

                    MessageBoxEx.Show(errorMessage, "Missing Workbook?");

                    //You can't automate Excel if you can't find the data you created, so 
                    //leave the subroutine.
                    return null;
                }


                int i = 1;
                int Row = 8;
                int Column = 1;
                string[] strtext = new string[0];
                string[] strtext1 = new string[0];
                bool done = false;
                int iDataRow = 1;
                do
                {
                    range = objSheet.get_Range(objSheet.Cells[Row, Column], objSheet.Cells[Row, Column + 1]);
                    Object[,] saRet1;
                    saRet1 = (System.Object[,]) range.get_Value(Missing.Value);

                    string val = Convert.ToString(saRet1[1, 1]);
                    string val1 = Convert.ToString(saRet1[1, 2]);
                    //if (Row == 8 && !done)
                    //{
                    //    done = true;
                    //    range = objSheet.get_Range(objSheet.Cells[Row, 4], objSheet.Cells[Row, 5]);
                    //    // Object[,] saRet1;
                    //    saRet1 = (System.Object[,])range.get_Value(Missing.Value);

                    //    val = Convert.ToString(saRet1[1, 1]);
                    //    val1 = Convert.ToString(saRet1[1, 2]);
                    //}
                    if (val == "Measurement Results")
                    {
                        done = true;
                        iDataRow = Row;
                        val = "";
                    }

                    if (Row > 20000)
                    {
                        done = true;

                    }

                    if (Column < 3)
                    {
                        if (!string.IsNullOrEmpty(val) && !string.IsNullOrEmpty(val1))
                        {
                            if (Row > 8) // 14 || Row == 8)
                            {
                                //Array.Resize(ref strtext, strtext.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref strtext, 1);
                                strtext[strtext.Length - 1] = val;
                                //Array.Resize(ref strtext1, strtext1.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref strtext1, 1);
                                strtext1[strtext1.Length - 1] = val1;

                            }
                        }
                    }
                    else
                    {
                        if (Row == iDataRow + 1)
                        {
                            if (string.IsNullOrEmpty(val))
                            {
                                val = "State";
                            }
                        }

                        if (!string.IsNullOrEmpty(val) && !string.IsNullOrEmpty(val1))
                        {

                            if (Row > iDataRow) // 14 || Row == 8)
                            {
                                //Array.Resize(ref strtext, strtext.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref strtext, 1);
                                strtext[strtext.Length - 1] = val;
                                //Array.Resize(ref strtext1, strtext1.Length + 1);
                                _ResizeArray.IncreaseArrayString(ref strtext1, 1);
                                strtext1[strtext1.Length - 1] = val1;

                            }
                        }
                    }

                    Row++;
                    if (!done)
                    {
                        iDataRow = Row;
                    }

                    if (Row > (iDataRow + 1) && string.IsNullOrEmpty(val) && string.IsNullOrEmpty(val1))
                    {
                        //done = false;


                        Column += 2;
                        Row = 1;
                        if (strtext.Length == 0 && strtext1.Length == 0)
                        {
                            break;
                        }
                        else
                        {
                            arlstData.Add(strtext);
                            arlstData.Add(strtext1);
                            strtext = new string[0];
                            strtext1 = new string[0];
                        }

                    }
                } while (true);

                ReleaseExcel(objSheets);
                ReleaseExcel(objSheet);
                ReleaseExcel(range);
                ReleaseExcel(objBooks);
            }

            catch (Exception theException)
            {
                ErrorLog_Class.ErrorLogEntry(theException);
                String errorMessage;
                errorMessage = "Error: ";
                errorMessage = String.Concat(errorMessage, theException.Message);
                errorMessage = String.Concat(errorMessage, " Line: ");
                errorMessage = String.Concat(errorMessage, theException.Source);

                MessageBoxEx.Show(errorMessage, "Error");
            }


            finally
            {
                //ExcelApp. = null;

                ReleaseExcel(objBook);

                ExcelApp.Quit();
                ReleaseExcel(ExcelApp);

            }

            return arlstData;
        }

        private void RuCdFunction()
        {
            {
                tlNode = trlPlantMangerComponents.FocusedNode;
                hshDrag = new Hashtable();
                trendValCtr = 0;
                bRucd = true;

                try
                {
                    string spath = AppDomain.CurrentDomain.BaseDirectory +
                                   "Temp.csv"; //saveFileDialog.FileName.ToString();
                    if (!string.IsNullOrEmpty(spath))
                    {
                        iclick = 1;
                        setWaveFirstData();
                        double[] actualXdata = new double[0];
                        double[] actualYdata = new double[0];
                        double[] Orderdata = new double[0];
                        double[] RPMdata = new double[0];
                        double[] TSdata = new double[0];
                        arrXYValues = new ArrayList();

                        try
                        {
                            this.Refresh();
                            BusyImageProcess = Process.Start(AppDomain.CurrentDomain.BaseDirectory + "BusyProcess.exe");
                            this.Cursor = Cursors.WaitCursor;
                        }
                        catch (Exception ep)
                        {
                            ErrorLog_Class.ErrorLogEntry(ep);
                        }

                        ArrayList data = FunctionForNyquistCSV(spath);

                        try
                        {
                            BusyImageProcess.Kill();
                            this.Cursor = Cursors.Default;
                        }
                        catch
                        {
                        }

                        bool IsOrder = false;
                        bool IsRPM = false;
                        bool IsTS = false;
                        bool IsMag = false;
                        bool IsPhase = false;
                        int orderColumn = 0;
                        int RPMColumn = 0;
                        int DisplayColumn = 0;
                        int TS = 0;
                        arlYData = new ArrayList();
                        arlYDataPhase = new ArrayList();
                        arlFRFCoherence = new ArrayList();
                        arlFRFImag = new ArrayList();
                        arlFRFReal = new ArrayList();
                        for (int i = 0; i < data.Count; i++)
                        {
                            actualYdata = new double[0];
                            string[] sdata = (string[]) data[i];
                            double dValue = 0;
                            string sValue = null;

                            for (int j = 0; j < sdata.Length; j++)
                            {
                                try
                                {
                                    dValue = Convert.ToDouble(sdata[j]); //.ToString();
                                    if (i == 0)
                                    {
                                        //Array.Resize(ref actualXdata, actualXdata.Length + 1);
                                        _ResizeArray.IncreaseArrayDouble(ref actualXdata, 1);
                                        actualXdata[actualXdata.Length - 1] = dValue;
                                    }
                                    else
                                    {
                                        if (j != orderColumn && j != RPMColumn && j != TS && j != DisplayColumn)
                                        {
                                            //Array.Resize(ref actualYdata, actualYdata.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref actualYdata, 1);
                                            if (DisplayType == "Bode" && sValue.Contains("Phase"))
                                            {
                                                if (dValue < 100 && dValue > 0)
                                                {
                                                    dValue += 360;
                                                }
                                            }

                                            actualYdata[actualYdata.Length - 1] = dValue;
                                        }
                                        else if (j == orderColumn)
                                        {
                                            //Array.Resize(ref Orderdata, Orderdata.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref Orderdata, 1);
                                            Orderdata[Orderdata.Length - 1] = dValue;
                                        }
                                        else if (j == RPMColumn)
                                        {
                                            //Array.Resize(ref RPMdata, RPMdata.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref RPMdata, 1);
                                            RPMdata[RPMdata.Length - 1] = dValue;
                                        }
                                        else if (j == TS)
                                        {
                                            //Array.Resize(ref TSdata, TSdata.Length + 1);
                                            _ResizeArray.IncreaseArrayDouble(ref TSdata, 1);
                                            TSdata[TSdata.Length - 1] = dValue;
                                        }
                                    }
                                }
                                catch (Exception es)
                                {
                                    //ErrorLog_Class.ErrorLogEntry(es);
                                    sValue = sdata[j].ToString();
                                    if (j == DisplayColumn)
                                    {
                                        DisplayType = sValue;
                                    }
                                }

                                if (sValue != null)
                                {
                                    if (sValue.Contains("FRF"))
                                    {
                                        IsOrder = true;
                                        if (sValue.Contains("Mag"))
                                        {
                                            sValue = "Y-Axis Mag";
                                        }

                                        if (sValue.Contains("Phase"))
                                        {
                                            sValue = "Y-Axis Phase";
                                        }
                                    }
                                    else
                                    {
                                        if (sValue == "Disp Type")
                                        {
                                            DisplayColumn = j;
                                            //DisplayType=
                                        }
                                        else if (sValue == "Order" || sValue == "Overall")
                                        {
                                            if (sValue == "Order")
                                            {
                                                IsOrder = true;
                                            }
                                            else if (sValue == "Overall")
                                            {
                                                IsOrder = false;
                                            }

                                            orderColumn = j;
                                        }
                                        else if (sValue == "RPM Stamp")
                                        {
                                            IsRPM = true;
                                            RPMColumn = j;
                                        }
                                        else if (sValue == "Time Stamp")
                                        {
                                            IsTS = true;
                                            TS = j;
                                        }
                                    }
                                }
                            }

                            if (sValue != null)
                                if (sValue.Contains("Y-Axis"))
                                {
                                    if (actualYdata.Length > 1)
                                    {
                                        if (IsOrder && sValue.Contains("Mag"))
                                        {
                                            xarray = actualXdata;
                                            arlYData.Add(actualYdata);
                                        }
                                        else if (IsOrder && sValue.Contains("Phase"))
                                        {
                                            xarray = actualXdata;
                                            arlYDataPhase.Add(actualYdata);
                                        }
                                        else if (!IsOrder)
                                        {
                                            xarray = actualXdata;
                                            arlYData.Add(actualYdata);
                                        }

                                        //arrXYValues.Add(actualXdata);
                                        //arrXYValues.Add(actualYdata);
                                        if (i == 1)
                                        {
                                            RPMColumn -= 1;
                                            TS -= 1;
                                        }
                                    }
                                }
                                else if (sValue == "FRF Coherence")
                                {
                                    xarray = actualXdata;
                                    arlFRFCoherence.Add(actualYdata);
                                }
                                else if (sValue == "FRF Real")
                                {
                                    xarray = actualXdata;
                                    arlFRFReal.Add(actualYdata);
                                }
                                else if (sValue == "FRF Imag")
                                {
                                    xarray = actualXdata;
                                    arlFRFImag.Add(actualYdata);
                                }
                        }

                        int ctr = 0;
                        //soundBytes = new double[xData.Length];


                        {
                            string source = null;
                            string Dest = null;
                            TreeListNode selectedNode = trlPlantMangerComponents.FocusedNode;
                            string sTag = trlPlantMangerComponents.FocusedNode.Tag.ToString();
                            string[] ColorCode =
                            {
                                "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746",
                                "4343957", "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014",
                                "32944", "7667573", "7357301", "12042869", "60269", "14774017", "5103070", "14513374",
                                "5374161", "38476", "3318692", "29696", "6737204", "16728065", "744352"
                            };

                            try
                            {
                                lblXAxis.Text = "";
                                lblYAxis.Text = "";
                                CallClearDataGridMain();
                                FillLastCellWhite(); //ShowCurrentDate();
                                dataGridViewImageColumn1.ValuesAreIcons = false;
                                if (sTag == "CSVFile")
                                {
                                    //source = GetPath(selectedNode).TrimEnd(new char[] { '\\' });
                                    //Dest = AppDomain.CurrentDomain.BaseDirectory + trendValCtr.ToString() + ".csv";

                                    //File.Copy(source, Dest, true);
                                    if (DisplayType != "Overall")
                                    {
                                        if (DisplayType != "Nyquist")
                                        {
                                            rpgCursors.Visible = true;

                                            tpGraph.Text = "Graph (Mag)";
                                            bbPhase.Caption = "View Phase";
                                            bbPhase.Visibility = BarItemVisibility.Always;

                                            for (int i = 0; i < arlYData.Count; i++)
                                            {
                                                hshDrag.Add(trendValCtr, trendValCtr);
                                                string s = null;

                                                s = trendValCtr.ToString();

                                                int iCCtr = trendValCtr % 30;
                                                dataGridView2.Rows.Add(1);
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value =
                                                    "Mag " + s;
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value =
                                                    "Mag " + s;
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                                    objlistimg.Images[iCCtr];
                                                dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                                    ColorCode[iCCtr].ToString();

                                                trendValCtr++;
                                            }

                                            dataGridView2_CellContentClick(null, farziE);
                                            if (DisplayType == "Table")
                                            {
                                                frmTable _TableFrom = new frmTable();
                                                _TableFrom._RPMCtr = arlYData.Count;
                                                _TableFrom._RPM = actualXdata;
                                                _TableFrom._YMag = arlYData;
                                                _TableFrom._YPhase = arlYDataPhase;

                                                _TableFrom.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            rpgCursors.Visible = false;

                                            double[] arrXYValsNYQ = (double[]) arlYData[arlYData.Count - 1];
                                            double[] arrXYValsNYQ1 = (double[]) arlYDataPhase[arlYDataPhase.Count - 1];

                                            _OrbitGraph = new PolarPlot();
                                            _OrbitGraph.Name = "OrbitGraph";
                                            _OrbitGraph.Dock = DockStyle.Fill;
                                            panel1.Controls.Add(_OrbitGraph);
                                            _OrbitGraph.DrawPolarPlot(arrXYValsNYQ, arrXYValsNYQ1);
                                        }
                                    }
                                    else
                                    {
                                        MessageBoxEx.Show("Not an RuCd Data");
                                        tsbtnRuCD_Click(null, null);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorLog_Class.ErrorLogEntry(ex);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                }
            }
        }

        private ArrayList FunctionForNyquistCSV(string sPath)
        {
            Microsoft.Office.Interop.Excel.Sheets objSheets;
            Microsoft.Office.Interop.Excel._Worksheet objSheet;
            Microsoft.Office.Interop.Excel.Range range;
            Microsoft.Office.Interop.Excel.Workbooks objBooks;
            {

                try
                {

                    // Instantiate Excel and start a new workbook.
                    ExcelApp = new Microsoft.Office.Interop.Excel.Application();
                    objBooks = ExcelApp.Workbooks;
                    objBook = objBooks.Add(sPath);
                    arlstData = new ArrayList();
                    try
                    {
                        //Get a reference to the first sheet of the workbook.
                        objSheets = objBook.Worksheets;
                        objSheet = (Microsoft.Office.Interop.Excel._Worksheet) objSheets.get_Item(1);
                    }

                    catch (Exception theException)
                    {
                        ErrorLog_Class.ErrorLogEntry(theException);
                        String errorMessage;
                        errorMessage = "Can't find the Excel workbook.";

                        MessageBoxEx.Show(errorMessage, "Missing Workbook?");

                        //You can't automate Excel if you can't find the data you created, so 
                        //leave the subroutine.
                        return null;
                    }


                    int i = 1;
                    int Row = 1;
                    int Column = 1;
                    string[] strtext = new string[0];
                    string[] strtext1 = new string[0];
                    bool done = false;
                    bool doneFull = false;
                    bool doneagain = false;
                    bool donefullagain = false;
                    do
                    {
                        range = objSheet.get_Range(objSheet.Cells[Row, Column], objSheet.Cells[Row, Column + 1]);
                        Object[,] saRet1;
                        saRet1 = (System.Object[,]) range.get_Value(Missing.Value);

                        string val = Convert.ToString(saRet1[1, 1]);
                        string val1 = Convert.ToString(saRet1[1, 2]);

                        if (Row == 8 && !doneFull)
                        {
                            if (done)
                            {
                                doneFull = true;
                                range = objSheet.get_Range(objSheet.Cells[Row, 5], objSheet.Cells[Row, 6]);
                                // Object[,] saRet1;
                                saRet1 = (System.Object[,]) range.get_Value(Missing.Value);
                            }
                            else
                            {
                                done = true;

                                range = objSheet.get_Range(objSheet.Cells[Row, 4], objSheet.Cells[Row, 5]);
                                // Object[,] saRet1;
                                saRet1 = (System.Object[,]) range.get_Value(Missing.Value);
                            }

                            val = Convert.ToString(saRet1[1, 1]);

                        }

                        if (!string.IsNullOrEmpty(val))
                        {
                            if (Row > 58 || (Row == 8 && !donefullagain))
                            {
                                if (Row == 8)
                                {
                                    if (doneagain)
                                    {
                                        donefullagain = true;
                                    }

                                    doneagain = true;
                                }

                                _ResizeArray.IncreaseArrayString(ref strtext, 1);
                                //Array.Resize(ref strtext, strtext.Length + 1);
                                strtext[strtext.Length - 1] = val;
                                //Array.Resize(ref strtext1, strtext1.Length + 1);
                                //strtext1[strtext1.Length - 1] = val1;
                            }
                        }

                        Row++;
                        if (Row > 60 && string.IsNullOrEmpty(val))
                        {
                            Column += 1;
                            Row = 1;
                            if (strtext.Length == 0)
                            {
                                break;
                            }
                            else
                            {
                                arlstData.Add(strtext);
                                //arlstData.Add(strtext1);
                                strtext = new string[0];
                                strtext1 = new string[0];
                            }

                        }
                    } while (true);

                    ReleaseExcel(objSheets);
                    ReleaseExcel(objSheet);
                    ReleaseExcel(range);
                    ReleaseExcel(objBooks);
                }

                catch (Exception theException)
                {
                    ErrorLog_Class.ErrorLogEntry(theException);
                    String errorMessage;
                    errorMessage = "Error: ";
                    errorMessage = String.Concat(errorMessage, theException.Message);
                    errorMessage = String.Concat(errorMessage, " Line: ");
                    errorMessage = String.Concat(errorMessage, theException.Source);

                    MessageBoxEx.Show(errorMessage, "Error");
                }
                finally
                {
                    //ExcelApp. = null;

                    ReleaseExcel(objBook);

                    ExcelApp.Quit();
                    ReleaseExcel(ExcelApp);

                }

                return arlstData;
            }
        }

        private void ReleaseExcel(object _o)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(_o);
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
            finally
            {
                _o = null;
            }

        }

        private double[] CalculateCepstrumfromFFT(double[] fft, double[] XARRAY)
        {
            double[] ValueToReturn = null;
            try
            {

                Complex[] fftdata = new Complex[fft.Length * 2];
                for (int i = 0; i < fft.Length; i++)
                {
                    fftdata[i].real = fft[i];
                    fftdata[i].imaginary = 0;
                }

                int tempi = fft.Length - 1;
                for (int i = fft.Length; i < fftdata.Length; i++)
                {
                    fftdata[i].real = fft[tempi];
                    fftdata[i].imaginary = 0;
                    tempi--;
                }

                Complex[] magLog = new Complex[fftdata.Length];
                for (int i = 0; i < fft.Length; i++)
                {
                    if (Math.Round(fftdata[i].imaginary, 6) != 0)
                    {
                        magLog[i].imaginary = Math.Log(Math.Abs(fftdata[i].imaginary));
                    }
                    else
                    {
                        magLog[i].imaginary = 0;
                    }

                    if (Math.Round(fftdata[i].real, 6) != 0)
                    {
                        magLog[i].real = Math.Log(Math.Abs(fftdata[i].real));
                    }
                    else
                    {
                        magLog[i].real = 0;
                    }
                }

                Complex[] invdata = new Complex[magLog.Length];
                for (int i = 0; i < invdata.Length; i++)
                {
                    invdata[i].imaginary = magLog[i].real;
                    invdata[i].real = magLog[i].imaginary;
                }

                Complex[] invdataFFT = null;

                try
                {
                    invdataFFT = FFT.Calculate(invdata, false);
                }
                catch (Exception ex)
                {
                    ErrorLog_Class.ErrorLogEntry(ex);
                    invdataFFT = CalculateFFTComplexed(invdata, XARRAY);
                }

                Complex[] B = new Complex[invdataFFT.Length];
                for (int i = 0; i < invdataFFT.Length; i++)
                {
                    B[i].imaginary = invdataFFT[i].real;
                    B[i].real = invdataFFT[i].imaginary;
                }

                double[] magfftinv = new double[B.Length];
                for (int i = 0; i < B.Length; i++)
                {
                    magfftinv[i] = ((Math.Sqrt(Math.Pow(B[i].real, 2) + Math.Pow(B[i].imaginary, 2)))) / B.Length;
                }

                ValueToReturn = new double[magfftinv.Length * 2];
                for (int i = 0; i < magfftinv.Length; i++)
                {
                    ValueToReturn[i] = magfftinv[i];
                }

                tempi = magfftinv.Length - 1;


                for (int i = magfftinv.Length; i < magfftinv.Length * 2; i++)
                {
                    ValueToReturn[i] = magfftinv[tempi];
                    tempi--;
                }

            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return ValueToReturn;
        }

        private Complex[] CalculateFFTComplexed(Complex[] invdata, double[] XARRAY)
        {
            Complex[] ValuetoReturn = null;
            // assume n is a power of 2
            if (XARRAY.Length % 2 == 0)
            {
                n = XARRAY.Length;
            }
            else
            {
                n = XARRAY.Length - 1;
            }

            nu = (int) (Math.Log(n) / Math.Log(2));
            int n2 = n / 2;
            int nu1 = nu - 1;
            double[] xre = new double[n];
            double[] xim = new double[n];
            double[] mag = new double[n2];
            double tr, ti, p, arg, c, s;
            try
            {
                for (int i = 0; i < n; i++)
                {
                    xre[i] = XARRAY[i];
                    xim[i] = 0.0f;
                }

                int k = 0;

                for (int l = 1; l <= nu; l++)
                {
                    while (k < n)
                    {
                        for (int i = 1; i <= n2; i++)
                        {
                            try
                            {
                                p = bitrev(k >> nu1);
                                arg = 2 * (double) Math.PI * p / n;
                                c = (double) Math.Cos(arg);
                                s = (double) Math.Sin(arg);
                                tr = xre[k + n2] * c + xim[k + n2] * s;
                                ti = xim[k + n2] * c - xre[k + n2] * s;
                                xre[k + n2] = xre[k] - tr;
                                xim[k + n2] = xim[k] - ti;
                                xre[k] += tr;
                                xim[k] += ti;
                                k++;
                            }
                            catch
                            {
                            }
                        }

                        k += n2;
                    }

                    k = 0;
                    nu1--;
                    n2 = n2 / 2;
                }

                k = 0;
                int r;
                while (k < n)
                {
                    r = bitrev(k);
                    if (r > k)
                    {
                        tr = xre[k];
                        ti = xim[k];
                        xre[k] = xre[r];
                        xim[k] = xim[r];
                        xre[r] = tr;
                        xim[r] = ti;
                    }

                    k++;
                }


                ValuetoReturn = new Complex[xre.Length];
                for (int i = 0; i < xre.Length; i++)
                {
                    ValuetoReturn[i].real = xre[i];
                    ValuetoReturn[i].imaginary = xim[i];
                }
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }

            return ValuetoReturn;
        }

        private void PhaseClicked()
        {
            try
            {
                string[] ColorCode =
                {
                    "7667712", "16751616", "4684277", "7077677", "16777077", "9868951", "2987746", "4343957",
                    "16777216", "23296", "16711681", "8388652", "6972", "16776961", "7722014", "32944", "7667573",
                    "7357301", "12042869", "60269", "14774017", "5103070", "14513374", "5374161", "38476", "3318692",
                    "29696", "6737204", "16728065", "744352"
                };
                iclick = 0;
                trendValCtr = 0;
                hshDrag = new Hashtable();
                CallClearDataGridMain();
                FillLastCellWhite(); //ShowCurrentDate();
                NullAllGphElements();
                if (lblApplication.Text.ToString() == "FRF")
                {
                    bbphaseCtr++;
                    if (bbphaseCtr > 5)
                    {
                        bbphaseCtr = 1;
                    }

                    try
                    {
                        switch (bbphaseCtr)
                        {
                            case 1:
                            {
                                //Phase
                                DisplayType = "FRF Phase";
                                bbPhase.Caption = "View Coherence";

                                for (int i = 0; i < arlYDataPhase.Count; i++)
                                {
                                    tpGraph.Text = "Graph (Phase)";
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlYDataPhase[arlYDataPhase.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 2:
                            {
                                //Coherence

                                bbPhase.Caption = "View Real";
                                DisplayType = "FRF Coherence";
                                for (int i = 0; i < arlFRFCoherence.Count; i++)
                                {
                                    tpGraph.Text = "Graph (Coherence)";
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlFRFCoherence[arlFRFCoherence.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 3:
                            {
                                //Real

                                DisplayType = "FRF Real";
                                bbPhase.Caption = "View image";
                                for (int i = 0; i < arlFRFReal.Count; i++)
                                {
                                    tpGraph.Text = "Graph (Real)";
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlFRFReal[arlFRFReal.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 4:
                            {
                                //image

                                DisplayType = "FRF image";
                                bbPhase.Caption = "View Phase";
                                for (int i = 0; i < arlFRFImag.Count; i++)
                                {
                                    tpGraph.Text = "Graph (Imaginary)";
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                if (CheckForTimeData((double[]) arlFRFImag[arlFRFImag.Count - 1]))
                                {
                                    CurrentGraph = "Time";
                                    setCursorCombo("Time");
                                }
                                else
                                {
                                    CurrentGraph = "FFT";
                                    setCursorCombo("FFT");
                                }

                                break;
                            }
                            case 5:
                            {

                                bbPhase.Caption = "View Phase";
                                for (int i = 0; i < arlYData.Count; i++)
                                {
                                    tpGraph.Text = "Graph (Mag)";
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = "Mag " + s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = "Mag " + s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                break;
                            }
                        }

                        dataGridView2_CellContentClick(null, farziE);
                    }
                    catch
                    {
                    }
                }
                else
                {
                    bbphaseCtr++;
                    if (bbphaseCtr > 2)
                    {
                        bbphaseCtr = 1;
                    }

                    try
                    {
                        switch (bbphaseCtr)
                        {
                            case 1:
                            {
                                //Phase
                                tpGraph.Text = "Graph (Phase)";
                                bbPhase.Caption = "View Mag";
                                for (int i = 0; i < arlYDataPhase.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                _LineGraph._YLabel = "deg";
                                dataGridView2_CellContentClick(null, farziE);
                                break;
                            }
                            case 2:
                            {
                                tpGraph.Text = "Graph (Mag)";
                                bbPhase.Caption = "View Phase";
                                for (int i = 0; i < arlYData.Count; i++)
                                {
                                    hshDrag.Add(trendValCtr, trendValCtr);
                                    string s = null;

                                    s = trendValCtr.ToString();



                                    int iCCtr = trendValCtr % 30;
                                    dataGridView2.Rows.Add(1);
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[0].Value = "Mag " + s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[1].Value = "X";
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[2].Value = "Mag " + s;
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Value =
                                        objlistimg.Images[iCCtr];
                                    dataGridView2.Rows[dataGridView2.Rows.Count - 2].Cells[3].Tag =
                                        ColorCode[iCCtr].ToString();

                                    trendValCtr++;
                                }

                                _LineGraph._YLabel = lblDisplayunit.Text.ToString();
                                dataGridView2_CellContentClick(null, farziE);
                                break;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            catch
            {
            }
        }

        private void SetLabelDefault()
        {
            try
            {
                lblDate.Text = "";
                lblTriggerType.Text = "";
                lblTriggerlevel.Text = "";
                lblSlope.Text = "";
                lblTransducerUnit.Text = "";
                lblSensitivity.Text = "";
                lblTransduceroffset.Text = "";
                lblDisplayunit.Text = "";
                lblhpf.Text = "";
                lblCouplingtype.Text = "";
                lblChannelInput.Text = "";
                lblFreqType.Text = "";
                lblOrder.Text = "";
                lblAvg.Text = "";
                lblAveragetype.Text = "";
                lbloverlap.Text = "";
                lblDetection.Text = "";
                lbllines.Text = "";
                lblWindowtype.Text = "";
                lblUnitstring.Text = "";
                lblYunit.Text = "";
                lblXunit.Text = "";
                lblViewSignal.Text = "";
                lblYaxisDisplay.Text = "";
                lblSensorType.Text = "";
                lblOverall.Text = "";
                lblAutoMode.Text = "";
                lblMeastype.Text = "";
                lblMeasDomain.Text = "";
                lblTriggerH.Text = "";
                lblTriggerPullup.Text = "";
                lblBinZero.Text = "";
                lblInputRange.Text = "";
                lblFixedRangeValue.Text = "";
                lblApplication.Text = "";
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void FolderSelection()
        {
            try
            {

                tcMain.SelectedTabPage = tpData;
                tcMain.Enabled = false;
                //WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
                //AreaGraphButtonEnabled = false;// btnAreaGraph.Enabled = false;
                //btnBkwd.Enabled = false;
                //btnColors.Enabled = false;
                //btnCopyGraphToClipBord.Enabled = false;
                //btnFwd.Enabled = false; tlNode = null;
                //TrendButtonEnabled = false;// btnTrend.Enabled = false;
                //ZommingButton = true;
                //tsbtnComparePoints.Enabled = false;
                //tsbtnCopyValues.Enabled = false;
                //tsBtnHighestFive.Enabled = false;

                //sidebandbuttonEnabled = false;
                //tsbtnRuCD.Enabled = false;
                //WaterfallbuttonEnabled = false;// btnWaterFall.Enabled = false;
                //tsbtnWav.Enabled = false;
                //cmbCurSors.Enabled = false;
                //ExtraZoomButtonEnabled = false;// tsBtnExtraZoom.Enabled = false;
                //btnXUnitConverter.Enabled = false;
                //SetLabelDefault();

                //GetBandData();
                //GetFaultFreq();
                //GetRPMData();
                //GetBFFData();
            }
            catch (Exception ex)
            {
                ErrorLog_Class.ErrorLogEntry(ex);
            }
        }

        private void RuCdWaterFall(ArrayList arrXYVals, string[] colortag)
        {
            try
            {
                if (_3DGraph == null)
                {
                    _3DGraph = new _3DGraphControl();
                    _3DGraph._MainForm = this;
                    _3DGraph._XLabel = lblXunit.Text.ToString();
                    _3DGraph._YLabel = lblDisplayunit.Text.ToString();
                    _3DGraph.Dock = DockStyle.Fill;
                    panel1.Controls.Add(_3DGraph);
                }

                ArrayList xvals = new ArrayList();
                ArrayList yvals = new ArrayList();
                for (int i = 0; i < arrXYVals.Count; i++)
                {
                    xvals.Add((double[]) arrXYVals[i]);
                    i += 1;
                    yvals.Add((double[]) arrXYVals[i]);
                }

                _3DGraph.DrawWaterfallGraph(xvals, yvals, colortag);
                panel1.Refresh();
            }
            catch (Exception ex)
            {
            }
        }

        private void DrawMultipleCursors(int Cursorcount)
        {
            try
            {
                dataGridView1.Rows.Clear();
                for (int i = 0; i < dataGridView1.Rows.Count; i++)
                {
                    dataGridView1.Rows.RemoveAt(0);
                }

                dataGridView1.Rows.Add(Cursorcount);
                for (int i = 0; i < Cursorcount; i++)
                {
                    dataGridView1[0, i].Value = "Cursor " + (i + 1).ToString();
                    int colorIndex = i % 10;
                    switch (colorIndex)
                    {
                        case 0:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.Black;

                            break;
                        }
                        case 1:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.Blue;
                            break;
                        }
                        case 2:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.Red;
                            break;
                        }
                        case 3:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.Green;
                            break;
                        }
                        case 4:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.Brown;
                            break;
                        }
                        case 5:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.DarkCyan;
                            break;
                        }
                        case 6:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.DarkOrange;
                            break;
                        }
                        case 7:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.DeepPink;
                            break;
                        }
                        case 8:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.DarkViolet;
                            break;
                        }
                        case 9:
                        {
                            dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.DarkGray;
                            break;
                        }
                    }
                }

                //fixedX = new PointF[dataGridView1.Rows.Count];
                //fixedY = new PointF[dataGridView1.Rows.Count];
            }
            catch (Exception ex)
            {
            }
        }

        private void DataGridSettingForDifferenceCursor(bool MultipleCrsr)
        {
            try
            {
                if (MultipleCrsr)
                {
                    //ClearCmbCursor();
                    //ArrayList CursorItems = new ArrayList();
                    //CursorItems.Add("Select Cursor");
                    //AddToCmbCursor(CursorItems);
                    //string SelectedCursorItem = cmbCurSors.Items[0].ToString();
                    //CmbCursorSelectedItem(SelectedCursorItem);

                    dataGridView1.Rows.Clear();

                    for (int i = 0; i < dataGridView1.Columns.Count;)
                    {
                        dataGridView1.Columns.RemoveAt(0);
                    }

                    if (checkBA == true)
                    {
                        for (int i = 0; i < 3; i++)
                        {
                            switch (i)
                            {
                                case 0:
                                {
                                    dataGridView1.Columns.Add("ColColor", "Sr.No");
                                    break;
                                }
                                case 1:
                                {
                                    dataGridView1.Columns.Add("ColXValue", "Mag.");
                                    break;
                                }
                                case 2:
                                {
                                    dataGridView1.Columns.Add("ColYValue", "Angle");
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < 5; i++)
                        {
                            switch (i)
                            {
                                case 1:
                                {
                                    dataGridView1.Columns.Add("ColXValue", "X Value");
                                    break;
                                }
                                case 2:
                                {
                                    dataGridView1.Columns.Add("ColYValue", "Y Value");
                                    break;
                                }
                                case 0:
                                {
                                    dataGridView1.Columns.Add("ColColor", "Cursor&Color");

                                    break;
                                }
                                case 3:
                                {
                                    dataGridView1.Columns.Add("ColXDiff", "X Diff");
                                    break;
                                }
                                case 4:
                                {
                                    dataGridView1.Columns.Add("ColYDiff", "Y Diff");
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    dataGridView1.Rows.Clear();
                    SetDatagridtoOriginal();
                }
            }
            catch (Exception ex)
            {
            }
        }


        private void SetDatagridtoOriginal()
        {
            try
            {
                for (int i = 0; i < dataGridView1.Columns.Count;)
                {
                    dataGridView1.Columns.RemoveAt(0);
                }

                for (int i = 0; i < 2; i++)
                {
                    switch (i)
                    {
                        case 0:
                        {
                            dataGridView1.Columns.Add("ColXValue", "X Value");
                            break;
                        }
                        case 1:
                        {
                            dataGridView1.Columns.Add("ColYValue", "Y Value");
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private double CalculateCrestFactor(double[] _Ydata)
        {
            double CrestFactor = 0;
            try
            {
                double RMS = CalculateRMS(_Ydata);
                double MaxPeak = (double) findHighestValue(_Ydata);
                CrestFactor = Math.Round((MaxPeak / RMS), 2);
            }
            catch (Exception ex)
            {
            }

            return CrestFactor;
        }

        private double CalculateRMS(double[] _Ydata)
        {
            double SquaredSum = 0;
            double RMS = 0;
            try
            {
                for (int i = 0; i < _Ydata.Length; i++)
                {
                    SquaredSum += (double) _Ydata[i] * (double) _Ydata[i];
                }

                double Mean = SquaredSum / _Ydata.Length;
                RMS = Math.Sqrt(Mean);
            }
            catch (Exception ex)
            {
            }

            return RMS;
        }

        private void ClickDRDFile(string SelectedNodePath)
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = true;


            DataSelected = new ArrayList();
            tcMain.Enabled = true;
            previousnode = "DRDFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.drd";

            while (File.Exists(Dest))
            {
                File.SetAttributes(Dest, FileAttributes.Normal);
                File.Delete(Dest);
                DeleteCtr++;
                if (DeleteCtr > 10)
                {
                    MessageBoxEx.Show("Error. Restart the System");
                    DeleteError = true;
                    break;
                }
            }

            if (DeleteError)
            {
                this.Close();
            }

            File.Copy(SelectedNodePath, Dest, true);
            dataGridView2.Rows.Clear();
            FillLastCellWhite();
            _FD2_Interface._Form1 = this;
            _FD2_Interface._dataGridView2 = dataGridView2;

            //_FD2_Interface.ReadFD2File(Dest);//"temp.fd2"
            _FD2_Interface.ReadDRDfile(Dest);
            dataGridView2_CellContentClick(null, farziE);
        }

        private void ClickODTFile(string SelectedNodePath)
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = true;


            DataSelected = new ArrayList();
            tcMain.Enabled = true;
            previousnode = "OTDFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.otd";

            while (File.Exists(Dest))
            {
                File.SetAttributes(Dest, FileAttributes.Normal);
                File.Delete(Dest);
                DeleteCtr++;
                if (DeleteCtr > 10)
                {
                    MessageBoxEx.Show("Error. Restart the System");
                    DeleteError = true;
                    break;
                }
            }

            if (DeleteError)
            {
                this.Close();
            }

            File.Copy(SelectedNodePath, Dest, true);
            dataGridView2.Rows.Clear();
            FillLastCellWhite();
            _FD2_Interface._Form1 = this;
            _FD2_Interface._dataGridView2 = dataGridView2;

            //_FD2_Interface.ReadFD2File(Dest);//"temp.fd2"
            _FD2_Interface.ReadOTDfile(SelectedNodePath);
            dataGridView2_CellContentClick(null, farziE);
        }

        private void ClickODTFile()
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = true;


            DataSelected = new ArrayList();
            tcMain.Enabled = true;
            previousnode = "OTDFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.otd";


            dataGridView2.Rows.Clear();
            FillLastCellWhite();
            _FD2_Interface._Form1 = this;
            _FD2_Interface._dataGridView2 = dataGridView2;

            //_FD2_Interface.ReadFD2File(Dest);//"temp.fd2"
            _FD2_Interface.ReadOTDfile(Dest);
            dataGridView2_CellContentClick(null, farziE);
        }

        private void ClickFDTFile()
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = true;



            tcMain.Enabled = true;
            previousnode = "FDTFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.fd2";


            dataGridView2.Rows.Clear();
            FillLastCellWhite();
            _FD2_Interface._Form1 = this;
            _FD2_Interface._dataGridView2 = dataGridView2;

            _FD2_Interface.ReadFD2File(Dest); //"temp.fd2"
            dataGridView2_CellContentClick(null, farziE);
        }

        private void ClickFDTFile(string SelectedNodePath)
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = true;


            DataSelected = new ArrayList();
            tcMain.Enabled = true;
            previousnode = "FDTFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.fd2";

            while (File.Exists(Dest))
            {
                File.SetAttributes(Dest, FileAttributes.Normal);
                File.Delete(Dest);
                DeleteCtr++;
                if (DeleteCtr > 10)
                {
                    MessageBoxEx.Show("Error. Restart the System");
                    DeleteError = true;
                    break;
                }
            }

            if (DeleteError)
            {
                this.Close();
            }

            File.Copy(SelectedNodePath, Dest, true);
            dataGridView2.Rows.Clear();
            FillLastCellWhite();
            _FD2_Interface._Form1 = this;
            _FD2_Interface._dataGridView2 = dataGridView2;

            _FD2_Interface.ReadFD2File(Dest); //"temp.fd2"

            DateTime d1 = File.GetLastWriteTime(Dest);


            lblDate.Text = d1.ToString();

            dataGridView2_CellContentClick(null, farziE);
        }

        private void ClickFFTFile(string SelectedNodePath)
        {
            ClearAllGraphs();
            NullMarkerBools();
            GetBandData();
            GetFaultFreq();
            GetRPMData();
            GetBFFData();
            Set_iClick(Function.Clear);
            Set_jClick(Function.Clear);
            ribbonControl1Enabled = true;


            DataSelected = new ArrayList();
            tcMain.Enabled = true;
            previousnode = "FFTFile";
            NewItemClickSettings();
            RemovePreviousGraphControl();
            int DeleteCtr = 0;
            bool DeleteError = false;
            string Dest = AppDomain.CurrentDomain.BaseDirectory + "temp.fft";
            while (File.Exists(Dest))
            {

                File.SetAttributes(Dest, FileAttributes.Normal);
                File.Delete(Dest);
                DeleteCtr++;
                if (DeleteCtr > 10)
                {
                    MessageBoxEx.Show("Error. Restart the System");
                    DeleteError = true;
                    break;
                }
            }

            if (DeleteError)
            {
                this.Close();
            }

            File.Copy(SelectedNodePath, Dest, true);
            FFTFileDatetime = GetSeletedFileDatetime(SelectedNodePath);
            dataGridView2.Rows.Clear();
            FillLastCellWhite();

            C911_Interface _C911 = new C911_class();
            _C911._dataGridView2 = this._Datagridview2;
            _C911.ReadFFTFile(Dest);
            SetFFTGeneralPage(_C911);
            dataGridView2_CellContentClick(null, farziE);

        }

        private string GetSeletedFileDatetime(string Dest)
        {
            string returnstring = null;
            try
            {
                returnstring = File.GetCreationTime(Dest).ToString();
            }
            catch
            {
            }

            return returnstring;
        }

        string FFTFileDatetime = null;

        enum trig
        {
            FreeRun,
            Internal,
            External
        };

        enum avgm
        {
            Off,
            TimeLinear,
            TimeExponential,
            FrequencyLinear,
            FrequencyExponential
        };

        enum window
        {
            Rectangular,
            Hanning
        };

        enum measurement
        {
            TimeFunction,
            FFT
        };

        enum ampmode
        {
            Mode_A,
            Mode_V,
            Mode_S,
            Mode_E
        };

        private void SetFFTGeneralPage(C911_Interface _C911)
        {
            try
            {
                lblDate.Text = FFTFileDatetime.ToString();
                lblTriggerType.Text = (string) Enum.GetName(typeof(trig), _C911._Trig);
                lblSensitivity.Text = _C911._Sens.ToString();
                lblOrder.Text = _C911._highestFreq.ToString();
                lblAveragetype.Text = (string) Enum.GetName(typeof(avgm), _C911._Avgm);
                lbllines.Text = _C911._Number_Of_Spectrum.ToString();
                lblWindowtype.Text = (string) Enum.GetName(typeof(window), _C911._Window);
                lblViewSignal.Text = (string) Enum.GetName(typeof(measurement), _C911._Measurement);
                lblOverall.Text = (string) Enum.GetName(typeof(ampmode), _C911._Ampmode) + " : " +
                                  _C911._RMS.ToString() + " RMS / " + _C911._P_P.ToString() + " P-P";
                lblApplication.Text = "FFT File";
                if (_C911._Is2Channel)
                {
                    // code to be written if there is 2 channel data
                }
            }
            catch
            {
            }
        }

        private void bbComparision_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (bbComparision.Caption.ToString() == "Uncompare")
            {
                bbComparision.Caption = "Compare Graphs";
            }
            else
            {
                bbComparision.Caption = "Uncompare";

            }
        }



        #endregion

        private void bbSCL_ItemClick(object sender, ItemClickEventArgs e)
        {

        }


        private bool ReadTimeBasedLicense()
        {
            try
            {
                String licenseFilePath = Environment.SystemDirectory + Path.DirectorySeparatorChar + "ALicense.dll";
                string encryptionKey = "iAdept@123";
                if (File.Exists(licenseFilePath))
                {
                    string lData = File.ReadAllText(licenseFilePath);
                    DateTime myDate;
                    if (!DateTime.TryParse(StringCipher.Decrypt(lData, encryptionKey), out myDate))
                    {
                        return false;
                    }
                    if (DateTime.Compare(myDate, DateTime.Now) < 0)
                    {
                        using (FileStream fs = File.OpenWrite(licenseFilePath))
                        {
                            byte[] sdata = new UTF8Encoding(true).GetBytes(StringCipher.Encrypt("License Expired", encryptionKey));
                            fs.Write(sdata, 0, sdata.Length);
                        }
                        return false;
                    }
                    //File.Delete(licenseFilePath);
                }
                else
                {
                    using (FileStream fs = File.Create(licenseFilePath))
                    {
                        byte[] sdata = new UTF8Encoding(true).GetBytes(StringCipher.Encrypt(DateTime.Now.AddDays(3000).ToString(), encryptionKey));
                        fs.Write(sdata, 0, sdata.Length);

                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return true;
        }



        private void mainlog()
        {
            if(!ReadTimeBasedLicense())
            {
                MessageBox.Show("Time Based License Expired. Kindly contact admin","License Expired", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
            }
        }






    }
}